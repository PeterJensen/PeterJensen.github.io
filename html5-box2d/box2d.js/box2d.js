/*
  Copyright (C) 2013

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.

  https://github.com/johnmccutchan/ecmascript_simd/blob/master/src/ecmascript_simd.js
*/



// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    window['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      // Module is the only 'upvar', which we provide directly. We also provide FS for legacy support.
      var evalled = eval('(function(Module, FS) { return function(' + args.join(',') + '){ ' + source + ' } })')(Module, typeof FS !== 'undefined' ? FS : null);
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          (((codePoint - 0x10000) / 0x400)|0) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      /* TODO: use TextEncoder when present,
        var encoder = new TextEncoder();
        encoder['encoding'] = "utf-8";
        var utf8Array = encoder['encode'](aMsg.data);
      */
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*(+4294967296))) : ((+((low>>>0)))+((+((high|0)))*(+4294967296)))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;

function jsCall() {
  var args = Array.prototype.slice.call(arguments);
  return Runtime.functionPointers[args[0]].apply(null, args.slice(1));
}








//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var stack = 0;
  var JSfuncs = {
    'stackSave' : function() {
      stack = Runtime.stackSave();
    },
    'stackRestore' : function() {
      Runtime.stackRestore(stack);
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args) {
    var func = getCFunc(ident);
    var cArgs = [];
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) JSfuncs['stackRestore']();
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;


function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;


function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;


function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var final = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    final = parse();
  } catch(e) {
    final += '?';
  }
  if (final.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return final;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be more reasonable');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    HEAP8[(((buffer)+(i))>>0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===





STATIC_BASE = 8;

STATICTOP = STATIC_BASE + Runtime.alignMemory(22515);
  /* global initializers */ __ATINIT__.push();
  

/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([37,115,58,32,37,54,46,50,102,77,10,0,0,0,0,0,67,121,99,108,101,115,58,0,109,95,105,110,100,101,120,32,61,61,32,48,0,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,67,111,109,109,111,110,47,98,50,83,116,97,99,107,65,108,108,111,99,97,116,111,114,46,99,112,112,0,0,126,98,50,83,116,97,99,107,65,108,108,111,99,97,116,111,114,0,0,0,0,0,0,0,109,95,101,110,116,114,121,67,111,117,110,116,32,61,61,32,48,0,0,0,0,0,0,0,109,95,101,110,116,114,121,67,111,117,110,116,32,60,32,98,50,95,109,97,120,83,116,97,99,107,69,110,116,114,105,101,115,0,0,0,0,0,0,0,65,108,108,111,99,97,116,101,0,0,0,0,0,0,0,0,109,95,101,110,116,114,121,67,111,117,110,116,32,62,32,48,0,0,0,0,0,0,0,0,70,114,101,101,0,0,0,0,112,32,61,61,32,101,110,116,114,121,45,62,100,97,116,97,0,0,0,0,0,0,0,0,98,100,45,62,112,111,115,105,116,105,111,110,46,73,115,86,97,108,105,100,40,41,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,98,50,66,111,100,121,46,99,112,112,0,0,98,50,66,111,100,121,0,0,98,100,45,62,108,105,110,101,97,114,86,101,108,111,99,105,116,121,46,73,115,86,97,108,105,100,40,41,0,0,0,0,98,50,73,115,86,97,108,105,100,40,98,100,45,62,97,110,103,108,101,41,0,0,0,0,98,50,73,115,86,97,108,105,100,40,98,100,45,62,97,110,103,117,108,97,114,86,101,108,111,99,105,116,121,41,0,0,98,50,73,115,86,97,108,105,100,40,98,100,45,62,97,110,103,117,108,97,114,68,97,109,112,105,110,103,41,32,38,38,32,98,100,45,62,97,110,103,117,108,97,114,68,97,109,112,105,110,103,32,62,61,32,48,46,48,102,0,0,0,0,0,98,50,73,115,86,97,108,105,100,40,98,100,45,62,108,105,110,101,97,114,68,97,109,112,105,110,103,41,32,38,38,32,98,100,45,62,108,105,110,101,97,114,68,97,109,112,105,110,103,32,62,61,32,48,46,48,102,0,0,0,0,0,0,0,109,95,119,111,114,108,100,45,62,73,115,76,111,99,107,101,100,40,41,32,61,61,32,102,97,108,115,101,0,0,0,0,83,101,116,84,121,112,101,0,67,114,101,97,116,101,70,105,120,116,117,114,101,0,0,0,68,101,115,116,114,111,121,70,105,120,116,117,114,101,0,0,102,105,120,116,117,114,101,45,62,109,95,98,111,100,121,32,61,61,32,116,104,105,115,0,109,95,102,105,120,116,117,114,101,67,111,117,110,116,32,62,32,48,0,0,0,0,0,0,102,111,117,110,100,0,0,0,109,95,116,121,112,101,32,61,61,32,98,50,95,100,121,110,97,109,105,99,66,111,100,121,0,0,0,0,0,0,0,0,82,101,115,101,116,77,97,115,115,68,97,116,97,0,0,0,109,95,73,32,62,32,48,46,48,102,0,0,0,0,0,0,83,101,116,77,97,115,115,68,97,116,97,0,0,0,0,0,83,101,116,84,114,97,110,115,102,111,114,109,0,0,0,0,83,101,116,65,99,116,105,118,101,0,0,0,0,0,0,0,32,32,98,50,66,111,100,121,68,101,102,32,98,100,59,10,0,0,0,0,0,0,0,0,32,32,98,100,46,116,121,112,101,32,61,32,98,50,66,111,100,121,84,121,112,101,40,37,100,41,59,10,0,0,0,0,32,32,98,100,46,112,111,115,105,116,105,111,110,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,32,32,98,100,46,97,110,103,108,101,32,61,32,37,46,49,53,108,101,102,59,10,0,0,32,32,98,100,46,108,105,110,101,97,114,86,101,108,111,99,105,116,121,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,0,0,32,32,98,100,46,97,110,103,117,108,97,114,86,101,108,111,99,105,116,121,32,61,32,37,46,49,53,108,101,102,59,10,0,0,0,0,0,0,0,0,32,32,98,100,46,108,105,110,101,97,114,68,97,109,112,105,110,103,32,61,32,37,46,49,53,108,101,102,59,10,0,0,32,32,98,100,46,97,110,103,117,108,97,114,68,97,109,112,105,110,103,32,61,32,37,46,49,53,108,101,102,59,10,0,32,32,98,100,46,97,108,108,111,119,83,108,101,101,112,32,61,32,98,111,111,108,40,37,100,41,59,10,0,0,0,0,32,32,98,100,46,97,119,97,107,101,32,61,32,98,111,111,108,40,37,100,41,59,10,0,32,32,98,100,46,102,105,120,101,100,82,111,116,97,116,105,111,110,32,61,32,98,111,111,108,40,37,100,41,59,10,0,32,32,98,100,46,98,117,108,108,101,116,32,61,32,98,111,111,108,40,37,100,41,59,10,0,0,0,0,0,0,0,0,32,32,98,100,46,97,99,116,105,118,101,32,61,32,98,111,111,108,40,37,100,41,59,10,0,0,0,0,0,0,0,0,32,32,98,100,46,103,114,97,118,105,116,121,83,99,97,108,101,32,61,32,37,46,49,53,108,101,102,59,10,0,0,0,32,32,98,111,100,105,101,115,91,37,100,93,32,61,32,109,95,119,111,114,108,100,45,62,67,114,101,97,116,101,66,111,100,121,40,38,98,100,41,59,10,0,0,0,0,0,0,0,32,32,123,10,0,0,0,0,32,32,125,10,0,0,0,0,8,58,0,0,0,0,0,0,240,48,0,0,0,0,0,0,109,95,99,111,117,110,116,32,62,32,48,0,0,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,92,66,111,120,50,68,47,67,111,109,109,111,110,47,98,50,71,114,111,119,97,98,108,101,83,116,97,99,107,46,104,0,0,0,0,0,80,111,112,0,0,0,0,0,0,0,0,0,128,10,0,0,60,0,0,0,61,0,0,0,49,0,0,0,50,0,0,0,44,0,0,0,45,0,0,0,109,95,112,114,111,120,121,67,111,117,110,116,32,61,61,32,48,0,0,0,0,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,98,50,70,105,120,116,117,114,101,46,99,112,112,0,0,0,0,0,0,0,67,114,101,97,116,101,80,114,111,120,105,101,115,0,0,0,32,32,32,32,98,50,70,105,120,116,117,114,101,68,101,102,32,102,100,59,10,0,0,0,32,32,32,32,102,100,46,102,114,105,99,116,105,111,110,32,61,32,37,46,49,53,108,101,102,59,10,0,0,0,0,0,32,32,32,32,102,100,46,114,101,115,116,105,116,117,116,105,111,110,32,61,32,37,46,49,53,108,101,102,59,10,0,0,32,32,32,32,102,100,46,100,101,110,115,105,116,121,32,61,32,37,46,49,53,108,101,102,59,10,0,0,0,0,0,0,32,32,32,32,102,100,46,105,115,83,101,110,115,111,114,32,61,32,98,111,111,108,40,37,100,41,59,10,0,0,0,0,32,32,32,32,102,100,46,102,105,108,116,101,114,46,99,97,116,101,103,111,114,121,66,105,116,115,32,61,32,117,105,110,116,49,54,40,37,100,41,59,10,0,0,0,0,0,0,0,32,32,32,32,102,100,46,102,105,108,116,101,114,46,109,97,115,107,66,105,116,115,32,61,32,117,105,110,116,49,54,40,37,100,41,59,10,0,0,0,32,32,32,32,102,100,46,102,105,108,116,101,114,46,103,114,111,117,112,73,110,100,101,120,32,61,32,105,110,116,49,54,40,37,100,41,59,10,0,0,32,32,32,32,98,50,67,105,114,99,108,101,83,104,97,112,101,32,115,104,97,112,101,59,10,0,0,0,0,0,0,0,32,32,32,32,115,104,97,112,101,46,109,95,114,97,100,105,117,115,32,61,32,37,46,49,53,108,101,102,59,10,0,0,32,32,32,32,115,104,97,112,101,46,109,95,112,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,32,32,32,32,98,50,69,100,103,101,83,104,97,112,101,32,115,104,97,112,101,59,10,0,32,32,32,32,115,104,97,112,101,46,109,95,118,101,114,116,101,120,48,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,0,0,32,32,32,32,115,104,97,112,101,46,109,95,118,101,114,116,101,120,49,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,0,0,32,32,32,32,115,104,97,112,101,46,109,95,118,101,114,116,101,120,50,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,0,0,32,32,32,32,115,104,97,112,101,46,109,95,118,101,114,116,101,120,51,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,0,0,32,32,32,32,115,104,97,112,101,46,109,95,104,97,115,86,101,114,116,101,120,48,32,61,32,98,111,111,108,40,37,100,41,59,10,0,0,0,0,0,32,32,32,32,115,104,97,112,101,46,109,95,104,97,115,86,101,114,116,101,120,51,32,61,32,98,111,111,108,40,37,100,41,59,10,0,0,0,0,0,32,32,32,32,98,50,80,111,108,121,103,111,110,83,104,97,112,101,32,115,104,97,112,101,59,10,0,0,0,0,0,0,32,32,32,32,98,50,86,101,99,50,32,118,115,91,37,100,93,59,10,0,0,0,0,0,32,32,32,32,118,115,91,37,100,93,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,0,0,0,32,32,32,32,115,104,97,112,101,46,83,101,116,40,118,115,44,32,37,100,41,59,10,0,32,32,32,32,98,50,67,104,97,105,110,83,104,97,112,101,32,115,104,97,112,101,59,10,0,0,0,0,0,0,0,0,32,32,32,32,115,104,97,112,101,46,67,114,101,97,116,101,67,104,97,105,110,40,118,115,44,32,37,100,41,59,10,0,32,32,32,32,115,104,97,112,101,46,109,95,112,114,101,118,86,101,114,116,101,120,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,32,32,32,32,115,104,97,112,101,46,109,95,110,101,120,116,86,101,114,116,101,120,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,32,32,32,32,115,104,97,112,101,46,109,95,104,97,115,80,114,101,118,86,101,114,116,101,120,32,61,32,98,111,111,108,40,37,100,41,59,10,0,0,32,32,32,32,115,104,97,112,101,46,109,95,104,97,115,78,101,120,116,86,101,114,116,101,120,32,61,32,98,111,111,108,40,37,100,41,59,10,0,0,32,32,32,32,102,100,46,115,104,97,112,101,32,61,32,38,115,104,97,112,101,59,10,0,32,32,32,32,98,111,100,105,101,115,91,37,100,93,45,62,67,114,101,97,116,101,70,105,120,116,117,114,101,40,38,102,100,41,59,10,0,0,0,0,116,111,105,73,110,100,101,120,65,32,60,32,109,95,98,111,100,121,67,111,117,110,116,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,98,50,73,115,108,97,110,100,46,99,112,112,0,0,0,0,0,0,0,0,116,111,105,73,110,100,101,120,66,32,60,32,109,95,98,111,100,121,67,111,117,110,116,0,73,115,76,111,99,107,101,100,40,41,32,61,61,32,102,97,108,115,101,0,0,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,98,50,87,111,114,108,100,46,99,112,112,0,67,114,101,97,116,101,66,111,100,121,0,0,0,0,0,0,109,95,98,111,100,121,67,111,117,110,116,32,62,32,48,0,68,101,115,116,114,111,121,66,111,100,121,0,0,0,0,0,67,114,101,97,116,101,74,111,105,110,116,0,0,0,0,0,68,101,115,116,114,111,121,74,111,105,110,116,0,0,0,0,109,95,106,111,105,110,116,67,111,117,110,116,32,62,32,48,0,0,0,0,0,0,0,0,98,45,62,73,115,65,99,116,105,118,101,40,41,32,61,61,32,116,114,117,101,0,0,0,83,111,108,118,101,0,0,0,115,116,97,99,107,67,111,117,110,116,32,60,32,115,116,97,99,107,83,105,122,101,0,0,116,121,112,101,65,32,61,61,32,98,50,95,100,121,110,97,109,105,99,66,111,100,121,32,124,124,32,116,121,112,101,66,32,61,61,32,98,50,95,100,121,110,97,109,105,99,66,111,100,121,0,0,0,0,0,0,83,111,108,118,101,84,79,73,0,0,0,0,0,0,0,0,97,108,112,104,97,48,32,60,32,49,46,48,102,0,0,0,118,101,114,116,101,120,67,111,117,110,116,32,60,61,32,56,0,0,0,0,0,0,0,0,68,114,97,119,83,104,97,112,101,0,0,0,0,0,0,0,98,50,86,101,99,50,32,103,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,0,109,95,119,111,114,108,100,45,62,83,101,116,71,114,97,118,105,116,121,40,103,41,59,10,0,0,0,0,0,0,0,0,98,50,66,111,100,121,42,42,32,98,111,100,105,101,115,32,61,32,40,98,50,66,111,100,121,42,42,41,98,50,65,108,108,111,99,40,37,100,32,42,32,115,105,122,101,111,102,40,98,50,66,111,100,121,42,41,41,59,10,0,0,0,0,0,98,50,74,111,105,110,116,42,42,32,106,111,105,110,116,115,32,61,32,40,98,50,74,111,105,110,116,42,42,41,98,50,65,108,108,111,99,40,37,100,32,42,32,115,105,122,101,111,102,40,98,50,74,111,105,110,116,42,41,41,59,10,0,0,123,10,0,0,0,0,0,0,125,10,0,0,0,0,0,0,98,50,70,114,101,101,40,106,111,105,110,116,115,41,59,10,0,0,0,0,0,0,0,0,98,50,70,114,101,101,40,98,111,100,105,101,115,41,59,10,0,0,0,0,0,0,0,0,106,111,105,110,116,115,32,61,32,78,85,76,76,59,10,0,98,111,100,105,101,115,32,61,32,78,85,76,76,59,10,0,114,46,76,101,110,103,116,104,83,113,117,97,114,101,100,40,41,32,62,32,48,46,48,102,0,0,0,0,0,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,92,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,98,50,68,121,110,97,109,105,99,84,114,101,101,46,104,0,0,0,0,82,97,121,67,97,115,116,0,48,32,60,61,32,112,114,111,120,121,73,100,32,38,38,32,112,114,111,120,121,73,100,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,0,0,0,0,0,0,0,71,101,116,85,115,101,114,68,97,116,97,0,0,0,0,0,71,101,116,70,97,116,65,65,66,66,0,0,0,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,92,66,111,120,50,68,47,67,111,109,109,111,110,47,98,50,77,97,116,104,46,104,0,0,0,0,0,0,65,100,118,97,110,99,101,0,109,95,106,111,105,110,116,67,111,117,110,116,32,60,32,109,95,106,111,105,110,116,67,97,112,97,99,105,116,121,0,0,66,111,120,50,68,95,118,50,46,50,46,49,92,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,98,50,73,115,108,97,110,100,46,104,0,0,65,100,100,0,0,0,0,0,109,95,99,111,110,116,97,99,116,67,111,117,110,116,32,60,32,109,95,99,111,110,116,97,99,116,67,97,112,97,99,105,116,121,0,0,0,0,0,0,109,95,98,111,100,121,67,111,117,110,116,32,60,32,109,95,98,111,100,121,67,97,112,97,99,105,116,121,0,0,0,0,0,0,0,0,48,58,0,0,62,0,0,0,63,0,0,0,46,0,0,0,0,0,0,0,49,53,98,50,67,111,110,116,97,99,116,70,105,108,116,101,114,0,0,0,0,0,0,0,40,85,0,0,24,58,0,0,0,0,0,0,232,58,0,0,49,0,0,0,64,0,0,0,65,0,0,0,0,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,67,104,97,105,110,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,46,99,112,112,0,0,0,0,0,0,0,0,98,50,67,104,97,105,110,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,0,50,51,98,50,67,104,97,105,110,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,0,0,0,0,0,0,0,57,98,50,67,111,110,116,97,99,116,0,0,0,0,0,0,40,85,0,0,208,58,0,0,80,85,0,0,176,58,0,0,224,58,0,0,0,0,0,0,0,0,0,0,200,59,0,0,50,0,0,0,66,0,0,0,67,0,0,0,0,0,0,0,109,95,102,105,120,116,117,114,101,65,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,99,104,97,105,110,0,0,0,0,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,67,104,97,105,110,65,110,100,80,111,108,121,103,111,110,67,111,110,116,97,99,116,46,99,112,112,0,0,0,0,0,0,0,98,50,67,104,97,105,110,65,110,100,80,111,108,121,103,111,110,67,111,110,116,97,99,116,0,0,0,0,0,0,0,0,50,52,98,50,67,104,97,105,110,65,110,100,80,111,108,121,103,111,110,67,111,110,116,97,99,116,0,0,0,0,0,0,80,85,0,0,168,59,0,0,224,58,0,0,0,0,0,0,0,0,0,0,136,60,0,0,51,0,0,0,68,0,0,0,69,0,0,0,0,0,0,0,109,95,102,105,120,116,117,114,101,65,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,99,105,114,99,108,101,0,0,0,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,67,105,114,99,108,101,67,111,110,116,97,99,116,46,99,112,112,0,0,0,0,0,0,0,0,98,50,67,105,114,99,108,101,67,111,110,116,97,99,116,0,49,53,98,50,67,105,114,99,108,101,67,111,110,116,97,99,116,0,0,0,0,0,0,0,80,85,0,0,112,60,0,0,224,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,32,60,61,32,116,121,112,101,49,32,38,38,32,116,121,112,101,49,32,60,32,98,50,83,104,97,112,101,58,58,101,95,116,121,112,101,67,111,117,110,116,0,0,0,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,67,111,110,116,97,99,116,46,99,112,112,0,0,0,0,0,0,48,32,60,61,32,116,121,112,101,50,32,38,38,32,116,121,112,101,50,32,60,32,98,50,83,104,97,112,101,58,58,101,95,116,121,112,101,67,111,117,110,116,0,0,0,0,0,0,115,95,105,110,105,116,105,97,108,105,122,101,100,32,61,61,32,116,114,117,101,0,0,0,48,32,60,61,32,116,121,112,101,65,32,38,38,32,116,121,112,101,66,32,60,32,98,50,83,104,97,112,101,58,58,101,95,116,121,112,101,67,111,117,110,116,0,0,0,0,0,0,112,111,105,110,116,67,111,117,110,116,32,62,32,48,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,67,111,110,116,97,99,116,83,111,108,118,101,114,46,99,112,112,0,0,0,0,0,0,0,0,98,50,67,111,110,116,97,99,116,83,111,108,118,101,114,0,80,111,115,105,116,105,111,110,67,111,110,115,116,114,97,105,110,116,115,58,10,0,0,0,109,97,110,105,102,111,108,100,45,62,112,111,105,110,116,67,111,117,110,116,32,62,32,48,0,0,0,0,0,0,0,0,73,110,105,116,105,97,108,105,122,101,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,115,0,0,0,112,111,105,110,116,67,111,117,110,116,32,61,61,32,49,32,124,124,32,112,111,105,110,116,67,111,117,110,116,32,61,61,32,50,0,0,0,0,0,0,83,111,108,118,101,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,115,0,0,0,0,0,0,0,0,97,46,120,32,62,61,32,48,46,48,102,32,38,38,32,97,46,121,32,62,61,32,48,46,48,102,0,0,0,0,0,0,83,111,108,118,101,80,111,115,105,116,105,111,110,67,111,110,115,116,114,97,105,110,115,0,83,105,109,100,83,111,108,118,101,80,111,115,105,116,105,111,110,67,111,110,115,116,114,97,105,110,116,115,0,0,0,0,110,111,110,83,105,109,100,83,111,108,118,101,80,111,115,105,116,105,111,110,67,111,110,115,116,114,97,105,110,116,115,0,109,105,110,83,101,112,97,114,97,116,105,111,110,58,32,37,49,48,46,52,102,10,0,0,80,111,115,105,116,105,111,110,115,58,10,0,0,0,0,0,37,52,100,46,32,99,58,32,40,37,56,46,50,102,44,32,37,56,46,50,102,41,32,97,58,32,37,56,46,50,102,10,0,0,0,0,0,0,0,0,37,52,100,46,32,40,105,110,100,101,120,65,58,32,37,52,100,44,32,105,110,100,101,120,66,58,32,37,52,100,44,32,112,111,105,110,116,67,111,117,110,116,58,32,37,52,100,44,32,116,121,112,101,58,32,37,52,100,41,0,0,0,0,0,32,79,86,69,82,76,65,80,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,37,52,100,46,32,40,105,110,100,101,120,65,58,32,37,52,100,44,32,105,110,100,101,120,66,58,32,37,52,100,44,32,112,111,105,110,116,67,111,117,110,116,58,32,37,52,100,44,32,116,121,112,101,58,32,37,52,100,41,10,0,0,0,0,105,110,100,101,120,79,118,101,114,108,97,112,67,111,117,110,116,58,32,32,32,32,37,54,100,10,0,0,0,0,0,0,105,110,100,101,120,78,111,79,118,101,114,108,97,112,67,111,117,110,116,58,32,32,37,54,100,10,0,0,0,0,0,0,112,99,45,62,112,111,105,110,116,67,111,117,110,116,32,62,32,48,0,0,0,0,0,0,112,115,109,46,115,101,112,97,114,97,116,105,111,110,58,32,37,49,48,46,52,102,10,0,70,105,120,105,110,103,32,117,112,32,112,111,115,105,116,105,111,110,32,115,111,108,118,101,114,32,109,97,110,105,102,111,108,100,115,0,0,0,0,0,0,0,0,0,200,65,0,0,52,0,0,0,70,0,0,0,71,0,0,0,0,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,69,100,103,101,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,46,99,112,112,0,98,50,69,100,103,101,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,0,0,50,50,98,50,69,100,103,101,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,0,0,0,0,0,0,0,0,80,85,0,0,168,65,0,0,224,58,0,0,0,0,0,0,0,0,0,0,160,66,0,0,53,0,0,0,72,0,0,0,73,0,0,0,0,0,0,0,109,95,102,105,120,116,117,114,101,65,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,101,100,103,101,0,0,0,0,0,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,69,100,103,101,65,110,100,80,111,108,121,103,111,110,67,111,110,116,97,99,116,46,99,112,112,0,0,0,0,0,0,0,0,98,50,69,100,103,101,65,110,100,80,111,108,121,103,111,110,67,111,110,116,97,99,116,0,50,51,98,50,69,100,103,101,65,110,100,80,111,108,121,103,111,110,67,111,110,116,97,99,116,0,0,0,0,0,0,0,80,85,0,0,128,66,0,0,224,58,0,0,0,0,0,0,0,0,0,0,128,67,0,0,54,0,0,0,74,0,0,0,75,0,0,0,0,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,80,111,108,121,103,111,110,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,46,99,112,112,0,0,0,0,0,0,98,50,80,111,108,121,103,111,110,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,0,0,0,0,0,0,0,109,95,102,105,120,116,117,114,101,66,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,99,105,114,99,108,101,0,0,0,0,0,0,50,53,98,50,80,111,108,121,103,111,110,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,0,0,0,0,0,80,85,0,0,96,67,0,0,224,58,0,0,0,0,0,0,0,0,0,0,120,68,0,0,55,0,0,0,76,0,0,0,77,0,0,0,0,0,0,0,109,95,102,105,120,116,117,114,101,65,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,112,111,108,121,103,111,110,0,0,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,80,111,108,121,103,111,110,67,111,110,116,97,99,116,46,99,112,112,0,0,0,0,0,0,0,98,50,80,111,108,121,103,111,110,67,111,110,116,97,99,116,0,0,0,0,0,0,0,0,109,95,102,105,120,116,117,114,101,66,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,112,111,108,121,103,111,110,0,0,0,0,0,49,54,98,50,80,111,108,121,103,111,110,67,111,110,116,97,99,116,0,0,0,0,0,0,80,85,0,0,96,68,0,0,224,58,0,0,0,0,0,0,0,0,0,0,32,69,0,0,51,0,0,0,52,0,0,0,46,0,0,0,42,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,53,0,0,0,54,0,0,0,47,0,0,0,32,32,98,50,68,105,115,116,97,110,99,101,74,111,105,110,116,68,101,102,32,106,100,59,10,0,0,0,0,0,0,0,32,32,106,100,46,108,101,110,103,116,104,32,61,32,37,46,49,53,108,101,102,59,10,0,49,53,98,50,68,105,115,116,97,110,99,101,74,111,105,110,116,0,0,0,0,0,0,0,55,98,50,74,111,105,110,116,0,0,0,0,0,0,0,0,40,85,0,0,8,69,0,0,80,85,0,0,240,68,0,0,24,69,0,0,0,0,0,0,0,0,0,0,128,70,0,0,55,0,0,0,56,0,0,0,47,0,0,0,43,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,57,0,0,0,58,0,0,0,48,0,0,0,98,50,73,115,86,97,108,105,100,40,102,111,114,99,101,41,32,38,38,32,102,111,114,99,101,32,62,61,32,48,46,48,102,0,0,0,0,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,74,111,105,110,116,115,47,98,50,70,114,105,99,116,105,111,110,74,111,105,110,116,46,99,112,112,0,0,83,101,116,77,97,120,70,111,114,99,101,0,0,0,0,0,98,50,73,115,86,97,108,105,100,40,116,111,114,113,117,101,41,32,38,38,32,116,111,114,113,117,101,32,62,61,32,48,46,48,102,0,0,0,0,0,83,101,116,77,97,120,84,111,114,113,117,101,0,0,0,0,32,32,98,50,70,114,105,99,116,105,111,110,74,111,105,110,116,68,101,102,32,106,100,59,10,0,0,0,0,0,0,0,32,32,106,100,46,109,97,120,70,111,114,99,101,32,61,32,37,46,49,53,108,101,102,59,10,0,0,0,0,0,0,0,32,32,106,100,46,109,97,120,84,111,114,113,117,101,32,61,32,37,46,49,53,108,101,102,59,10,0,0,0,0,0,0,49,53,98,50,70,114,105,99,116,105,111,110,74,111,105,110,116,0,0,0,0,0,0,0,80,85,0,0,104,70,0,0,24,69,0,0,0,0,0,0,0,0,0,0,24,72,0,0,59,0,0,0,60,0,0,0,48,0,0,0,44,0,0,0,84,0,0,0,85,0,0,0,86,0,0,0,61,0,0,0,62,0,0,0,49,0,0,0,109,95,116,121,112,101,65,32,61,61,32,101,95,114,101,118,111,108,117,116,101,74,111,105,110,116,32,124,124,32,109,95,116,121,112,101,65,32,61,61,32,101,95,112,114,105,115,109,97,116,105,99,74,111,105,110,116,0,0,0,0,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,74,111,105,110,116,115,47,98,50,71,101,97,114,74,111,105,110,116,46,99,112,112,0,0,0,0,0,0,98,50,71,101,97,114,74,111,105,110,116,0,0,0,0,0,109,95,116,121,112,101,66,32,61,61,32,101,95,114,101,118,111,108,117,116,101,74,111,105,110,116,32,124,124,32,109,95,116,121,112,101,66,32,61,61,32,101,95,112,114,105,115,109,97,116,105,99,74,111,105,110,116,0,0,0,0,0,0,0,98,50,73,115,86,97,108,105,100,40,114,97,116,105,111,41,0,0,0,0,0,0,0,0,83,101,116,82,97,116,105,111,0,0,0,0,0,0,0,0,32,32,98,50,71,101,97,114,74,111,105,110,116,68,101,102,32,106,100,59,10,0,0,0,32,32,106,100,46,106,111,105,110,116,49,32,61,32,106,111,105,110,116,115,91,37,100,93,59,10,0,0,0,0,0,0,32,32,106,100,46,106,111,105,110,116,50,32,61,32,106,111,105,110,116,115,91,37,100,93,59,10,0,0,0,0,0,0,49,49,98,50,71,101,97,114,74,111,105,110,116,0,0,0,80,85,0,0,8,72,0,0,24,69,0,0,0,0,0,0,102,97,108,115,101,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,74,111,105,110,116,115,47,98,50,74,111,105,110,116,46,99,112,112,0,0,67,114,101,97,116,101,0,0,68,101,115,116,114,111,121,0,0,0,0,0,24,69,0,0,42,0,0,0,42,0,0,0,42,0,0,0,42,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,42,0,0,0,42,0,0,0,42,0,0,0,100,101,102,45,62,98,111,100,121,65,32,33,61,32,100,101,102,45,62,98,111,100,121,66,0,0,0,0,0,0,0,0,98,50,74,111,105,110,116,0,47,47,32,68,117,109,112,32,105,115,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,102,111,114,32,116,104,105,115,32,106,111,105,110,116,32,116,121,112,101,46,10,0,0,0,0,0,0,136,74,0,0,63,0,0,0,64,0,0,0,49,0,0,0,45,0,0,0,90,0,0,0,91,0,0,0,92,0,0,0,65,0,0,0,66,0,0,0,50,0,0,0,100,101,102,45,62,116,97,114,103,101,116,46,73,115,86,97,108,105,100,40,41,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,74,111,105,110,116,115,47,98,50,77,111,117,115,101,74,111,105,110,116,46,99,112,112,0,0,0,0,0,98,50,77,111,117,115,101,74,111,105,110,116,0,0,0,0,98,50,73,115,86,97,108,105,100,40,100,101,102,45,62,109,97,120,70,111,114,99,101,41,32,38,38,32,100,101,102,45,62,109,97,120,70,111,114,99,101,32,62,61,32,48,46,48,102,0,0,0,0,0,0,0,98,50,73,115,86,97,108,105,100,40,100,101,102,45,62,102,114,101,113,117,101,110,99,121,72,122,41,32,38,38,32,100,101,102,45,62,102,114,101,113,117,101,110,99,121,72,122,32,62,61,32,48,46,48,102,0,98,50,73,115,86,97,108,105,100,40,100,101,102,45,62,100,97,109,112,105,110,103,82,97,116,105,111,41,32,38,38,32,100,101,102,45,62,100,97,109,112,105,110,103,82,97,116,105,111,32,62,61,32,48,46,48,102,0,0,0,0,0,0,0,100,32,43,32,104,32,42,32,107,32,62,32,49,46,49,57,50,48,57,50,56,57,53,53,48,55,56,49,50,53,101,45,48,55,70,0,0,0,0,0,73,110,105,116,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,115,0,49,50,98,50,77,111,117,115,101,74,111,105,110,116,0,0,80,85,0,0,120,74,0,0,24,69,0,0,0,0,0,0,77,111,117,115,101,32,106,111,105,110,116,32,100,117,109,112,105,110,103,32,105,115,32,110,111,116,32,115,117,112,112,111,114,116,101,100,46,10,0,0,0,0,0,0,208,75,0,0,67,0,0,0,68,0,0,0,50,0,0,0,46,0,0,0,93,0,0,0,94,0,0,0,95,0,0,0,69,0,0,0,70,0,0,0,51,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,74,111,105,110,116,115,47,98,50,80,114,105,115,109,97,116,105,99,74,111,105,110,116,46,99,112,112,0,32,32,98,50,80,114,105,115,109,97,116,105,99,74,111,105,110,116,68,101,102,32,106,100,59,10,0,0,0,0,0,0,32,32,106,100,46,108,111,119,101,114,84,114,97,110,115,108,97,116,105,111,110,32,61,32,37,46,49,53,108,101,102,59,10,0,0,0,0,0,0,0,32,32,106,100,46,117,112,112,101,114,84,114,97,110,115,108,97,116,105,111,110,32,61,32,37,46,49,53,108,101,102,59,10,0,0,0,0,0,0,0,32,32,106,100,46,109,97,120,77,111,116,111,114,70,111,114,99,101,32,61,32,37,46,49,53,108,101,102,59,10,0,0,49,54,98,50,80,114,105,115,109,97,116,105,99,74,111,105,110,116,0,0,0,0,0,0,80,85,0,0,184,75,0,0,24,69,0,0,0,0,0,0,114,97,116,105,111,32,62,32,49,46,49,57,50,48,57,50,56,57,53,53,48,55,56,49,50,53,101,45,48,55,70,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,74,111,105,110,116,115,47,98,50,80,117,108,108,101,121,74,111,105,110,116,46,99,112,112,0,0,0,0,73,110,105,116,105,97,108,105,122,101,0,0,0,0,0,0,0,0,0,0,128,77,0,0,71,0,0,0,72,0,0,0,51,0,0,0,47,0,0,0,96,0,0,0,97,0,0,0,98,0,0,0,73,0,0,0,74,0,0,0,52,0,0,0,100,101,102,45,62,114,97,116,105,111,32,33,61,32,48,46,48,102,0,0,0,0,0,0,98,50,80,117,108,108,101,121,74,111,105,110,116,0,0,0,32,32,98,50,80,117,108,108,101,121,74,111,105,110,116,68,101,102,32,106,100,59,10,0,32,32,106,100,46,103,114,111,117,110,100,65,110,99,104,111,114,65,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,0,0,0,32,32,106,100,46,103,114,111,117,110,100,65,110,99,104,111,114,66,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,0,0,0,32,32,106,100,46,108,101,110,103,116,104,65,32,61,32,37,46,49,53,108,101,102,59,10,0,0,0,0,0,0,0,0,32,32,106,100,46,108,101,110,103,116,104,66,32,61,32,37,46,49,53,108,101,102,59,10,0,0,0,0,0,0,0,0,32,32,106,100,46,114,97,116,105,111,32,61,32,37,46,49,53,108,101,102,59,10,0,0,49,51,98,50,80,117,108,108,101,121,74,111,105,110,116,0,80,85,0,0,112,77,0,0,24,69,0,0,0,0,0,0,0,0,0,0,176,78,0,0,75,0,0,0,76,0,0,0,52,0,0,0,48,0,0,0,99,0,0,0,100,0,0,0,101,0,0,0,77,0,0,0,78,0,0,0,53,0,0,0,108,111,119,101,114,32,60,61,32,117,112,112,101,114,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,74,111,105,110,116,115,47,98,50,82,101,118,111,108,117,116,101,74,111,105,110,116,46,99,112,112,0,0,83,101,116,76,105,109,105,116,115,0,0,0,0,0,0,0,32,32,98,50,82,101,118,111,108,117,116,101,74,111,105,110,116,68,101,102,32,106,100,59,10,0,0,0,0,0,0,0,32,32,106,100,46,101,110,97,98,108,101,76,105,109,105,116,32,61,32,98,111,111,108,40,37,100,41,59,10,0,0,0,32,32,106,100,46,108,111,119,101,114,65,110,103,108,101,32,61,32,37,46,49,53,108,101,102,59,10,0,0,0,0,0,32,32,106,100,46,117,112,112,101,114,65,110,103,108,101,32,61,32,37,46,49,53,108,101,102,59,10,0,0,0,0,0,49,53,98,50,82,101,118,111,108,117,116,101,74,111,105,110,116,0,0,0,0,0,0,0,80,85,0,0,152,78,0,0,24,69,0,0,0,0,0,0,0,0,0,0,56,79,0,0,79,0,0,0,80,0,0,0,53,0,0,0,49,0,0,0,102,0,0,0,103,0,0,0,104,0,0,0,81,0,0,0,82,0,0,0,54,0,0,0,32,32,98,50,82,111,112,101,74,111,105,110,116,68,101,102,32,106,100,59,10,0,0,0,32,32,106,100,46,109,97,120,76,101,110,103,116,104,32,61,32,37,46,49,53,108,101,102,59,10,0,0,0,0,0,0,49,49,98,50,82,111,112,101,74,111,105,110,116,0,0,0,80,85,0,0,40,79,0,0,24,69,0,0,0,0,0,0,0,0,0,0,192,79,0,0,83,0,0,0,84,0,0,0,54,0,0,0,50,0,0,0,105,0,0,0,106,0,0,0,107,0,0,0,85,0,0,0,86,0,0,0,55,0,0,0,32,32,98,50,87,101,108,100,74,111,105,110,116,68,101,102,32,106,100,59,10,0,0,0,32,32,106,100,46,114,101,102,101,114,101,110,99,101,65,110,103,108,101,32,61,32,37,46,49,53,108,101,102,59,10,0,49,49,98,50,87,101,108,100,74,111,105,110,116,0,0,0,80,85,0,0,176,79,0,0,24,69,0,0,0,0,0,0,0,0,0,0,232,81,0,0,87,0,0,0,88,0,0,0,55,0,0,0,51,0,0,0,108,0,0,0,109,0,0,0,110,0,0,0,89,0,0,0,90,0,0,0,56,0,0,0,32,32,98,50,87,104,101,101,108,74,111,105,110,116,68,101,102,32,106,100,59,10,0,0,32,32,106,100,46,98,111,100,121,65,32,61,32,98,111,100,105,101,115,91,37,100,93,59,10,0,0,0,0,0,0,0,32,32,106,100,46,98,111,100,121,66,32,61,32,98,111,100,105,101,115,91,37,100,93,59,10,0,0,0,0,0,0,0,32,32,106,100,46,99,111,108,108,105,100,101,67,111,110,110,101,99,116,101,100,32,61,32,98,111,111,108,40,37,100,41,59,10,0,0,0,0,0,0,32,32,106,100,46,108,111,99,97,108,65,110,99,104,111,114,65,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,0,0,0,0,32,32,106,100,46,108,111,99,97,108,65,110,99,104,111,114,66,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,0,0,0,0,32,32,106,100,46,108,111,99,97,108,65,120,105,115,65,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,32,32,106,100,46,101,110,97,98,108,101,77,111,116,111,114,32,61,32,98,111,111,108,40,37,100,41,59,10,0,0,0,32,32,106,100,46,109,111,116,111,114,83,112,101,101,100,32,61,32,37,46,49,53,108,101,102,59,10,0,0,0,0,0,32,32,106,100,46,109,97,120,77,111,116,111,114,84,111,114,113,117,101,32,61,32,37,46,49,53,108,101,102,59,10,0,32,32,106,100,46,102,114,101,113,117,101,110,99,121,72,122,32,61,32,37,46,49,53,108,101,102,59,10,0,0,0,0,32,32,106,100,46,100,97,109,112,105,110,103,82,97,116,105,111,32,61,32,37,46,49,53,108,101,102,59,10,0,0,0,32,32,106,111,105,110,116,115,91,37,100,93,32,61,32,109,95,119,111,114,108,100,45,62,67,114,101,97,116,101,74,111,105,110,116,40,38,106,100,41,59,10,0,0,0,0,0,0,49,50,98,50,87,104,101,101,108,74,111,105,110,116,0,0,80,85,0,0,216,81,0,0,24,69,0,0,0,0,0,0,43,0,0,0,0,0,0,0,117,110,99,97,117,103,104,116,0,0,0,0,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,0,0,0,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,0,0,116,101,114,109,105,110,97,116,105,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,0,0,0,0,0,0,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,0,0,0,0,0,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,0,0,0,0,0,0,0,152,83,0,0,111,0,0,0,112,0,0,0,46,0,0,0,0,0,0,0,115,116,100,58,58,98,97,100], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+11128);
/* memory initializer */ allocate([95,97,108,108,111,99,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,80,85,0,0,136,83,0,0,32,84,0,0,0,0,0,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,116,104,114,101,119,32,97,110,32,101,120,99,101,112,116,105,111,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,116,57,101,120,99,101,112,116,105,111,110,0,0,0,0,40,85,0,0,16,84,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,40,85,0,0,40,84,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,80,85,0,0,64,84,0,0,56,84,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,80,85,0,0,120,84,0,0,104,84,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,80,85,0,0,216,84,0,0,104,84,0,0,0,0,0,0,80,85,0,0,176,84,0,0,0,85,0,0,0,0,0,0,0,0,0,0,160,84,0,0,113,0,0,0,114,0,0,0,115,0,0,0,116,0,0,0,47,0,0,0,42,0,0,0,42,0,0,0,56,0,0,0,0,0,0,0,152,85,0,0,113,0,0,0,117,0,0,0,115,0,0,0,116,0,0,0,47,0,0,0,43,0,0,0,43,0,0,0,57,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,80,85,0,0,112,85,0,0,160,84,0,0,0,0,0,0,0,0,0,0,248,85,0,0,113,0,0,0,118,0,0,0,115,0,0,0,116,0,0,0,47,0,0,0,44,0,0,0,44,0,0,0,58,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,80,85,0,0,208,85,0,0,160,84,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+21368);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  var _cosf=Math_cos;

  function _emscripten_float32x4_fromInt32x4Bits() {
  Module['printErr']('missing function: emscripten_float32x4_fromInt32x4Bits'); abort(-1);
  }

   
  Module["_i64Subtract"] = _i64Subtract;

  var _DtoILow=true;

  var _floorf=Math_floor;

  function _emscripten_float32x4_xor() {
  Module['printErr']('missing function: emscripten_float32x4_xor'); abort(-1);
  }

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        if (info.refcount === 0) {
          if (info.destructor) {
            Runtime.dynCall('vi', info.destructor, [ptr]);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr)); // exception refcount should be cleared, but don't free it
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((asm["setTempRet0"](0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((asm["setTempRet0"](0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }

   
  Module["_memset"] = _memset;

  var _DtoIHigh=true;

  function _abort() {
      Module['abort']();
    }

  
  
  
  var FS=undefined;
  
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  
  var SOCKFS=undefined;function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return (bytesWritten / size)|0;
      }
    }
  
  
   
  Module["_strlen"] = _strlen;
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      // extra effort to support printf, even without a filesystem. very partial, very hackish
      var result = __formatString(format, varargs);
      var string = intArrayToString(result);
      if (string[string.length-1] === '\n') string = string.substr(0, string.length-1); // remove a final \n, as Module.print will do that
      Module.print(string);
      return result.length;
    }

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Runtime.dynCall('v', func);
      _pthread_once.seen[ptr] = 1;
    }


  var _sqrtf=Math_sqrt;

  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)>>0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  
  function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      var fd = _fileno(stream);
      return _write(fd, s, _strlen(s));
    }
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);function _puts(s) {
      // extra effort to support puts, even without a filesystem. very partial, very hackish
      var result = Pointer_stringify(s);
      var string = result.substr(0);
      if (string[string.length-1] === '\n') string = string.substr(0, string.length-1); // remove a final \n, as Module.print will do that
      Module.print(string);
      return result.length;
    }

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function _emscripten_float32x4_or() {
  Module['printErr']('missing function: emscripten_float32x4_or'); abort(-1);
  }

  function _emscripten_asm_const_int(code) {
      var args = Array.prototype.slice.call(arguments, 1);
      return Runtime.getAsmConst(code, args.length).apply(null, args) | 0;
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  function _emscripten_get_now() {
      if (!_emscripten_get_now.actual) {
        if (ENVIRONMENT_IS_NODE) {
          _emscripten_get_now.actual = function _emscripten_get_now_actual() {
            var t = process['hrtime']();
            return t[0] * 1e3 + t[1] / 1e6;
          }
        } else if (typeof dateNow !== 'undefined') {
          _emscripten_get_now.actual = dateNow;
        } else if (ENVIRONMENT_IS_WEB && window['performance'] && window['performance']['now']) {
          _emscripten_get_now.actual = function _emscripten_get_now_actual() { return window['performance']['now'](); };
        } else {
          _emscripten_get_now.actual = Date.now;
        }
      }
      return _emscripten_get_now.actual();
    }

  var _UItoD=true;

  var _atan2f=Math_atan2;

  function _emscripten_float32x4_not() {
  Module['printErr']('missing function: emscripten_float32x4_not'); abort(-1);
  }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  function _vprintf(format, va_arg) {
      return _printf(format, HEAP32[((va_arg)>>2)]);
    }

  function ___cxa_guard_release() {}

  function ___cxa_guard_acquire(variable) {
      if (!HEAP8[((variable)>>0)]) { // ignore SAFE_HEAP stuff because llvm mixes i64 and i8 here
        HEAP8[((variable)>>0)]=1;
        return 1;
      }
      return 0;
    }

   
  Module["_i64Add"] = _i64Add;

  function _emscripten_asm_const_double(code) {
      var args = Array.prototype.slice.call(arguments, 1);
      return +Runtime.getAsmConst(code, args.length).apply(null, args);
    }

  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  var _sinf=Math_sin;

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function _emscripten_float32x4_lessThan() {
  Module['printErr']('missing function: emscripten_float32x4_lessThan'); abort(-1);
  }

  function _emscripten_float32x4_select() {
  Module['printErr']('missing function: emscripten_float32x4_select'); abort(-1);
  }

  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  function _emscripten_float32x4_greaterThan() {
  Module['printErr']('missing function: emscripten_float32x4_greaterThan'); abort(-1);
  }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function _emscripten_float32x4_and() {
  Module['printErr']('missing function: emscripten_float32x4_and'); abort(-1);
  }

  function ___errno_location() {
      return ___errno_state;
    }

  function _vfprintf(s, f, va_arg) {
      return _fprintf(s, f, HEAP32[((va_arg)>>2)]);
    }

  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);

  var Math_min = Math.min;
function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_did(index,a1,a2) {
  try {
    return Module["dynCall_did"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_diiiid(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_diiiid"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viidii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viidii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viidi(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viidi"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viid(index,a1,a2,a3) {
  try {
    Module["dynCall_viid"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

  // EMSCRIPTEN_START_ASM
  var asm = (function(global, env, buffer) {
    'use asm';
    
    var HEAP8 = new global.Int8Array(buffer);
    var HEAP16 = new global.Int16Array(buffer);
    var HEAP32 = new global.Int32Array(buffer);
    var HEAPU8 = new global.Uint8Array(buffer);
    var HEAPU16 = new global.Uint16Array(buffer);
    var HEAPU32 = new global.Uint32Array(buffer);
    var HEAPF32 = new global.Float32Array(buffer);
    var HEAPF64 = new global.Float64Array(buffer);

  
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ctlz_i8=env.ctlz_i8|0;
  var _stderr=env._stderr|0;

    var __THREW__ = 0;
    var threwValue = 0;
    var setjmpId = 0;
    var undef = 0;
    var nan = +env.NaN, inf = +env.Infinity;
    var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
  
    var tempRet0 = 0;
    var tempRet1 = 0;
    var tempRet2 = 0;
    var tempRet3 = 0;
    var tempRet4 = 0;
    var tempRet5 = 0;
    var tempRet6 = 0;
    var tempRet7 = 0;
    var tempRet8 = 0;
    var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var Math_min=env.min;
  var jsCall=env.jsCall;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_did=env.invoke_did;
  var invoke_vi=env.invoke_vi;
  var invoke_diiiid=env.invoke_diiiid;
  var invoke_vii=env.invoke_vii;
  var invoke_viidii=env.invoke_viidii;
  var invoke_ii=env.invoke_ii;
  var invoke_viidi=env.invoke_viidi;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_viid=env.invoke_viid;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_viiii=env.invoke_viiii;
  var ___cxa_throw=env.___cxa_throw;
  var _cosf=env._cosf;
  var _send=env._send;
  var _sqrtf=env._sqrtf;
  var ___cxa_guard_acquire=env.___cxa_guard_acquire;
  var __reallyNegative=env.__reallyNegative;
  var _vfprintf=env._vfprintf;
  var _emscripten_float32x4_lessThan=env._emscripten_float32x4_lessThan;
  var _emscripten_asm_const_int=env._emscripten_asm_const_int;
  var ___assert_fail=env.___assert_fail;
  var _atan2f=env._atan2f;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var ___cxa_guard_release=env.___cxa_guard_release;
  var ___errno_location=env.___errno_location;
  var _emscripten_float32x4_fromInt32x4Bits=env._emscripten_float32x4_fromInt32x4Bits;
  var _emscripten_asm_const_double=env._emscripten_asm_const_double;
  var _fprintf=env._fprintf;
  var ___setErrNo=env.___setErrNo;
  var _sbrk=env._sbrk;
  var _emscripten_float32x4_greaterThan=env._emscripten_float32x4_greaterThan;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _sinf=env._sinf;
  var _fileno=env._fileno;
  var ___resumeException=env.___resumeException;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var _sysconf=env._sysconf;
  var _emscripten_float32x4_and=env._emscripten_float32x4_and;
  var _pthread_getspecific=env._pthread_getspecific;
  var _vprintf=env._vprintf;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _pwrite=env._pwrite;
  var _pthread_once=env._pthread_once;
  var _puts=env._puts;
  var _printf=env._printf;
  var _floorf=env._floorf;
  var _pthread_key_create=env._pthread_key_create;
  var _write=env._write;
  var _emscripten_get_now=env._emscripten_get_now;
  var _pthread_setspecific=env._pthread_setspecific;
  var _fputc=env._fputc;
  var _emscripten_float32x4_select=env._emscripten_float32x4_select;
  var _emscripten_float32x4_or=env._emscripten_float32x4_or;
  var _emscripten_float32x4_not=env._emscripten_float32x4_not;
  var _abort=env._abort;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var __formatString=env.__formatString;
  var _fputs=env._fputs;
  var _emscripten_float32x4_xor=env._emscripten_float32x4_xor;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var SIMD_float32x4=global.SIMD.float32x4;
  var SIMD_int32x4=global.SIMD.int32x4;
  var SIMD_int32x4_add=SIMD_int32x4.add;
  var SIMD_int32x4_sub=SIMD_int32x4.sub;
  var SIMD_int32x4_equal=SIMD_int32x4.equal;
  var SIMD_int32x4_notEqual=SIMD_int32x4.notEqual;
  var SIMD_int32x4_lessThan=SIMD_int32x4.lessThan;
  var SIMD_int32x4_lessThanOrEqual=SIMD_int32x4.lessThanOrEqual;
  var SIMD_int32x4_greaterThan=SIMD_int32x4.greaterThan;
  var SIMD_int32x4_greaterThanOrEqual=SIMD_int32x4.greaterThanOrEqual;
  var SIMD_int32x4_select=SIMD_int32x4.select;
  var SIMD_int32x4_and=SIMD_int32x4.and;
  var SIMD_int32x4_or=SIMD_int32x4.or;
  var SIMD_int32x4_xor=SIMD_int32x4.xor;
  var SIMD_int32x4_not=SIMD_int32x4.not;
  var SIMD_int32x4_splat=SIMD_int32x4.splat;
  var SIMD_int32x4_shuffle=SIMD_int32x4.shuffle;
  var SIMD_int32x4_shuffleMix=SIMD_int32x4.shuffleMix;
  var SIMD_int32x4_withX=SIMD_int32x4.withX;
  var SIMD_int32x4_withY=SIMD_int32x4.withY;
  var SIMD_int32x4_withZ=SIMD_int32x4.withZ;
  var SIMD_int32x4_withW=SIMD_int32x4.withW;
  var SIMD_int32x4_load=SIMD_int32x4.load;
  var SIMD_int32x4_loadX=SIMD_int32x4.loadX;
  var SIMD_int32x4_loadXY=SIMD_int32x4.loadXY;
  var SIMD_int32x4_loadXYZ=SIMD_int32x4.loadXYZ;
  var SIMD_int32x4_store=SIMD_int32x4.store;
  var SIMD_int32x4_storeX=SIMD_int32x4.storeX;
  var SIMD_int32x4_storeXY=SIMD_int32x4.storeXY;
  var SIMD_int32x4_storeXYZ=SIMD_int32x4.storeXYZ;
  var SIMD_int32x4_fromFloat32x4=SIMD_int32x4.fromFloat32x4;
  var SIMD_int32x4_fromFloat32x4Bits=SIMD_int32x4.fromFloat32x4Bits;
  var SIMD_float32x4_add=SIMD_float32x4.add;
  var SIMD_float32x4_sub=SIMD_float32x4.sub;
  var SIMD_float32x4_equal=SIMD_float32x4.equal;
  var SIMD_float32x4_notEqual=SIMD_float32x4.notEqual;
  var SIMD_float32x4_lessThan=SIMD_float32x4.lessThan;
  var SIMD_float32x4_lessThanOrEqual=SIMD_float32x4.lessThanOrEqual;
  var SIMD_float32x4_greaterThan=SIMD_float32x4.greaterThan;
  var SIMD_float32x4_greaterThanOrEqual=SIMD_float32x4.greaterThanOrEqual;
  var SIMD_float32x4_select=SIMD_float32x4.select;
  var SIMD_float32x4_and=SIMD_float32x4.and;
  var SIMD_float32x4_or=SIMD_float32x4.or;
  var SIMD_float32x4_xor=SIMD_float32x4.xor;
  var SIMD_float32x4_not=SIMD_float32x4.not;
  var SIMD_float32x4_splat=SIMD_float32x4.splat;
  var SIMD_float32x4_shuffle=SIMD_float32x4.shuffle;
  var SIMD_float32x4_shuffleMix=SIMD_float32x4.shuffleMix;
  var SIMD_float32x4_withX=SIMD_float32x4.withX;
  var SIMD_float32x4_withY=SIMD_float32x4.withY;
  var SIMD_float32x4_withZ=SIMD_float32x4.withZ;
  var SIMD_float32x4_withW=SIMD_float32x4.withW;
  var SIMD_float32x4_load=SIMD_float32x4.load;
  var SIMD_float32x4_loadX=SIMD_float32x4.loadX;
  var SIMD_float32x4_loadXY=SIMD_float32x4.loadXY;
  var SIMD_float32x4_loadXYZ=SIMD_float32x4.loadXYZ;
  var SIMD_float32x4_store=SIMD_float32x4.store;
  var SIMD_float32x4_storeX=SIMD_float32x4.storeX;
  var SIMD_float32x4_storeXY=SIMD_float32x4.storeXY;
  var SIMD_float32x4_storeXYZ=SIMD_float32x4.storeXYZ;
  var SIMD_float32x4_mul=SIMD_float32x4.mul;
  var SIMD_float32x4_div=SIMD_float32x4.div;
  var SIMD_float32x4_min=SIMD_float32x4.min;
  var SIMD_float32x4_max=SIMD_float32x4.max;
  var SIMD_float32x4_sqrt=SIMD_float32x4.sqrt;
  var SIMD_float32x4_fromInt32x4=SIMD_float32x4.fromInt32x4;
  var SIMD_float32x4_fromInt32x44Bits=SIMD_float32x4.fromInt32x44Bits;
  var tempFloat = 0.0;

  // EMSCRIPTEN_START_FUNCS
function __ZN7b2World4StepEfii($this, $dt, $velocityIterations, $positionIterations) {
 $this = $this | 0;
 $dt = +$dt;
 $velocityIterations = $velocityIterations | 0;
 $positionIterations = $positionIterations | 0;
 var $$lcssa$i$i$i$i = 0, $$pre = 0, $$pre$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$i = 0, $$pre461 = 0, $$pre462 = 0, $$pre464 = 0, $$pre465 = 0, $$pre468 = 0, $$pre469 = 0, $$pre473 = 0, $$pre474 = 0, $$pre475 = 0, $$pre476 = 0, $$pre494 = 0, $$pre495 = 0, $$pre788$i$i$i$i = 0.0, $$pre789$i$i$i$i = 0.0, $$pre791$i$i$i$i = 0.0, $$pre792$i$i$i$i = 0.0, $$pre794$i$i$i$i = 0.0, $$pre795$i$i$i$i = 0.0, $$pre796$i$i$i$i = 0.0, $$pre797$i$i$i$i = 0.0, $$pre798$i$i$i$i = 0, $$pre802$i$i$i$i = 0.0, $$pre803$i$i$i$i = 0.0, $$pre805$i$i$i$i = 0.0, $$pre806$i$i$i$i = 0.0, $$pre808$i$i$i$i = 0.0, $$pre809$i$i$i$i = 0.0, $$pre810$i$i$i$i = 0.0, $$pre811$i$i$i$i = 0.0, $0 = 0, $10 = 0, $1000 = 0.0, $1001 = 0, $1005 = 0.0, $1006 = 0.0, $1007 = 0, $101 = 0.0, $1012 = 0.0, $1013 = 0.0, $1015 = 0, $1021 = 0.0, $1022 = 0.0, $1023 = 0.0, $1024 = 0.0, $1025 = 0, $1029 = 0, $1030 = 0, $1031 = 0, $1037 = 0.0, $1038 = 0.0, $1039 = 0, $104 = 0.0, $1045 = 0.0, $1046 = 0.0, $1047 = 0.0, $1048 = 0.0, $1049 = 0, $1053 = 0.0, $1054 = 0.0, $1055 = 0, $1061 = 0.0, $1062 = 0.0, $1064 = 0, $1070 = 0.0, $1071 = 0.0, $1072 = 0.0, $1073 = 0.0, $1074 = 0, $1078 = 0.0, $1079 = 0.0, $1080 = 0.0, $1081 = 0.0, $1082 = 0.0, $1083 = 0.0, $1084 = 0.0, $1085 = 0.0, $1086 = 0.0, $1087 = 0.0, $1088 = 0.0, $1089 = 0.0, $1090 = 0.0, $1091 = 0.0, $1092 = 0.0, $1093 = 0.0, $1094 = 0.0, $1095 = 0.0, $1098 = 0, $1099 = 0, $11 = 0, $1100 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $111 = 0, $1112 = 0, $1118 = 0.0, $1119 = 0.0, $112 = 0, $1120 = 0, $1126 = 0.0, $1127 = 0.0, $1128 = 0.0, $1129 = 0.0, $1130 = 0.0, $1131 = 0.0, $1133 = 0, $1134 = 0, $1135 = 0, $1140 = 0, $1146 = 0.0, $1147 = 0.0, $1148 = 0.0, $1149 = 0.0, $1150 = 0.0, $1151 = 0.0, $1153 = 0, $1154 = 0, $1155 = 0, $116 = 0, $1160 = 0, $1166 = 0.0, $1167 = 0.0, $1169 = 0, $117 = 0.0, $1172 = 0, $1176 = 0, $1177 = 0, $1178 = 0.0, $118 = 0.0, $1183 = 0.0, $1184 = 0.0, $1185 = 0, $119 = 0, $1191 = 0, $1195 = 0.0, $1196 = 0.0, $1197 = 0.0, $1198 = 0.0, $1199 = 0, $12 = 0, $1203 = 0.0, $1208 = 0.0, $1209 = 0.0, $1210 = 0, $1216 = 0, $1220 = 0.0, $1221 = 0.0, $1222 = 0.0, $1223 = 0.0, $1224 = 0, $1229 = 0, $123 = 0, $1233 = 0.0, $1234 = 0.0, $1235 = 0.0, $1238 = 0.0, $1239 = 0.0, $1240 = 0, $1244 = 0.0, $1245 = 0.0, $1246 = 0.0, $1249 = 0.0, $1250 = 0.0, $1251 = 0, $1261 = 0, $1266 = 0, $1268 = 0, $127 = 0, $1277 = 0.0, $128 = 0, $1282 = 0.0, $1283 = 0.0, $1284 = 0, $129 = 0, $1290 = 0, $1294 = 0.0, $1295 = 0.0, $1296 = 0.0, $1297 = 0.0, $1298 = 0, $13 = 0, $130 = 0.0, $1303 = 0, $1304 = 0.0, $1305 = 0.0, $1306 = 0.0, $1309 = 0.0, $131 = 0.0, $1310 = 0.0, $1311 = 0, $1315 = 0.0, $1316 = 0.0, $1317 = 0.0, $132 = 0.0, $1320 = 0.0, $1321 = 0.0, $1322 = 0, $1328 = 0, $1329 = 0, $133 = 0.0, $1330 = 0, $1331 = 0, $1332 = 0, $1337 = 0, $1338 = 0, $134 = 0, $1343 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1370 = 0.0, $1371 = 0.0, $1372 = 0, $1378 = 0.0, $1379 = 0.0, $1380 = 0, $1383 = 0, $1389 = 0.0, $1390 = 0.0, $1391 = 0.0, $1392 = 0, $1398 = 0.0, $1399 = 0.0, $14 = 0, $1400 = 0.0, $1401 = 0.0, $1402 = 0.0, $1403 = 0, $1407 = 0.0, $1408 = 0.0, $1409 = 0, $141 = 0.0, $1413 = 0, $1419 = 0.0, $142 = 0.0, $1420 = 0.0, $1421 = 0, $1427 = 0.0, $1428 = 0.0, $1429 = 0.0, $143 = 0.0, $1430 = 0.0, $1431 = 0.0, $1432 = 0, $1436 = 0.0, $1437 = 0.0, $1438 = 0, $144 = 0, $1442 = 0, $1444 = 0, $1449 = 0, $1450 = 0, $1457 = 0, $1462 = 0, $1463 = 0, $1469 = 0, $1470 = 0, $1476 = 0.0, $1477 = 0.0, $1478 = 0.0, $1479 = 0, $1480 = 0, $1486 = 0.0, $1487 = 0.0, $1488 = 0.0, $1489 = 0.0, $1490 = 0.0, $1491 = 0, $1497 = 0.0, $1498 = 0.0, $1499 = 0, $150 = 0.0, $1504 = 0, $1505 = 0, $1509 = 0, $151 = 0.0, $1513 = 0.0, $1514 = 0.0, $1515 = 0.0, $1516 = 0.0, $1517 = 0, $152 = 0.0, $1522 = 0, $1523 = 0, $1525 = 0, $1526 = 0, $153 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0, $174 = 0.0, $175 = 0.0, $176 = 0, $180 = 0, $181 = 0, $183 = 0, $185 = 0, $186 = 0, $187 = 0, $189 = 0, $190 = 0, $193 = 0, $194 = 0, $2 = 0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0, $204 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0, $22 = 0, $221 = 0.0, $222 = 0.0, $223 = 0, $227 = 0, $23 = 0, $233 = 0, $234 = 0, $243 = 0, $244 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $26 = 0, $260 = 0, $265 = 0, $266 = 0, $270 = 0, $275 = 0, $276 = 0, $28 = 0, $280 = 0, $285 = 0, $286 = 0, $29 = 0, $290 = 0, $295 = 0, $296 = 0, $30 = 0, $300 = 0, $305 = 0, $306 = 0, $310 = 0, $315 = 0, $316 = 0, $320 = 0, $325 = 0, $326 = 0, $330 = 0, $335 = 0, $336 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $364 = 0, $365 = 0, $367 = 0, $370 = 0, $371 = 0, $375 = 0, $377 = 0, $380 = 0, $381 = 0, $385 = 0, $387 = 0, $39 = 0, $390 = 0, $391 = 0, $395 = 0, $397 = 0, $4 = 0, $400 = 0, $401 = 0, $405 = 0, $407 = 0, $410 = 0, $411 = 0, $415 = 0, $417 = 0, $420 = 0, $421 = 0, $425 = 0, $427 = 0, $430 = 0, $431 = 0, $435 = 0, $437 = 0, $440 = 0, $441 = 0, $445 = 0.0, $446 = 0.0, $447 = 0.0, $448 = 0.0, $449 = 0.0, $450 = 0.0, $451 = 0.0, $452 = 0.0, $453 = 0.0, $454 = 0.0, $455 = 0.0, $456 = 0.0, $457 = 0.0, $458 = 0.0, $459 = 0.0, $460 = 0.0, $461 = 0.0, $462 = 0.0, $463 = 0.0, $464 = 0.0, $465 = 0.0, $466 = 0.0, $467 = 0.0, $468 = 0.0, $469 = 0.0, $470 = 0.0, $471 = 0.0, $472 = 0.0, $473 = 0.0, $474 = 0.0, $475 = 0.0, $476 = 0.0, $477 = SIMD_float32x4(0, 0, 0, 0), $478 = SIMD_float32x4(0, 0, 0, 0), $479 = SIMD_float32x4(0, 0, 0, 0), $480 = SIMD_float32x4(0, 0, 0, 0), $485 = 0, $486 = 0, $49 = 0, $490 = 0.0, $491 = 0.0, $492 = 0.0, $493 = 0.0, $494 = 0.0, $495 = 0.0, $496 = 0.0, $497 = 0.0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0, $500 = 0.0, $501 = 0.0, $502 = 0.0, $503 = 0.0, $504 = 0.0, $509 = 0.0, $514 = 0, $515 = 0, $521 = 0, $527 = 0, $529 = 0, $531 = 0, $535 = SIMD_float32x4(0, 0, 0, 0), $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $548 = 0, $551 = 0, $552 = 0, $556 = 0.0, $557 = 0, $558 = 0, $560 = 0, $563 = 0, $564 = 0, $568 = 0.0, $569 = 0, $570 = 0.0, $572 = 0.0, $573 = 0.0, $574 = 0.0, $575 = 0.0, $576 = 0.0, $577 = 0.0, $578 = 0, $58 = 0, $582 = 0.0, $583 = 0.0, $584 = 0.0, $585 = 0.0, $586 = 0, $590 = 0, $596 = 0.0, $597 = 0.0, $598 = 0, $6 = 0, $604 = 0.0, $605 = 0.0, $606 = 0.0, $607 = 0, $613 = 0, $619 = 0, $621 = 0, $624 = 0, $626 = 0.0, $627 = 0, $628 = 0, $630 = 0, $633 = 0, $634 = 0.0, $636 = 0, $637 = 0, $639 = 0, $642 = 0, $643 = 0, $647 = 0.0, $648 = 0, $649 = 0, $651 = 0, $654 = 0, $655 = 0, $659 = 0.0, $660 = 0, $661 = 0.0, $663 = 0.0, $664 = 0.0, $665 = 0.0, $666 = 0.0, $667 = 0.0, $668 = 0.0, $669 = 0, $67 = 0, $673 = 0.0, $674 = 0.0, $675 = 0.0, $676 = 0.0, $677 = 0, $68 = 0, $681 = 0, $687 = 0.0, $688 = 0.0, $689 = 0, $69 = 0, $695 = 0.0, $696 = 0.0, $697 = 0.0, $698 = 0, $7 = 0, $704 = 0, $71 = 0, $710 = 0, $712 = 0, $715 = 0, $717 = 0.0, $718 = 0, $719 = 0, $72 = 0, $721 = 0, $724 = 0, $725 = 0.0, $726 = 0, $73 = 0, $731 = 0, $732 = 0, $738 = 0, $744 = 0, $746 = 0, $748 = 0, $756 = 0, $757 = 0, $766 = 0, $767 = 0, $773 = 0, $779 = 0, $78 = 0, $781 = 0, $783 = 0, $79 = 0, $790 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $806 = 0, $812 = 0, $814 = 0, $816 = 0, $82 = 0, $820 = 0, $821 = 0, $823 = 0, $824 = 0, $825 = 0, $827 = 0, $830 = 0, $831 = 0, $835 = 0.0, $836 = 0, $841 = 0, $842 = 0, $847 = 0.0, $848 = 0.0, $85 = 0, $850 = 0.0, $851 = 0.0, $852 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0.0, $862 = 0.0, $863 = 0.0, $864 = 0.0, $866 = 0, $868 = 0, $87 = 0, $873 = 0, $874 = 0, $875 = 0, $885 = 0, $888 = 0, $889 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $9 = 0, $900 = 0.0, $901 = 0.0, $906 = 0.0, $907 = 0.0, $908 = 0, $918 = 0.0, $919 = 0.0, $920 = 0, $926 = 0, $927 = 0, $93 = 0.0, $933 = 0.0, $934 = 0.0, $935 = 0, $939 = 0.0, $94 = 0.0, $940 = 0.0, $941 = 0, $945 = 0.0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0.0, $950 = 0, $951 = 0, $954 = 0, $96 = 0, $960 = 0.0, $961 = 0.0, $965 = 0, $971 = 0.0, $972 = 0.0, $973 = 0.0, $974 = 0.0, $975 = 0, $980 = 0, $981 = 0, $982 = 0, $988 = 0.0, $989 = 0.0, $991 = 0, $997 = 0.0, $998 = 0.0, $999 = 0.0, $a$i$i$i = 0, $a$i$i328$i = 0, $a$i$i380$i = 0, $a$i$i65$i = 0, $a0$i$i$i = 0, $a0$i$i326$i = 0, $a0$i$i378$i = 0, $a0$i$i69 = 0, $a0$i223$i = 0, $a1$0$i$i = 0.0, $a2$0$i$i = 0.0, $a23$i$i$i = 0, $aA$0$lcssa$i$i$i = 0.0, $aA$0185$i$i$i = 0.0, $aB$0$lcssa$i$i$i = 0.0, $aB$0186$i$i$i = 0.0, $add$i$i$i$i143 = 0.0, $add$i$i$i320$i = 0.0, $add$i$i$i372$i = 0.0, $add$i$i15$i$i = 0.0, $add$i$i157$i = 0.0, $add$i$i20$i = 0.0, $add$i$i330$i = 0.0, $add$i$i382$i = 0.0, $add$i$i6$i$i = 0.0, $add$i$i76$i = 0.0, $add$i104$i$i = 0.0, $add$i112$i$i$i = 0.0, $add$i12$i$i$i$i = 0.0, $add$i12$i196$i$i$i = 0.0, $add$i12$i323$i$i$i = 0.0, $add$i12$i358$i$i$i = 0.0, $add$i131 = 0.0, $add$i133$i$i$i = 0.0, $add$i148$i$i = 0.0, $add$i156$i$i$i = 0.0, $add$i173$i$i$i = 0.0, $add$i211$i$i$i = 0.0, $add$i230$i$i$i = 0.0, $add$i247$i$i$i = 0.0, $add$i33$i$i$i115 = 0.0, $add$i4$i$i = 0.0, $add$i466$i$i$i$i = SIMD_float32x4(0, 0, 0, 0), $add$i468$i$i$i$i = SIMD_float32x4(0, 0, 0, 0), $add$i470$i$i$i$i = SIMD_float32x4(0, 0, 0, 0), $add$i49$i$i$i = 0.0, $add$i512$i$i$i$i = SIMD_float32x4(0, 0, 0, 0), $add$i56$i$i$i = 0.0, $add$i65$i$i$i114 = 0.0, $add$i69$i$i = 0.0, $add$i85$i = 0.0, $add$ptr$i$i$i = 0, $add$ptr$i$i$i$i = 0, $add$ptr$sum211$i$i$i$i = 0, $add$ptr$sum212$i$i$i$i = 0, $add$ptr$sum213$i$i$i$i = 0, $add$ptr538$i$i$i$i = 0, $add$ptr652$i$i$i$i = 0, $add16$i$i = 0.0, $add17$i235$i$i$i = 0.0, $add17$i54$i$i$i = 0.0, $add230$i$i = 0.0, $add3$i$i$i$i = 0.0, $add3$i$i$i$i144 = 0.0, $add3$i$i$i321$i = 0.0, $add3$i$i$i373$i = 0.0, $add4$i$i$i$i = 0.0, $add4$i$i$i$i196 = 0.0, $add4$i$i$i211 = 0.0, $add40$i$i$i = 0.0, $add46$i$i$i = 0.0, $add55$i$i$i = 0.0, $add550$i$i$i$i = 0.0, $add558$i$i$i$i = 0.0, $add675$i$i$i$i = 0.0, $add683$i$i$i$i = 0.0, $add8$i$i$i$i = 0.0, $add8$i158$i$i$i = 0.0, $add8$i175$i$i$i = 0.0, $add8$i213$i$i$i = 0.0, $allocator$i$i = 0, $allocator$i$i172 = 0, $alpha$0$i = 0.0, $alpha$1$i = 0.0, $alpha0$i$i$i = 0, $alpha0$i$i304$i = 0, $alpha0$i$i356$i = 0, $alpha089$0$i = 0.0, $alpha091$i = 0, $alpha095$i = 0, $and$i$i$i$i = 0, $and3 = 0, $and42 = 0, $arrayidx10$i$i$i = 0, $arrayidx147$i$i$i$i = 0, $arrayidx152$i$i$i$i = 0, $arrayidx157$i$i$i$i = 0, $arrayidx167$i$i$i$i = 0, $arrayidx172$i$i$i$i = 0, $arrayidx177$i$i$i$i = 0, $arrayidx27$i$i = 0, $arrayidx29$i$i$i = 0, $arrayidx39$i$i = 0, $arrayidx500$i$i$i$i = 0, $arrayidx501$i$i$i$i = 0, $arrayidx510$i$i$i$i = 0, $arrayidx511$i$i$i$i = 0, $arrayidx608$i$i$i$i = 0, $arrayidx609$i$i$i$i = 0, $arrayidx618$i$i$i$i = 0, $arrayidx619$i$i$i$i = 0, $arrayinit$element$i = 0, $arrayinit$element$i$i$i$i = 0, $arrayinit$element10$i$i$i$i = 0, $arrayinit$element103$i$i$i$i = 0, $arrayinit$element106$i$i$i$i = 0, $arrayinit$element109$i$i$i$i = 0, $arrayinit$element13$i$i$i$i = 0, $arrayinit$element18$i$i$i$i = 0, $arrayinit$element21$i$i$i$i = 0, $arrayinit$element24$i$i$i$i = 0, $arrayinit$element34$i$i$i$i = 0, $arrayinit$element37$i$i$i$i = 0, $arrayinit$element40$i$i$i$i = 0, $arrayinit$element45$i$i$i$i = 0, $arrayinit$element48$i$i$i$i = 0, $arrayinit$element51$i$i$i$i = 0, $arrayinit$element56$i$i$i$i = 0, $arrayinit$element59$i$i$i$i = 0, $arrayinit$element62$i$i$i$i = 0, $arrayinit$element73$i$i$i$i = 0, $arrayinit$element76$i$i$i$i = 0, $arrayinit$element79$i$i$i$i = 0, $arrayinit$element83$i$i$i$i = 0, $arrayinit$element86$i$i$i$i = 0, $arrayinit$element89$i$i$i$i = 0, $arrayinit$element93$i$i$i$i = 0, $arrayinit$element96$i$i$i$i = 0, $arrayinit$element99$i$i$i$i = 0, $b$0123$i = 0, $b$0125$i = 0, $b$0464$i = 0, $b$0466$i = 0, $b194$083$i = 0, $b194$085$i = 0, $backup$i = 0, $backup1$i = 0, $backup2$i = 0, $bestIndex$0$lcssa$i330$i$i$i = 0, $bestIndex$0$lcssa$i365$i$i$i = 0, $bestIndex$016$i$i$i$i = 0, $bestIndex$016$i189$i$i$i = 0, $bestIndex$016$i316$i$i$i = 0, $bestIndex$016$i351$i$i$i = 0, $bestIndex$1$i326$i$i$i = 0, $bestIndex$1$i361$i$i$i = 0, $bestValue$014$i$i$i$i = 0.0, $bestValue$014$i191$i$i$i = 0.0, $bestValue$014$i318$i$i$i = 0.0, $bestValue$014$i353$i$i$i = 0.0, $bitcast$i$i$i$i = 0.0, $bitcast772$i$i$i$i = 0.0, $bitcast774$i$i$i$i = 0.0, $bitcast776$i$i$i$i = 0.0, $bitcast778$i$i$i$i = 0.0, $bitcast780$i$i$i$i = 0.0, $bitcast782$i$i$i$i = 0.0, $bitcast784$i$i$i$i = 0.0, $bodies$i = 0, $body$04$i = 0, $body$06$i = 0, $c$0$be$i = 0, $c$0120$i = 0, $c$0122$i = 0, $c$032$i = 0, $c$0461$i = 0, $c$0463$i = 0, $c$i$i$i$i$i = 0, $c$i$i335$i = 0, $c$i$i387$i = 0, $c$i$i64$i = 0, $c$i143$i$i$i = 0, $c$i147$i$i$i = 0, $c$i318$i$i$i$i = 0, $c$i322$i$i$i$i = 0, $c$i449$i$i$i$i = 0, $c$i457$i$i$i$i = 0, $c0$i$i$i = 0, $c0$i$i310$i = 0, $c0$i$i362$i = 0, $c0$i$i67 = 0, $c0$i207$i = 0, $c111$i$i$i$i$i = 0, $c14$0423$i = 0, $c14$0427$i = 0, $c20$i$i$i = 0, $c504$i$i$i$i = 0, $c612$i$i$i$i = 0, $c69$i$i = 0, $c85$i$i = 0, $cA$sroa$0$0$load172178$lcssa$i$i$i = 0.0, $cA$sroa$0$0$load172178182$i$i$i = 0.0, $cA$sroa$1$4$load175179$lcssa$i$i$i = 0.0, $cA$sroa$1$4$load175179181$i$i$i = 0.0, $cB$sroa$0$0$load166176$lcssa$i$i$i = 0.0, $cB$sroa$0$0$load166176184$i$i$i = 0.0, $cB$sroa$1$4$load169177$lcssa$i$i$i = 0.0, $cB$sroa$1$4$load169177183$i$i$i = 0.0, $call$i = 0, $call$i$i$i = 0.0, $call$i$i$i$i = 0.0, $call$i$i$i$i$i$i102 = 0.0, $call$i$i$i$i77 = 0.0, $call$i$i$i19$i$i = 0.0, $call$i$i$i211$i$i$i = 0.0, $call$i$i$i298$i$i$i = 0.0, $call$i$i$i33$i$i = 0.0, $call$i$i1$i$i = 0.0, $call$i$i1$i$i11$i$i$i = 0.0, $call$i$i105$i$i = 0.0, $call$i$i127$i = 0.0, $call$i$i134$i$i$i = 0.0, $call$i$i1523$i$i$i = 0.0, $call$i$i158$i = 0.0, $call$i$i249$i = 0.0, $call$i$i27$i$i$i = 0.0, $call$i$i272$i = 0.0, $call$i$i3$i$i12$i$i$i = 0.0, $call$i$i332$i = 0.0, $call$i$i3742$i$i$i = 0.0, $call$i$i384$i = 0.0, $call$i$i4454$i$i$i = 0.0, $call$i$i61$i$i = 0.0, $call$i$i76$i34$i$i = 0.0, $call$i$i8$i$i$i = 0.0, $call$i144$i$i$i = 0.0, $call$i319$i$i$i$i = 0.0, $call$i323$i$i$i$i = SIMD_float32x4(0, 0, 0, 0), $call$i446$i$i$i$i = 0.0, $call$i454$i$i$i$i = 0.0, $call$i483$i$i$i$i = SIMD_float32x4(0, 0, 0, 0), $call$i497$i$i$i$i = SIMD_float32x4(0, 0, 0, 0), $call$i502$i$i$i$i = SIMD_float32x4(0, 0, 0, 0), $call$i556$i$i$i$i = 0.0, $call$i558$i$i$i$i = 0.0, $call1$i$i$i$i$i = SIMD_float32x4(0, 0, 0, 0), $call1$i$i$i$i$i$i = SIMD_float32x4(0, 0, 0, 0), $call1$i5$i$i$i$i$i = SIMD_float32x4(0, 0, 0, 0), $call11$i$i$i = 0.0, $call11$i$i$i$i$i = 0.0, $call11$i568$i$i$i$i = 0.0, $call15$i$i$i$i$i = 0.0, $call15$i571$i$i$i$i = 0.0, $call155$$i$i = 0, $call18$i$i$i$i$i = 0.0, $call18$i575$i$i$i$i = 0.0, $call2$i$i$i = 0.0, $call2$i$i$i$i = 0.0, $call2$i$i$i$i$i = 0.0, $call2$i$i$i$i78 = 0.0, $call2$i$i$i20$i$i = 0.0, $call2$i$i$i86$i = 0.0, $call2$i$i107$i$i = 0.0, $call2$i$i129$i = 0.0, $call2$i$i136$i$i$i = 0.0, $call2$i$i160$i = 0.0, $call2$i$i2$i$i = 0.0, $call2$i$i251$i = 0.0, $call2$i$i274$i = 0.0, $call2$i$i334$i = 0.0, $call2$i$i386$i = 0.0, $call2$i146$i$i$i = 0.0, $call2$i321$i$i$i$i = 0.0, $call2$i448$i$i$i$i = 0.0, $call2$i456$i$i$i$i = 0.0, $call22$i$i$i$i$i = 0.0, $call22$i578$i$i$i$i = 0.0, $call26$i$i$i$i$i = 0.0, $call26$i581$i$i$i$i = 0.0, $call29$i10$i$i$i = 0.0, $call3$i$i$i$i$i = 0.0, $call3$i562$i$i$i$i = 0.0, $call35$i49$i = 0.0, $call58$i50$i = 0.0, $call7$i$i$i$i$i = 0.0, $call7$i565$i$i$i$i = 0.0, $call745$i14$i$i$i = 0.0, $ce$0434$i = 0, $ce$0436$i = 0, $ce$091$i = 0, $ce$094$i = 0, $ce330$0438$i = 0, $ce330$0440$i = 0, $cmp = 0, $cmp$i32$i$i = 0, $cmp140196$i$i = 0, $cmp195$i$i$i = 0, $cmp219$i$i = 0, $cmp44216$i$i = 0, $cmp5$i$i$i$i = 0, $cmp5$i197$i$i$i = 0, $cmp5$i324$i$i$i = 0, $cmp5$i359$i$i$i = 0, $cmp55107$i$i = 0, $cmp56209$i$i = 0, $cmp64$i$i = 0, $cmp7114$i$i = 0, $cond$i$i$i$i = 0.0, $cond$i$i$i$i$i$i = 0.0, $cond$i$i$i$i$i193 = 0.0, $cond$i$i$i$i191 = 0.0, $cond$i$i$i75 = 0.0, $cond$i$i156$i$i = 0.0, $cond$i$i25$i$i = 0.0, $cond$i$i385$i$i$i$i = 0.0, $cond$i$i83$i = 0.0, $cond$i129$i$i = 0.0, $cond$i13$i$i = 0.0, $cond$i2$i$i$i = 0.0, $cond$i530$i$i$i$i = 0.0, $cond$i532$i$i$i$i = 0.0, $cond$i534$i$i$i$i = 0.0, $cond$i80$i$i = 0.0, $cond691$i$i$i$i = 0.0, $contactSolver$i$i = 0, $contactSolver$i$i22 = 0, $contactSolverDef$i$i = 0, $contactSolverDef$i$i21 = 0, $contacts$i$i = 0, $contacts$i$i170 = 0, $conv$i$i = 0, $conv$i$i$i$i = 0.0, $conv$i231$i = 0, $conv$i240$i = 0, $conv11$i$i$i = 0, $conv26$i$i$i = 0, $conv286$i = 0, $conv3$i$i$i$i = 0.0, $conv30$i$i$i = 0, $conv4$i$i$i$i = 0.0, $conv45$i$i$i = 0, $conv61$i$i$i = 0, $conv8$i$i$i = 0, $conv85$i$i$i = 0, $count$i$i = 0, $count$i$i76 = 0, $count$i60$i = 0, $dec$i = 0, $distance$i$i = 0, $div$i = 0.0, $div$i$i = 0.0, $div$i$i$i = 0.0, $div$i$i$i$i$i = SIMD_float32x4(0, 0, 0, 0), $div$i$i$i$i104 = 0.0, $div$i$i309$i = 0.0, $div$i$i361$i = 0.0, $div$i$i66 = 0.0, $div$i206$i = 0.0, $div$i213$i$i$i = 0.0, $div$i300$i$i$i = 0.0, $div$i78$i = 0.0, $fcn$i$i = 0, $i$0102$i$i$i = 0, $i$0110$i = 0, $i$0115$i$i = 0, $i$015$i$i$i = 0, $i$015$i$i$i$i = 0, $i$015$i190$i$i$i = 0, $i$015$i317$i$i$i = 0, $i$015$i352$i$i$i = 0, $i$0196$i$i$i = 0, $i$0220$i$i = 0, $i$0437$i = 0, $i$07$i$i$i$i = 0, $i$0764$i$i$i$i = 0, $i138$0197$i$i = 0, $i145$0191$i$i = 0, $i170$0185$i$i = 0, $i19$0113$i$i = 0, $i204$0183$i$i = 0, $i242$0180$i$i = 0, $i314$0445$i = 0, $i4$0724$i$i$i$i = 0, $i42$0217$i$i = 0, $i4604$0717$i$i$i$i = 0, $i53$0108$i$i = 0, $i54$0210$i$i = 0, $i61$0104$i$i = 0, $i77$0200$i$i = 0, $iA$0$i$i$i = 0.0, $iB$0$i$i$i = 0.0, $iB$i$i$i$i = 0, $inc599$i$i$i$i = 0, $inc733$i$i$i$i = 0, $inc79$i$i = 0, $indexA$i$i$0 = 0, $indexA$i$i$1 = 0, $indexB$i$i$0 = 0, $indexB$i$i$1 = 0, $island$i = 0, $island$i23 = 0, $iter$0$i$i = 0, $iter$1$i$i = 0, $j$0117$i = 0, $j$0119$i = 0, $j$013$i$i$i = 0, $j$0187$i$i$i = 0, $j$0205$i$i = 0, $j$0720$i$i$i$i = 0, $j$095$i$i$i = 0, $j628$0715$i$i$i$i = 0, $je$0100$i = 0, $je$0103$i = 0, $joint$i = 0, $jointsOkay$0$off0$lcssa$i$i = 0, $jointsOkay$0$off0190$i$i = 0, $mA$0$i$i$i = 0.0, $mB$0$i$i$i = 0.0, $mB$i$i$i$i = 0, $m_allocator$i10$i$i = 0, $m_allocator$i22$i$i = 0, $m_allowSleep$i = 0, $m_axis$i$i$i = 0, $m_bodies$i = 0, $m_bodies$i41 = 0, $m_bodyCapacity$i = 0, $m_bodyCount$i = 0, $m_bodyCount$i$i = 0, $m_bodyCount$i$i38 = 0, $m_bodyList$i4 = 0, $m_contactCapacity$i = 0, $m_contactCount$i$i = 0, $m_contactCount$i$i39 = 0, $m_contactFilter$i = 0, $m_contactList$i = 0, $m_contactListener$i = 0, $m_contactListener$i26 = 0, $m_contactManager12 = 0, $m_contacts$i$i = 0, $m_contacts$i$i$i = 0, $m_contacts$i$i169 = 0, $m_count$i$i$i$i$i = 0, $m_count$i$i$i176 = 0, $m_count$i$i2$i$i$i = 0, $m_count$i13$i$i = 0, $m_flags = 0, $m_flags$i = 0, $m_flags$i$i$i = 0, $m_flags$i$i43 = 0, $m_flags$i186$i = 0, $m_flags$i230$i = 0, $m_flags$i239$i = 0, $m_flags$i30 = 0, $m_flags$i5 = 0, $m_flags$i62$i = 0, $m_flags$i75$i = 0, $m_flags10$i = 0, $m_flags173$i = 0, $m_flags180$i = 0, $m_flags225$i = 0, $m_flags256$i = 0, $m_flags27$i = 0, $m_flags321$i = 0, $m_flags336$i = 0, $m_flags69$i = 0, $m_flags8$i = 0, $m_flags98$i = 0, $m_inv_dt0 = 0, $m_jointCapacity$i$i = 0, $m_jointCount$i$i = 0, $m_jointCount$i$i40 = 0, $m_joints$i$i = 0, $m_localPoint$i$i$i = 0, $m_nodeCapacity$i$i$i = 0, $m_nodes$i$i$i = 0, $m_positionConstraints$i$i$i$i = 0, $m_positionConstraints$i24$i$i = 0, $m_positions$i$i = 0, $m_positions$i$i$i = 0, $m_positions$i$i162 = 0, $m_positions$i69$i$i$i = 0, $m_proxyB$i$i$i = 0, $m_radius$i$i$i$i$i = 0, $m_radius$i$i3$i$i$i = 0, $m_sleepTime229$i$i = 0, $m_stackAllocator$i = 0, $m_stepComplete = 0, $m_subStepping$i = 0, $m_sweep166$i = 0, $m_sweep167$i = 0, $m_sweep255$i = 0, $m_sweep90$i = 0, $m_sweep94$i = 0, $m_toiCount175$i = 0, $m_type$i$i$i95 = 0, $m_velocities$i$i = 0, $m_velocities$i$i$i = 0, $m_velocities$i$i163 = 0, $m_velocityConstraints$i$i216 = 0, $m_velocityConstraints$i14$i$i = 0, $m_vertices$i$i$i$i$i = 0, $m_vertices$i$i1$i$i$i = 0, $minAlpha$0425$i = 0.0, $minAlpha$1$i = 0.0, $minContact$0426$i = 0, $minContact$1$i = 0, $minSeparation$0$i$i$i = 0.0, $minSeparation$0$lcssa$i$i$i = 0.0, $minSeparation$0$lcssa$i$i$i$i = 0.0, $minSeparation$0197$i$i$i = 0.0, $minSeparation$0766$i$i$i$i = 0.0, $minSeparation$1$lcssa$i$i$i = 0.0, $minSeparation$1188$i$i$i = 0.0, $minSeparation$1725$i$i$i$i = 0.0, $minSeparation$2$lcssa$i$i$i$i = 0.0, $minSeparation$2721$i$i$i$i = 0.0, $minSeparation$3718$i$i$i$i = 0.0, $minSeparation$4$lcssa$i$i$i$i = 0.0, $minSeparation$4716$i$i$i$i = 0.0, $minSeparation$5$i$i$i$i = 0.0, $minSeparation$6$i$i$i$i = 0.0, $minSleepTime$0182$i$i = 0.0, $minSleepTime$1$i$i = 0.0, $mul = 0.0, $mul$i$i$i$i$i = 0.0, $mul$i$i$i$i$i$i = SIMD_float32x4(0, 0, 0, 0), $mul$i$i18$i$i$i = 0.0, $mul$i$i2$i$i$i$i$i = 0.0, $mul$i$i24$i$i = 0.0, $mul$i$i4$i = 0.0, $mul$i$i40$i$i$i = 0.0, $mul$i$i47$i$i$i = 0.0, $mul$i$i474$i$i$i$i = SIMD_float32x4(0, 0, 0, 0), $mul$i$i5$i$i$i = 0.0, $mul$i$i519$i$i$i$i = SIMD_float32x4(0, 0, 0, 0), $mul$i$i522$i$i$i$i = SIMD_float32x4(0, 0, 0, 0), $mul$i$i540$i$i$i$i = SIMD_float32x4(0, 0, 0, 0), $mul$i$i543$i$i$i$i = SIMD_float32x4(0, 0, 0, 0), $mul$i$i549$i$i$i$i = SIMD_float32x4(0, 0, 0, 0), $mul$i$i553$i$i$i$i = SIMD_float32x4(0, 0, 0, 0), $mul$i$i6$i$i$i$i$i = 0.0, $mul$i$i74$i = 0.0, $mul$i$i79$i$i$i = 0.0, $mul$i11$i$i = 0.0, $mul$i150$i$i = 0.0, $mul$i247$i$i$i$i = 0.0, $mul$i301$i$i$i = 0.0, $mul$i335$i$i$i = 0.0, $mul$i365$i$i$i$i = 0.0, $mul$i481$i$i$i$i = SIMD_float32x4(0, 0, 0, 0), $mul$i482$i$i$i$i = SIMD_float32x4(0, 0, 0, 0), $mul$i517$i$i$i$i = SIMD_float32x4(0, 0, 0, 0), $mul$i525$i$i$i$i = SIMD_float32x4(0, 0, 0, 0), $mul$i67$i$i$i105 = 0.0, $mul$i70$i$i = 0.0, $mul$i74$i$i$i = 0.0, $mul$i79$i = 0.0, $mul$i90$i$i$i = 0.0, $mul1$i$i3$i$i = 0.0, $mul1$i$i75$i = 0.0, $mul1$i152$i$i = 0.0, $mul1$i189$i$i$i = 0.0, $mul1$i247$i$i$i = 0.0, $mul1$i249$i$i$i$i = 0.0, $mul1$i337$i$i$i = 0.0, $mul1$i367$i$i$i$i = 0.0, $mul1$i76$i$i$i = 0.0, $mul107$i$i = 0.0, $mul2$i$i$i$i = 0.0, $mul2$i302$i$i$i = 0.0, $mul308$i = 0.0, $mul666$i$i$i$i = 0.0, $output$i$sroa$0$0 = 0, $output$i$sroa$0$1 = 0, $output$i$sroa$1$0 = 0.0, $output$i$sroa$1$1 = 0.0, $p$i336$i = 0, $p$i388$i = 0, $point35$i$i$i = 0, $point540$i$i$i$i = 0, $point656$i$i$i$i = 0, $positionSolved$0$off0$i$i = 0, $positionSolved$0$off0$i$i$ph = 0, $positions$i$i = 0, $positions$i$i173 = 0, $positions36$i$i = 0, $proxyB$i = 0, $proxyB10$i$i = 0, $psm$i$i$i = 0, $psm$i$i$i$i = 0, $psm651$i$i$i$i = 0, $pushBackIter$0$i$i = 0, $retval$0$i$i$i = 0.0, $rootIterCount$0$i$i = 0, $rootIterCount$1$i$i = 0, $s$i$i$i$i$i = 0, $s$i$i333$i = 0, $s$i$i385$i = 0, $s$i142$i$i$i = 0, $s$i145$i$i$i = 0, $s$i317$i$i$i$i = 0, $s$i320$i$i$i$i = 0, $s$i447$i$i$i$i = 0, $s$i455$i$i$i$i = 0, $s1$0$i$i = 0.0, $s107$i$i$i$i$i = 0, $s2$0$i$i = 0.0, $seed$0114$i = 0, $seed$0116$i = 0, $separation$i$i$i$i$i = 0, $separation36$i$i$i = 0, $separation541$i$i$i$i = 0, $separation658$i$i$i$i = 0, $solveInit$i = 0, $solvePosition$i = 0, $solveVelocity$i = 0, $solverData$i$i = 0, $stackCount$0$be$i = 0, $stackCount$0108$i = 0, $stackCount$1$lcssa$i = 0, $stackCount$193$i = 0, $stackCount$2$i = 0, $stackCount$3102$i = 0, $stackCount$4$i = 0, $step$sroa$1$0 = 0.0, $step$sroa$1$4$idx248 = 0, $step$sroa$1$4$idx249 = 0, $step$sroa$2$8$idx251 = 0, $step$sroa$2$8$idx252 = 0, $step$sroa$3$12$idx254 = 0, $step$sroa$3$12$idx255 = 0, $step$sroa$4$16$idx259 = 0, $step$sroa$4$16$idx260 = 0, $step$sroa$5$20$idx = 0, $step$sroa$5$20$idx263 = 0, $step$sroa$6 = 0, $step$sroa$6$21$raw_idx = 0, $step$sroa$6$21$raw_idx266 = 0, $step45 = 0, $sub$i$i = 0.0, $sub$i$i$i$i81 = 0.0, $sub$i$i$i28$i$i = 0.0, $sub$i$i118$i$i = 0.0, $sub$i$i147$i$i$i = 0.0, $sub$i$i5$i = 0.0, $sub$i$i521$i$i$i$i = SIMD_float32x4(0, 0, 0, 0), $sub$i$i524$i$i$i$i = SIMD_float32x4(0, 0, 0, 0), $sub$i100$i$i$i = 0.0, $sub$i107$i$i$i = 0.0, $sub$i162$i$i$i = 0.0, $sub$i181$i$i$i = 0.0, $sub$i194$i$i$i = 0.0, $sub$i2$i$i = 0.0, $sub$i217$i$i$i = 0.0, $sub$i233$i$i$i = 0.0, $sub$i244$i$i$i = 0.0, $sub$i258$i$i$i$i = 0.0, $sub$i265$i$i$i$i = 0.0, $sub$i269$i$i$i$i = 0.0, $sub$i275$i$i$i$i = 0.0, $sub$i37$i$i$i = 0.0, $sub$i376$i$i$i$i = 0.0, $sub$i383$i$i$i$i = 0.0, $sub$i39$i$i$i = 0.0, $sub$i392$i$i$i$i = 0.0, $sub$i4$i$i$i = 0.0, $sub$i400$i$i$i$i = 0.0, $sub$i472$i$i$i$i = SIMD_float32x4(0, 0, 0, 0), $sub$i477$i$i$i$i = SIMD_float32x4(0, 0, 0, 0), $sub$i479$i$i$i$i = SIMD_float32x4(0, 0, 0, 0), $sub$i535$i$i$i$i = SIMD_float32x4(0, 0, 0, 0), $sub$i536$i$i$i$i = SIMD_float32x4(0, 0, 0, 0), $sub$i537$i$i$i$i = SIMD_float32x4(0, 0, 0, 0), $sub$i538$i$i$i$i = SIMD_float32x4(0, 0, 0, 0), $sub$i539$i$i$i$i = SIMD_float32x4(0, 0, 0, 0), $sub$i542$i$i$i$i = SIMD_float32x4(0, 0, 0, 0), $sub$i548$i$i$i$i = SIMD_float32x4(0, 0, 0, 0), $sub$i552$i$i$i$i = SIMD_float32x4(0, 0, 0, 0), $sub$i63$i$i$i = 0.0, $sub$i64$i$i$i195 = 0.0, $sub$i71$i$i = 0.0, $sub$i81$i$i = 0.0, $sub$i85$i$i$i = 0.0, $sub$i9$i = 0.0, $sub$i92$i$i$i = 0.0, $sub$i94$i$i$i190 = 0.0, $sub18$i$i = 0.0, $sub2$i$i41$i$i = 0.0, $sub2$i164$i$i$i = 0.0, $sub2$i219$i$i$i = 0.0, $sub3$i$i$i$i$i = 0.0, $sub3$i$i$i$i15 = 0.0, $sub3$i$i7$i = 0.0, $sub3$i$i9$i$i = 0.0, $sub3$i103$i$i$i = 0.0, $sub3$i184$i$i$i = 0.0, $sub3$i197$i$i$i = 0.0, $sub3$i236$i$i$i = 0.0, $sub3$i278$i$i$i$i = 0.0, $sub3$i395$i$i$i$i = 0.0, $sub3$i403$i$i$i$i = 0.0, $sub3$i73$i$i = 0.0, $sub31$i$i = 0.0, $sub4$i$i$i$i = 0.0, $sub4$i$i$i$i82 = 0.0, $sub4$i$i$i29$i$i = 0.0, $sub4$i$i$i69$i = 0.0, $sub4$i$i120$i$i = 0.0, $sub4$i$i149$i$i$i = 0.0, $sub51$i$i$i = 0.0, $sub59$i$i = 0.0, $sub6$i$i = 0.0, $sub6$i$i$i = 0.0, $sub6$i$i311$i = 0.0, $sub6$i$i363$i = 0.0, $sub6$i208$i = 0.0, $subStep$i$sroa$1$4$idx347 = 0, $subStep$i$sroa$2$8$idx349 = 0, $subStep$i$sroa$3$12$idx351 = 0, $subStep$i$sroa$4$16$idx354 = 0, $subStep$i$sroa$5$20$idx = 0, $subStep$i$sroa$6 = 0, $subStep$i$sroa$6$21$raw_idx = 0, $sweepA$i = 0, $sweepA$i$i$sroa$0$0$copyload = 0.0, $sweepA$i$i$sroa$0$0$idx = 0, $sweepA$i$i$sroa$0$0$idx405 = 0, $sweepA$i$i$sroa$1$4$copyload = 0.0, $sweepA$i$i$sroa$1$4$idx407 = 0, $sweepA$i$i$sroa$1$4$idx409 = 0, $sweepA$i$i$sroa$2$8$copyload = 0.0, $sweepA$i$i$sroa$2$8$idx411 = 0, $sweepA$i$i$sroa$2$8$idx413 = 0, $sweepA$i$i$sroa$3$12$copyload = 0.0, $sweepA$i$i$sroa$3$12$idx415 = 0, $sweepA$i$i$sroa$3$12$idx417 = 0, $sweepA$i$i$sroa$4$16$copyload = 0.0, $sweepA$i$i$sroa$4$16$idx419 = 0, $sweepA$i$i$sroa$4$16$idx421 = 0, $sweepA$i$i$sroa$5$20$copyload = 0.0, $sweepA$i$i$sroa$5$20$idx423 = 0, $sweepA$i$i$sroa$5$20$idx425 = 0, $sweepA$i$i$sroa$6$24$copyload = 0.0, $sweepA$i$i$sroa$6$24$idx427 = 0, $sweepA$i$i$sroa$6$24$idx430 = 0, $sweepA$i$i$sroa$7$28$idx432 = 0, $sweepA$i$i$sroa$7$28$idx435 = 0, $sweepA$i$i$sroa$8$32$copyload = 0.0, $sweepA$i$i$sroa$8$32$idx437 = 0, $sweepA$i$i$sroa$8$32$idx439 = 0, $sweepB$i = 0, $sweepB$i$i$sroa$0$0$copyload = 0.0, $sweepB$i$i$sroa$0$0$idx = 0, $sweepB$i$i$sroa$0$0$idx368 = 0, $sweepB$i$i$sroa$1$4$copyload = 0.0, $sweepB$i$i$sroa$1$4$idx370 = 0, $sweepB$i$i$sroa$1$4$idx372 = 0, $sweepB$i$i$sroa$2$8$copyload = 0.0, $sweepB$i$i$sroa$2$8$idx374 = 0, $sweepB$i$i$sroa$2$8$idx376 = 0, $sweepB$i$i$sroa$3$12$copyload = 0.0, $sweepB$i$i$sroa$3$12$idx378 = 0, $sweepB$i$i$sroa$3$12$idx380 = 0, $sweepB$i$i$sroa$4$16$copyload = 0.0, $sweepB$i$i$sroa$4$16$idx382 = 0, $sweepB$i$i$sroa$4$16$idx384 = 0, $sweepB$i$i$sroa$5$20$copyload = 0.0, $sweepB$i$i$sroa$5$20$idx386 = 0, $sweepB$i$i$sroa$5$20$idx388 = 0, $sweepB$i$i$sroa$6$24$copyload = 0.0, $sweepB$i$i$sroa$6$24$idx390 = 0, $sweepB$i$i$sroa$6$24$idx393 = 0, $sweepB$i$i$sroa$7$28$idx395 = 0, $sweepB$i$i$sroa$7$28$idx398 = 0, $sweepB$i$i$sroa$8$32$copyload = 0.0, $sweepB$i$i$sroa$8$32$idx400 = 0, $sweepB$i$i$sroa$8$32$idx402 = 0, $t1$0$i$i = 0.0, $t1$1$i$i = 0.0, $t2$0$i$i = 0.0, $t2$1$i$i = 0.0, $t49$0$i$i = 0.0, $tMax$i = 0, $tobool$i$i = 0, $tobool157$i = 0, $transformA$i$i = 0, $transformB$i$i = 0, $useRadii$i$i = 0, $v$i$i$i = 0, $v$sroa$0$0$load172177$i$i = 0.0, $v$sroa$1$4$load174178$i$i = 0.0, $v74$sroa$0$0$load78101$i$i = 0.0, $v74$sroa$1$4$load85102$i$i = 0.0, $v9$i$i$i = 0, $v90$sroa$0$0$load165175$i$i = 0.0, $v90$sroa$1$4$load168176$i$i = 0.0, $vA$sroa$0$0$load8286$lcssa$i$i$i = 0.0, $vA$sroa$0$0$load828690$i$i$i = 0.0, $vA$sroa$1$4$load8387$lcssa$i$i$i = 0.0, $vA$sroa$1$4$load838789$i$i$i = 0.0, $vB$sroa$0$0$load8084$lcssa$i$i$i = 0.0, $vB$sroa$0$0$load808492$i$i$i = 0.0, $vB$sroa$1$4$load8185$lcssa$i$i$i = 0.0, $vB$sroa$1$4$load818591$i$i$i = 0.0, $vararg_buffer501 = 0, $vararg_ptr504 = 0, $vararg_ptr505 = 0, $vararg_ptr506 = 0, $vecinit3$i$i$i$i$i = SIMD_float32x4(0, 0, 0, 0), $vecinit3$i453$i$i$i$i = SIMD_float32x4(0, 0, 0, 0), $vecinit3$i461$i$i$i$i = SIMD_float32x4(0, 0, 0, 0), $vecinit3$i465$i$i$i$i = SIMD_float32x4(0, 0, 0, 0), $vecinit3$i487$i$i$i$i = SIMD_float32x4(0, 0, 0, 0), $vecinit3$i492$i$i$i$i = SIMD_float32x4(0, 0, 0, 0), $vecinit3$i496$i$i$i$i = SIMD_float32x4(0, 0, 0, 0), $vecinit3$i501$i$i$i$i = SIMD_float32x4(0, 0, 0, 0), $vecinit3$i506$i$i$i$i = SIMD_float32x4(0, 0, 0, 0), $vecinit3$i511$i$i$i$i = SIMD_float32x4(0, 0, 0, 0), $vecins13$i$i$i$i$i = SIMD_float32x4(0, 0, 0, 0), $vecins13$i569$i$i$i$i = SIMD_float32x4(0, 0, 0, 0), $vecins272$i$i$i$i$i = SIMD_float32x4(0, 0, 0, 0), $vecins276$i$i$i$i$i = SIMD_float32x4(0, 0, 0, 0), $vecins28$i$i$i$i$i = SIMD_float32x4(0, 0, 0, 0), $vecins28$i582$i$i$i$i = SIMD_float32x4(0, 0, 0, 0), $vecins280$i$i$i$i$i = SIMD_float32x4(0, 0, 0, 0), $vecins284$i$i$i$i$i = SIMD_float32x4(0, 0, 0, 0), $vecins287$i$i$i$i$i = SIMD_float32x4(0, 0, 0, 0), $velocities$i$i = 0, $velocities$i$i174 = 0, $velocities38$i$i = 0, $w$0$i$i = 0.0, $w$i$i$i = 0, $w12$i$i$i = 0, $w78$0$i$i = 0.0, $w94$0$i$i = 0.0, $wA$0$lcssa$i$i$i = 0.0, $wA$093$i$i$i = 0.0, $wB$0$lcssa$i$i$i = 0.0, $wB$094$i$i$i = 0.0, $x$i$i$i = 0, $x$i$i$i$i19 = 0, $x$i$i337$i = 0, $x$i$i389$i = 0, $x$i151$i$i$i = 0, $x$i9$i$i316$i = 0, $x$i9$i$i368$i = 0, $x1$i223$i$i$i = 0, $x120$i$i$i$i$i = 0, $x250$i$i$i$i = 0, $x252$i$i$i$i = 0, $x254$i$i$i$i = 0, $x268$i$i$i$i = 0, $x270$i$i$i$i = 0, $x272$i$i$i$i = 0, $xfA$i$i$i$i = 0, $xfA$sroa$1$8$idx125$i$i = 0, $xfA$sroa$2$12$idx126$i$i = 0, $xfA633$i$i$i$i = 0, $xfB$i$i$i = 0, $xfB$i$i$i$i = 0, $xfB$sroa$1$8$idx122$i$i = 0, $xfB$sroa$2$12$idx123$i$i = 0, $xfB634$i$i$i$i = 0, $y$i$i$i = 0, $y$i$i208$i$i$i = 0, $y$i$i339$i = 0, $y$i$i391$i = 0, $y$i11$i$i318$i = 0, $y$i11$i$i370$i = 0, $y$i226$i$i$i = 0, $y$i284$i$i$i$i = 0, $y$i300$i$i$i$i = 0, $y$i409$i$i$i$i = 0, $y$i429$i$i$i$i = 0, $y103$i$i$i$i$i = 0, $y117$i$i$i$i$i = 0, $y124$i$i$i$i$i = 0, $y259$i$i$i$i = 0, $y261$i$i$i$i = 0, $y263$i$i$i$i = 0, $y265$i$i$i$i = 0, $y277$i$i$i$i = 0, $y279$i$i$i$i = 0, $y281$i$i$i$i = 0, $y283$i$i$i$i = 0, $y92$i$i$i$i$i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1008 | 0;
 $vararg_buffer501 = sp + 144 | 0;
 $xfB$i$i$i = sp + 496 | 0;
 $psm$i$i$i = sp + 472 | 0;
 $contactSolverDef$i$i21 = sp + 808 | 0;
 $contactSolver$i$i22 = sp + 940 | 0;
 $fcn$i$i = sp + 368 | 0;
 $island$i23 = sp + 312 | 0;
 $backup1$i = sp + 632 | 0;
 $backup2$i = sp + 272 | 0;
 $bodies$i = sp + 176 | 0;
 $backup$i = sp;
 $subStep$i$sroa$6 = sp + 64 | 0;
 $mB$i$i$i$i = sp + 80 | 0;
 $iB$i$i$i$i = sp + 48 | 0;
 $xfA$i$i$i$i = sp + 232 | 0;
 $xfB$i$i$i$i = sp + 96 | 0;
 $psm$i$i$i$i = sp + 248 | 0;
 $xfA633$i$i$i$i = sp + 112 | 0;
 $xfB634$i$i$i$i = sp + 128 | 0;
 $psm651$i$i$i$i = sp + 208 | 0;
 $solverData$i$i = sp + 672 | 0;
 $contactSolverDef$i$i = sp + 588 | 0;
 $contactSolver$i$i = sp + 756 | 0;
 $island$i = sp + 704 | 0;
 $step$sroa$6 = sp + 992 | 0;
 $m_flags = $this + 102868 | 0;
 $0 = HEAP32[$m_flags >> 2] | 0;
 if (($0 & 1 | 0) == 0) $2 = $0; else {
  __ZN16b2ContactManager15FindNewContactsEv($this + 102872 | 0);
  $and3 = HEAP32[$m_flags >> 2] & -2;
  HEAP32[$m_flags >> 2] = $and3;
  $2 = $and3;
 }
 HEAP32[$m_flags >> 2] = $2 | 2;
 $cmp = $dt > 0.0;
 if ($cmp) $step$sroa$1$0 = 1.0 / $dt; else $step$sroa$1$0 = 0.0;
 $m_inv_dt0 = $this + 102988 | 0;
 $mul = +HEAPF32[$m_inv_dt0 >> 2] * $dt;
 $4 = HEAP8[$this + 102992 >> 0] | 0;
 $m_contactManager12 = $this + 102872 | 0;
 $m_contactList$i = $this + 102932 | 0;
 $5 = HEAP32[$m_contactList$i >> 2] | 0;
 L7 : do if (($5 | 0) != 0) {
  $m_nodeCapacity$i$i$i = $this + 102884 | 0;
  $m_nodes$i$i$i = $this + 102876 | 0;
  $m_contactListener$i = $this + 102944 | 0;
  $m_contactFilter$i = $this + 102940 | 0;
  $c$032$i = $5;
  L9 : while (1) {
   $6 = HEAP32[$c$032$i + 48 >> 2] | 0;
   $7 = HEAP32[$c$032$i + 52 >> 2] | 0;
   $8 = HEAP32[$c$032$i + 56 >> 2] | 0;
   $9 = HEAP32[$c$032$i + 60 >> 2] | 0;
   $10 = HEAP32[$6 + 8 >> 2] | 0;
   $11 = HEAP32[$7 + 8 >> 2] | 0;
   $m_flags$i = $c$032$i + 4 | 0;
   $12 = HEAP32[$m_flags$i >> 2] | 0;
   L11 : do if (($12 & 8 | 0) == 0) label = 16; else {
    if (!(__ZNK6b2Body13ShouldCollideEPKS_($11, $10) | 0)) {
     $13 = HEAP32[$c$032$i + 12 >> 2] | 0;
     __ZN16b2ContactManager7DestroyEP9b2Contact($m_contactManager12, $c$032$i);
     $c$0$be$i = $13;
     break;
    }
    $14 = HEAP32[$m_contactFilter$i >> 2] | 0;
    do if (($14 | 0) == 0) $17 = $12; else if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$14 >> 2] | 0) + 8 >> 2] & 63]($14, $6, $7) | 0) {
     $17 = HEAP32[$m_flags$i >> 2] | 0;
     break;
    } else {
     $16 = HEAP32[$c$032$i + 12 >> 2] | 0;
     __ZN16b2ContactManager7DestroyEP9b2Contact($m_contactManager12, $c$032$i);
     $c$0$be$i = $16;
     break L11;
    } while (0);
    HEAP32[$m_flags$i >> 2] = $17 & -9;
    label = 16;
   } while (0);
   do if ((label | 0) == 16) {
    label = 0;
    if ((HEAP16[$10 + 4 >> 1] & 2) == 0) $22 = 0; else $22 = (HEAP32[$10 >> 2] | 0) != 0;
    if ((HEAP16[$11 + 4 >> 1] & 2) == 0) $23 = 0; else $23 = (HEAP32[$11 >> 2] | 0) != 0;
    if (!($22 | $23)) {
     $c$0$be$i = HEAP32[$c$032$i + 12 >> 2] | 0;
     break;
    }
    $26 = HEAP32[(HEAP32[$6 + 24 >> 2] | 0) + ($8 * 28 | 0) + 24 >> 2] | 0;
    $28 = HEAP32[(HEAP32[$7 + 24 >> 2] | 0) + ($9 * 28 | 0) + 24 >> 2] | 0;
    if (!(($26 | 0) > -1)) {
     label = 24;
     break L9;
    }
    $29 = HEAP32[$m_nodeCapacity$i$i$i >> 2] | 0;
    if (($29 | 0) <= ($26 | 0)) {
     label = 24;
     break L9;
    }
    $30 = HEAP32[$m_nodes$i$i$i >> 2] | 0;
    if (!(($28 | 0) > -1 & ($29 | 0) > ($28 | 0))) {
     label = 26;
     break L9;
    }
    if ((+HEAPF32[$30 + ($28 * 36 | 0) >> 2] - +HEAPF32[$30 + ($26 * 36 | 0) + 8 >> 2] > 0.0 ? 1 : +HEAPF32[$30 + ($28 * 36 | 0) + 4 >> 2] - +HEAPF32[$30 + ($26 * 36 | 0) + 12 >> 2] > 0.0) | +HEAPF32[$30 + ($26 * 36 | 0) >> 2] - +HEAPF32[$30 + ($28 * 36 | 0) + 8 >> 2] > 0.0 | +HEAPF32[$30 + ($26 * 36 | 0) + 4 >> 2] - +HEAPF32[$30 + ($28 * 36 | 0) + 12 >> 2] > 0.0) {
     $39 = HEAP32[$c$032$i + 12 >> 2] | 0;
     __ZN16b2ContactManager7DestroyEP9b2Contact($m_contactManager12, $c$032$i);
     $c$0$be$i = $39;
     break;
    } else {
     __ZN9b2Contact6UpdateEP17b2ContactListener($c$032$i, HEAP32[$m_contactListener$i >> 2] | 0);
     $c$0$be$i = HEAP32[$c$032$i + 12 >> 2] | 0;
     break;
    }
   } while (0);
   if (($c$0$be$i | 0) == 0) break L7; else $c$032$i = $c$0$be$i;
  }
  if ((label | 0) == 24) ___assert_fail(14568, 14512, 159, 14632); else if ((label | 0) == 26) ___assert_fail(14568, 14512, 159, 14632);
 } while (0);
 HEAPF32[$this + 103e3 >> 2] = 0.0;
 $m_stepComplete = $this + 102995 | 0;
 if (!((HEAP8[$m_stepComplete >> 0] | 0) == 0 | $cmp ^ 1)) {
  $solveInit$i = $this + 103008 | 0;
  HEAPF32[$solveInit$i >> 2] = 0.0;
  $solveVelocity$i = $this + 103012 | 0;
  HEAPF32[$solveVelocity$i >> 2] = 0.0;
  $solvePosition$i = $this + 103016 | 0;
  HEAPF32[$solvePosition$i >> 2] = 0.0;
  $m_bodyCount$i = $this + 102960 | 0;
  $m_stackAllocator$i = $this + 68 | 0;
  __ZN8b2IslandC2EiiiP16b2StackAllocatorP17b2ContactListener($island$i, HEAP32[$m_bodyCount$i >> 2] | 0, HEAP32[$this + 102936 >> 2] | 0, HEAP32[$this + 102964 >> 2] | 0, $m_stackAllocator$i, HEAP32[$this + 102944 >> 2] | 0);
  $m_bodyList$i4 = $this + 102952 | 0;
  $b$0123$i = HEAP32[$m_bodyList$i4 >> 2] | 0;
  if (($b$0123$i | 0) != 0) {
   $b$0125$i = $b$0123$i;
   do {
    $m_flags$i5 = $b$0125$i + 4 | 0;
    HEAP16[$m_flags$i5 >> 1] = HEAPU16[$m_flags$i5 >> 1] & 65534;
    $b$0125$i = HEAP32[$b$0125$i + 96 >> 2] | 0;
   } while (($b$0125$i | 0) != 0);
  }
  $c$0120$i = HEAP32[$m_contactList$i >> 2] | 0;
  if (($c$0120$i | 0) != 0) {
   $c$0122$i = $c$0120$i;
   do {
    $m_flags10$i = $c$0122$i + 4 | 0;
    HEAP32[$m_flags10$i >> 2] = HEAP32[$m_flags10$i >> 2] & -2;
    $c$0122$i = HEAP32[$c$0122$i + 12 >> 2] | 0;
   } while (($c$0122$i | 0) != 0);
  }
  $j$0117$i = HEAP32[$this + 102956 >> 2] | 0;
  if (($j$0117$i | 0) != 0) {
   $j$0119$i = $j$0117$i;
   do {
    HEAP8[$j$0119$i + 60 >> 0] = 0;
    $j$0119$i = HEAP32[$j$0119$i + 12 >> 2] | 0;
   } while (($j$0119$i | 0) != 0);
  }
  $49 = HEAP32[$m_bodyCount$i >> 2] | 0;
  $call$i = __ZN16b2StackAllocator8AllocateEi($m_stackAllocator$i, $49 << 2) | 0;
  $seed$0114$i = HEAP32[$m_bodyList$i4 >> 2] | 0;
  L59 : do if (($seed$0114$i | 0) != 0) {
   $m_bodyCount$i$i = $island$i + 28 | 0;
   $m_contactCount$i$i = $island$i + 36 | 0;
   $m_jointCount$i$i = $island$i + 32 | 0;
   $m_allowSleep$i = $this + 102976 | 0;
   $m_bodies$i = $island$i + 8 | 0;
   $m_jointCapacity$i$i = $island$i + 48 | 0;
   $m_joints$i$i = $island$i + 16 | 0;
   $x$i$i$i = $this + 102968 | 0;
   $y$i$i$i = $this + 102972 | 0;
   $m_positions$i$i = $island$i + 20 | 0;
   $m_velocities$i$i = $island$i + 24 | 0;
   $step$sroa$1$4$idx248 = $solverData$i$i + 4 | 0;
   $step$sroa$2$8$idx251 = $solverData$i$i + 8 | 0;
   $step$sroa$3$12$idx254 = $solverData$i$i + 12 | 0;
   $step$sroa$4$16$idx259 = $solverData$i$i + 16 | 0;
   $step$sroa$5$20$idx = $solverData$i$i + 20 | 0;
   $step$sroa$6$21$raw_idx = $solverData$i$i + 21 | 0;
   $positions$i$i = $solverData$i$i + 24 | 0;
   $velocities$i$i = $solverData$i$i + 28 | 0;
   $step$sroa$1$4$idx249 = $contactSolverDef$i$i + 4 | 0;
   $step$sroa$2$8$idx252 = $contactSolverDef$i$i + 8 | 0;
   $step$sroa$3$12$idx255 = $contactSolverDef$i$i + 12 | 0;
   $step$sroa$4$16$idx260 = $contactSolverDef$i$i + 16 | 0;
   $step$sroa$5$20$idx263 = $contactSolverDef$i$i + 20 | 0;
   $step$sroa$6$21$raw_idx266 = $contactSolverDef$i$i + 21 | 0;
   $m_contacts$i$i = $island$i + 12 | 0;
   $contacts$i$i = $contactSolverDef$i$i + 24 | 0;
   $count$i$i = $contactSolverDef$i$i + 28 | 0;
   $positions36$i$i = $contactSolverDef$i$i + 32 | 0;
   $velocities38$i$i = $contactSolverDef$i$i + 36 | 0;
   $allocator$i$i = $contactSolverDef$i$i + 40 | 0;
   $tobool$i$i = $4 << 24 >> 24 == 0;
   $cmp56209$i$i = ($velocityIterations | 0) > 0;
   $m_count$i13$i$i = $contactSolver$i$i + 48 | 0;
   $m_velocityConstraints$i14$i$i = $contactSolver$i$i + 40 | 0;
   $m_contacts$i$i$i = $contactSolver$i$i + 44 | 0;
   $cmp140196$i$i = ($positionIterations | 0) > 0;
   $m_positions$i69$i$i$i = $contactSolver$i$i + 24 | 0;
   $m_positionConstraints$i$i$i$i = $contactSolver$i$i + 36 | 0;
   $arrayinit$element$i$i$i$i = $contactSolverDef$i$i21 + 4 | 0;
   $arrayinit$element10$i$i$i$i = $contactSolverDef$i$i21 + 8 | 0;
   $arrayinit$element13$i$i$i$i = $contactSolverDef$i$i21 + 12 | 0;
   $arrayinit$element18$i$i$i$i = $contactSolver$i$i22 + 4 | 0;
   $arrayinit$element21$i$i$i$i = $contactSolver$i$i22 + 8 | 0;
   $arrayinit$element24$i$i$i$i = $contactSolver$i$i22 + 12 | 0;
   $arrayinit$element34$i$i$i$i = $fcn$i$i + 8 | 0;
   $arrayinit$element37$i$i$i$i = $fcn$i$i + 16 | 0;
   $arrayinit$element40$i$i$i$i = $fcn$i$i + 24 | 0;
   $arrayinit$element45$i$i$i$i = $island$i23 + 8 | 0;
   $arrayinit$element48$i$i$i$i = $island$i23 + 16 | 0;
   $arrayinit$element51$i$i$i$i = $island$i23 + 24 | 0;
   $arrayinit$element56$i$i$i$i = $backup1$i + 4 | 0;
   $arrayinit$element59$i$i$i$i = $backup1$i + 8 | 0;
   $arrayinit$element62$i$i$i$i = $backup1$i + 12 | 0;
   $arrayinit$element73$i$i$i$i = $backup$i + 4 | 0;
   $arrayinit$element76$i$i$i$i = $backup$i + 8 | 0;
   $arrayinit$element79$i$i$i$i = $backup$i + 12 | 0;
   $arrayinit$element83$i$i$i$i = $subStep$i$sroa$6 + 4 | 0;
   $arrayinit$element86$i$i$i$i = $subStep$i$sroa$6 + 8 | 0;
   $arrayinit$element89$i$i$i$i = $subStep$i$sroa$6 + 12 | 0;
   $arrayinit$element93$i$i$i$i = $mB$i$i$i$i + 4 | 0;
   $arrayinit$element96$i$i$i$i = $mB$i$i$i$i + 8 | 0;
   $arrayinit$element99$i$i$i$i = $mB$i$i$i$i + 12 | 0;
   $arrayinit$element103$i$i$i$i = $iB$i$i$i$i + 4 | 0;
   $arrayinit$element106$i$i$i$i = $iB$i$i$i$i + 8 | 0;
   $arrayinit$element109$i$i$i$i = $iB$i$i$i$i + 12 | 0;
   $arrayidx147$i$i$i$i = $backup2$i + 8 | 0;
   $arrayidx152$i$i$i$i = $backup2$i + 16 | 0;
   $arrayidx157$i$i$i$i = $backup2$i + 24 | 0;
   $arrayidx167$i$i$i$i = $bodies$i + 8 | 0;
   $arrayidx172$i$i$i$i = $bodies$i + 16 | 0;
   $arrayidx177$i$i$i$i = $bodies$i + 24 | 0;
   $x250$i$i$i$i = $fcn$i$i + 24 | 0;
   $x252$i$i$i$i = $fcn$i$i + 16 | 0;
   $x254$i$i$i$i = $fcn$i$i + 8 | 0;
   $y259$i$i$i$i = $fcn$i$i + 28 | 0;
   $y261$i$i$i$i = $fcn$i$i + 20 | 0;
   $y263$i$i$i$i = $fcn$i$i + 12 | 0;
   $y265$i$i$i$i = $fcn$i$i + 4 | 0;
   $x268$i$i$i$i = $island$i23 + 24 | 0;
   $x270$i$i$i$i = $island$i23 + 16 | 0;
   $x272$i$i$i$i = $island$i23 + 8 | 0;
   $y277$i$i$i$i = $island$i23 + 28 | 0;
   $y279$i$i$i$i = $island$i23 + 20 | 0;
   $y281$i$i$i$i = $island$i23 + 12 | 0;
   $y283$i$i$i$i = $island$i23 + 4 | 0;
   $s$i455$i$i$i$i = $xfA$i$i$i$i + 8 | 0;
   $c$i457$i$i$i$i = $xfA$i$i$i$i + 12 | 0;
   $s$i447$i$i$i$i = $xfB$i$i$i$i + 8 | 0;
   $c$i449$i$i$i$i = $xfB$i$i$i$i + 12 | 0;
   $point540$i$i$i$i = $psm$i$i$i$i + 8 | 0;
   $separation541$i$i$i$i = $psm$i$i$i$i + 16 | 0;
   $s$i320$i$i$i$i = $xfA633$i$i$i$i + 8 | 0;
   $c$i322$i$i$i$i = $xfA633$i$i$i$i + 12 | 0;
   $s$i317$i$i$i$i = $xfB634$i$i$i$i + 8 | 0;
   $c$i318$i$i$i$i = $xfB634$i$i$i$i + 12 | 0;
   $point656$i$i$i$i = $psm651$i$i$i$i + 8 | 0;
   $separation658$i$i$i$i = $psm651$i$i$i$i + 16 | 0;
   $y92$i$i$i$i$i = $xfB$i$i$i + 4 | 0;
   $s$i$i$i$i$i = $xfB$i$i$i + 8 | 0;
   $c$i$i$i$i$i = $xfB$i$i$i + 12 | 0;
   $y103$i$i$i$i$i = $psm$i$i$i + 4 | 0;
   $s107$i$i$i$i$i = $psm$i$i$i + 8 | 0;
   $c111$i$i$i$i$i = $psm$i$i$i + 12 | 0;
   $y117$i$i$i$i$i = $vararg_buffer501 + 4 | 0;
   $x120$i$i$i$i$i = $vararg_buffer501 + 8 | 0;
   $y124$i$i$i$i$i = $vararg_buffer501 + 12 | 0;
   $separation$i$i$i$i$i = $vararg_buffer501 + 16 | 0;
   $m_allocator$i10$i$i = $contactSolver$i$i + 32 | 0;
   $m_velocities$i$i$i = $contactSolver$i$i + 28 | 0;
   $seed$0116$i = $seed$0114$i;
   L61 : while (1) {
    $m_flags27$i = $seed$0116$i + 4 | 0;
    $50 = HEAP16[$m_flags27$i >> 1] | 0;
    do if (($50 & 35) == 34) if ((HEAP32[$seed$0116$i >> 2] | 0) != 0) {
     HEAP32[$m_bodyCount$i$i >> 2] = 0;
     HEAP32[$m_contactCount$i$i >> 2] = 0;
     HEAP32[$m_jointCount$i$i >> 2] = 0;
     HEAP32[$call$i >> 2] = $seed$0116$i;
     HEAP16[$m_flags27$i >> 1] = $50 & 65535 | 1;
     $stackCount$0108$i = 1;
     while (1) {
      $dec$i = $stackCount$0108$i + -1 | 0;
      $54 = HEAP32[$call$i + ($dec$i << 2) >> 2] | 0;
      $m_flags$i75$i = $54 + 4 | 0;
      if ((HEAP16[$m_flags$i75$i >> 1] & 32) == 0) {
       label = 43;
       break L61;
      }
      __ZN8b2Island3AddEP6b2Body($island$i, $54);
      $conv$i$i = HEAPU16[$m_flags$i75$i >> 1] | 0;
      if (($conv$i$i & 2 | 0) == 0) {
       HEAP16[$m_flags$i75$i >> 1] = $conv$i$i | 2;
       HEAPF32[$54 + 144 >> 2] = 0.0;
      }
      do if ((HEAP32[$54 >> 2] | 0) == 0) $stackCount$0$be$i = $dec$i; else {
       $ce$091$i = HEAP32[$54 + 112 >> 2] | 0;
       if (($ce$091$i | 0) == 0) $stackCount$1$lcssa$i = $dec$i; else {
        $ce$094$i = $ce$091$i;
        $stackCount$193$i = $dec$i;
        while (1) {
         $58 = HEAP32[$ce$094$i + 4 >> 2] | 0;
         $m_flags69$i = $58 + 4 | 0;
         do if ((HEAP32[$m_flags69$i >> 2] & 7 | 0) == 6) {
          if ((HEAP8[(HEAP32[$58 + 48 >> 2] | 0) + 38 >> 0] | 0) != 0) {
           $stackCount$2$i = $stackCount$193$i;
           break;
          }
          if ((HEAP8[(HEAP32[$58 + 52 >> 2] | 0) + 38 >> 0] | 0) != 0) {
           $stackCount$2$i = $stackCount$193$i;
           break;
          }
          __ZN8b2Island3AddEP9b2Contact($island$i, $58);
          HEAP32[$m_flags69$i >> 2] = HEAP32[$m_flags69$i >> 2] | 1;
          $67 = HEAP32[$ce$094$i >> 2] | 0;
          $m_flags98$i = $67 + 4 | 0;
          $68 = HEAP16[$m_flags98$i >> 1] | 0;
          if (!(($68 & 1) == 0)) {
           $stackCount$2$i = $stackCount$193$i;
           break;
          }
          if (($stackCount$193$i | 0) >= ($49 | 0)) {
           label = 54;
           break L61;
          }
          HEAP32[$call$i + ($stackCount$193$i << 2) >> 2] = $67;
          HEAP16[$m_flags98$i >> 1] = $68 & 65535 | 1;
          $stackCount$2$i = $stackCount$193$i + 1 | 0;
         } else $stackCount$2$i = $stackCount$193$i; while (0);
         $ce$094$i = HEAP32[$ce$094$i + 12 >> 2] | 0;
         if (($ce$094$i | 0) == 0) {
          $stackCount$1$lcssa$i = $stackCount$2$i;
          break;
         } else $stackCount$193$i = $stackCount$2$i;
        }
       }
       $je$0100$i = HEAP32[$54 + 108 >> 2] | 0;
       if (($je$0100$i | 0) == 0) {
        $stackCount$0$be$i = $stackCount$1$lcssa$i;
        break;
       } else {
        $je$0103$i = $je$0100$i;
        $stackCount$3102$i = $stackCount$1$lcssa$i;
       }
       while (1) {
        $joint$i = $je$0103$i + 4 | 0;
        $69 = HEAP32[$joint$i >> 2] | 0;
        do if ((HEAP8[$69 + 60 >> 0] | 0) == 0) {
         $71 = HEAP32[$je$0103$i >> 2] | 0;
         $m_flags$i62$i = $71 + 4 | 0;
         $72 = HEAP16[$m_flags$i62$i >> 1] | 0;
         if (($72 & 32) == 0) {
          $stackCount$4$i = $stackCount$3102$i;
          break;
         }
         $73 = HEAP32[$m_jointCount$i$i >> 2] | 0;
         if (($73 | 0) >= (HEAP32[$m_jointCapacity$i$i >> 2] | 0)) {
          label = 61;
          break L61;
         }
         HEAP32[$m_jointCount$i$i >> 2] = $73 + 1;
         HEAP32[(HEAP32[$m_joints$i$i >> 2] | 0) + ($73 << 2) >> 2] = $69;
         HEAP8[(HEAP32[$joint$i >> 2] | 0) + 60 >> 0] = 1;
         if (!(($72 & 1) == 0)) {
          $stackCount$4$i = $stackCount$3102$i;
          break;
         }
         if (($stackCount$3102$i | 0) >= ($49 | 0)) {
          label = 64;
          break L61;
         }
         HEAP32[$call$i + ($stackCount$3102$i << 2) >> 2] = $71;
         HEAP16[$m_flags$i62$i >> 1] = $72 & 65535 | 1;
         $stackCount$4$i = $stackCount$3102$i + 1 | 0;
        } else $stackCount$4$i = $stackCount$3102$i; while (0);
        $je$0103$i = HEAP32[$je$0103$i + 12 >> 2] | 0;
        if (($je$0103$i | 0) == 0) {
         $stackCount$0$be$i = $stackCount$4$i;
         break;
        } else $stackCount$3102$i = $stackCount$4$i;
       }
      } while (0);
      if (($stackCount$0$be$i | 0) > 0) $stackCount$0108$i = $stackCount$0$be$i; else break;
     }
     $tobool157$i = (HEAP8[$m_allowSleep$i >> 0] | 0) == 0;
     $78 = HEAP32[$m_bodyCount$i$i >> 2] | 0;
     $cmp219$i$i = ($78 | 0) > 0;
     if ($cmp219$i$i) {
      $$pre465 = HEAP32[$m_bodies$i >> 2] | 0;
      $i$0220$i$i = 0;
      do {
       $79 = HEAP32[$$pre465 + ($i$0220$i$i << 2) >> 2] | 0;
       $80 = $79 + 44 | 0;
       $82 = HEAP32[$80 >> 2] | 0;
       $85 = HEAP32[$80 + 4 >> 2] | 0;
       $86 = +HEAPF32[$79 + 56 >> 2];
       $87 = $79 + 64 | 0;
       $93 = +HEAPF32[$87 >> 2];
       $94 = +HEAPF32[$87 + 4 >> 2];
       $95 = +HEAPF32[$79 + 72 >> 2];
       $96 = $79 + 36 | 0;
       HEAP32[$96 >> 2] = $82;
       HEAP32[$96 + 4 >> 2] = $85;
       HEAPF32[$79 + 52 >> 2] = $86;
       if ((HEAP32[$79 >> 2] | 0) == 2) {
        $101 = +HEAPF32[$79 + 140 >> 2];
        $104 = +HEAPF32[$79 + 120 >> 2];
        $sub$i$i = 1.0 - +HEAPF32[$79 + 132 >> 2] * $dt;
        $cond$i$i$i$i = $sub$i$i < 1.0 ? $sub$i$i : 1.0;
        $cond$i2$i$i$i = $cond$i$i$i$i < 0.0 ? 0.0 : $cond$i$i$i$i;
        $sub18$i$i = 1.0 - +HEAPF32[$79 + 136 >> 2] * $dt;
        $cond$i$i156$i$i = $sub18$i$i < 1.0 ? $sub18$i$i : 1.0;
        $v$sroa$0$0$load172177$i$i = ($93 + ($101 * +HEAPF32[$x$i$i$i >> 2] + $104 * +HEAPF32[$79 + 76 >> 2]) * $dt) * $cond$i2$i$i$i;
        $v$sroa$1$4$load174178$i$i = ($94 + ($101 * +HEAPF32[$y$i$i$i >> 2] + $104 * +HEAPF32[$79 + 80 >> 2]) * $dt) * $cond$i2$i$i$i;
        $w$0$i$i = ($95 + +HEAPF32[$79 + 128 >> 2] * $dt * +HEAPF32[$79 + 84 >> 2]) * ($cond$i$i156$i$i < 0.0 ? 0.0 : $cond$i$i156$i$i);
       } else {
        $v$sroa$0$0$load172177$i$i = $93;
        $v$sroa$1$4$load174178$i$i = $94;
        $w$0$i$i = $95;
       }
       $111 = HEAP32[$m_positions$i$i >> 2] | 0;
       $112 = $111 + ($i$0220$i$i * 12 | 0) | 0;
       HEAP32[$112 >> 2] = $82;
       HEAP32[$112 + 4 >> 2] = $85;
       HEAPF32[$111 + ($i$0220$i$i * 12 | 0) + 8 >> 2] = $86;
       $116 = HEAP32[$m_velocities$i$i >> 2] | 0;
       $117 = +$v$sroa$0$0$load172177$i$i;
       $118 = +$v$sroa$1$4$load174178$i$i;
       $119 = $116 + ($i$0220$i$i * 12 | 0) | 0;
       HEAPF32[$119 >> 2] = $117;
       HEAPF32[$119 + 4 >> 2] = $118;
       HEAPF32[$116 + ($i$0220$i$i * 12 | 0) + 8 >> 2] = $w$0$i$i;
       $i$0220$i$i = $i$0220$i$i + 1 | 0;
      } while (($i$0220$i$i | 0) < ($78 | 0));
      $$pre$i$i = $116;
      $123 = $111;
     } else {
      $$pre$i$i = HEAP32[$m_velocities$i$i >> 2] | 0;
      $123 = HEAP32[$m_positions$i$i >> 2] | 0;
     }
     HEAPF32[$solverData$i$i >> 2] = $dt;
     HEAPF32[$step$sroa$1$4$idx248 >> 2] = $step$sroa$1$0;
     HEAPF32[$step$sroa$2$8$idx251 >> 2] = $mul;
     HEAP32[$step$sroa$3$12$idx254 >> 2] = $velocityIterations;
     HEAP32[$step$sroa$4$16$idx259 >> 2] = $positionIterations;
     HEAP8[$step$sroa$5$20$idx >> 0] = $4;
     HEAP8[$step$sroa$6$21$raw_idx + 0 >> 0] = HEAP8[$step$sroa$6 + 0 >> 0] | 0;
     HEAP8[$step$sroa$6$21$raw_idx + 1 >> 0] = HEAP8[$step$sroa$6 + 1 >> 0] | 0;
     HEAP8[$step$sroa$6$21$raw_idx + 2 >> 0] = HEAP8[$step$sroa$6 + 2 >> 0] | 0;
     HEAP32[$positions$i$i >> 2] = $123;
     HEAP32[$velocities$i$i >> 2] = $$pre$i$i;
     HEAPF32[$contactSolverDef$i$i >> 2] = $dt;
     HEAPF32[$step$sroa$1$4$idx249 >> 2] = $step$sroa$1$0;
     HEAPF32[$step$sroa$2$8$idx252 >> 2] = $mul;
     HEAP32[$step$sroa$3$12$idx255 >> 2] = $velocityIterations;
     HEAP32[$step$sroa$4$16$idx260 >> 2] = $positionIterations;
     HEAP8[$step$sroa$5$20$idx263 >> 0] = $4;
     HEAP8[$step$sroa$6$21$raw_idx266 + 0 >> 0] = HEAP8[$step$sroa$6 + 0 >> 0] | 0;
     HEAP8[$step$sroa$6$21$raw_idx266 + 1 >> 0] = HEAP8[$step$sroa$6 + 1 >> 0] | 0;
     HEAP8[$step$sroa$6$21$raw_idx266 + 2 >> 0] = HEAP8[$step$sroa$6 + 2 >> 0] | 0;
     HEAP32[$contacts$i$i >> 2] = HEAP32[$m_contacts$i$i >> 2];
     HEAP32[$count$i$i >> 2] = HEAP32[$m_contactCount$i$i >> 2];
     HEAP32[$positions36$i$i >> 2] = $123;
     HEAP32[$velocities38$i$i >> 2] = $$pre$i$i;
     HEAP32[$allocator$i$i >> 2] = HEAP32[$island$i >> 2];
     __ZN15b2ContactSolverC2EP18b2ContactSolverDef($contactSolver$i$i, $contactSolverDef$i$i);
     __ZN15b2ContactSolver29InitializeVelocityConstraintsEv($contactSolver$i$i);
     if (!$tobool$i$i) {
      $127 = HEAP32[$m_count$i13$i$i >> 2] | 0;
      if (($127 | 0) > 0) {
       $$pre$i$i$i = HEAP32[$m_velocities$i$i$i >> 2] | 0;
       $$pre476 = HEAP32[$m_velocityConstraints$i14$i$i >> 2] | 0;
       $i$0102$i$i$i = 0;
       do {
        $128 = HEAP32[$$pre476 + ($i$0102$i$i$i * 152 | 0) + 112 >> 2] | 0;
        $129 = HEAP32[$$pre476 + ($i$0102$i$i$i * 152 | 0) + 116 >> 2] | 0;
        $130 = +HEAPF32[$$pre476 + ($i$0102$i$i$i * 152 | 0) + 120 >> 2];
        $131 = +HEAPF32[$$pre476 + ($i$0102$i$i$i * 152 | 0) + 128 >> 2];
        $132 = +HEAPF32[$$pre476 + ($i$0102$i$i$i * 152 | 0) + 124 >> 2];
        $133 = +HEAPF32[$$pre476 + ($i$0102$i$i$i * 152 | 0) + 132 >> 2];
        $134 = HEAP32[$$pre476 + ($i$0102$i$i$i * 152 | 0) + 144 >> 2] | 0;
        $v$i$i$i = $$pre$i$i$i + ($128 * 12 | 0) | 0;
        $135 = $v$i$i$i;
        $141 = +HEAPF32[$135 >> 2];
        $142 = +HEAPF32[$135 + 4 >> 2];
        $w$i$i$i = $$pre$i$i$i + ($128 * 12 | 0) + 8 | 0;
        $143 = +HEAPF32[$w$i$i$i >> 2];
        $v9$i$i$i = $$pre$i$i$i + ($129 * 12 | 0) | 0;
        $144 = $v9$i$i$i;
        $150 = +HEAPF32[$144 >> 2];
        $151 = +HEAPF32[$144 + 4 >> 2];
        $w12$i$i$i = $$pre$i$i$i + ($129 * 12 | 0) + 8 | 0;
        $152 = +HEAPF32[$w12$i$i$i >> 2];
        $153 = $$pre476 + ($i$0102$i$i$i * 152 | 0) + 72 | 0;
        $159 = +HEAPF32[$153 >> 2];
        $160 = +HEAPF32[$153 + 4 >> 2];
        if (($134 | 0) > 0) {
         $j$095$i$i$i = 0;
         $vA$sroa$0$0$load828690$i$i$i = $141;
         $vA$sroa$1$4$load838789$i$i$i = $142;
         $vB$sroa$0$0$load808492$i$i$i = $150;
         $vB$sroa$1$4$load818591$i$i$i = $151;
         $wA$093$i$i$i = $143;
         $wB$094$i$i$i = $152;
         while (1) {
          $161 = +HEAPF32[$$pre476 + ($i$0102$i$i$i * 152 | 0) + ($j$095$i$i$i * 36 | 0) + 16 >> 2];
          $162 = +HEAPF32[$$pre476 + ($i$0102$i$i$i * 152 | 0) + ($j$095$i$i$i * 36 | 0) + 20 >> 2];
          $add$i56$i$i$i = $159 * $161 + $160 * $162;
          $add3$i$i$i$i = $160 * $161 - $159 * $162;
          $sub$i2$i$i = $wA$093$i$i$i - $131 * (+HEAPF32[$$pre476 + ($i$0102$i$i$i * 152 | 0) + ($j$095$i$i$i * 36 | 0) >> 2] * $add3$i$i$i$i - +HEAPF32[$$pre476 + ($i$0102$i$i$i * 152 | 0) + ($j$095$i$i$i * 36 | 0) + 4 >> 2] * $add$i56$i$i$i);
          $sub$i39$i$i$i = $vA$sroa$0$0$load828690$i$i$i - $130 * $add$i56$i$i$i;
          $sub4$i$i$i$i = $vA$sroa$1$4$load838789$i$i$i - $130 * $add3$i$i$i$i;
          $add$i4$i$i = $wB$094$i$i$i + $133 * ($add3$i$i$i$i * +HEAPF32[$$pre476 + ($i$0102$i$i$i * 152 | 0) + ($j$095$i$i$i * 36 | 0) + 8 >> 2] - $add$i56$i$i$i * +HEAPF32[$$pre476 + ($i$0102$i$i$i * 152 | 0) + ($j$095$i$i$i * 36 | 0) + 12 >> 2]);
          $add$i$i6$i$i = $vB$sroa$0$0$load808492$i$i$i + $132 * $add$i56$i$i$i;
          $add4$i$i$i$i = $vB$sroa$1$4$load818591$i$i$i + $132 * $add3$i$i$i$i;
          $j$095$i$i$i = $j$095$i$i$i + 1 | 0;
          if (($j$095$i$i$i | 0) == ($134 | 0)) {
           $vA$sroa$0$0$load8286$lcssa$i$i$i = $sub$i39$i$i$i;
           $vA$sroa$1$4$load8387$lcssa$i$i$i = $sub4$i$i$i$i;
           $vB$sroa$0$0$load8084$lcssa$i$i$i = $add$i$i6$i$i;
           $vB$sroa$1$4$load8185$lcssa$i$i$i = $add4$i$i$i$i;
           $wA$0$lcssa$i$i$i = $sub$i2$i$i;
           $wB$0$lcssa$i$i$i = $add$i4$i$i;
           break;
          } else {
           $vA$sroa$0$0$load828690$i$i$i = $sub$i39$i$i$i;
           $vA$sroa$1$4$load838789$i$i$i = $sub4$i$i$i$i;
           $vB$sroa$0$0$load808492$i$i$i = $add$i$i6$i$i;
           $vB$sroa$1$4$load818591$i$i$i = $add4$i$i$i$i;
           $wA$093$i$i$i = $sub$i2$i$i;
           $wB$094$i$i$i = $add$i4$i$i;
          }
         }
        } else {
         $vA$sroa$0$0$load8286$lcssa$i$i$i = $141;
         $vA$sroa$1$4$load8387$lcssa$i$i$i = $142;
         $vB$sroa$0$0$load8084$lcssa$i$i$i = $150;
         $vB$sroa$1$4$load8185$lcssa$i$i$i = $151;
         $wA$0$lcssa$i$i$i = $143;
         $wB$0$lcssa$i$i$i = $152;
        }
        $168 = +$vA$sroa$0$0$load8286$lcssa$i$i$i;
        $169 = +$vA$sroa$1$4$load8387$lcssa$i$i$i;
        $170 = $v$i$i$i;
        HEAPF32[$170 >> 2] = $168;
        HEAPF32[$170 + 4 >> 2] = $169;
        HEAPF32[$w$i$i$i >> 2] = $wA$0$lcssa$i$i$i;
        $174 = +$vB$sroa$0$0$load8084$lcssa$i$i$i;
        $175 = +$vB$sroa$1$4$load8185$lcssa$i$i$i;
        $176 = $v9$i$i$i;
        HEAPF32[$176 >> 2] = $174;
        HEAPF32[$176 + 4 >> 2] = $175;
        HEAPF32[$w12$i$i$i >> 2] = $wB$0$lcssa$i$i$i;
        $i$0102$i$i$i = $i$0102$i$i$i + 1 | 0;
       } while (($i$0102$i$i$i | 0) < ($127 | 0));
      }
     }
     $180 = HEAP32[$m_jointCount$i$i >> 2] | 0;
     $cmp44216$i$i = ($180 | 0) > 0;
     if ($cmp44216$i$i) {
      $$pre468 = HEAP32[$m_joints$i$i >> 2] | 0;
      $i42$0217$i$i = 0;
      do {
       $181 = HEAP32[$$pre468 + ($i42$0217$i$i << 2) >> 2] | 0;
       FUNCTION_TABLE_vii[HEAP32[(HEAP32[$181 >> 2] | 0) + 28 >> 2] & 127]($181, $solverData$i$i);
       $i42$0217$i$i = $i42$0217$i$i + 1 | 0;
      } while (($i42$0217$i$i | 0) < ($180 | 0));
     }
     if ($cmp56209$i$i) {
      $i54$0210$i$i = 0;
      do {
       if ($cmp44216$i$i) {
        $$pre494 = HEAP32[$m_joints$i$i >> 2] | 0;
        $j$0205$i$i = 0;
        do {
         $183 = HEAP32[$$pre494 + ($j$0205$i$i << 2) >> 2] | 0;
         FUNCTION_TABLE_vii[HEAP32[(HEAP32[$183 >> 2] | 0) + 32 >> 2] & 127]($183, $solverData$i$i);
         $j$0205$i$i = $j$0205$i$i + 1 | 0;
        } while (($j$0205$i$i | 0) < ($180 | 0));
       }
       __ZN15b2ContactSolver24SolveVelocityConstraintsEv($contactSolver$i$i);
       $i54$0210$i$i = $i54$0210$i$i + 1 | 0;
      } while (($i54$0210$i$i | 0) < ($velocityIterations | 0));
     }
     $185 = HEAP32[$m_count$i13$i$i >> 2] | 0;
     if (($185 | 0) > 0) {
      $186 = HEAP32[$m_velocityConstraints$i14$i$i >> 2] | 0;
      $187 = HEAP32[$m_contacts$i$i$i >> 2] | 0;
      $i$015$i$i$i = 0;
      do {
       $189 = HEAP32[$187 + (HEAP32[$186 + ($i$015$i$i$i * 152 | 0) + 148 >> 2] << 2) >> 2] | 0;
       $190 = HEAP32[$186 + ($i$015$i$i$i * 152 | 0) + 144 >> 2] | 0;
       if (($190 | 0) > 0) {
        $j$013$i$i$i = 0;
        do {
         HEAPF32[$189 + ($j$013$i$i$i * 20 | 0) + 72 >> 2] = +HEAPF32[$186 + ($i$015$i$i$i * 152 | 0) + ($j$013$i$i$i * 36 | 0) + 16 >> 2];
         HEAPF32[$189 + ($j$013$i$i$i * 20 | 0) + 76 >> 2] = +HEAPF32[$186 + ($i$015$i$i$i * 152 | 0) + ($j$013$i$i$i * 36 | 0) + 20 >> 2];
         $j$013$i$i$i = $j$013$i$i$i + 1 | 0;
        } while (($j$013$i$i$i | 0) < ($190 | 0));
       }
       $i$015$i$i$i = $i$015$i$i$i + 1 | 0;
      } while (($i$015$i$i$i | 0) < ($185 | 0));
     }
     if ($cmp219$i$i) {
      $193 = $123;
      $203 = $$pre$i$i;
      $i77$0200$i$i = 0;
      do {
       $c85$i$i = $193 + ($i77$0200$i$i * 12 | 0) | 0;
       $194 = $c85$i$i;
       $200 = +HEAPF32[$194 >> 2];
       $201 = +HEAPF32[$194 + 4 >> 2];
       $202 = +HEAPF32[$193 + ($i77$0200$i$i * 12 | 0) + 8 >> 2];
       $204 = $203 + ($i77$0200$i$i * 12 | 0) | 0;
       $210 = +HEAPF32[$204 >> 2];
       $211 = +HEAPF32[$204 + 4 >> 2];
       $212 = +HEAPF32[$203 + ($i77$0200$i$i * 12 | 0) + 8 >> 2];
       $mul$i150$i$i = $210 * $dt;
       $mul1$i152$i$i = $211 * $dt;
       $add$i148$i$i = $mul$i150$i$i * $mul$i150$i$i + $mul1$i152$i$i * $mul1$i152$i$i;
       if ($add$i148$i$i > 4.0) {
        $div$i$i = 2.0 / +Math_sqrt(+$add$i148$i$i);
        $v90$sroa$0$0$load165175$i$i = $210 * $div$i$i;
        $v90$sroa$1$4$load168176$i$i = $211 * $div$i$i;
       } else {
        $v90$sroa$0$0$load165175$i$i = $210;
        $v90$sroa$1$4$load168176$i$i = $211;
       }
       $mul107$i$i = $212 * $dt;
       if ($mul107$i$i * $mul107$i$i > 2.4674012660980225) {
        if ($mul107$i$i > 0.0) $cond$i129$i$i = $mul107$i$i; else $cond$i129$i$i = -$mul107$i$i;
        $w94$0$i$i = $212 * (1.5707963705062866 / $cond$i129$i$i);
       } else $w94$0$i$i = $212;
       $213 = +($200 + $v90$sroa$0$0$load165175$i$i * $dt);
       $214 = +($201 + $v90$sroa$1$4$load168176$i$i * $dt);
       $215 = $c85$i$i;
       HEAPF32[$215 >> 2] = $213;
       HEAPF32[$215 + 4 >> 2] = $214;
       $193 = HEAP32[$m_positions$i$i >> 2] | 0;
       HEAPF32[$193 + ($i77$0200$i$i * 12 | 0) + 8 >> 2] = $202 + $w94$0$i$i * $dt;
       $203 = HEAP32[$m_velocities$i$i >> 2] | 0;
       $221 = +$v90$sroa$0$0$load165175$i$i;
       $222 = +$v90$sroa$1$4$load168176$i$i;
       $223 = $203 + ($i77$0200$i$i * 12 | 0) | 0;
       HEAPF32[$223 >> 2] = $221;
       HEAPF32[$223 + 4 >> 2] = $222;
       HEAPF32[$203 + ($i77$0200$i$i * 12 | 0) + 8 >> 2] = $w94$0$i$i;
       $i77$0200$i$i = $i77$0200$i$i + 1 | 0;
       $227 = HEAP32[$m_bodyCount$i$i >> 2] | 0;
      } while (($i77$0200$i$i | 0) < ($227 | 0));
      $1533 = $227;
     } else $1533 = $78;
     if ($cmp140196$i$i) {
      $i138$0197$i$i = 0;
      while (1) {
       HEAP32[2102] = (HEAP32[2102] | 0) + 1;
       HEAP32[2184] = 16224;
       $call$i$i$i33$i$i = +_emscripten_get_now();
       $mul$i$i$i$i$i = (+(~~$call$i$i$i33$i$i >>> 0 >>> 0) + 4294967296.0 * +((+Math_abs($call$i$i$i33$i$i) >= 1.0 ? $call$i$i$i33$i$i > 0.0 ? (Math_min(+Math_floor($call$i$i$i33$i$i / 4294967296.0), 4294967295.0) | 0) >>> 0 : ~~+Math_ceil(($call$i$i$i33$i$i - +(~~$call$i$i$i33$i$i >>> 0)) / 4294967296.0) >>> 0 : 0) >>> 0)) * 1.0e3;
       $233 = +Math_abs($mul$i$i$i$i$i) >= 1.0 ? $mul$i$i$i$i$i > 0.0 ? (Math_min(+Math_floor($mul$i$i$i$i$i / 4294967296.0), 4294967295.0) | 0) >>> 0 : ~~+Math_ceil(($mul$i$i$i$i$i - +(~~$mul$i$i$i$i$i >>> 0)) / 4294967296.0) >>> 0 : 0;
       $234 = 8744;
       HEAP32[$234 >> 2] = ~~$mul$i$i$i$i$i >>> 0;
       HEAP32[$234 + 4 >> 2] = $233;
       if ((HEAP8[8344] | 0) == 0) {
        HEAP32[2196] = 16280;
        $call$i$i3742$i$i$i = +_emscripten_get_now();
        $mul$i$i40$i$i$i = (+(~~$call$i$i3742$i$i$i >>> 0 >>> 0) + 4294967296.0 * +((+Math_abs($call$i$i3742$i$i$i) >= 1.0 ? $call$i$i3742$i$i$i > 0.0 ? (Math_min(+Math_floor($call$i$i3742$i$i$i / 4294967296.0), 4294967295.0) | 0) >>> 0 : ~~+Math_ceil(($call$i$i3742$i$i$i - +(~~$call$i$i3742$i$i$i >>> 0)) / 4294967296.0) >>> 0 : 0) >>> 0)) * 1.0e3;
        $756 = +Math_abs($mul$i$i40$i$i$i) >= 1.0 ? $mul$i$i40$i$i$i > 0.0 ? (Math_min(+Math_floor($mul$i$i40$i$i$i / 4294967296.0), 4294967295.0) | 0) >>> 0 : ~~+Math_ceil(($mul$i$i40$i$i$i - +(~~$mul$i$i40$i$i$i >>> 0)) / 4294967296.0) >>> 0 : 0;
        $757 = 8792;
        HEAP32[$757 >> 2] = ~~$mul$i$i40$i$i$i >>> 0;
        HEAP32[$757 + 4 >> 2] = $756;
        $call11$i$i$i = +__ZN15b2ContactSolver11SolveHelperEii($contactSolver$i$i, 0, HEAP32[$m_count$i13$i$i >> 2] | 0);
        $call$i$i4454$i$i$i = +_emscripten_get_now();
        $mul$i$i47$i$i$i = (+(~~$call$i$i4454$i$i$i >>> 0 >>> 0) + 4294967296.0 * +((+Math_abs($call$i$i4454$i$i$i) >= 1.0 ? $call$i$i4454$i$i$i > 0.0 ? (Math_min(+Math_floor($call$i$i4454$i$i$i / 4294967296.0), 4294967295.0) | 0) >>> 0 : ~~+Math_ceil(($call$i$i4454$i$i$i - +(~~$call$i$i4454$i$i$i >>> 0)) / 4294967296.0) >>> 0 : 0) >>> 0)) * 1.0e3;
        $766 = +Math_abs($mul$i$i47$i$i$i) >= 1.0 ? $mul$i$i47$i$i$i > 0.0 ? (Math_min(+Math_floor($mul$i$i47$i$i$i / 4294967296.0), 4294967295.0) | 0) >>> 0 : ~~+Math_ceil(($mul$i$i47$i$i$i - +(~~$mul$i$i47$i$i$i >>> 0)) / 4294967296.0) >>> 0 : 0;
        $767 = 8792;
        $773 = 8800;
        $779 = _i64Subtract(HEAP32[$773 >> 2] | 0, HEAP32[$773 + 4 >> 2] | 0, HEAP32[$767 >> 2] | 0, HEAP32[$767 + 4 >> 2] | 0) | 0;
        $781 = _i64Add($779 | 0, tempRet0 | 0, ~~$mul$i$i47$i$i$i >>> 0 | 0, $766 | 0) | 0;
        $783 = 8800;
        HEAP32[$783 >> 2] = $781;
        HEAP32[$783 + 4 >> 2] = tempRet0;
        $minSeparation$0$i$i$i = $call11$i$i$i;
       } else {
        HEAP32[2190] = 16248;
        $call$i$i27$i$i$i = +_emscripten_get_now();
        $mul$i$i5$i$i$i = (+(~~$call$i$i27$i$i$i >>> 0 >>> 0) + 4294967296.0 * +((+Math_abs($call$i$i27$i$i$i) >= 1.0 ? $call$i$i27$i$i$i > 0.0 ? (Math_min(+Math_floor($call$i$i27$i$i$i / 4294967296.0), 4294967295.0) | 0) >>> 0 : ~~+Math_ceil(($call$i$i27$i$i$i - +(~~$call$i$i27$i$i$i >>> 0)) / 4294967296.0) >>> 0 : 0) >>> 0)) * 1.0e3;
        $243 = +Math_abs($mul$i$i5$i$i$i) >= 1.0 ? $mul$i$i5$i$i$i > 0.0 ? (Math_min(+Math_floor($mul$i$i5$i$i$i / 4294967296.0), 4294967295.0) | 0) >>> 0 : ~~+Math_ceil(($mul$i$i5$i$i$i - +(~~$mul$i$i5$i$i$i >>> 0)) / 4294967296.0) >>> 0 : 0;
        $244 = 8768;
        HEAP32[$244 >> 2] = ~~$mul$i$i5$i$i$i >>> 0;
        HEAP32[$244 + 4 >> 2] = $243;
        $call$i323$i$i$i$i = SIMD_float32x4(SIMD_float32x4_fromInt32x4Bits(SIMD_int32x4(SIMD_int32x4(-2147483648, -2147483648, -2147483648, -2147483648))));
        $248 = HEAP32[$m_count$i13$i$i >> 2] | 0;
        if (($248 + -3 | 0) > 0) {
         $i$0764$i$i$i$i = 0;
         $minSeparation$0766$i$i$i$i = 0.0;
         while (1) {
          $249 = HEAP32[$m_positionConstraints$i$i$i$i >> 2] | 0;
          $add$ptr$i$i$i$i = $249 + ($i$0764$i$i$i$i * 88 | 0) | 0;
          $250 = HEAP32[$249 + ($i$0764$i$i$i$i * 88 | 0) + 32 >> 2] | 0;
          HEAP32[$contactSolverDef$i$i21 >> 2] = $250;
          $add$ptr$sum211$i$i$i$i = $i$0764$i$i$i$i | 1;
          $251 = HEAP32[$249 + ($add$ptr$sum211$i$i$i$i * 88 | 0) + 32 >> 2] | 0;
          HEAP32[$arrayinit$element$i$i$i$i >> 2] = $251;
          $add$ptr$sum212$i$i$i$i = $i$0764$i$i$i$i | 2;
          $252 = HEAP32[$249 + ($add$ptr$sum212$i$i$i$i * 88 | 0) + 32 >> 2] | 0;
          HEAP32[$arrayinit$element10$i$i$i$i >> 2] = $252;
          $add$ptr$sum213$i$i$i$i = $i$0764$i$i$i$i | 3;
          $253 = HEAP32[$249 + ($add$ptr$sum213$i$i$i$i * 88 | 0) + 32 >> 2] | 0;
          HEAP32[$arrayinit$element13$i$i$i$i >> 2] = $253;
          $254 = HEAP32[$249 + ($i$0764$i$i$i$i * 88 | 0) + 36 >> 2] | 0;
          HEAP32[$contactSolver$i$i22 >> 2] = $254;
          $255 = HEAP32[$249 + ($add$ptr$sum211$i$i$i$i * 88 | 0) + 36 >> 2] | 0;
          HEAP32[$arrayinit$element18$i$i$i$i >> 2] = $255;
          $256 = HEAP32[$249 + ($add$ptr$sum212$i$i$i$i * 88 | 0) + 36 >> 2] | 0;
          HEAP32[$arrayinit$element21$i$i$i$i >> 2] = $256;
          $257 = HEAP32[$249 + ($add$ptr$sum213$i$i$i$i * 88 | 0) + 36 >> 2] | 0;
          HEAP32[$arrayinit$element24$i$i$i$i >> 2] = $257;
          L160 : do if (__ZN15b2ContactSolver12IndexOverlapEPiS0_($contactSolverDef$i$i21, $contactSolver$i$i22) | 0) {
           HEAP32[2114] = (HEAP32[2114] | 0) + 1;
           $call29$i10$i$i$i = +__ZN15b2ContactSolver11SolveHelperEii($contactSolver$i$i, $i$0764$i$i$i$i, 4);
           $minSeparation$5$i$i$i$i = $minSeparation$0766$i$i$i$i < $call29$i10$i$i$i ? $minSeparation$0766$i$i$i$i : $call29$i10$i$i$i;
          } else {
           HEAP32[2116] = (HEAP32[2116] | 0) + 1;
           $260 = $249 + ($i$0764$i$i$i$i * 88 | 0) + 48 | 0;
           $265 = HEAP32[$260 + 4 >> 2] | 0;
           $266 = $fcn$i$i;
           HEAP32[$266 >> 2] = HEAP32[$260 >> 2];
           HEAP32[$266 + 4 >> 2] = $265;
           $270 = $249 + ($add$ptr$sum211$i$i$i$i * 88 | 0) + 48 | 0;
           $275 = HEAP32[$270 + 4 >> 2] | 0;
           $276 = $arrayinit$element34$i$i$i$i;
           HEAP32[$276 >> 2] = HEAP32[$270 >> 2];
           HEAP32[$276 + 4 >> 2] = $275;
           $280 = $249 + ($add$ptr$sum212$i$i$i$i * 88 | 0) + 48 | 0;
           $285 = HEAP32[$280 + 4 >> 2] | 0;
           $286 = $arrayinit$element37$i$i$i$i;
           HEAP32[$286 >> 2] = HEAP32[$280 >> 2];
           HEAP32[$286 + 4 >> 2] = $285;
           $290 = $249 + ($add$ptr$sum213$i$i$i$i * 88 | 0) + 48 | 0;
           $295 = HEAP32[$290 + 4 >> 2] | 0;
           $296 = $arrayinit$element40$i$i$i$i;
           HEAP32[$296 >> 2] = HEAP32[$290 >> 2];
           HEAP32[$296 + 4 >> 2] = $295;
           $300 = $249 + ($i$0764$i$i$i$i * 88 | 0) + 56 | 0;
           $305 = HEAP32[$300 + 4 >> 2] | 0;
           $306 = $island$i23;
           HEAP32[$306 >> 2] = HEAP32[$300 >> 2];
           HEAP32[$306 + 4 >> 2] = $305;
           $310 = $249 + ($add$ptr$sum211$i$i$i$i * 88 | 0) + 56 | 0;
           $315 = HEAP32[$310 + 4 >> 2] | 0;
           $316 = $arrayinit$element45$i$i$i$i;
           HEAP32[$316 >> 2] = HEAP32[$310 >> 2];
           HEAP32[$316 + 4 >> 2] = $315;
           $320 = $249 + ($add$ptr$sum212$i$i$i$i * 88 | 0) + 56 | 0;
           $325 = HEAP32[$320 + 4 >> 2] | 0;
           $326 = $arrayinit$element48$i$i$i$i;
           HEAP32[$326 >> 2] = HEAP32[$320 >> 2];
           HEAP32[$326 + 4 >> 2] = $325;
           $330 = $249 + ($add$ptr$sum213$i$i$i$i * 88 | 0) + 56 | 0;
           $335 = HEAP32[$330 + 4 >> 2] | 0;
           $336 = $arrayinit$element51$i$i$i$i;
           HEAP32[$336 >> 2] = HEAP32[$330 >> 2];
           HEAP32[$336 + 4 >> 2] = $335;
           $340 = HEAP32[$249 + ($i$0764$i$i$i$i * 88 | 0) + 84 >> 2] | 0;
           HEAP32[$backup1$i >> 2] = $340;
           $341 = HEAP32[$249 + ($add$ptr$sum211$i$i$i$i * 88 | 0) + 84 >> 2] | 0;
           HEAP32[$arrayinit$element56$i$i$i$i >> 2] = $341;
           $342 = HEAP32[$249 + ($add$ptr$sum212$i$i$i$i * 88 | 0) + 84 >> 2] | 0;
           HEAP32[$arrayinit$element59$i$i$i$i >> 2] = $342;
           $343 = HEAP32[$249 + ($add$ptr$sum213$i$i$i$i * 88 | 0) + 84 >> 2] | 0;
           HEAP32[$arrayinit$element62$i$i$i$i >> 2] = $343;
           HEAPF32[$backup$i >> 2] = +HEAPF32[$249 + ($i$0764$i$i$i$i * 88 | 0) + 40 >> 2];
           HEAPF32[$arrayinit$element73$i$i$i$i >> 2] = +HEAPF32[$249 + ($add$ptr$sum211$i$i$i$i * 88 | 0) + 40 >> 2];
           HEAPF32[$arrayinit$element76$i$i$i$i >> 2] = +HEAPF32[$249 + ($add$ptr$sum212$i$i$i$i * 88 | 0) + 40 >> 2];
           HEAPF32[$arrayinit$element79$i$i$i$i >> 2] = +HEAPF32[$249 + ($add$ptr$sum213$i$i$i$i * 88 | 0) + 40 >> 2];
           HEAPF32[$subStep$i$sroa$6 >> 2] = +HEAPF32[$249 + ($i$0764$i$i$i$i * 88 | 0) + 64 >> 2];
           HEAPF32[$arrayinit$element83$i$i$i$i >> 2] = +HEAPF32[$249 + ($add$ptr$sum211$i$i$i$i * 88 | 0) + 64 >> 2];
           HEAPF32[$arrayinit$element86$i$i$i$i >> 2] = +HEAPF32[$249 + ($add$ptr$sum212$i$i$i$i * 88 | 0) + 64 >> 2];
           HEAPF32[$arrayinit$element89$i$i$i$i >> 2] = +HEAPF32[$249 + ($add$ptr$sum213$i$i$i$i * 88 | 0) + 64 >> 2];
           HEAPF32[$mB$i$i$i$i >> 2] = +HEAPF32[$249 + ($i$0764$i$i$i$i * 88 | 0) + 44 >> 2];
           HEAPF32[$arrayinit$element93$i$i$i$i >> 2] = +HEAPF32[$249 + ($add$ptr$sum211$i$i$i$i * 88 | 0) + 44 >> 2];
           HEAPF32[$arrayinit$element96$i$i$i$i >> 2] = +HEAPF32[$249 + ($add$ptr$sum212$i$i$i$i * 88 | 0) + 44 >> 2];
           HEAPF32[$arrayinit$element99$i$i$i$i >> 2] = +HEAPF32[$249 + ($add$ptr$sum213$i$i$i$i * 88 | 0) + 44 >> 2];
           HEAPF32[$iB$i$i$i$i >> 2] = +HEAPF32[$249 + ($i$0764$i$i$i$i * 88 | 0) + 68 >> 2];
           HEAPF32[$arrayinit$element103$i$i$i$i >> 2] = +HEAPF32[$249 + ($add$ptr$sum211$i$i$i$i * 88 | 0) + 68 >> 2];
           HEAPF32[$arrayinit$element106$i$i$i$i >> 2] = +HEAPF32[$249 + ($add$ptr$sum212$i$i$i$i * 88 | 0) + 68 >> 2];
           HEAPF32[$arrayinit$element109$i$i$i$i >> 2] = +HEAPF32[$249 + ($add$ptr$sum213$i$i$i$i * 88 | 0) + 68 >> 2];
           if (!(($340 | 0) == ($341 | 0) & ($340 | 0) == ($342 | 0) & ($340 | 0) == ($343 | 0))) {
            HEAP32[2106] = (HEAP32[2106] | 0) + 1;
            $$pre798$i$i$i$i = HEAP32[$m_positions$i69$i$i$i >> 2] | 0;
            $636 = $250;
            $648 = $254;
            $660 = $340;
            $i4604$0717$i$i$i$i = 0;
            $minSeparation$3718$i$i$i$i = $minSeparation$0766$i$i$i$i;
            while (1) {
             $arrayidx608$i$i$i$i = $backup2$i + ($i4604$0717$i$i$i$i << 3) | 0;
             $arrayidx609$i$i$i$i = $contactSolverDef$i$i21 + ($i4604$0717$i$i$i$i << 2) | 0;
             $c612$i$i$i$i = $$pre798$i$i$i$i + ($636 * 12 | 0) | 0;
             $637 = $c612$i$i$i$i;
             $639 = HEAP32[$637 >> 2] | 0;
             $642 = HEAP32[$637 + 4 >> 2] | 0;
             $643 = $arrayidx608$i$i$i$i;
             HEAP32[$643 >> 2] = $639;
             HEAP32[$643 + 4 >> 2] = $642;
             $647 = +HEAPF32[$$pre798$i$i$i$i + ($636 * 12 | 0) + 8 >> 2];
             $arrayidx618$i$i$i$i = $bodies$i + ($i4604$0717$i$i$i$i << 3) | 0;
             $arrayidx619$i$i$i$i = $contactSolver$i$i22 + ($i4604$0717$i$i$i$i << 2) | 0;
             $649 = $$pre798$i$i$i$i + ($648 * 12 | 0) | 0;
             $651 = HEAP32[$649 >> 2] | 0;
             $654 = HEAP32[$649 + 4 >> 2] | 0;
             $655 = $arrayidx618$i$i$i$i;
             HEAP32[$655 >> 2] = $651;
             HEAP32[$655 + 4 >> 2] = $654;
             $659 = +HEAPF32[$$pre798$i$i$i$i + ($648 * 12 | 0) + 8 >> 2];
             if (($660 | 0) > 0) {
              $661 = (HEAP32[tempDoublePtr >> 2] = $651, +HEAPF32[tempDoublePtr >> 2]);
              $y$i300$i$i$i$i = $backup2$i + ($i4604$0717$i$i$i$i << 3) + 4 | 0;
              $y$i284$i$i$i$i = $bodies$i + ($i4604$0717$i$i$i$i << 3) + 4 | 0;
              $add$ptr652$i$i$i$i = $249 + (($i4604$0717$i$i$i$i + $i$0764$i$i$i$i | 0) * 88 | 0) | 0;
              $$pre802$i$i$i$i = +HEAPF32[$fcn$i$i + ($i4604$0717$i$i$i$i << 3) >> 2];
              $$pre803$i$i$i$i = +HEAPF32[$fcn$i$i + ($i4604$0717$i$i$i$i << 3) + 4 >> 2];
              $$pre805$i$i$i$i = +HEAPF32[$island$i23 + ($i4604$0717$i$i$i$i << 3) >> 2];
              $$pre806$i$i$i$i = +HEAPF32[$island$i23 + ($i4604$0717$i$i$i$i << 3) + 4 >> 2];
              $$pre808$i$i$i$i = +HEAPF32[$backup$i + ($i4604$0717$i$i$i$i << 2) >> 2];
              $$pre809$i$i$i$i = +HEAPF32[$mB$i$i$i$i + ($i4604$0717$i$i$i$i << 2) >> 2];
              $$pre810$i$i$i$i = +HEAPF32[$subStep$i$sroa$6 + ($i4604$0717$i$i$i$i << 2) >> 2];
              $$pre811$i$i$i$i = +HEAPF32[$iB$i$i$i$i + ($i4604$0717$i$i$i$i << 2) >> 2];
              $add675$i$i$i$i = $$pre808$i$i$i$i + $$pre809$i$i$i$i;
              $663 = $647;
              $664 = $659;
              $665 = (HEAP32[tempDoublePtr >> 2] = $639, +HEAPF32[tempDoublePtr >> 2]);
              $666 = +HEAPF32[$y$i300$i$i$i$i >> 2];
              $673 = $661;
              $674 = +HEAPF32[$y$i284$i$i$i$i >> 2];
              $j628$0715$i$i$i$i = 0;
              $minSeparation$4716$i$i$i$i = $minSeparation$3718$i$i$i$i;
              do {
               $call$i319$i$i$i$i = +Math_sin(+$663);
               HEAPF32[$s$i320$i$i$i$i >> 2] = $call$i319$i$i$i$i;
               $call2$i321$i$i$i$i = +Math_cos(+$663);
               HEAPF32[$c$i322$i$i$i$i >> 2] = $call2$i321$i$i$i$i;
               $call$i$i8$i$i$i = +Math_sin(+$664);
               HEAPF32[$s$i317$i$i$i$i >> 2] = $call$i$i8$i$i$i;
               $call2$i$i$i$i$i = +Math_cos(+$664);
               HEAPF32[$c$i318$i$i$i$i >> 2] = $call2$i$i$i$i$i;
               $667 = +($665 - ($call2$i321$i$i$i$i * $$pre802$i$i$i$i - $call$i319$i$i$i$i * $$pre803$i$i$i$i));
               $668 = +($666 - ($$pre802$i$i$i$i * $call$i319$i$i$i$i + $call2$i321$i$i$i$i * $$pre803$i$i$i$i));
               $669 = $xfA633$i$i$i$i;
               HEAPF32[$669 >> 2] = $667;
               HEAPF32[$669 + 4 >> 2] = $668;
               $675 = +($673 - ($call2$i$i$i$i$i * $$pre805$i$i$i$i - $call$i$i8$i$i$i * $$pre806$i$i$i$i));
               $676 = +($674 - ($$pre805$i$i$i$i * $call$i$i8$i$i$i + $call2$i$i$i$i$i * $$pre806$i$i$i$i));
               $677 = $xfB634$i$i$i$i;
               HEAPF32[$677 >> 2] = $675;
               HEAPF32[$677 + 4 >> 2] = $676;
               __ZN24b2PositionSolverManifold10InitializeEP27b2ContactPositionConstraintRK11b2TransformS4_i($psm651$i$i$i$i, $add$ptr652$i$i$i$i, $xfA633$i$i$i$i, $xfB634$i$i$i$i, $j628$0715$i$i$i$i);
               $681 = $psm651$i$i$i$i;
               $687 = +HEAPF32[$681 >> 2];
               $688 = +HEAPF32[$681 + 4 >> 2];
               $689 = $point656$i$i$i$i;
               $695 = +HEAPF32[$689 >> 2];
               $696 = +HEAPF32[$689 + 4 >> 2];
               $697 = +HEAPF32[$separation658$i$i$i$i >> 2];
               $sub$i275$i$i$i$i = $695 - $665;
               $sub3$i278$i$i$i$i = $696 - $666;
               $sub$i269$i$i$i$i = $695 - $673;
               $sub3$i$i$i$i$i = $696 - $674;
               $minSeparation$4716$i$i$i$i = $minSeparation$4716$i$i$i$i < $697 ? $minSeparation$4716$i$i$i$i : $697;
               $mul666$i$i$i$i = ($697 + .004999999888241291) * .20000000298023224;
               $cond$i$i$i$i$i$i = $mul666$i$i$i$i < 0.0 ? $mul666$i$i$i$i : 0.0;
               $sub$i265$i$i$i$i = $688 * $sub$i275$i$i$i$i - $687 * $sub3$i278$i$i$i$i;
               $sub$i258$i$i$i$i = $688 * $sub$i269$i$i$i$i - $687 * $sub3$i$i$i$i$i;
               $add683$i$i$i$i = $add675$i$i$i$i + $sub$i265$i$i$i$i * $sub$i265$i$i$i$i * $$pre810$i$i$i$i + $sub$i258$i$i$i$i * $sub$i258$i$i$i$i * $$pre811$i$i$i$i;
               if ($add683$i$i$i$i > 0.0) $cond691$i$i$i$i = -($cond$i$i$i$i$i$i < -.20000000298023224 ? -.20000000298023224 : $cond$i$i$i$i$i$i) / $add683$i$i$i$i; else $cond691$i$i$i$i = 0.0;
               $mul$i247$i$i$i$i = $687 * $cond691$i$i$i$i;
               $mul1$i249$i$i$i$i = $688 * $cond691$i$i$i$i;
               $665 = $665 - $mul$i247$i$i$i$i * $$pre808$i$i$i$i;
               HEAPF32[$arrayidx608$i$i$i$i >> 2] = $665;
               $666 = $666 - $mul1$i249$i$i$i$i * $$pre808$i$i$i$i;
               HEAPF32[$y$i300$i$i$i$i >> 2] = $666;
               $663 = $663 - ($sub$i275$i$i$i$i * $mul1$i249$i$i$i$i - $sub3$i278$i$i$i$i * $mul$i247$i$i$i$i) * $$pre810$i$i$i$i;
               $673 = $mul$i247$i$i$i$i * $$pre809$i$i$i$i + $673;
               HEAPF32[$arrayidx618$i$i$i$i >> 2] = $673;
               $674 = $mul1$i249$i$i$i$i * $$pre809$i$i$i$i + $674;
               HEAPF32[$y$i284$i$i$i$i >> 2] = $674;
               $664 = $664 + ($sub$i269$i$i$i$i * $mul1$i249$i$i$i$i - $sub3$i$i$i$i$i * $mul$i247$i$i$i$i) * $$pre811$i$i$i$i;
               $j628$0715$i$i$i$i = $j628$0715$i$i$i$i + 1 | 0;
              } while (($j628$0715$i$i$i$i | 0) < ($660 | 0));
              $698 = $arrayidx608$i$i$i$i;
              $704 = $arrayidx618$i$i$i$i;
              $712 = HEAP32[$698 >> 2] | 0;
              $715 = HEAP32[$698 + 4 >> 2] | 0;
              $717 = $663;
              $721 = HEAP32[$704 >> 2] | 0;
              $724 = HEAP32[$704 + 4 >> 2] | 0;
              $725 = $664;
              $minSeparation$4$lcssa$i$i$i$i = $minSeparation$4716$i$i$i$i;
             } else {
              $712 = $639;
              $715 = $642;
              $717 = $647;
              $721 = $651;
              $724 = $654;
              $725 = $659;
              $minSeparation$4$lcssa$i$i$i$i = $minSeparation$3718$i$i$i$i;
             }
             $710 = $c612$i$i$i$i;
             HEAP32[$710 >> 2] = $712;
             HEAP32[$710 + 4 >> 2] = $715;
             HEAPF32[$$pre798$i$i$i$i + ((HEAP32[$arrayidx609$i$i$i$i >> 2] | 0) * 12 | 0) + 8 >> 2] = $717;
             $718 = HEAP32[$arrayidx619$i$i$i$i >> 2] | 0;
             $719 = $$pre798$i$i$i$i + ($718 * 12 | 0) | 0;
             HEAP32[$719 >> 2] = $721;
             HEAP32[$719 + 4 >> 2] = $724;
             HEAPF32[$$pre798$i$i$i$i + ($718 * 12 | 0) + 8 >> 2] = $725;
             $inc733$i$i$i$i = $i4604$0717$i$i$i$i + 1 | 0;
             if (($inc733$i$i$i$i | 0) == 4) {
              $minSeparation$5$i$i$i$i = $minSeparation$4$lcssa$i$i$i$i;
              break L160;
             }
             $636 = HEAP32[$contactSolverDef$i$i21 + ($inc733$i$i$i$i << 2) >> 2] | 0;
             $648 = HEAP32[$contactSolver$i$i22 + ($inc733$i$i$i$i << 2) >> 2] | 0;
             $660 = HEAP32[$backup1$i + ($inc733$i$i$i$i << 2) >> 2] | 0;
             $i4604$0717$i$i$i$i = $inc733$i$i$i$i;
             $minSeparation$3718$i$i$i$i = $minSeparation$4$lcssa$i$i$i$i;
            }
           }
           HEAP32[2104] = (HEAP32[2104] | 0) + 1;
           do if (($340 | 0) == 2) HEAP32[2110] = (HEAP32[2110] | 0) + 1; else if (($340 | 0) == 1) {
            HEAP32[2108] = (HEAP32[2108] | 0) + 1;
            $364 = HEAP32[$m_positions$i69$i$i$i >> 2] | 0;
            $365 = $364 + ($250 * 12 | 0) | 0;
            $367 = HEAP32[$365 >> 2] | 0;
            $370 = HEAP32[$365 + 4 >> 2] | 0;
            $371 = $backup2$i;
            HEAP32[$371 >> 2] = $367;
            HEAP32[$371 + 4 >> 2] = $370;
            $375 = $364 + ($251 * 12 | 0) | 0;
            $377 = HEAP32[$375 >> 2] | 0;
            $380 = HEAP32[$375 + 4 >> 2] | 0;
            $381 = $arrayidx147$i$i$i$i;
            HEAP32[$381 >> 2] = $377;
            HEAP32[$381 + 4 >> 2] = $380;
            $385 = $364 + ($252 * 12 | 0) | 0;
            $387 = HEAP32[$385 >> 2] | 0;
            $390 = HEAP32[$385 + 4 >> 2] | 0;
            $391 = $arrayidx152$i$i$i$i;
            HEAP32[$391 >> 2] = $387;
            HEAP32[$391 + 4 >> 2] = $390;
            $395 = $364 + ($253 * 12 | 0) | 0;
            $397 = HEAP32[$395 >> 2] | 0;
            $400 = HEAP32[$395 + 4 >> 2] | 0;
            $401 = $arrayidx157$i$i$i$i;
            HEAP32[$401 >> 2] = $397;
            HEAP32[$401 + 4 >> 2] = $400;
            $405 = $364 + ($254 * 12 | 0) | 0;
            $407 = HEAP32[$405 >> 2] | 0;
            $410 = HEAP32[$405 + 4 >> 2] | 0;
            $411 = $bodies$i;
            HEAP32[$411 >> 2] = $407;
            HEAP32[$411 + 4 >> 2] = $410;
            $415 = $364 + ($255 * 12 | 0) | 0;
            $417 = HEAP32[$415 >> 2] | 0;
            $420 = HEAP32[$415 + 4 >> 2] | 0;
            $421 = $arrayidx167$i$i$i$i;
            HEAP32[$421 >> 2] = $417;
            HEAP32[$421 + 4 >> 2] = $420;
            $425 = $364 + ($256 * 12 | 0) | 0;
            $427 = HEAP32[$425 >> 2] | 0;
            $430 = HEAP32[$425 + 4 >> 2] | 0;
            $431 = $arrayidx172$i$i$i$i;
            HEAP32[$431 >> 2] = $427;
            HEAP32[$431 + 4 >> 2] = $430;
            $435 = $364 + ($257 * 12 | 0) | 0;
            $437 = HEAP32[$435 >> 2] | 0;
            $440 = HEAP32[$435 + 4 >> 2] | 0;
            $441 = $arrayidx177$i$i$i$i;
            HEAP32[$441 >> 2] = $437;
            HEAP32[$441 + 4 >> 2] = $440;
            $445 = +HEAPF32[$364 + ($253 * 12 | 0) + 8 >> 2];
            $446 = +HEAPF32[$364 + ($252 * 12 | 0) + 8 >> 2];
            $447 = +HEAPF32[$364 + ($251 * 12 | 0) + 8 >> 2];
            $448 = +HEAPF32[$364 + ($250 * 12 | 0) + 8 >> 2];
            $vecinit3$i$i$i$i$i = SIMD_float32x4($448, $447, $446, $445);
            $449 = +HEAPF32[$364 + ($257 * 12 | 0) + 8 >> 2];
            $450 = +HEAPF32[$364 + ($256 * 12 | 0) + 8 >> 2];
            $451 = +HEAPF32[$364 + ($255 * 12 | 0) + 8 >> 2];
            $452 = +HEAPF32[$364 + ($254 * 12 | 0) + 8 >> 2];
            $vecinit3$i453$i$i$i$i = SIMD_float32x4($452, $451, $450, $449);
            $bitcast$i$i$i$i = (HEAP32[tempDoublePtr >> 2] = $397, +HEAPF32[tempDoublePtr >> 2]);
            $bitcast772$i$i$i$i = (HEAP32[tempDoublePtr >> 2] = $387, +HEAPF32[tempDoublePtr >> 2]);
            $bitcast774$i$i$i$i = (HEAP32[tempDoublePtr >> 2] = $377, +HEAPF32[tempDoublePtr >> 2]);
            $bitcast776$i$i$i$i = (HEAP32[tempDoublePtr >> 2] = $367, +HEAPF32[tempDoublePtr >> 2]);
            $vecinit3$i461$i$i$i$i = SIMD_float32x4($bitcast776$i$i$i$i, $bitcast774$i$i$i$i, $bitcast772$i$i$i$i, $bitcast$i$i$i$i);
            $453 = (HEAP32[tempDoublePtr >> 2] = $400, +HEAPF32[tempDoublePtr >> 2]);
            $454 = (HEAP32[tempDoublePtr >> 2] = $390, +HEAPF32[tempDoublePtr >> 2]);
            $455 = (HEAP32[tempDoublePtr >> 2] = $380, +HEAPF32[tempDoublePtr >> 2]);
            $456 = (HEAP32[tempDoublePtr >> 2] = $370, +HEAPF32[tempDoublePtr >> 2]);
            $vecinit3$i465$i$i$i$i = SIMD_float32x4($456, $455, $454, $453);
            $bitcast778$i$i$i$i = (HEAP32[tempDoublePtr >> 2] = $437, +HEAPF32[tempDoublePtr >> 2]);
            $bitcast780$i$i$i$i = (HEAP32[tempDoublePtr >> 2] = $427, +HEAPF32[tempDoublePtr >> 2]);
            $bitcast782$i$i$i$i = (HEAP32[tempDoublePtr >> 2] = $417, +HEAPF32[tempDoublePtr >> 2]);
            $bitcast784$i$i$i$i = (HEAP32[tempDoublePtr >> 2] = $407, +HEAPF32[tempDoublePtr >> 2]);
            $vecinit3$i487$i$i$i$i = SIMD_float32x4($bitcast784$i$i$i$i, $bitcast782$i$i$i$i, $bitcast780$i$i$i$i, $bitcast778$i$i$i$i);
            $457 = (HEAP32[tempDoublePtr >> 2] = $440, +HEAPF32[tempDoublePtr >> 2]);
            $458 = (HEAP32[tempDoublePtr >> 2] = $430, +HEAPF32[tempDoublePtr >> 2]);
            $459 = (HEAP32[tempDoublePtr >> 2] = $420, +HEAPF32[tempDoublePtr >> 2]);
            $460 = (HEAP32[tempDoublePtr >> 2] = $410, +HEAPF32[tempDoublePtr >> 2]);
            $vecinit3$i492$i$i$i$i = SIMD_float32x4($460, $459, $458, $457);
            $461 = +HEAPF32[$x250$i$i$i$i >> 2];
            $462 = +HEAPF32[$x252$i$i$i$i >> 2];
            $463 = +HEAPF32[$x254$i$i$i$i >> 2];
            $464 = +HEAPF32[$fcn$i$i >> 2];
            $vecinit3$i496$i$i$i$i = SIMD_float32x4($464, $463, $462, $461);
            $465 = +HEAPF32[$y259$i$i$i$i >> 2];
            $466 = +HEAPF32[$y261$i$i$i$i >> 2];
            $467 = +HEAPF32[$y263$i$i$i$i >> 2];
            $468 = +HEAPF32[$y265$i$i$i$i >> 2];
            $vecinit3$i501$i$i$i$i = SIMD_float32x4($468, $467, $466, $465);
            $469 = +HEAPF32[$x268$i$i$i$i >> 2];
            $470 = +HEAPF32[$x270$i$i$i$i >> 2];
            $471 = +HEAPF32[$x272$i$i$i$i >> 2];
            $472 = +HEAPF32[$island$i23 >> 2];
            $vecinit3$i506$i$i$i$i = SIMD_float32x4($472, $471, $470, $469);
            $473 = +HEAPF32[$y277$i$i$i$i >> 2];
            $474 = +HEAPF32[$y279$i$i$i$i >> 2];
            $475 = +HEAPF32[$y281$i$i$i$i >> 2];
            $476 = +HEAPF32[$y283$i$i$i$i >> 2];
            $vecinit3$i511$i$i$i$i = SIMD_float32x4($476, $475, $474, $473);
            $477 = SIMD_float32x4_load(buffer, $backup$i);
            $478 = SIMD_float32x4_load(buffer, $mB$i$i$i$i);
            $479 = SIMD_float32x4_load(buffer, $subStep$i$sroa$6);
            $480 = SIMD_float32x4_load(buffer, $iB$i$i$i$i);
            $call$i558$i$i$i$i = +Math_sin(+$448);
            $call3$i562$i$i$i$i = +Math_sin(+$447);
            $call7$i565$i$i$i$i = +Math_sin(+$446);
            $call11$i568$i$i$i$i = +Math_sin(+$445);
            $vecins13$i569$i$i$i$i = SIMD_float32x4($call$i558$i$i$i$i, $call3$i562$i$i$i$i, $call7$i565$i$i$i$i, $call11$i568$i$i$i$i);
            $call15$i571$i$i$i$i = +Math_cos(+$448);
            $call18$i575$i$i$i$i = +Math_cos(+$447);
            $call22$i578$i$i$i$i = +Math_cos(+$446);
            $call26$i581$i$i$i$i = +Math_cos(+$445);
            $vecins28$i582$i$i$i$i = SIMD_float32x4($call15$i571$i$i$i$i, $call18$i575$i$i$i$i, $call22$i578$i$i$i$i, $call26$i581$i$i$i$i);
            $call$i556$i$i$i$i = +Math_sin(+$452);
            $call3$i$i$i$i$i = +Math_sin(+$451);
            $call7$i$i$i$i$i = +Math_sin(+$450);
            $call11$i$i$i$i$i = +Math_sin(+$449);
            $vecins13$i$i$i$i$i = SIMD_float32x4($call$i556$i$i$i$i, $call3$i$i$i$i$i, $call7$i$i$i$i$i, $call11$i$i$i$i$i);
            $call15$i$i$i$i$i = +Math_cos(+$452);
            $call18$i$i$i$i$i = +Math_cos(+$451);
            $call22$i$i$i$i$i = +Math_cos(+$450);
            $call26$i$i$i$i$i = +Math_cos(+$449);
            $vecins28$i$i$i$i$i = SIMD_float32x4($call15$i$i$i$i$i, $call18$i$i$i$i$i, $call22$i$i$i$i$i, $call26$i$i$i$i$i);
            $mul$i$i553$i$i$i$i = SIMD_float32x4_mul($vecinit3$i496$i$i$i$i, $vecins28$i582$i$i$i$i);
            $sub$i552$i$i$i$i = SIMD_float32x4_sub($vecinit3$i461$i$i$i$i, SIMD_float32x4_sub($mul$i$i553$i$i$i$i, SIMD_float32x4_mul($vecinit3$i501$i$i$i$i, $vecins13$i569$i$i$i$i)));
            $mul$i$i549$i$i$i$i = SIMD_float32x4_mul($vecinit3$i496$i$i$i$i, $vecins13$i569$i$i$i$i);
            $sub$i548$i$i$i$i = SIMD_float32x4_sub($vecinit3$i465$i$i$i$i, SIMD_float32x4_add(SIMD_float32x4_mul($vecinit3$i501$i$i$i$i, $vecins28$i582$i$i$i$i), $mul$i$i549$i$i$i$i));
            $mul$i$i543$i$i$i$i = SIMD_float32x4_mul($vecinit3$i506$i$i$i$i, $vecins28$i$i$i$i$i);
            $sub$i542$i$i$i$i = SIMD_float32x4_sub($vecinit3$i487$i$i$i$i, SIMD_float32x4_sub($mul$i$i543$i$i$i$i, SIMD_float32x4_mul($vecinit3$i511$i$i$i$i, $vecins13$i$i$i$i$i)));
            $mul$i$i540$i$i$i$i = SIMD_float32x4_mul($vecinit3$i506$i$i$i$i, $vecins13$i$i$i$i$i);
            $sub$i539$i$i$i$i = SIMD_float32x4_sub($vecinit3$i492$i$i$i$i, SIMD_float32x4_add(SIMD_float32x4_mul($vecinit3$i511$i$i$i$i, $vecins28$i$i$i$i$i), $mul$i$i540$i$i$i$i));
            HEAP32[2202] = 16656;
            $call$i$i1$i$i11$i$i$i = +_emscripten_get_now();
            $mul$i$i2$i$i$i$i$i = (+(~~$call$i$i1$i$i11$i$i$i >>> 0 >>> 0) + 4294967296.0 * +((+Math_abs($call$i$i1$i$i11$i$i$i) >= 1.0 ? $call$i$i1$i$i11$i$i$i > 0.0 ? (Math_min(+Math_floor($call$i$i1$i$i11$i$i$i / 4294967296.0), 4294967295.0) | 0) >>> 0 : ~~+Math_ceil(($call$i$i1$i$i11$i$i$i - +(~~$call$i$i1$i$i11$i$i$i >>> 0)) / 4294967296.0) >>> 0 : 0) >>> 0)) * 1.0e3;
            $485 = +Math_abs($mul$i$i2$i$i$i$i$i) >= 1.0 ? $mul$i$i2$i$i$i$i$i > 0.0 ? (Math_min(+Math_floor($mul$i$i2$i$i$i$i$i / 4294967296.0), 4294967295.0) | 0) >>> 0 : ~~+Math_ceil(($mul$i$i2$i$i$i$i$i - +(~~$mul$i$i2$i$i$i$i$i >>> 0)) / 4294967296.0) >>> 0 : 0;
            $486 = 8816;
            HEAP32[$486 >> 2] = ~~$mul$i$i2$i$i$i$i$i >>> 0;
            HEAP32[$486 + 4 >> 2] = $485;
            HEAPF32[$xfB$i$i$i >> 2] = +$sub$i552$i$i$i$i.x;
            HEAPF32[$y92$i$i$i$i$i >> 2] = +$sub$i548$i$i$i$i.x;
            HEAPF32[$s$i$i$i$i$i >> 2] = $call$i558$i$i$i$i;
            HEAPF32[$c$i$i$i$i$i >> 2] = $call15$i571$i$i$i$i;
            HEAPF32[$psm$i$i$i >> 2] = +$sub$i542$i$i$i$i.x;
            HEAPF32[$y103$i$i$i$i$i >> 2] = +$sub$i539$i$i$i$i.x;
            HEAPF32[$s107$i$i$i$i$i >> 2] = $call$i556$i$i$i$i;
            HEAPF32[$c111$i$i$i$i$i >> 2] = $call15$i$i$i$i$i;
            __ZN24b2PositionSolverManifold10InitializeEP27b2ContactPositionConstraintRK11b2TransformS4_i($vararg_buffer501, $add$ptr$i$i$i$i, $xfB$i$i$i, $psm$i$i$i, 0);
            $490 = +HEAPF32[$vararg_buffer501 >> 2];
            $491 = +HEAPF32[$y117$i$i$i$i$i >> 2];
            $492 = +HEAPF32[$x120$i$i$i$i$i >> 2];
            $493 = +HEAPF32[$y124$i$i$i$i$i >> 2];
            $494 = +HEAPF32[$separation$i$i$i$i$i >> 2];
            HEAPF32[$xfB$i$i$i >> 2] = +$sub$i552$i$i$i$i.y;
            HEAPF32[$y92$i$i$i$i$i >> 2] = +$sub$i548$i$i$i$i.y;
            HEAPF32[$s$i$i$i$i$i >> 2] = $call3$i562$i$i$i$i;
            HEAPF32[$c$i$i$i$i$i >> 2] = $call18$i575$i$i$i$i;
            HEAPF32[$psm$i$i$i >> 2] = +$sub$i542$i$i$i$i.y;
            HEAPF32[$y103$i$i$i$i$i >> 2] = +$sub$i539$i$i$i$i.y;
            HEAPF32[$s107$i$i$i$i$i >> 2] = $call3$i$i$i$i$i;
            HEAPF32[$c111$i$i$i$i$i >> 2] = $call18$i$i$i$i$i;
            __ZN24b2PositionSolverManifold10InitializeEP27b2ContactPositionConstraintRK11b2TransformS4_i($vararg_buffer501, $249 + ($add$ptr$sum211$i$i$i$i * 88 | 0) | 0, $xfB$i$i$i, $psm$i$i$i, 0);
            $495 = +HEAPF32[$vararg_buffer501 >> 2];
            $496 = +HEAPF32[$y117$i$i$i$i$i >> 2];
            $497 = +HEAPF32[$x120$i$i$i$i$i >> 2];
            $498 = +HEAPF32[$y124$i$i$i$i$i >> 2];
            $499 = +HEAPF32[$separation$i$i$i$i$i >> 2];
            HEAPF32[$xfB$i$i$i >> 2] = +$sub$i552$i$i$i$i.z;
            HEAPF32[$y92$i$i$i$i$i >> 2] = +$sub$i548$i$i$i$i.z;
            HEAPF32[$s$i$i$i$i$i >> 2] = $call7$i565$i$i$i$i;
            HEAPF32[$c$i$i$i$i$i >> 2] = $call22$i578$i$i$i$i;
            HEAPF32[$psm$i$i$i >> 2] = +$sub$i542$i$i$i$i.z;
            HEAPF32[$y103$i$i$i$i$i >> 2] = +$sub$i539$i$i$i$i.z;
            HEAPF32[$s107$i$i$i$i$i >> 2] = $call7$i$i$i$i$i;
            HEAPF32[$c111$i$i$i$i$i >> 2] = $call22$i$i$i$i$i;
            __ZN24b2PositionSolverManifold10InitializeEP27b2ContactPositionConstraintRK11b2TransformS4_i($vararg_buffer501, $249 + ($add$ptr$sum212$i$i$i$i * 88 | 0) | 0, $xfB$i$i$i, $psm$i$i$i, 0);
            $500 = +HEAPF32[$vararg_buffer501 >> 2];
            $501 = +HEAPF32[$y117$i$i$i$i$i >> 2];
            $502 = +HEAPF32[$x120$i$i$i$i$i >> 2];
            $503 = +HEAPF32[$y124$i$i$i$i$i >> 2];
            $504 = +HEAPF32[$separation$i$i$i$i$i >> 2];
            HEAPF32[$xfB$i$i$i >> 2] = +$sub$i552$i$i$i$i.w;
            HEAPF32[$y92$i$i$i$i$i >> 2] = +$sub$i548$i$i$i$i.w;
            HEAPF32[$s$i$i$i$i$i >> 2] = $call11$i568$i$i$i$i;
            HEAPF32[$c$i$i$i$i$i >> 2] = $call26$i581$i$i$i$i;
            HEAPF32[$psm$i$i$i >> 2] = +$sub$i542$i$i$i$i.w;
            HEAPF32[$y103$i$i$i$i$i >> 2] = +$sub$i539$i$i$i$i.w;
            HEAPF32[$s107$i$i$i$i$i >> 2] = $call11$i$i$i$i$i;
            HEAPF32[$c111$i$i$i$i$i >> 2] = $call26$i$i$i$i$i;
            __ZN24b2PositionSolverManifold10InitializeEP27b2ContactPositionConstraintRK11b2TransformS4_i($vararg_buffer501, $249 + ($add$ptr$sum213$i$i$i$i * 88 | 0) | 0, $xfB$i$i$i, $psm$i$i$i, 0);
            $vecins272$i$i$i$i$i = SIMD_float32x4($490, $495, $500, +HEAPF32[$vararg_buffer501 >> 2]);
            $vecins276$i$i$i$i$i = SIMD_float32x4($491, $496, $501, +HEAPF32[$y117$i$i$i$i$i >> 2]);
            $vecins280$i$i$i$i$i = SIMD_float32x4($492, $497, $502, +HEAPF32[$x120$i$i$i$i$i >> 2]);
            $vecins284$i$i$i$i$i = SIMD_float32x4($493, $498, $503, +HEAPF32[$y124$i$i$i$i$i >> 2]);
            $509 = +HEAPF32[$separation$i$i$i$i$i >> 2];
            $call$i$i3$i$i12$i$i$i = +_emscripten_get_now();
            $vecins287$i$i$i$i$i = SIMD_float32x4($494, $499, $504, $509);
            $mul$i$i6$i$i$i$i$i = (+(~~$call$i$i3$i$i12$i$i$i >>> 0 >>> 0) + 4294967296.0 * +((+Math_abs($call$i$i3$i$i12$i$i$i) >= 1.0 ? $call$i$i3$i$i12$i$i$i > 0.0 ? (Math_min(+Math_floor($call$i$i3$i$i12$i$i$i / 4294967296.0), 4294967295.0) | 0) >>> 0 : ~~+Math_ceil(($call$i$i3$i$i12$i$i$i - +(~~$call$i$i3$i$i12$i$i$i >>> 0)) / 4294967296.0) >>> 0 : 0) >>> 0)) * 1.0e3;
            $514 = +Math_abs($mul$i$i6$i$i$i$i$i) >= 1.0 ? $mul$i$i6$i$i$i$i$i > 0.0 ? (Math_min(+Math_floor($mul$i$i6$i$i$i$i$i / 4294967296.0), 4294967295.0) | 0) >>> 0 : ~~+Math_ceil(($mul$i$i6$i$i$i$i$i - +(~~$mul$i$i6$i$i$i$i$i >>> 0)) / 4294967296.0) >>> 0 : 0;
            $515 = 8816;
            $521 = 8824;
            $527 = _i64Subtract(HEAP32[$521 >> 2] | 0, HEAP32[$521 + 4 >> 2] | 0, HEAP32[$515 >> 2] | 0, HEAP32[$515 + 4 >> 2] | 0) | 0;
            $529 = _i64Add($527 | 0, tempRet0 | 0, ~~$mul$i$i6$i$i$i$i$i >>> 0 | 0, $514 | 0) | 0;
            $531 = 8824;
            HEAP32[$531 >> 2] = $529;
            HEAP32[$531 + 4 >> 2] = tempRet0;
            $sub$i538$i$i$i$i = SIMD_float32x4_sub($vecins280$i$i$i$i$i, $vecinit3$i461$i$i$i$i);
            $sub$i537$i$i$i$i = SIMD_float32x4_sub($vecins284$i$i$i$i$i, $vecinit3$i465$i$i$i$i);
            $sub$i536$i$i$i$i = SIMD_float32x4_sub($vecins280$i$i$i$i$i, $vecinit3$i487$i$i$i$i);
            $sub$i535$i$i$i$i = SIMD_float32x4_sub($vecins284$i$i$i$i$i, $vecinit3$i492$i$i$i$i);
            $cond$i534$i$i$i$i = $minSeparation$0766$i$i$i$i < $494 ? $minSeparation$0766$i$i$i$i : $494;
            $cond$i532$i$i$i$i = $cond$i534$i$i$i$i < $499 ? $cond$i534$i$i$i$i : $499;
            $cond$i530$i$i$i$i = $cond$i532$i$i$i$i < $504 ? $cond$i532$i$i$i$i : $504;
            $mul$i525$i$i$i$i = SIMD_float32x4_mul(SIMD_float32x4_add($vecins287$i$i$i$i$i, SIMD_float32x4(Math_fround(.004999999888241291), Math_fround(.004999999888241291), Math_fround(.004999999888241291), Math_fround(.004999999888241291))), SIMD_float32x4(Math_fround(.20000000298023224), Math_fround(.20000000298023224), Math_fround(.20000000298023224), Math_fround(.20000000298023224)));
            $call1$i$i$i$i$i$i = SIMD_float32x4(SIMD_float32x4_select(SIMD_int32x4(SIMD_int32x4(SIMD_float32x4_lessThan(SIMD_float32x4($mul$i525$i$i$i$i), SIMD_float32x4(SIMD_float32x4_splat(Math_fround(0)))))), SIMD_float32x4($mul$i525$i$i$i$i), SIMD_float32x4(SIMD_float32x4_splat(Math_fround(0)))));
            $call1$i5$i$i$i$i$i = SIMD_float32x4(SIMD_float32x4_select(SIMD_int32x4(SIMD_int32x4(SIMD_float32x4_greaterThan(SIMD_float32x4(SIMD_float32x4(Math_fround(-.20000000298023224), Math_fround(-.20000000298023224), Math_fround(-.20000000298023224), Math_fround(-.20000000298023224))), SIMD_float32x4($call1$i$i$i$i$i$i)))), SIMD_float32x4(SIMD_float32x4(Math_fround(-.20000000298023224), Math_fround(-.20000000298023224), Math_fround(-.20000000298023224), Math_fround(-.20000000298023224))), SIMD_float32x4($call1$i$i$i$i$i$i)));
            $mul$i$i522$i$i$i$i = SIMD_float32x4_mul($vecins276$i$i$i$i$i, $sub$i538$i$i$i$i);
            $sub$i$i524$i$i$i$i = SIMD_float32x4_sub($mul$i$i522$i$i$i$i, SIMD_float32x4_mul($vecins272$i$i$i$i$i, $sub$i537$i$i$i$i));
            $mul$i$i519$i$i$i$i = SIMD_float32x4_mul($vecins276$i$i$i$i$i, $sub$i536$i$i$i$i);
            $sub$i$i521$i$i$i$i = SIMD_float32x4_sub($mul$i$i519$i$i$i$i, SIMD_float32x4_mul($vecins272$i$i$i$i$i, $sub$i535$i$i$i$i));
            $mul$i517$i$i$i$i = SIMD_float32x4_mul($479, SIMD_float32x4_mul($sub$i$i524$i$i$i$i, $sub$i$i524$i$i$i$i));
            $add$i512$i$i$i$i = SIMD_float32x4_add($477, SIMD_float32x4_add($478, SIMD_float32x4_add($mul$i517$i$i$i$i, SIMD_float32x4_mul($480, SIMD_float32x4_mul($sub$i$i521$i$i$i$i, $sub$i$i521$i$i$i$i)))));
            $535 = SIMD_float32x4_fromInt32x4Bits(SIMD_int32x4(SIMD_float32x4_greaterThan(SIMD_float32x4($add$i512$i$i$i$i), SIMD_float32x4(SIMD_float32x4_splat(Math_fround(0))))));
            $div$i$i$i$i$i = SIMD_float32x4_div($call1$i5$i$i$i$i$i, $add$i512$i$i$i$i);
            $call$i502$i$i$i$i = SIMD_float32x4(SIMD_float32x4_xor(SIMD_float32x4($call$i323$i$i$i$i), SIMD_float32x4($div$i$i$i$i$i)));
            $call$i497$i$i$i$i = SIMD_float32x4(SIMD_float32x4_and(SIMD_float32x4($535), SIMD_float32x4($call$i502$i$i$i$i)));
            $call1$i$i$i$i$i = SIMD_float32x4(SIMD_float32x4_and(SIMD_float32x4(SIMD_float32x4(SIMD_float32x4_not(SIMD_float32x4($535)))), SIMD_float32x4(SIMD_float32x4_splat(Math_fround(0)))));
            $call$i483$i$i$i$i = SIMD_float32x4(SIMD_float32x4_or(SIMD_float32x4($call$i497$i$i$i$i), SIMD_float32x4($call1$i$i$i$i$i)));
            $mul$i482$i$i$i$i = SIMD_float32x4_mul($vecins272$i$i$i$i$i, $call$i483$i$i$i$i);
            $mul$i481$i$i$i$i = SIMD_float32x4_mul($vecins276$i$i$i$i$i, $call$i483$i$i$i$i);
            $sub$i479$i$i$i$i = SIMD_float32x4_sub($vecinit3$i461$i$i$i$i, SIMD_float32x4_mul($477, $mul$i482$i$i$i$i));
            $sub$i477$i$i$i$i = SIMD_float32x4_sub($vecinit3$i465$i$i$i$i, SIMD_float32x4_mul($477, $mul$i481$i$i$i$i));
            $mul$i$i474$i$i$i$i = SIMD_float32x4_mul($sub$i538$i$i$i$i, $mul$i481$i$i$i$i);
            $sub$i472$i$i$i$i = SIMD_float32x4_sub($vecinit3$i$i$i$i$i, SIMD_float32x4_mul($479, SIMD_float32x4_sub($mul$i$i474$i$i$i$i, SIMD_float32x4_mul($sub$i537$i$i$i$i, $mul$i482$i$i$i$i))));
            $add$i470$i$i$i$i = SIMD_float32x4_add($vecinit3$i487$i$i$i$i, SIMD_float32x4_mul($478, $mul$i482$i$i$i$i));
            $add$i468$i$i$i$i = SIMD_float32x4_add($vecinit3$i492$i$i$i$i, SIMD_float32x4_mul($478, $mul$i481$i$i$i$i));
            $mul$i$i$i$i$i$i = SIMD_float32x4_mul($sub$i536$i$i$i$i, $mul$i481$i$i$i$i);
            $add$i466$i$i$i$i = SIMD_float32x4_add($vecinit3$i453$i$i$i$i, SIMD_float32x4_mul($480, SIMD_float32x4_sub($mul$i$i$i$i$i$i, SIMD_float32x4_mul($sub$i535$i$i$i$i, $mul$i482$i$i$i$i))));
            $536 = HEAP32[$contactSolverDef$i$i21 >> 2] | 0;
            $537 = HEAP32[$m_positions$i69$i$i$i >> 2] | 0;
            HEAPF32[$537 + ($536 * 12 | 0) >> 2] = +$sub$i479$i$i$i$i.x;
            $538 = HEAP32[$arrayinit$element$i$i$i$i >> 2] | 0;
            HEAPF32[$537 + ($538 * 12 | 0) >> 2] = +$sub$i479$i$i$i$i.y;
            $539 = HEAP32[$arrayinit$element10$i$i$i$i >> 2] | 0;
            HEAPF32[$537 + ($539 * 12 | 0) >> 2] = +$sub$i479$i$i$i$i.z;
            $540 = HEAP32[$arrayinit$element13$i$i$i$i >> 2] | 0;
            HEAPF32[$537 + ($540 * 12 | 0) >> 2] = +$sub$i479$i$i$i$i.w;
            HEAPF32[$537 + ($536 * 12 | 0) + 4 >> 2] = +$sub$i477$i$i$i$i.x;
            HEAPF32[$537 + ($538 * 12 | 0) + 4 >> 2] = +$sub$i477$i$i$i$i.y;
            HEAPF32[$537 + ($539 * 12 | 0) + 4 >> 2] = +$sub$i477$i$i$i$i.z;
            HEAPF32[$537 + ($540 * 12 | 0) + 4 >> 2] = +$sub$i477$i$i$i$i.w;
            HEAPF32[$537 + ($536 * 12 | 0) + 8 >> 2] = +$sub$i472$i$i$i$i.x;
            HEAPF32[$537 + ($538 * 12 | 0) + 8 >> 2] = +$sub$i472$i$i$i$i.y;
            HEAPF32[$537 + ($539 * 12 | 0) + 8 >> 2] = +$sub$i472$i$i$i$i.z;
            HEAPF32[$537 + ($540 * 12 | 0) + 8 >> 2] = +$sub$i472$i$i$i$i.w;
            $541 = HEAP32[$contactSolver$i$i22 >> 2] | 0;
            HEAPF32[$537 + ($541 * 12 | 0) >> 2] = +$add$i470$i$i$i$i.x;
            $542 = HEAP32[$arrayinit$element18$i$i$i$i >> 2] | 0;
            HEAPF32[$537 + ($542 * 12 | 0) >> 2] = +$add$i470$i$i$i$i.y;
            $543 = HEAP32[$arrayinit$element21$i$i$i$i >> 2] | 0;
            HEAPF32[$537 + ($543 * 12 | 0) >> 2] = +$add$i470$i$i$i$i.z;
            $544 = HEAP32[$arrayinit$element24$i$i$i$i >> 2] | 0;
            HEAPF32[$537 + ($544 * 12 | 0) >> 2] = +$add$i470$i$i$i$i.w;
            HEAPF32[$537 + ($541 * 12 | 0) + 4 >> 2] = +$add$i468$i$i$i$i.x;
            HEAPF32[$537 + ($542 * 12 | 0) + 4 >> 2] = +$add$i468$i$i$i$i.y;
            HEAPF32[$537 + ($543 * 12 | 0) + 4 >> 2] = +$add$i468$i$i$i$i.z;
            HEAPF32[$537 + ($544 * 12 | 0) + 4 >> 2] = +$add$i468$i$i$i$i.w;
            HEAPF32[$537 + ($541 * 12 | 0) + 8 >> 2] = +$add$i466$i$i$i$i.x;
            HEAPF32[$537 + ($542 * 12 | 0) + 8 >> 2] = +$add$i466$i$i$i$i.y;
            HEAPF32[$537 + ($543 * 12 | 0) + 8 >> 2] = +$add$i466$i$i$i$i.z;
            HEAPF32[$537 + ($544 * 12 | 0) + 8 >> 2] = +$add$i466$i$i$i$i.w;
            $minSeparation$5$i$i$i$i = $cond$i530$i$i$i$i < $509 ? $cond$i530$i$i$i$i : $509;
            break L160;
           } else {
            if (($340 + -1 | 0) >>> 0 < 2) break;
            HEAP32[2112] = (HEAP32[2112] | 0) + 1;
           } while (0);
           $$pre$i$i$i$i = HEAP32[$m_positions$i69$i$i$i >> 2] | 0;
           $545 = $250;
           $557 = $254;
           $569 = $340;
           $i4$0724$i$i$i$i = 0;
           $minSeparation$1725$i$i$i$i = $minSeparation$0766$i$i$i$i;
           while (1) {
            $arrayidx500$i$i$i$i = $backup2$i + ($i4$0724$i$i$i$i << 3) | 0;
            $arrayidx501$i$i$i$i = $contactSolverDef$i$i21 + ($i4$0724$i$i$i$i << 2) | 0;
            $c504$i$i$i$i = $$pre$i$i$i$i + ($545 * 12 | 0) | 0;
            $546 = $c504$i$i$i$i;
            $548 = HEAP32[$546 >> 2] | 0;
            $551 = HEAP32[$546 + 4 >> 2] | 0;
            $552 = $arrayidx500$i$i$i$i;
            HEAP32[$552 >> 2] = $548;
            HEAP32[$552 + 4 >> 2] = $551;
            $556 = +HEAPF32[$$pre$i$i$i$i + ($545 * 12 | 0) + 8 >> 2];
            $arrayidx510$i$i$i$i = $bodies$i + ($i4$0724$i$i$i$i << 3) | 0;
            $arrayidx511$i$i$i$i = $contactSolver$i$i22 + ($i4$0724$i$i$i$i << 2) | 0;
            $558 = $$pre$i$i$i$i + ($557 * 12 | 0) | 0;
            $560 = HEAP32[$558 >> 2] | 0;
            $563 = HEAP32[$558 + 4 >> 2] | 0;
            $564 = $arrayidx510$i$i$i$i;
            HEAP32[$564 >> 2] = $560;
            HEAP32[$564 + 4 >> 2] = $563;
            $568 = +HEAPF32[$$pre$i$i$i$i + ($557 * 12 | 0) + 8 >> 2];
            if (($569 | 0) > 0) {
             $570 = (HEAP32[tempDoublePtr >> 2] = $560, +HEAPF32[tempDoublePtr >> 2]);
             $y$i429$i$i$i$i = $backup2$i + ($i4$0724$i$i$i$i << 3) + 4 | 0;
             $y$i409$i$i$i$i = $bodies$i + ($i4$0724$i$i$i$i << 3) + 4 | 0;
             $add$ptr538$i$i$i$i = $249 + (($i4$0724$i$i$i$i + $i$0764$i$i$i$i | 0) * 88 | 0) | 0;
             $$pre788$i$i$i$i = +HEAPF32[$fcn$i$i + ($i4$0724$i$i$i$i << 3) >> 2];
             $$pre789$i$i$i$i = +HEAPF32[$fcn$i$i + ($i4$0724$i$i$i$i << 3) + 4 >> 2];
             $$pre791$i$i$i$i = +HEAPF32[$island$i23 + ($i4$0724$i$i$i$i << 3) >> 2];
             $$pre792$i$i$i$i = +HEAPF32[$island$i23 + ($i4$0724$i$i$i$i << 3) + 4 >> 2];
             $$pre794$i$i$i$i = +HEAPF32[$backup$i + ($i4$0724$i$i$i$i << 2) >> 2];
             $$pre795$i$i$i$i = +HEAPF32[$mB$i$i$i$i + ($i4$0724$i$i$i$i << 2) >> 2];
             $$pre796$i$i$i$i = +HEAPF32[$subStep$i$sroa$6 + ($i4$0724$i$i$i$i << 2) >> 2];
             $$pre797$i$i$i$i = +HEAPF32[$iB$i$i$i$i + ($i4$0724$i$i$i$i << 2) >> 2];
             $add550$i$i$i$i = $$pre794$i$i$i$i + $$pre795$i$i$i$i;
             $572 = $556;
             $573 = $568;
             $574 = (HEAP32[tempDoublePtr >> 2] = $548, +HEAPF32[tempDoublePtr >> 2]);
             $575 = +HEAPF32[$y$i429$i$i$i$i >> 2];
             $582 = $570;
             $583 = +HEAPF32[$y$i409$i$i$i$i >> 2];
             $j$0720$i$i$i$i = 0;
             $minSeparation$2721$i$i$i$i = $minSeparation$1725$i$i$i$i;
             do {
              $call$i454$i$i$i$i = +Math_sin(+$572);
              HEAPF32[$s$i455$i$i$i$i >> 2] = $call$i454$i$i$i$i;
              $call2$i456$i$i$i$i = +Math_cos(+$572);
              HEAPF32[$c$i457$i$i$i$i >> 2] = $call2$i456$i$i$i$i;
              $call$i446$i$i$i$i = +Math_sin(+$573);
              HEAPF32[$s$i447$i$i$i$i >> 2] = $call$i446$i$i$i$i;
              $call2$i448$i$i$i$i = +Math_cos(+$573);
              HEAPF32[$c$i449$i$i$i$i >> 2] = $call2$i448$i$i$i$i;
              $576 = +($574 - ($call2$i456$i$i$i$i * $$pre788$i$i$i$i - $call$i454$i$i$i$i * $$pre789$i$i$i$i));
              $577 = +($575 - ($$pre788$i$i$i$i * $call$i454$i$i$i$i + $call2$i456$i$i$i$i * $$pre789$i$i$i$i));
              $578 = $xfA$i$i$i$i;
              HEAPF32[$578 >> 2] = $576;
              HEAPF32[$578 + 4 >> 2] = $577;
              $584 = +($582 - ($call2$i448$i$i$i$i * $$pre791$i$i$i$i - $call$i446$i$i$i$i * $$pre792$i$i$i$i));
              $585 = +($583 - ($$pre791$i$i$i$i * $call$i446$i$i$i$i + $call2$i448$i$i$i$i * $$pre792$i$i$i$i));
              $586 = $xfB$i$i$i$i;
              HEAPF32[$586 >> 2] = $584;
              HEAPF32[$586 + 4 >> 2] = $585;
              __ZN24b2PositionSolverManifold10InitializeEP27b2ContactPositionConstraintRK11b2TransformS4_i($psm$i$i$i$i, $add$ptr538$i$i$i$i, $xfA$i$i$i$i, $xfB$i$i$i$i, $j$0720$i$i$i$i);
              $590 = $psm$i$i$i$i;
              $596 = +HEAPF32[$590 >> 2];
              $597 = +HEAPF32[$590 + 4 >> 2];
              $598 = $point540$i$i$i$i;
              $604 = +HEAPF32[$598 >> 2];
              $605 = +HEAPF32[$598 + 4 >> 2];
              $606 = +HEAPF32[$separation541$i$i$i$i >> 2];
              $sub$i400$i$i$i$i = $604 - $574;
              $sub3$i403$i$i$i$i = $605 - $575;
              $sub$i392$i$i$i$i = $604 - $582;
              $sub3$i395$i$i$i$i = $605 - $583;
              $minSeparation$2721$i$i$i$i = $minSeparation$2721$i$i$i$i < $606 ? $minSeparation$2721$i$i$i$i : $606;
              $mul$i$i24$i$i = ($606 + .004999999888241291) * .20000000298023224;
              $cond$i$i385$i$i$i$i = $mul$i$i24$i$i < 0.0 ? $mul$i$i24$i$i : 0.0;
              $sub$i383$i$i$i$i = $597 * $sub$i400$i$i$i$i - $596 * $sub3$i403$i$i$i$i;
              $sub$i376$i$i$i$i = $597 * $sub$i392$i$i$i$i - $596 * $sub3$i395$i$i$i$i;
              $add558$i$i$i$i = $add550$i$i$i$i + $sub$i383$i$i$i$i * $sub$i383$i$i$i$i * $$pre796$i$i$i$i + $sub$i376$i$i$i$i * $sub$i376$i$i$i$i * $$pre797$i$i$i$i;
              if ($add558$i$i$i$i > 0.0) $cond$i$i25$i$i = -($cond$i$i385$i$i$i$i < -.20000000298023224 ? -.20000000298023224 : $cond$i$i385$i$i$i$i) / $add558$i$i$i$i; else $cond$i$i25$i$i = 0.0;
              $mul$i365$i$i$i$i = $596 * $cond$i$i25$i$i;
              $mul1$i367$i$i$i$i = $597 * $cond$i$i25$i$i;
              $574 = $574 - $mul$i365$i$i$i$i * $$pre794$i$i$i$i;
              HEAPF32[$arrayidx500$i$i$i$i >> 2] = $574;
              $575 = $575 - $mul1$i367$i$i$i$i * $$pre794$i$i$i$i;
              HEAPF32[$y$i429$i$i$i$i >> 2] = $575;
              $572 = $572 - ($sub$i400$i$i$i$i * $mul1$i367$i$i$i$i - $sub3$i403$i$i$i$i * $mul$i365$i$i$i$i) * $$pre796$i$i$i$i;
              $582 = $mul$i365$i$i$i$i * $$pre795$i$i$i$i + $582;
              HEAPF32[$arrayidx510$i$i$i$i >> 2] = $582;
              $583 = $mul1$i367$i$i$i$i * $$pre795$i$i$i$i + $583;
              HEAPF32[$y$i409$i$i$i$i >> 2] = $583;
              $573 = $573 + ($sub$i392$i$i$i$i * $mul1$i367$i$i$i$i - $sub3$i395$i$i$i$i * $mul$i365$i$i$i$i) * $$pre797$i$i$i$i;
              $j$0720$i$i$i$i = $j$0720$i$i$i$i + 1 | 0;
             } while (($j$0720$i$i$i$i | 0) < ($569 | 0));
             $607 = $arrayidx500$i$i$i$i;
             $613 = $arrayidx510$i$i$i$i;
             $621 = HEAP32[$607 >> 2] | 0;
             $624 = HEAP32[$607 + 4 >> 2] | 0;
             $626 = $572;
             $630 = HEAP32[$613 >> 2] | 0;
             $633 = HEAP32[$613 + 4 >> 2] | 0;
             $634 = $573;
             $minSeparation$2$lcssa$i$i$i$i = $minSeparation$2721$i$i$i$i;
            } else {
             $621 = $548;
             $624 = $551;
             $626 = $556;
             $630 = $560;
             $633 = $563;
             $634 = $568;
             $minSeparation$2$lcssa$i$i$i$i = $minSeparation$1725$i$i$i$i;
            }
            $619 = $c504$i$i$i$i;
            HEAP32[$619 >> 2] = $621;
            HEAP32[$619 + 4 >> 2] = $624;
            HEAPF32[$$pre$i$i$i$i + ((HEAP32[$arrayidx501$i$i$i$i >> 2] | 0) * 12 | 0) + 8 >> 2] = $626;
            $627 = HEAP32[$arrayidx511$i$i$i$i >> 2] | 0;
            $628 = $$pre$i$i$i$i + ($627 * 12 | 0) | 0;
            HEAP32[$628 >> 2] = $630;
            HEAP32[$628 + 4 >> 2] = $633;
            HEAPF32[$$pre$i$i$i$i + ($627 * 12 | 0) + 8 >> 2] = $634;
            $inc599$i$i$i$i = $i4$0724$i$i$i$i + 1 | 0;
            if (($inc599$i$i$i$i | 0) == 4) {
             $minSeparation$5$i$i$i$i = $minSeparation$2$lcssa$i$i$i$i;
             break L160;
            }
            $545 = HEAP32[$contactSolverDef$i$i21 + ($inc599$i$i$i$i << 2) >> 2] | 0;
            $557 = HEAP32[$contactSolver$i$i22 + ($inc599$i$i$i$i << 2) >> 2] | 0;
            $569 = HEAP32[$backup1$i + ($inc599$i$i$i$i << 2) >> 2] | 0;
            $i4$0724$i$i$i$i = $inc599$i$i$i$i;
            $minSeparation$1725$i$i$i$i = $minSeparation$2$lcssa$i$i$i$i;
           }
          } while (0);
          $i$0764$i$i$i$i = $i$0764$i$i$i$i + 4 | 0;
          $726 = HEAP32[$m_count$i13$i$i >> 2] | 0;
          if (($i$0764$i$i$i$i | 0) >= ($726 + -3 | 0)) {
           $$lcssa$i$i$i$i = $726;
           $minSeparation$0$lcssa$i$i$i$i = $minSeparation$5$i$i$i$i;
           break;
          } else $minSeparation$0766$i$i$i$i = $minSeparation$5$i$i$i$i;
         }
        } else {
         $$lcssa$i$i$i$i = $248;
         $minSeparation$0$lcssa$i$i$i$i = 0.0;
        }
        $and$i$i$i$i = $$lcssa$i$i$i$i & 3;
        if (($and$i$i$i$i | 0) == 0) $minSeparation$6$i$i$i$i = $minSeparation$0$lcssa$i$i$i$i; else {
         $call745$i14$i$i$i = +__ZN15b2ContactSolver11SolveHelperEii($contactSolver$i$i, $$lcssa$i$i$i$i & -4, $and$i$i$i$i);
         $minSeparation$6$i$i$i$i = $call745$i14$i$i$i < $minSeparation$0$lcssa$i$i$i$i ? $call745$i14$i$i$i : $minSeparation$0$lcssa$i$i$i$i;
        }
        $call$i$i1523$i$i$i = +_emscripten_get_now();
        $mul$i$i18$i$i$i = (+(~~$call$i$i1523$i$i$i >>> 0 >>> 0) + 4294967296.0 * +((+Math_abs($call$i$i1523$i$i$i) >= 1.0 ? $call$i$i1523$i$i$i > 0.0 ? (Math_min(+Math_floor($call$i$i1523$i$i$i / 4294967296.0), 4294967295.0) | 0) >>> 0 : ~~+Math_ceil(($call$i$i1523$i$i$i - +(~~$call$i$i1523$i$i$i >>> 0)) / 4294967296.0) >>> 0 : 0) >>> 0)) * 1.0e3;
        $731 = +Math_abs($mul$i$i18$i$i$i) >= 1.0 ? $mul$i$i18$i$i$i > 0.0 ? (Math_min(+Math_floor($mul$i$i18$i$i$i / 4294967296.0), 4294967295.0) | 0) >>> 0 : ~~+Math_ceil(($mul$i$i18$i$i$i - +(~~$mul$i$i18$i$i$i >>> 0)) / 4294967296.0) >>> 0 : 0;
        $732 = 8768;
        $738 = 8776;
        $744 = _i64Subtract(HEAP32[$738 >> 2] | 0, HEAP32[$738 + 4 >> 2] | 0, HEAP32[$732 >> 2] | 0, HEAP32[$732 + 4 >> 2] | 0) | 0;
        $746 = _i64Add($744 | 0, tempRet0 | 0, ~~$mul$i$i18$i$i$i >>> 0 | 0, $731 | 0) | 0;
        $748 = 8776;
        HEAP32[$748 >> 2] = $746;
        HEAP32[$748 + 4 >> 2] = tempRet0;
        $minSeparation$0$i$i$i = $minSeparation$6$i$i$i$i;
       }
       do if ((HEAP8[8368] | 0) != 0) {
        HEAPF64[tempDoublePtr >> 3] = $minSeparation$0$i$i$i;
        HEAP32[$vararg_buffer501 >> 2] = HEAP32[tempDoublePtr >> 2];
        HEAP32[$vararg_buffer501 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
        __Z5b2LogPKcz(16312, $vararg_buffer501);
        if ((HEAP8[8352] | 0) == 0) break;
        if ((HEAP8[8368] | 0) != 0) __Z5b2LogPKcz(16336, $vararg_buffer501);
        $790 = HEAP32[$m_count$i13$i$i >> 2] | 0;
        if (($790 | 0) <= 0) break;
        $$pre469 = HEAP32[$m_positions$i69$i$i$i >> 2] | 0;
        $i$07$i$i$i$i = 0;
        do {
         $conv$i$i$i$i = +HEAPF32[$$pre469 + ($i$07$i$i$i$i * 12 | 0) >> 2];
         $conv3$i$i$i$i = +HEAPF32[$$pre469 + ($i$07$i$i$i$i * 12 | 0) + 4 >> 2];
         $conv4$i$i$i$i = +HEAPF32[$$pre469 + ($i$07$i$i$i$i * 12 | 0) + 8 >> 2];
         HEAP32[$vararg_buffer501 >> 2] = $i$07$i$i$i$i;
         $vararg_ptr504 = $vararg_buffer501 + 4 | 0;
         HEAPF64[tempDoublePtr >> 3] = $conv$i$i$i$i;
         HEAP32[$vararg_ptr504 >> 2] = HEAP32[tempDoublePtr >> 2];
         HEAP32[$vararg_ptr504 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
         $vararg_ptr505 = $vararg_buffer501 + 12 | 0;
         HEAPF64[tempDoublePtr >> 3] = $conv3$i$i$i$i;
         HEAP32[$vararg_ptr505 >> 2] = HEAP32[tempDoublePtr >> 2];
         HEAP32[$vararg_ptr505 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
         $vararg_ptr506 = $vararg_buffer501 + 20 | 0;
         HEAPF64[tempDoublePtr >> 3] = $conv4$i$i$i$i;
         HEAP32[$vararg_ptr506 >> 2] = HEAP32[tempDoublePtr >> 2];
         HEAP32[$vararg_ptr506 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
         __Z5b2LogPKcz(16352, $vararg_buffer501);
         $i$07$i$i$i$i = $i$07$i$i$i$i + 1 | 0;
        } while (($i$07$i$i$i$i | 0) < ($790 | 0));
       } while (0);
       $cmp$i32$i$i = $minSeparation$0$i$i$i >= -.014999999664723873;
       if ($cmp$i32$i$i) HEAP32[2118] = (HEAP32[2118] | 0) + 1;
       $call$i$i76$i34$i$i = +_emscripten_get_now();
       $mul$i$i79$i$i$i = (+(~~$call$i$i76$i34$i$i >>> 0 >>> 0) + 4294967296.0 * +((+Math_abs($call$i$i76$i34$i$i) >= 1.0 ? $call$i$i76$i34$i$i > 0.0 ? (Math_min(+Math_floor($call$i$i76$i34$i$i / 4294967296.0), 4294967295.0) | 0) >>> 0 : ~~+Math_ceil(($call$i$i76$i34$i$i - +(~~$call$i$i76$i34$i$i >>> 0)) / 4294967296.0) >>> 0 : 0) >>> 0)) * 1.0e3;
       $799 = +Math_abs($mul$i$i79$i$i$i) >= 1.0 ? $mul$i$i79$i$i$i > 0.0 ? (Math_min(+Math_floor($mul$i$i79$i$i$i / 4294967296.0), 4294967295.0) | 0) >>> 0 : ~~+Math_ceil(($mul$i$i79$i$i$i - +(~~$mul$i$i79$i$i$i >>> 0)) / 4294967296.0) >>> 0 : 0;
       $800 = 8744;
       $806 = 8752;
       $812 = _i64Subtract(HEAP32[$806 >> 2] | 0, HEAP32[$806 + 4 >> 2] | 0, HEAP32[$800 >> 2] | 0, HEAP32[$800 + 4 >> 2] | 0) | 0;
       $814 = _i64Add($812 | 0, tempRet0 | 0, ~~$mul$i$i79$i$i$i >>> 0 | 0, $799 | 0) | 0;
       $816 = 8752;
       HEAP32[$816 >> 2] = $814;
       HEAP32[$816 + 4 >> 2] = tempRet0;
       $820 = HEAP32[$m_jointCount$i$i >> 2] | 0;
       if (($820 | 0) > 0) {
        $$pre495 = HEAP32[$m_joints$i$i >> 2] | 0;
        $i145$0191$i$i = 0;
        $jointsOkay$0$off0190$i$i = 1;
        while (1) {
         $821 = HEAP32[$$pre495 + ($i145$0191$i$i << 2) >> 2] | 0;
         $call155$$i$i = $jointsOkay$0$off0190$i$i & (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$821 >> 2] | 0) + 36 >> 2] & 63]($821, $solverData$i$i) | 0);
         $i145$0191$i$i = $i145$0191$i$i + 1 | 0;
         if (($i145$0191$i$i | 0) >= ($820 | 0)) {
          $jointsOkay$0$off0$lcssa$i$i = $call155$$i$i;
          break;
         } else $jointsOkay$0$off0190$i$i = $call155$$i$i;
        }
       } else $jointsOkay$0$off0$lcssa$i$i = 1;
       $i138$0197$i$i = $i138$0197$i$i + 1 | 0;
       if ($cmp$i32$i$i & $jointsOkay$0$off0$lcssa$i$i) {
        $positionSolved$0$off0$i$i$ph = 0;
        break;
       }
       if (($i138$0197$i$i | 0) >= ($positionIterations | 0)) {
        $positionSolved$0$off0$i$i$ph = 1;
        break;
       }
      }
      $823 = HEAP32[$m_bodyCount$i$i >> 2] | 0;
      $positionSolved$0$off0$i$i = $positionSolved$0$off0$i$i$ph;
     } else {
      $823 = $1533;
      $positionSolved$0$off0$i$i = 1;
     }
     if (($823 | 0) > 0) {
      $$pre473 = HEAP32[$m_bodies$i >> 2] | 0;
      $$pre474 = HEAP32[$m_positions$i$i >> 2] | 0;
      $$pre475 = HEAP32[$m_velocities$i$i >> 2] | 0;
      $i170$0185$i$i = 0;
      do {
       $824 = HEAP32[$$pre473 + ($i170$0185$i$i << 2) >> 2] | 0;
       $825 = $$pre474 + ($i170$0185$i$i * 12 | 0) | 0;
       $827 = HEAP32[$825 >> 2] | 0;
       $830 = HEAP32[$825 + 4 >> 2] | 0;
       $831 = $824 + 44 | 0;
       HEAP32[$831 >> 2] = $827;
       HEAP32[$831 + 4 >> 2] = $830;
       $835 = +HEAPF32[$$pre474 + ($i170$0185$i$i * 12 | 0) + 8 >> 2];
       HEAPF32[$824 + 56 >> 2] = $835;
       $836 = $$pre475 + ($i170$0185$i$i * 12 | 0) | 0;
       $841 = HEAP32[$836 + 4 >> 2] | 0;
       $842 = $824 + 64 | 0;
       HEAP32[$842 >> 2] = HEAP32[$836 >> 2];
       HEAP32[$842 + 4 >> 2] = $841;
       HEAPF32[$824 + 72 >> 2] = +HEAPF32[$$pre475 + ($i170$0185$i$i * 12 | 0) + 8 >> 2];
       $call$i$i$i$i = +Math_sin(+$835);
       HEAPF32[$824 + 20 >> 2] = $call$i$i$i$i;
       $call2$i$i$i$i = +Math_cos(+$835);
       HEAPF32[$824 + 24 >> 2] = $call2$i$i$i$i;
       $847 = +HEAPF32[$824 + 28 >> 2];
       $848 = +HEAPF32[$824 + 32 >> 2];
       $sub$i4$i$i$i = (HEAP32[tempDoublePtr >> 2] = $827, +HEAPF32[tempDoublePtr >> 2]) - ($call2$i$i$i$i * $847 - $call$i$i$i$i * $848);
       $sub3$i$i$i$i15 = (HEAP32[tempDoublePtr >> 2] = $830, +HEAPF32[tempDoublePtr >> 2]) - ($call$i$i$i$i * $847 + $call2$i$i$i$i * $848);
       $850 = +$sub$i4$i$i$i;
       $851 = +$sub3$i$i$i$i15;
       $852 = $824 + 12 | 0;
       HEAPF32[$852 >> 2] = $850;
       HEAPF32[$852 + 4 >> 2] = $851;
       $i170$0185$i$i = $i170$0185$i$i + 1 | 0;
      } while (($i170$0185$i$i | 0) < ($823 | 0));
     }
     $856 = HEAP32[$m_velocityConstraints$i14$i$i >> 2] | 0;
     __ZN8b2Island6ReportEPK27b2ContactVelocityConstraint($island$i, $856);
     do if (!$tobool157$i) {
      $857 = HEAP32[$m_bodyCount$i$i >> 2] | 0;
      if (($857 | 0) <= 0) break;
      $858 = HEAP32[$m_bodies$i >> 2] | 0;
      $i204$0183$i$i = 0;
      $minSleepTime$0182$i$i = 3.4028234663852886e+38;
      while (1) {
       $859 = HEAP32[$858 + ($i204$0183$i$i << 2) >> 2] | 0;
       L233 : do if ((HEAP32[$859 >> 2] | 0) == 0) $minSleepTime$1$i$i = $minSleepTime$0182$i$i; else {
        do if (!((HEAP16[$859 + 4 >> 1] & 4) == 0)) {
         $862 = +HEAPF32[$859 + 72 >> 2];
         if ($862 * $862 > .001218469929881394) break;
         $863 = +HEAPF32[$859 + 64 >> 2];
         $864 = +HEAPF32[$859 + 68 >> 2];
         if ($863 * $863 + $864 * $864 > 9999999747378752.0e-20) break;
         $m_sleepTime229$i$i = $859 + 144 | 0;
         $add230$i$i = +HEAPF32[$m_sleepTime229$i$i >> 2] + $dt;
         HEAPF32[$m_sleepTime229$i$i >> 2] = $add230$i$i;
         $minSleepTime$1$i$i = $minSleepTime$0182$i$i < $add230$i$i ? $minSleepTime$0182$i$i : $add230$i$i;
         break L233;
        } while (0);
        HEAPF32[$859 + 144 >> 2] = 0.0;
        $minSleepTime$1$i$i = 0.0;
       } while (0);
       $i204$0183$i$i = $i204$0183$i$i + 1 | 0;
       if (($i204$0183$i$i | 0) >= ($857 | 0)) break; else $minSleepTime$0182$i$i = $minSleepTime$1$i$i;
      }
      if (!($minSleepTime$1$i$i >= .5) | $positionSolved$0$off0$i$i) break; else $i242$0180$i$i = 0;
      do {
       $866 = HEAP32[$858 + ($i242$0180$i$i << 2) >> 2] | 0;
       $m_flags$i$i$i = $866 + 4 | 0;
       HEAP16[$m_flags$i$i$i >> 1] = HEAPU16[$m_flags$i$i$i >> 1] & 65533;
       HEAPF32[$866 + 144 >> 2] = 0.0;
       $x$i$i$i$i19 = $866 + 64 | 0;
       HEAP32[$x$i$i$i$i19 + 0 >> 2] = 0;
       HEAP32[$x$i$i$i$i19 + 4 >> 2] = 0;
       HEAP32[$x$i$i$i$i19 + 8 >> 2] = 0;
       HEAP32[$x$i$i$i$i19 + 12 >> 2] = 0;
       HEAP32[$x$i$i$i$i19 + 16 >> 2] = 0;
       HEAP32[$x$i$i$i$i19 + 20 >> 2] = 0;
       $i242$0180$i$i = $i242$0180$i$i + 1 | 0;
      } while (($i242$0180$i$i | 0) < ($857 | 0));
     } while (0);
     $868 = HEAP32[$m_allocator$i10$i$i >> 2] | 0;
     __ZN16b2StackAllocator4FreeEPv($868, $856);
     __ZN16b2StackAllocator4FreeEPv($868, HEAP32[$m_positionConstraints$i$i$i$i >> 2] | 0);
     HEAPF32[$solveInit$i >> 2] = +HEAPF32[$solveInit$i >> 2] + 0.0;
     HEAPF32[$solveVelocity$i >> 2] = +HEAPF32[$solveVelocity$i >> 2] + 0.0;
     HEAPF32[$solvePosition$i >> 2] = +HEAPF32[$solvePosition$i >> 2] + 0.0;
     $873 = HEAP32[$m_bodyCount$i$i >> 2] | 0;
     if (($873 | 0) <= 0) break;
     $874 = HEAP32[$m_bodies$i >> 2] | 0;
     $i$0110$i = 0;
     do {
      $875 = HEAP32[$874 + ($i$0110$i << 2) >> 2] | 0;
      if ((HEAP32[$875 >> 2] | 0) == 0) {
       $m_flags180$i = $875 + 4 | 0;
       HEAP16[$m_flags180$i >> 1] = HEAPU16[$m_flags180$i >> 1] & 65534;
      }
      $i$0110$i = $i$0110$i + 1 | 0;
     } while (($i$0110$i | 0) < ($873 | 0));
    } while (0);
    $seed$0116$i = HEAP32[$seed$0116$i + 96 >> 2] | 0;
    if (($seed$0116$i | 0) == 0) break L59;
   }
   if ((label | 0) == 43) ___assert_fail(14008, 13864, 445, 14032); else if ((label | 0) == 54) ___assert_fail(14040, 13864, 495, 14032); else if ((label | 0) == 61) ___assert_fail(14696, 14728, 68, 14768); else if ((label | 0) == 64) ___assert_fail(14040, 13864, 524, 14032);
  } while (0);
  __ZN16b2StackAllocator4FreeEPv($m_stackAllocator$i, $call$i);
  $b194$083$i = HEAP32[$m_bodyList$i4 >> 2] | 0;
  if (($b194$083$i | 0) != 0) {
   $b194$085$i = $b194$083$i;
   do {
    if (!((HEAP16[$b194$085$i + 4 >> 1] & 1) == 0)) if ((HEAP32[$b194$085$i >> 2] | 0) != 0) __ZN6b2Body19SynchronizeFixturesEv($b194$085$i);
    $b194$085$i = HEAP32[$b194$085$i + 96 >> 2] | 0;
   } while (($b194$085$i | 0) != 0);
  }
  __ZN16b2ContactManager15FindNewContactsEv($m_contactManager12);
  HEAPF32[$this + 103020 >> 2] = 0.0;
  __ZN8b2IslandD2Ev($island$i);
  HEAPF32[$this + 103004 >> 2] = 0.0;
 }
 if ((HEAP8[$this + 102993 >> 0] | 0) == 0) label = 366; else if ($cmp) {
  $m_contactListener$i26 = $this + 102944 | 0;
  __ZN8b2IslandC2EiiiP16b2StackAllocatorP17b2ContactListener($island$i23, 64, 32, 0, $this + 68 | 0, HEAP32[$m_contactListener$i26 >> 2] | 0);
  if ((HEAP8[$m_stepComplete >> 0] | 0) != 0) {
   $b$0464$i = HEAP32[$this + 102952 >> 2] | 0;
   if (($b$0464$i | 0) != 0) {
    $b$0466$i = $b$0464$i;
    do {
     $m_flags$i30 = $b$0466$i + 4 | 0;
     HEAP16[$m_flags$i30 >> 1] = HEAPU16[$m_flags$i30 >> 1] & 65534;
     HEAPF32[$b$0466$i + 60 >> 2] = 0.0;
     $b$0466$i = HEAP32[$b$0466$i + 96 >> 2] | 0;
    } while (($b$0466$i | 0) != 0);
   }
   $c$0461$i = HEAP32[$m_contactList$i >> 2] | 0;
   if (($c$0461$i | 0) != 0) {
    $c$0463$i = $c$0461$i;
    do {
     $m_flags8$i = $c$0463$i + 4 | 0;
     HEAP32[$m_flags8$i >> 2] = HEAP32[$m_flags8$i >> 2] & -34;
     HEAP32[$c$0463$i + 128 >> 2] = 0;
     HEAPF32[$c$0463$i + 132 >> 2] = 1.0;
     $c$0463$i = HEAP32[$c$0463$i + 12 >> 2] | 0;
    } while (($c$0463$i | 0) != 0);
   }
  }
  $m_bodyCount$i$i38 = $island$i23 + 28 | 0;
  $m_contactCount$i$i39 = $island$i23 + 36 | 0;
  $m_jointCount$i$i40 = $island$i23 + 32 | 0;
  $arrayinit$element$i = $bodies$i + 4 | 0;
  $m_bodyCapacity$i = $island$i23 + 40 | 0;
  $m_contactCapacity$i = $island$i23 + 44 | 0;
  $m_subStepping$i = $this + 102994 | 0;
  $m_bodies$i41 = $island$i23 + 8 | 0;
  $m_vertices$i$i$i$i$i = $contactSolverDef$i$i21 + 16 | 0;
  $m_count$i$i$i$i$i = $contactSolverDef$i$i21 + 20 | 0;
  $m_radius$i$i$i$i$i = $contactSolverDef$i$i21 + 24 | 0;
  $m_vertices$i$i1$i$i$i = $contactSolverDef$i$i21 + 44 | 0;
  $m_count$i$i2$i$i$i = $contactSolverDef$i$i21 + 48 | 0;
  $m_radius$i$i3$i$i$i = $contactSolverDef$i$i21 + 52 | 0;
  $proxyB$i = $contactSolverDef$i$i21 + 28 | 0;
  $sweepA$i = $contactSolverDef$i$i21 + 56 | 0;
  $sweepB$i = $contactSolverDef$i$i21 + 92 | 0;
  $tMax$i = $contactSolverDef$i$i21 + 128 | 0;
  $sweepA$i$i$sroa$0$0$idx = $contactSolverDef$i$i21 + 56 | 0;
  $sweepA$i$i$sroa$1$4$idx407 = $contactSolverDef$i$i21 + 60 | 0;
  $sweepA$i$i$sroa$2$8$idx411 = $contactSolverDef$i$i21 + 64 | 0;
  $sweepA$i$i$sroa$3$12$idx415 = $contactSolverDef$i$i21 + 68 | 0;
  $sweepA$i$i$sroa$4$16$idx419 = $contactSolverDef$i$i21 + 72 | 0;
  $sweepA$i$i$sroa$5$20$idx423 = $contactSolverDef$i$i21 + 76 | 0;
  $sweepA$i$i$sroa$6$24$idx427 = $contactSolverDef$i$i21 + 80 | 0;
  $sweepA$i$i$sroa$7$28$idx432 = $contactSolverDef$i$i21 + 84 | 0;
  $sweepA$i$i$sroa$8$32$idx437 = $contactSolverDef$i$i21 + 88 | 0;
  $sweepB$i$i$sroa$0$0$idx = $contactSolverDef$i$i21 + 92 | 0;
  $sweepB$i$i$sroa$1$4$idx370 = $contactSolverDef$i$i21 + 96 | 0;
  $sweepB$i$i$sroa$2$8$idx374 = $contactSolverDef$i$i21 + 100 | 0;
  $sweepB$i$i$sroa$3$12$idx378 = $contactSolverDef$i$i21 + 104 | 0;
  $sweepB$i$i$sroa$4$16$idx382 = $contactSolverDef$i$i21 + 108 | 0;
  $sweepB$i$i$sroa$5$20$idx386 = $contactSolverDef$i$i21 + 112 | 0;
  $sweepB$i$i$sroa$6$24$idx390 = $contactSolverDef$i$i21 + 116 | 0;
  $sweepB$i$i$sroa$7$28$idx395 = $contactSolverDef$i$i21 + 120 | 0;
  $sweepB$i$i$sroa$8$32$idx400 = $contactSolverDef$i$i21 + 124 | 0;
  $count$i$i76 = $vararg_buffer501 + 4 | 0;
  $proxyB10$i$i = $xfB$i$i$i + 28 | 0;
  $useRadii$i$i = $xfB$i$i$i + 88 | 0;
  $transformA$i$i = $xfB$i$i$i + 56 | 0;
  $xfA$sroa$1$8$idx125$i$i = $xfB$i$i$i + 64 | 0;
  $xfA$sroa$2$12$idx126$i$i = $xfB$i$i$i + 68 | 0;
  $transformB$i$i = $xfB$i$i$i + 72 | 0;
  $xfB$sroa$1$8$idx122$i$i = $xfB$i$i$i + 80 | 0;
  $xfB$sroa$2$12$idx123$i$i = $xfB$i$i$i + 84 | 0;
  $distance$i$i = $psm$i$i$i + 16 | 0;
  $m_proxyB$i$i$i = $fcn$i$i + 4 | 0;
  $sweepA$i$i$sroa$0$0$idx405 = $fcn$i$i + 8 | 0;
  $sweepA$i$i$sroa$1$4$idx409 = $fcn$i$i + 12 | 0;
  $sweepA$i$i$sroa$2$8$idx413 = $fcn$i$i + 16 | 0;
  $sweepA$i$i$sroa$3$12$idx417 = $fcn$i$i + 20 | 0;
  $sweepA$i$i$sroa$4$16$idx421 = $fcn$i$i + 24 | 0;
  $sweepA$i$i$sroa$5$20$idx425 = $fcn$i$i + 28 | 0;
  $sweepA$i$i$sroa$6$24$idx430 = $fcn$i$i + 32 | 0;
  $sweepA$i$i$sroa$7$28$idx435 = $fcn$i$i + 36 | 0;
  $sweepA$i$i$sroa$8$32$idx439 = $fcn$i$i + 40 | 0;
  $sweepB$i$i$sroa$0$0$idx368 = $fcn$i$i + 44 | 0;
  $sweepB$i$i$sroa$1$4$idx372 = $fcn$i$i + 48 | 0;
  $sweepB$i$i$sroa$2$8$idx376 = $fcn$i$i + 52 | 0;
  $sweepB$i$i$sroa$3$12$idx380 = $fcn$i$i + 56 | 0;
  $sweepB$i$i$sroa$4$16$idx384 = $fcn$i$i + 60 | 0;
  $sweepB$i$i$sroa$5$20$idx388 = $fcn$i$i + 64 | 0;
  $sweepB$i$i$sroa$6$24$idx393 = $fcn$i$i + 68 | 0;
  $sweepB$i$i$sroa$7$28$idx398 = $fcn$i$i + 72 | 0;
  $sweepB$i$i$sroa$8$32$idx402 = $fcn$i$i + 76 | 0;
  $m_type$i$i$i95 = $fcn$i$i + 80 | 0;
  $arrayidx10$i$i$i = $vararg_buffer501 + 9 | 0;
  $m_axis$i$i$i = $fcn$i$i + 92 | 0;
  $y$i$i208$i$i$i = $fcn$i$i + 96 | 0;
  $arrayidx29$i$i$i = $vararg_buffer501 + 10 | 0;
  $m_localPoint$i$i$i = $fcn$i$i + 84 | 0;
  $x$i151$i$i$i = $fcn$i$i + 92 | 0;
  $x1$i223$i$i$i = $fcn$i$i + 84 | 0;
  $y$i226$i$i$i = $fcn$i$i + 88 | 0;
  $m_positions$i$i162 = $island$i23 + 20 | 0;
  $m_velocities$i$i163 = $island$i23 + 24 | 0;
  $m_contacts$i$i169 = $island$i23 + 12 | 0;
  $contacts$i$i170 = $contactSolverDef$i$i21 + 24 | 0;
  $count$i60$i = $contactSolverDef$i$i21 + 28 | 0;
  $allocator$i$i172 = $contactSolverDef$i$i21 + 40 | 0;
  $subStep$i$sroa$1$4$idx347 = $contactSolverDef$i$i21 + 4 | 0;
  $subStep$i$sroa$2$8$idx349 = $contactSolverDef$i$i21 + 8 | 0;
  $subStep$i$sroa$3$12$idx351 = $contactSolverDef$i$i21 + 12 | 0;
  $subStep$i$sroa$4$16$idx354 = $contactSolverDef$i$i21 + 16 | 0;
  $subStep$i$sroa$5$20$idx = $contactSolverDef$i$i21 + 20 | 0;
  $subStep$i$sroa$6$21$raw_idx = $contactSolverDef$i$i21 + 21 | 0;
  $positions$i$i173 = $contactSolverDef$i$i21 + 32 | 0;
  $velocities$i$i174 = $contactSolverDef$i$i21 + 36 | 0;
  $cmp55107$i$i = ($velocityIterations | 0) > 0;
  $m_velocityConstraints$i$i216 = $contactSolver$i$i22 + 40 | 0;
  $m_allocator$i22$i$i = $contactSolver$i$i22 + 32 | 0;
  $m_positionConstraints$i24$i$i = $contactSolver$i$i22 + 36 | 0;
  $m_count$i$i$i176 = $contactSolver$i$i22 + 48 | 0;
  $m_positions$i$i$i = $contactSolver$i$i22 + 24 | 0;
  $s$i145$i$i$i = $vararg_buffer501 + 8 | 0;
  $c$i147$i$i$i = $vararg_buffer501 + 12 | 0;
  $s$i142$i$i$i = $xfB$i$i$i + 8 | 0;
  $c$i143$i$i$i = $xfB$i$i$i + 12 | 0;
  $point35$i$i$i = $psm$i$i$i + 8 | 0;
  $separation36$i$i$i = $psm$i$i$i + 16 | 0;
  L279 : while (1) {
   $c14$0423$i = HEAP32[$m_contactList$i >> 2] | 0;
   if (($c14$0423$i | 0) == 0) {
    label = 289;
    break;
   } else {
    $c14$0427$i = $c14$0423$i;
    $minAlpha$0425$i = 1.0;
    $minContact$0426$i = 0;
   }
   while (1) {
    $m_flags$i$i43 = $c14$0427$i + 4 | 0;
    $885 = HEAP32[$m_flags$i$i43 >> 2] | 0;
    do if (($885 & 4 | 0) == 0) {
     $minAlpha$1$i = $minAlpha$0425$i;
     $minContact$1$i = $minContact$0426$i;
    } else if ((HEAP32[$c14$0427$i + 128 >> 2] | 0) > 8) {
     $minAlpha$1$i = $minAlpha$0425$i;
     $minContact$1$i = $minContact$0426$i;
    } else {
     if (($885 & 32 | 0) == 0) {
      $888 = HEAP32[$c14$0427$i + 48 >> 2] | 0;
      $889 = HEAP32[$c14$0427$i + 52 >> 2] | 0;
      if ((HEAP8[$888 + 38 >> 0] | 0) != 0) {
       $minAlpha$1$i = $minAlpha$0425$i;
       $minContact$1$i = $minContact$0426$i;
       break;
      }
      if ((HEAP8[$889 + 38 >> 0] | 0) != 0) {
       $minAlpha$1$i = $minAlpha$0425$i;
       $minContact$1$i = $minContact$0426$i;
       break;
      }
      $892 = HEAP32[$888 + 8 >> 2] | 0;
      $893 = HEAP32[$889 + 8 >> 2] | 0;
      $894 = HEAP32[$892 >> 2] | 0;
      $895 = HEAP32[$893 >> 2] | 0;
      if (!(($894 | 0) == 2 | ($895 | 0) == 2)) {
       label = 192;
       break L279;
      }
      $896 = HEAP16[$892 + 4 >> 1] | 0;
      $897 = HEAP16[$893 + 4 >> 1] | 0;
      if (!(($896 & 2) != 0 & ($894 | 0) != 0 | ($897 & 2) != 0 & ($895 | 0) != 0)) {
       $minAlpha$1$i = $minAlpha$0425$i;
       $minContact$1$i = $minContact$0426$i;
       break;
      }
      if (!(($896 & 8) != 0 | ($894 | 0) != 2 | (($897 & 8) != 0 | ($895 | 0) != 2))) {
       $minAlpha$1$i = $minAlpha$0425$i;
       $minContact$1$i = $minContact$0426$i;
       break;
      }
      $m_sweep90$i = $892 + 28 | 0;
      $alpha091$i = $892 + 60 | 0;
      $900 = +HEAPF32[$alpha091$i >> 2];
      $m_sweep94$i = $893 + 28 | 0;
      $alpha095$i = $893 + 60 | 0;
      $901 = +HEAPF32[$alpha095$i >> 2];
      do if ($900 < $901) {
       if (!($900 < 1.0)) {
        label = 197;
        break L279;
       }
       $div$i$i66 = ($901 - $900) / (1.0 - $900);
       $c0$i$i67 = $892 + 36 | 0;
       $sub6$i$i = 1.0 - $div$i$i66;
       $906 = +(+HEAPF32[$c0$i$i67 >> 2] * $sub6$i$i + $div$i$i66 * +HEAPF32[$892 + 44 >> 2]);
       $907 = +($sub6$i$i * +HEAPF32[$892 + 40 >> 2] + $div$i$i66 * +HEAPF32[$892 + 48 >> 2]);
       $908 = $c0$i$i67;
       HEAPF32[$908 >> 2] = $906;
       HEAPF32[$908 + 4 >> 2] = $907;
       $a0$i$i69 = $892 + 52 | 0;
       HEAPF32[$a0$i$i69 >> 2] = $sub6$i$i * +HEAPF32[$a0$i$i69 >> 2] + $div$i$i66 * +HEAPF32[$892 + 56 >> 2];
       HEAPF32[$alpha091$i >> 2] = $901;
       $alpha089$0$i = $901;
      } else {
       if (!($901 < $900)) {
        $alpha089$0$i = $900;
        break;
       }
       if (!($901 < 1.0)) {
        label = 201;
        break L279;
       }
       $div$i206$i = ($900 - $901) / (1.0 - $901);
       $c0$i207$i = $893 + 36 | 0;
       $sub6$i208$i = 1.0 - $div$i206$i;
       $918 = +(+HEAPF32[$c0$i207$i >> 2] * $sub6$i208$i + $div$i206$i * +HEAPF32[$893 + 44 >> 2]);
       $919 = +($sub6$i208$i * +HEAPF32[$893 + 40 >> 2] + $div$i206$i * +HEAPF32[$893 + 48 >> 2]);
       $920 = $c0$i207$i;
       HEAPF32[$920 >> 2] = $918;
       HEAPF32[$920 + 4 >> 2] = $919;
       $a0$i223$i = $893 + 52 | 0;
       HEAPF32[$a0$i223$i >> 2] = $sub6$i208$i * +HEAPF32[$a0$i223$i >> 2] + $div$i206$i * +HEAPF32[$893 + 56 >> 2];
       HEAPF32[$alpha095$i >> 2] = $900;
       $alpha089$0$i = $900;
      } while (0);
      if (!($alpha089$0$i < 1.0)) {
       label = 204;
       break L279;
      }
      $926 = HEAP32[$c14$0427$i + 56 >> 2] | 0;
      $927 = HEAP32[$c14$0427$i + 60 >> 2] | 0;
      HEAP32[$m_vertices$i$i$i$i$i >> 2] = 0;
      HEAP32[$m_count$i$i$i$i$i >> 2] = 0;
      HEAPF32[$m_radius$i$i$i$i$i >> 2] = 0.0;
      HEAP32[$m_vertices$i$i1$i$i$i >> 2] = 0;
      HEAP32[$m_count$i$i2$i$i$i >> 2] = 0;
      HEAPF32[$m_radius$i$i3$i$i$i >> 2] = 0.0;
      __ZN15b2DistanceProxy3SetEPK7b2Shapei($contactSolverDef$i$i21, HEAP32[$888 + 12 >> 2] | 0, $926);
      __ZN15b2DistanceProxy3SetEPK7b2Shapei($proxyB$i, HEAP32[$889 + 12 >> 2] | 0, $927);
      dest = $sweepA$i + 0 | 0;
      src = $m_sweep90$i + 0 | 0;
      stop = dest + 36 | 0;
      do {
       HEAP32[dest >> 2] = HEAP32[src >> 2];
       dest = dest + 4 | 0;
       src = src + 4 | 0;
      } while ((dest | 0) < (stop | 0));
      dest = $sweepB$i + 0 | 0;
      src = $m_sweep94$i + 0 | 0;
      stop = dest + 36 | 0;
      do {
       HEAP32[dest >> 2] = HEAP32[src >> 2];
       dest = dest + 4 | 0;
       src = src + 4 | 0;
      } while ((dest | 0) < (stop | 0));
      HEAPF32[$tMax$i >> 2] = 1.0;
      HEAP32[1566] = (HEAP32[1566] | 0) + 1;
      $sweepA$i$i$sroa$0$0$copyload = +HEAPF32[$sweepA$i$i$sroa$0$0$idx >> 2];
      $sweepA$i$i$sroa$1$4$copyload = +HEAPF32[$sweepA$i$i$sroa$1$4$idx407 >> 2];
      $sweepA$i$i$sroa$2$8$copyload = +HEAPF32[$sweepA$i$i$sroa$2$8$idx411 >> 2];
      $sweepA$i$i$sroa$3$12$copyload = +HEAPF32[$sweepA$i$i$sroa$3$12$idx415 >> 2];
      $sweepA$i$i$sroa$4$16$copyload = +HEAPF32[$sweepA$i$i$sroa$4$16$idx419 >> 2];
      $sweepA$i$i$sroa$5$20$copyload = +HEAPF32[$sweepA$i$i$sroa$5$20$idx423 >> 2];
      $sweepA$i$i$sroa$6$24$copyload = +HEAPF32[$sweepA$i$i$sroa$6$24$idx427 >> 2];
      $sweepA$i$i$sroa$8$32$copyload = +HEAPF32[$sweepA$i$i$sroa$8$32$idx437 >> 2];
      $sweepB$i$i$sroa$0$0$copyload = +HEAPF32[$sweepB$i$i$sroa$0$0$idx >> 2];
      $sweepB$i$i$sroa$1$4$copyload = +HEAPF32[$sweepB$i$i$sroa$1$4$idx370 >> 2];
      $sweepB$i$i$sroa$2$8$copyload = +HEAPF32[$sweepB$i$i$sroa$2$8$idx374 >> 2];
      $sweepB$i$i$sroa$3$12$copyload = +HEAPF32[$sweepB$i$i$sroa$3$12$idx378 >> 2];
      $sweepB$i$i$sroa$4$16$copyload = +HEAPF32[$sweepB$i$i$sroa$4$16$idx382 >> 2];
      $sweepB$i$i$sroa$5$20$copyload = +HEAPF32[$sweepB$i$i$sroa$5$20$idx386 >> 2];
      $sweepB$i$i$sroa$6$24$copyload = +HEAPF32[$sweepB$i$i$sroa$6$24$idx390 >> 2];
      $sweepB$i$i$sroa$8$32$copyload = +HEAPF32[$sweepB$i$i$sroa$8$32$idx400 >> 2];
      $mul$i$i4$i = +Math_floor(+($sweepA$i$i$sroa$6$24$copyload / 6.2831854820251465)) * 6.2831854820251465;
      $sub$i$i5$i = $sweepA$i$i$sroa$6$24$copyload - $mul$i$i4$i;
      $sub3$i$i7$i = +HEAPF32[$sweepA$i$i$sroa$7$28$idx432 >> 2] - $mul$i$i4$i;
      $mul$i70$i$i = +Math_floor(+($sweepB$i$i$sroa$6$24$copyload / 6.2831854820251465)) * 6.2831854820251465;
      $sub$i71$i$i = $sweepB$i$i$sroa$6$24$copyload - $mul$i70$i$i;
      $sub3$i73$i$i = +HEAPF32[$sweepB$i$i$sroa$7$28$idx395 >> 2] - $mul$i70$i$i;
      $sub$i9$i = +HEAPF32[$m_radius$i$i$i$i$i >> 2] + +HEAPF32[$m_radius$i$i3$i$i$i >> 2] + -.014999999664723873;
      $cond$i$i$i75 = $sub$i9$i < .004999999888241291 ? .004999999888241291 : $sub$i9$i;
      if (!($cond$i$i$i75 > .0012499999720603228)) {
       label = 206;
       break L279;
      }
      HEAP16[$count$i$i76 >> 1] = 0;
      HEAP32[$xfB$i$i$i + 0 >> 2] = HEAP32[$contactSolverDef$i$i21 + 0 >> 2];
      HEAP32[$xfB$i$i$i + 4 >> 2] = HEAP32[$contactSolverDef$i$i21 + 4 >> 2];
      HEAP32[$xfB$i$i$i + 8 >> 2] = HEAP32[$contactSolverDef$i$i21 + 8 >> 2];
      HEAP32[$xfB$i$i$i + 12 >> 2] = HEAP32[$contactSolverDef$i$i21 + 12 >> 2];
      HEAP32[$xfB$i$i$i + 16 >> 2] = HEAP32[$contactSolverDef$i$i21 + 16 >> 2];
      HEAP32[$xfB$i$i$i + 20 >> 2] = HEAP32[$contactSolverDef$i$i21 + 20 >> 2];
      HEAP32[$xfB$i$i$i + 24 >> 2] = HEAP32[$contactSolverDef$i$i21 + 24 >> 2];
      HEAP32[$proxyB10$i$i + 0 >> 2] = HEAP32[$proxyB$i + 0 >> 2];
      HEAP32[$proxyB10$i$i + 4 >> 2] = HEAP32[$proxyB$i + 4 >> 2];
      HEAP32[$proxyB10$i$i + 8 >> 2] = HEAP32[$proxyB$i + 8 >> 2];
      HEAP32[$proxyB10$i$i + 12 >> 2] = HEAP32[$proxyB$i + 12 >> 2];
      HEAP32[$proxyB10$i$i + 16 >> 2] = HEAP32[$proxyB$i + 16 >> 2];
      HEAP32[$proxyB10$i$i + 20 >> 2] = HEAP32[$proxyB$i + 20 >> 2];
      HEAP32[$proxyB10$i$i + 24 >> 2] = HEAP32[$proxyB$i + 24 >> 2];
      HEAP8[$useRadii$i$i >> 0] = 0;
      $add16$i$i = $cond$i$i$i75 + .0012499999720603228;
      $sub31$i$i = $cond$i$i$i75 + -.0012499999720603228;
      $iter$0$i$i = 0;
      $t1$0$i$i = 0.0;
      L303 : while (1) {
       $sub$i81$i$i = 1.0 - $t1$0$i$i;
       $add$i$i20$i = $sub$i81$i$i * $sub$i$i5$i + $t1$0$i$i * $sub3$i$i7$i;
       $call$i$i$i$i77 = +Math_sin(+$add$i$i20$i);
       $call2$i$i$i$i78 = +Math_cos(+$add$i$i20$i);
       $sub$i$i$i$i81 = $sub$i81$i$i * $sweepA$i$i$sroa$2$8$copyload + $t1$0$i$i * $sweepA$i$i$sroa$4$16$copyload - ($call2$i$i$i$i78 * $sweepA$i$i$sroa$0$0$copyload - $call$i$i$i$i77 * $sweepA$i$i$sroa$1$4$copyload);
       $sub4$i$i$i$i82 = $sub$i81$i$i * $sweepA$i$i$sroa$3$12$copyload + $t1$0$i$i * $sweepA$i$i$sroa$5$20$copyload - ($call$i$i$i$i77 * $sweepA$i$i$sroa$0$0$copyload + $call2$i$i$i$i78 * $sweepA$i$i$sroa$1$4$copyload);
       $add$i104$i$i = $sub$i81$i$i * $sub$i71$i$i + $t1$0$i$i * $sub3$i73$i$i;
       $call$i$i105$i$i = +Math_sin(+$add$i104$i$i);
       $call2$i$i107$i$i = +Math_cos(+$add$i104$i$i);
       $sub$i$i118$i$i = $sub$i81$i$i * $sweepB$i$i$sroa$2$8$copyload + $t1$0$i$i * $sweepB$i$i$sroa$4$16$copyload - ($call2$i$i107$i$i * $sweepB$i$i$sroa$0$0$copyload - $call$i$i105$i$i * $sweepB$i$i$sroa$1$4$copyload);
       $sub4$i$i120$i$i = $sub$i81$i$i * $sweepB$i$i$sroa$3$12$copyload + $t1$0$i$i * $sweepB$i$i$sroa$5$20$copyload - ($call$i$i105$i$i * $sweepB$i$i$sroa$0$0$copyload + $call2$i$i107$i$i * $sweepB$i$i$sroa$1$4$copyload);
       $933 = +$sub$i$i$i$i81;
       $934 = +$sub4$i$i$i$i82;
       $935 = $transformA$i$i;
       HEAPF32[$935 >> 2] = $933;
       HEAPF32[$935 + 4 >> 2] = $934;
       HEAPF32[$xfA$sroa$1$8$idx125$i$i >> 2] = $call$i$i$i$i77;
       HEAPF32[$xfA$sroa$2$12$idx126$i$i >> 2] = $call2$i$i$i$i78;
       $939 = +$sub$i$i118$i$i;
       $940 = +$sub4$i$i120$i$i;
       $941 = $transformB$i$i;
       HEAPF32[$941 >> 2] = $939;
       HEAPF32[$941 + 4 >> 2] = $940;
       HEAPF32[$xfB$sroa$1$8$idx122$i$i >> 2] = $call$i$i105$i$i;
       HEAPF32[$xfB$sroa$2$12$idx123$i$i >> 2] = $call2$i$i107$i$i;
       __Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput($psm$i$i$i, $vararg_buffer501, $xfB$i$i$i);
       $945 = +HEAPF32[$distance$i$i >> 2];
       if ($945 <= 0.0) {
        $iter$1$i$i = $iter$0$i$i;
        $output$i$sroa$0$1 = 2;
        $output$i$sroa$1$1 = 0.0;
        break;
       }
       if ($945 < $add16$i$i) {
        $iter$1$i$i = $iter$0$i$i;
        $output$i$sroa$0$1 = 3;
        $output$i$sroa$1$1 = $t1$0$i$i;
        break;
       }
       HEAP32[$fcn$i$i >> 2] = $contactSolverDef$i$i21;
       HEAP32[$m_proxyB$i$i$i >> 2] = $proxyB$i;
       $946 = HEAP32[$count$i$i76 >> 2] | 0;
       $947 = $946 & 65535;
       $948 = $946 >>> 16;
       $949 = $948 & 255;
       $950 = $946 >>> 24;
       $951 = $950 & 255;
       if (!($947 << 16 >> 16 != 0 & ($947 & 65535) < 3)) {
        label = 211;
        break L279;
       }
       HEAPF32[$sweepA$i$i$sroa$0$0$idx405 >> 2] = $sweepA$i$i$sroa$0$0$copyload;
       HEAPF32[$sweepA$i$i$sroa$1$4$idx409 >> 2] = $sweepA$i$i$sroa$1$4$copyload;
       HEAPF32[$sweepA$i$i$sroa$2$8$idx413 >> 2] = $sweepA$i$i$sroa$2$8$copyload;
       HEAPF32[$sweepA$i$i$sroa$3$12$idx417 >> 2] = $sweepA$i$i$sroa$3$12$copyload;
       HEAPF32[$sweepA$i$i$sroa$4$16$idx421 >> 2] = $sweepA$i$i$sroa$4$16$copyload;
       HEAPF32[$sweepA$i$i$sroa$5$20$idx425 >> 2] = $sweepA$i$i$sroa$5$20$copyload;
       HEAPF32[$sweepA$i$i$sroa$6$24$idx430 >> 2] = $sub$i$i5$i;
       HEAPF32[$sweepA$i$i$sroa$7$28$idx435 >> 2] = $sub3$i$i7$i;
       HEAPF32[$sweepA$i$i$sroa$8$32$idx439 >> 2] = $sweepA$i$i$sroa$8$32$copyload;
       HEAPF32[$sweepB$i$i$sroa$0$0$idx368 >> 2] = $sweepB$i$i$sroa$0$0$copyload;
       HEAPF32[$sweepB$i$i$sroa$1$4$idx372 >> 2] = $sweepB$i$i$sroa$1$4$copyload;
       HEAPF32[$sweepB$i$i$sroa$2$8$idx376 >> 2] = $sweepB$i$i$sroa$2$8$copyload;
       HEAPF32[$sweepB$i$i$sroa$3$12$idx380 >> 2] = $sweepB$i$i$sroa$3$12$copyload;
       HEAPF32[$sweepB$i$i$sroa$4$16$idx384 >> 2] = $sweepB$i$i$sroa$4$16$copyload;
       HEAPF32[$sweepB$i$i$sroa$5$20$idx388 >> 2] = $sweepB$i$i$sroa$5$20$copyload;
       HEAPF32[$sweepB$i$i$sroa$6$24$idx393 >> 2] = $sub$i71$i$i;
       HEAPF32[$sweepB$i$i$sroa$7$28$idx398 >> 2] = $sub3$i73$i$i;
       HEAPF32[$sweepB$i$i$sroa$8$32$idx402 >> 2] = $sweepB$i$i$sroa$8$32$copyload;
       do if ($947 << 16 >> 16 == 1) {
        HEAP32[$m_type$i$i$i95 >> 2] = 0;
        $conv8$i$i$i = $948 & 255;
        if ((HEAP32[$m_count$i$i$i$i$i >> 2] | 0) <= ($conv8$i$i$i | 0)) {
         label = 214;
         break L279;
        }
        $954 = (HEAP32[$m_vertices$i$i$i$i$i >> 2] | 0) + ($conv8$i$i$i << 3) | 0;
        $960 = +HEAPF32[$954 >> 2];
        $961 = +HEAPF32[$954 + 4 >> 2];
        $conv11$i$i$i = HEAPU8[$arrayidx10$i$i$i >> 0] | 0;
        if ((HEAP32[$m_count$i$i2$i$i$i >> 2] | 0) <= ($conv11$i$i$i | 0)) {
         label = 216;
         break L279;
        }
        $965 = (HEAP32[$m_vertices$i$i1$i$i$i >> 2] | 0) + ($conv11$i$i$i << 3) | 0;
        $971 = +HEAPF32[$965 >> 2];
        $972 = +HEAPF32[$965 + 4 >> 2];
        $sub$i181$i$i$i = $sub$i$i118$i$i + ($call2$i$i107$i$i * $971 - $call$i$i105$i$i * $972) - ($sub$i$i$i$i81 + ($call2$i$i$i$i78 * $960 - $call$i$i$i$i77 * $961));
        $sub3$i184$i$i$i = $sub4$i$i120$i$i + ($call$i$i105$i$i * $971 + $call2$i$i107$i$i * $972) - ($sub4$i$i$i$i82 + ($call$i$i$i$i77 * $960 + $call2$i$i$i$i78 * $961));
        $973 = +$sub$i181$i$i$i;
        $974 = +$sub3$i184$i$i$i;
        $975 = $m_axis$i$i$i;
        HEAPF32[$975 >> 2] = $973;
        HEAPF32[$975 + 4 >> 2] = $974;
        $call$i$i$i211$i$i$i = +Math_sqrt(+($sub$i181$i$i$i * $sub$i181$i$i$i + $sub3$i184$i$i$i * $sub3$i184$i$i$i));
        if ($call$i$i$i211$i$i$i < 1.1920928955078125e-7) {
         $1078 = $sweepA$i$i$sroa$2$8$copyload;
         $1079 = $sweepA$i$i$sroa$3$12$copyload;
         $1080 = $sweepA$i$i$sroa$4$16$copyload;
         $1081 = $sweepA$i$i$sroa$5$20$copyload;
         $1082 = $sub$i$i5$i;
         $1083 = $sub3$i$i7$i;
         $1084 = $sweepA$i$i$sroa$0$0$copyload;
         $1085 = $sweepA$i$i$sroa$1$4$copyload;
         $1086 = $sweepB$i$i$sroa$2$8$copyload;
         $1087 = $sweepB$i$i$sroa$3$12$copyload;
         $1088 = $sweepB$i$i$sroa$4$16$copyload;
         $1089 = $sweepB$i$i$sroa$5$20$copyload;
         $1090 = $sub$i71$i$i;
         $1091 = $sub3$i73$i$i;
         $1092 = $sweepB$i$i$sroa$0$0$copyload;
         $1093 = $sweepB$i$i$sroa$1$4$copyload;
         $1534 = 0;
         $pushBackIter$0$i$i = 1;
         $t2$0$i$i = 1.0;
         break;
        }
        $div$i213$i$i$i = 1.0 / $call$i$i$i211$i$i$i;
        HEAPF32[$m_axis$i$i$i >> 2] = $sub$i181$i$i$i * $div$i213$i$i$i;
        HEAPF32[$y$i$i208$i$i$i >> 2] = $sub3$i184$i$i$i * $div$i213$i$i$i;
        $1078 = $sweepA$i$i$sroa$2$8$copyload;
        $1079 = $sweepA$i$i$sroa$3$12$copyload;
        $1080 = $sweepA$i$i$sroa$4$16$copyload;
        $1081 = $sweepA$i$i$sroa$5$20$copyload;
        $1082 = $sub$i$i5$i;
        $1083 = $sub3$i$i7$i;
        $1084 = $sweepA$i$i$sroa$0$0$copyload;
        $1085 = $sweepA$i$i$sroa$1$4$copyload;
        $1086 = $sweepB$i$i$sroa$2$8$copyload;
        $1087 = $sweepB$i$i$sroa$3$12$copyload;
        $1088 = $sweepB$i$i$sroa$4$16$copyload;
        $1089 = $sweepB$i$i$sroa$5$20$copyload;
        $1090 = $sub$i71$i$i;
        $1091 = $sub3$i73$i$i;
        $1092 = $sweepB$i$i$sroa$0$0$copyload;
        $1093 = $sweepB$i$i$sroa$1$4$copyload;
        $1534 = 0;
        $pushBackIter$0$i$i = 1;
        $t2$0$i$i = 1.0;
       } else if ($949 << 24 >> 24 == $951 << 24 >> 24) {
        HEAP32[$m_type$i$i$i95 >> 2] = 2;
        $conv26$i$i$i = HEAPU8[$arrayidx10$i$i$i >> 0] | 0;
        $980 = HEAP32[$m_count$i$i2$i$i$i >> 2] | 0;
        if (($980 | 0) <= ($conv26$i$i$i | 0)) {
         label = 221;
         break L279;
        }
        $981 = HEAP32[$m_vertices$i$i1$i$i$i >> 2] | 0;
        $982 = $981 + ($conv26$i$i$i << 3) | 0;
        $988 = +HEAPF32[$982 >> 2];
        $989 = +HEAPF32[$982 + 4 >> 2];
        $conv30$i$i$i = HEAPU8[$arrayidx29$i$i$i >> 0] | 0;
        if (($980 | 0) <= ($conv30$i$i$i | 0)) {
         label = 223;
         break L279;
        }
        $991 = $981 + ($conv30$i$i$i << 3) | 0;
        $997 = +HEAPF32[$991 >> 2];
        $998 = +HEAPF32[$991 + 4 >> 2];
        $sub$i233$i$i$i = $997 - $988;
        $sub3$i236$i$i$i = $998 - $989;
        $mul1$i247$i$i$i = -$sub$i233$i$i$i;
        $999 = +$sub3$i236$i$i$i;
        $1000 = +$mul1$i247$i$i$i;
        $1001 = $m_axis$i$i$i;
        HEAPF32[$1001 >> 2] = $999;
        HEAPF32[$1001 + 4 >> 2] = $1000;
        $call$i$i$i298$i$i$i = +Math_sqrt(+($sub3$i236$i$i$i * $sub3$i236$i$i$i + $sub$i233$i$i$i * $sub$i233$i$i$i));
        if ($call$i$i$i298$i$i$i < 1.1920928955078125e-7) {
         $1012 = $mul1$i247$i$i$i;
         $1013 = $sub3$i236$i$i$i;
        } else {
         $div$i300$i$i$i = 1.0 / $call$i$i$i298$i$i$i;
         $mul$i301$i$i$i = $sub3$i236$i$i$i * $div$i300$i$i$i;
         HEAPF32[$m_axis$i$i$i >> 2] = $mul$i301$i$i$i;
         $mul2$i302$i$i$i = $div$i300$i$i$i * $mul1$i247$i$i$i;
         HEAPF32[$y$i$i208$i$i$i >> 2] = $mul2$i302$i$i$i;
         $1012 = $mul2$i302$i$i$i;
         $1013 = $mul$i301$i$i$i;
        }
        $mul$i335$i$i$i = ($988 + $997) * .5;
        $mul1$i337$i$i$i = ($989 + $998) * .5;
        $1005 = +$mul$i335$i$i$i;
        $1006 = +$mul1$i337$i$i$i;
        $1007 = $m_localPoint$i$i$i;
        HEAPF32[$1007 >> 2] = $1005;
        HEAPF32[$1007 + 4 >> 2] = $1006;
        $conv45$i$i$i = $948 & 255;
        if ((HEAP32[$m_count$i$i$i$i$i >> 2] | 0) <= ($conv45$i$i$i | 0)) {
         label = 227;
         break L279;
        }
        $1015 = (HEAP32[$m_vertices$i$i$i$i$i >> 2] | 0) + ($conv45$i$i$i << 3) | 0;
        $1021 = +HEAPF32[$1015 >> 2];
        $1022 = +HEAPF32[$1015 + 4 >> 2];
        if (!(($call2$i$i107$i$i * $1013 - $call$i$i105$i$i * $1012) * ($sub$i$i$i$i81 + ($call2$i$i$i$i78 * $1021 - $call$i$i$i$i77 * $1022) - ($sub$i$i118$i$i + ($call2$i$i107$i$i * $mul$i335$i$i$i - $call$i$i105$i$i * $mul1$i337$i$i$i))) + ($call$i$i105$i$i * $1013 + $call2$i$i107$i$i * $1012) * ($sub4$i$i$i$i82 + ($call$i$i$i$i77 * $1021 + $call2$i$i$i$i78 * $1022) - ($sub4$i$i120$i$i + ($call$i$i105$i$i * $mul$i335$i$i$i + $call2$i$i107$i$i * $mul1$i337$i$i$i))) < 0.0)) {
         $1078 = $sweepA$i$i$sroa$2$8$copyload;
         $1079 = $sweepA$i$i$sroa$3$12$copyload;
         $1080 = $sweepA$i$i$sroa$4$16$copyload;
         $1081 = $sweepA$i$i$sroa$5$20$copyload;
         $1082 = $sub$i$i5$i;
         $1083 = $sub3$i$i7$i;
         $1084 = $sweepA$i$i$sroa$0$0$copyload;
         $1085 = $sweepA$i$i$sroa$1$4$copyload;
         $1086 = $sweepB$i$i$sroa$2$8$copyload;
         $1087 = $sweepB$i$i$sroa$3$12$copyload;
         $1088 = $sweepB$i$i$sroa$4$16$copyload;
         $1089 = $sweepB$i$i$sroa$5$20$copyload;
         $1090 = $sub$i71$i$i;
         $1091 = $sub3$i73$i$i;
         $1092 = $sweepB$i$i$sroa$0$0$copyload;
         $1093 = $sweepB$i$i$sroa$1$4$copyload;
         $1534 = 2;
         $pushBackIter$0$i$i = 1;
         $t2$0$i$i = 1.0;
         break;
        }
        $1023 = +-$1013;
        $1024 = +-$1012;
        $1025 = $m_axis$i$i$i;
        HEAPF32[$1025 >> 2] = $1023;
        HEAPF32[$1025 + 4 >> 2] = $1024;
        $1078 = $sweepA$i$i$sroa$2$8$copyload;
        $1079 = $sweepA$i$i$sroa$3$12$copyload;
        $1080 = $sweepA$i$i$sroa$4$16$copyload;
        $1081 = $sweepA$i$i$sroa$5$20$copyload;
        $1082 = $sub$i$i5$i;
        $1083 = $sub3$i$i7$i;
        $1084 = $sweepA$i$i$sroa$0$0$copyload;
        $1085 = $sweepA$i$i$sroa$1$4$copyload;
        $1086 = $sweepB$i$i$sroa$2$8$copyload;
        $1087 = $sweepB$i$i$sroa$3$12$copyload;
        $1088 = $sweepB$i$i$sroa$4$16$copyload;
        $1089 = $sweepB$i$i$sroa$5$20$copyload;
        $1090 = $sub$i71$i$i;
        $1091 = $sub3$i73$i$i;
        $1092 = $sweepB$i$i$sroa$0$0$copyload;
        $1093 = $sweepB$i$i$sroa$1$4$copyload;
        $1534 = 2;
        $pushBackIter$0$i$i = 1;
        $t2$0$i$i = 1.0;
        break;
       } else {
        HEAP32[$m_type$i$i$i95 >> 2] = 1;
        $conv61$i$i$i = $948 & 255;
        $1029 = HEAP32[$m_count$i$i$i$i$i >> 2] | 0;
        if (($1029 | 0) <= ($conv61$i$i$i | 0)) {
         label = 231;
         break L279;
        }
        $1030 = HEAP32[$m_vertices$i$i$i$i$i >> 2] | 0;
        $1031 = $1030 + ($conv61$i$i$i << 3) | 0;
        $1037 = +HEAPF32[$1031 >> 2];
        $1038 = +HEAPF32[$1031 + 4 >> 2];
        if (($1029 | 0) <= ($950 | 0)) {
         label = 233;
         break L279;
        }
        $1039 = $1030 + ($950 << 3) | 0;
        $1045 = +HEAPF32[$1039 >> 2];
        $1046 = +HEAPF32[$1039 + 4 >> 2];
        $sub$i194$i$i$i = $1045 - $1037;
        $sub3$i197$i$i$i = $1046 - $1038;
        $mul1$i189$i$i$i = -$sub$i194$i$i$i;
        $1047 = +$sub3$i197$i$i$i;
        $1048 = +$mul1$i189$i$i$i;
        $1049 = $m_axis$i$i$i;
        HEAPF32[$1049 >> 2] = $1047;
        HEAPF32[$1049 + 4 >> 2] = $1048;
        $call$i$i$i$i$i$i102 = +Math_sqrt(+($sub3$i197$i$i$i * $sub3$i197$i$i$i + $sub$i194$i$i$i * $sub$i194$i$i$i));
        if ($call$i$i$i$i$i$i102 < 1.1920928955078125e-7) {
         $1061 = $mul1$i189$i$i$i;
         $1062 = $sub3$i197$i$i$i;
        } else {
         $div$i$i$i$i104 = 1.0 / $call$i$i$i$i$i$i102;
         $mul$i90$i$i$i = $sub3$i197$i$i$i * $div$i$i$i$i104;
         HEAPF32[$m_axis$i$i$i >> 2] = $mul$i90$i$i$i;
         $mul2$i$i$i$i = $div$i$i$i$i104 * $mul1$i189$i$i$i;
         HEAPF32[$y$i$i208$i$i$i >> 2] = $mul2$i$i$i$i;
         $1061 = $mul2$i$i$i$i;
         $1062 = $mul$i90$i$i$i;
        }
        $mul$i67$i$i$i105 = ($1037 + $1045) * .5;
        $mul1$i$i3$i$i = ($1038 + $1046) * .5;
        $1053 = +$mul$i67$i$i$i105;
        $1054 = +$mul1$i$i3$i$i;
        $1055 = $m_localPoint$i$i$i;
        HEAPF32[$1055 >> 2] = $1053;
        HEAPF32[$1055 + 4 >> 2] = $1054;
        $conv85$i$i$i = HEAPU8[$arrayidx10$i$i$i >> 0] | 0;
        if ((HEAP32[$m_count$i$i2$i$i$i >> 2] | 0) <= ($conv85$i$i$i | 0)) {
         label = 237;
         break L279;
        }
        $1064 = (HEAP32[$m_vertices$i$i1$i$i$i >> 2] | 0) + ($conv85$i$i$i << 3) | 0;
        $1070 = +HEAPF32[$1064 >> 2];
        $1071 = +HEAPF32[$1064 + 4 >> 2];
        if (!(($call2$i$i$i$i78 * $1062 - $call$i$i$i$i77 * $1061) * ($sub$i$i118$i$i + ($call2$i$i107$i$i * $1070 - $call$i$i105$i$i * $1071) - ($sub$i$i$i$i81 + ($call2$i$i$i$i78 * $mul$i67$i$i$i105 - $call$i$i$i$i77 * $mul1$i$i3$i$i))) + ($call$i$i$i$i77 * $1062 + $call2$i$i$i$i78 * $1061) * ($sub4$i$i120$i$i + ($call$i$i105$i$i * $1070 + $call2$i$i107$i$i * $1071) - ($sub4$i$i$i$i82 + ($call$i$i$i$i77 * $mul$i67$i$i$i105 + $call2$i$i$i$i78 * $mul1$i$i3$i$i))) < 0.0)) {
         $1078 = $sweepA$i$i$sroa$2$8$copyload;
         $1079 = $sweepA$i$i$sroa$3$12$copyload;
         $1080 = $sweepA$i$i$sroa$4$16$copyload;
         $1081 = $sweepA$i$i$sroa$5$20$copyload;
         $1082 = $sub$i$i5$i;
         $1083 = $sub3$i$i7$i;
         $1084 = $sweepA$i$i$sroa$0$0$copyload;
         $1085 = $sweepA$i$i$sroa$1$4$copyload;
         $1086 = $sweepB$i$i$sroa$2$8$copyload;
         $1087 = $sweepB$i$i$sroa$3$12$copyload;
         $1088 = $sweepB$i$i$sroa$4$16$copyload;
         $1089 = $sweepB$i$i$sroa$5$20$copyload;
         $1090 = $sub$i71$i$i;
         $1091 = $sub3$i73$i$i;
         $1092 = $sweepB$i$i$sroa$0$0$copyload;
         $1093 = $sweepB$i$i$sroa$1$4$copyload;
         $1534 = 1;
         $pushBackIter$0$i$i = 1;
         $t2$0$i$i = 1.0;
         break;
        }
        $1072 = +-$1062;
        $1073 = +-$1061;
        $1074 = $m_axis$i$i$i;
        HEAPF32[$1074 >> 2] = $1072;
        HEAPF32[$1074 + 4 >> 2] = $1073;
        $1078 = $sweepA$i$i$sroa$2$8$copyload;
        $1079 = $sweepA$i$i$sroa$3$12$copyload;
        $1080 = $sweepA$i$i$sroa$4$16$copyload;
        $1081 = $sweepA$i$i$sroa$5$20$copyload;
        $1082 = $sub$i$i5$i;
        $1083 = $sub3$i$i7$i;
        $1084 = $sweepA$i$i$sroa$0$0$copyload;
        $1085 = $sweepA$i$i$sroa$1$4$copyload;
        $1086 = $sweepB$i$i$sroa$2$8$copyload;
        $1087 = $sweepB$i$i$sroa$3$12$copyload;
        $1088 = $sweepB$i$i$sroa$4$16$copyload;
        $1089 = $sweepB$i$i$sroa$5$20$copyload;
        $1090 = $sub$i71$i$i;
        $1091 = $sub3$i73$i$i;
        $1092 = $sweepB$i$i$sroa$0$0$copyload;
        $1093 = $sweepB$i$i$sroa$1$4$copyload;
        $1534 = 1;
        $pushBackIter$0$i$i = 1;
        $t2$0$i$i = 1.0;
        break;
       } while (0);
       while (1) {
        $sub$i107$i$i$i = 1.0 - $t2$0$i$i;
        $add$i112$i$i$i = $sub$i107$i$i$i * $1082 + $1083 * $t2$0$i$i;
        $call$i$i$i19$i$i = +Math_sin(+$add$i112$i$i$i);
        $call2$i$i$i20$i$i = +Math_cos(+$add$i112$i$i$i);
        $sub$i$i$i28$i$i = $sub$i107$i$i$i * $1078 + $1080 * $t2$0$i$i - ($call2$i$i$i20$i$i * $1084 - $call$i$i$i19$i$i * $1085);
        $sub4$i$i$i29$i$i = $sub$i107$i$i$i * $1079 + $1081 * $t2$0$i$i - ($call$i$i$i19$i$i * $1084 + $call2$i$i$i20$i$i * $1085);
        $add$i133$i$i$i = $sub$i107$i$i$i * $1090 + $1091 * $t2$0$i$i;
        $call$i$i134$i$i$i = +Math_sin(+$add$i133$i$i$i);
        $call2$i$i136$i$i$i = +Math_cos(+$add$i133$i$i$i);
        $sub$i$i147$i$i$i = $sub$i107$i$i$i * $1086 + $1088 * $t2$0$i$i - ($call2$i$i136$i$i$i * $1092 - $call$i$i134$i$i$i * $1093);
        $sub4$i$i149$i$i$i = $sub$i107$i$i$i * $1087 + $1089 * $t2$0$i$i - ($call$i$i134$i$i$i * $1092 + $call2$i$i136$i$i$i * $1093);
        if (($1534 | 0) == 1) {
         $1128 = +HEAPF32[$x$i151$i$i$i >> 2];
         $1129 = +HEAPF32[$y$i$i208$i$i$i >> 2];
         $sub$i244$i$i$i = $call2$i$i$i20$i$i * $1128 - $call$i$i$i19$i$i * $1129;
         $add$i247$i$i$i = $call$i$i$i19$i$i * $1128 + $call2$i$i$i20$i$i * $1129;
         $1130 = +HEAPF32[$x1$i223$i$i$i >> 2];
         $1131 = +HEAPF32[$y$i226$i$i$i >> 2];
         $add$i230$i$i$i = $sub$i$i$i28$i$i + ($call2$i$i$i20$i$i * $1130 - $call$i$i$i19$i$i * $1131);
         $add17$i235$i$i$i = $sub4$i$i$i29$i$i + ($call$i$i$i19$i$i * $1130 + $call2$i$i$i20$i$i * $1131);
         $sub$i217$i$i$i = -$sub$i244$i$i$i;
         $sub2$i219$i$i$i = -$add$i247$i$i$i;
         $add$i211$i$i$i = $call2$i$i136$i$i$i * $sub$i217$i$i$i + $call$i$i134$i$i$i * $sub2$i219$i$i$i;
         $add8$i213$i$i$i = $call2$i$i136$i$i$i * $sub2$i219$i$i$i - $call$i$i134$i$i$i * $sub$i217$i$i$i;
         $1133 = HEAP32[$m_proxyB$i$i$i >> 2] | 0;
         $1134 = HEAP32[$1133 + 16 >> 2] | 0;
         $1135 = HEAP32[$1133 + 20 >> 2] | 0;
         if (($1135 | 0) > 1) {
          $bestIndex$016$i189$i$i$i = 0;
          $bestValue$014$i191$i$i$i = $add8$i213$i$i$i * +HEAPF32[$1134 + 4 >> 2] + $add$i211$i$i$i * +HEAPF32[$1134 >> 2];
          $i$015$i190$i$i$i = 1;
          while (1) {
           $add$i12$i196$i$i$i = $add$i211$i$i$i * +HEAPF32[$1134 + ($i$015$i190$i$i$i << 3) >> 2] + $add8$i213$i$i$i * +HEAPF32[$1134 + ($i$015$i190$i$i$i << 3) + 4 >> 2];
           $cmp5$i197$i$i$i = $add$i12$i196$i$i$i > $bestValue$014$i191$i$i$i;
           $bestIndex$016$i189$i$i$i = $cmp5$i197$i$i$i ? $i$015$i190$i$i$i : $bestIndex$016$i189$i$i$i;
           $i$015$i190$i$i$i = $i$015$i190$i$i$i + 1 | 0;
           if (($i$015$i190$i$i$i | 0) == ($1135 | 0)) break; else $bestValue$014$i191$i$i$i = $cmp5$i197$i$i$i ? $add$i12$i196$i$i$i : $bestValue$014$i191$i$i$i;
          }
          if (($bestIndex$016$i189$i$i$i | 0) > -1) $indexB$i$i$0 = $bestIndex$016$i189$i$i$i; else {
           label = 257;
           break L279;
          }
         } else $indexB$i$i$0 = 0;
         if (($1135 | 0) <= ($indexB$i$i$0 | 0)) {
          label = 257;
          break L279;
         }
         $1140 = $1134 + ($indexB$i$i$0 << 3) | 0;
         $1146 = +HEAPF32[$1140 >> 2];
         $1147 = +HEAPF32[$1140 + 4 >> 2];
         $indexA$i$i$1 = -1;
         $indexB$i$i$1 = $indexB$i$i$0;
         $retval$0$i$i$i = $sub$i244$i$i$i * ($sub$i$i147$i$i$i + ($call2$i$i136$i$i$i * $1146 - $call$i$i134$i$i$i * $1147) - $add$i230$i$i$i) + $add$i247$i$i$i * ($sub4$i$i149$i$i$i + ($call$i$i134$i$i$i * $1146 + $call2$i$i136$i$i$i * $1147) - $add17$i235$i$i$i);
        } else if (($1534 | 0) == 0) {
         $1094 = +HEAPF32[$x$i151$i$i$i >> 2];
         $1095 = +HEAPF32[$y$i$i208$i$i$i >> 2];
         $add$i156$i$i$i = $call2$i$i$i20$i$i * $1094 + $call$i$i$i19$i$i * $1095;
         $add8$i158$i$i$i = $call2$i$i$i20$i$i * $1095 - $call$i$i$i19$i$i * $1094;
         $sub$i162$i$i$i = -$1094;
         $sub2$i164$i$i$i = -$1095;
         $add$i173$i$i$i = $call2$i$i136$i$i$i * $sub$i162$i$i$i + $call$i$i134$i$i$i * $sub2$i164$i$i$i;
         $add8$i175$i$i$i = $call2$i$i136$i$i$i * $sub2$i164$i$i$i - $call$i$i134$i$i$i * $sub$i162$i$i$i;
         $1098 = HEAP32[$fcn$i$i >> 2] | 0;
         $1099 = HEAP32[$1098 + 16 >> 2] | 0;
         $1100 = HEAP32[$1098 + 20 >> 2] | 0;
         if (($1100 | 0) > 1) {
          $bestIndex$016$i316$i$i$i = 0;
          $bestValue$014$i318$i$i$i = $add8$i158$i$i$i * +HEAPF32[$1099 + 4 >> 2] + $add$i156$i$i$i * +HEAPF32[$1099 >> 2];
          $i$015$i317$i$i$i = 1;
          while (1) {
           $add$i12$i323$i$i$i = $add$i156$i$i$i * +HEAPF32[$1099 + ($i$015$i317$i$i$i << 3) >> 2] + $add8$i158$i$i$i * +HEAPF32[$1099 + ($i$015$i317$i$i$i << 3) + 4 >> 2];
           $cmp5$i324$i$i$i = $add$i12$i323$i$i$i > $bestValue$014$i318$i$i$i;
           $bestIndex$1$i326$i$i$i = $cmp5$i324$i$i$i ? $i$015$i317$i$i$i : $bestIndex$016$i316$i$i$i;
           $i$015$i317$i$i$i = $i$015$i317$i$i$i + 1 | 0;
           if (($i$015$i317$i$i$i | 0) == ($1100 | 0)) {
            $bestIndex$0$lcssa$i330$i$i$i = $bestIndex$1$i326$i$i$i;
            break;
           } else {
            $bestIndex$016$i316$i$i$i = $bestIndex$1$i326$i$i$i;
            $bestValue$014$i318$i$i$i = $cmp5$i324$i$i$i ? $add$i12$i323$i$i$i : $bestValue$014$i318$i$i$i;
           }
          }
         } else $bestIndex$0$lcssa$i330$i$i$i = 0;
         $1105 = HEAP32[$m_proxyB$i$i$i >> 2] | 0;
         $1106 = HEAP32[$1105 + 16 >> 2] | 0;
         $1107 = HEAP32[$1105 + 20 >> 2] | 0;
         if (($1107 | 0) > 1) {
          $bestIndex$016$i351$i$i$i = 0;
          $bestValue$014$i353$i$i$i = $add8$i175$i$i$i * +HEAPF32[$1106 + 4 >> 2] + $add$i173$i$i$i * +HEAPF32[$1106 >> 2];
          $i$015$i352$i$i$i = 1;
          while (1) {
           $add$i12$i358$i$i$i = $add$i173$i$i$i * +HEAPF32[$1106 + ($i$015$i352$i$i$i << 3) >> 2] + $add8$i175$i$i$i * +HEAPF32[$1106 + ($i$015$i352$i$i$i << 3) + 4 >> 2];
           $cmp5$i359$i$i$i = $add$i12$i358$i$i$i > $bestValue$014$i353$i$i$i;
           $bestIndex$1$i361$i$i$i = $cmp5$i359$i$i$i ? $i$015$i352$i$i$i : $bestIndex$016$i351$i$i$i;
           $i$015$i352$i$i$i = $i$015$i352$i$i$i + 1 | 0;
           if (($i$015$i352$i$i$i | 0) == ($1107 | 0)) {
            $bestIndex$0$lcssa$i365$i$i$i = $bestIndex$1$i361$i$i$i;
            break;
           } else {
            $bestIndex$016$i351$i$i$i = $bestIndex$1$i361$i$i$i;
            $bestValue$014$i353$i$i$i = $cmp5$i359$i$i$i ? $add$i12$i358$i$i$i : $bestValue$014$i353$i$i$i;
           }
          }
         } else $bestIndex$0$lcssa$i365$i$i$i = 0;
         if (!(($bestIndex$0$lcssa$i330$i$i$i | 0) > -1 & ($1100 | 0) > ($bestIndex$0$lcssa$i330$i$i$i | 0))) {
          label = 248;
          break L279;
         }
         $1112 = $1099 + ($bestIndex$0$lcssa$i330$i$i$i << 3) | 0;
         $1118 = +HEAPF32[$1112 >> 2];
         $1119 = +HEAPF32[$1112 + 4 >> 2];
         if (!(($bestIndex$0$lcssa$i365$i$i$i | 0) > -1 & ($1107 | 0) > ($bestIndex$0$lcssa$i365$i$i$i | 0))) {
          label = 250;
          break L279;
         }
         $1120 = $1106 + ($bestIndex$0$lcssa$i365$i$i$i << 3) | 0;
         $1126 = +HEAPF32[$1120 >> 2];
         $1127 = +HEAPF32[$1120 + 4 >> 2];
         $indexA$i$i$1 = $bestIndex$0$lcssa$i330$i$i$i;
         $indexB$i$i$1 = $bestIndex$0$lcssa$i365$i$i$i;
         $retval$0$i$i$i = $1094 * ($sub$i$i147$i$i$i + ($call2$i$i136$i$i$i * $1126 - $call$i$i134$i$i$i * $1127) - ($sub$i$i$i28$i$i + ($call2$i$i$i20$i$i * $1118 - $call$i$i$i19$i$i * $1119))) + $1095 * ($sub4$i$i149$i$i$i + ($call$i$i134$i$i$i * $1126 + $call2$i$i136$i$i$i * $1127) - ($sub4$i$i$i29$i$i + ($call$i$i$i19$i$i * $1118 + $call2$i$i$i20$i$i * $1119)));
        } else if (($1534 | 0) == 2) {
         $1148 = +HEAPF32[$x$i151$i$i$i >> 2];
         $1149 = +HEAPF32[$y$i$i208$i$i$i >> 2];
         $sub$i63$i$i$i = $call2$i$i136$i$i$i * $1148 - $call$i$i134$i$i$i * $1149;
         $add$i65$i$i$i114 = $call$i$i134$i$i$i * $1148 + $call2$i$i136$i$i$i * $1149;
         $1150 = +HEAPF32[$x1$i223$i$i$i >> 2];
         $1151 = +HEAPF32[$y$i226$i$i$i >> 2];
         $add$i49$i$i$i = $sub$i$i147$i$i$i + ($call2$i$i136$i$i$i * $1150 - $call$i$i134$i$i$i * $1151);
         $add17$i54$i$i$i = $sub4$i$i149$i$i$i + ($call$i$i134$i$i$i * $1150 + $call2$i$i136$i$i$i * $1151);
         $sub$i37$i$i$i = -$sub$i63$i$i$i;
         $sub2$i$i41$i$i = -$add$i65$i$i$i114;
         $add$i33$i$i$i115 = $call2$i$i$i20$i$i * $sub$i37$i$i$i + $call$i$i$i19$i$i * $sub2$i$i41$i$i;
         $add8$i$i$i$i = $call2$i$i$i20$i$i * $sub2$i$i41$i$i - $call$i$i$i19$i$i * $sub$i37$i$i$i;
         $1153 = HEAP32[$fcn$i$i >> 2] | 0;
         $1154 = HEAP32[$1153 + 16 >> 2] | 0;
         $1155 = HEAP32[$1153 + 20 >> 2] | 0;
         if (($1155 | 0) > 1) {
          $bestIndex$016$i$i$i$i = 0;
          $bestValue$014$i$i$i$i = $add8$i$i$i$i * +HEAPF32[$1154 + 4 >> 2] + $add$i33$i$i$i115 * +HEAPF32[$1154 >> 2];
          $i$015$i$i$i$i = 1;
          while (1) {
           $add$i12$i$i$i$i = $add$i33$i$i$i115 * +HEAPF32[$1154 + ($i$015$i$i$i$i << 3) >> 2] + $add8$i$i$i$i * +HEAPF32[$1154 + ($i$015$i$i$i$i << 3) + 4 >> 2];
           $cmp5$i$i$i$i = $add$i12$i$i$i$i > $bestValue$014$i$i$i$i;
           $bestIndex$016$i$i$i$i = $cmp5$i$i$i$i ? $i$015$i$i$i$i : $bestIndex$016$i$i$i$i;
           $i$015$i$i$i$i = $i$015$i$i$i$i + 1 | 0;
           if (($i$015$i$i$i$i | 0) == ($1155 | 0)) break; else $bestValue$014$i$i$i$i = $cmp5$i$i$i$i ? $add$i12$i$i$i$i : $bestValue$014$i$i$i$i;
          }
          if (($bestIndex$016$i$i$i$i | 0) > -1) $indexA$i$i$0 = $bestIndex$016$i$i$i$i; else {
           label = 264;
           break L279;
          }
         } else $indexA$i$i$0 = 0;
         if (($1155 | 0) <= ($indexA$i$i$0 | 0)) {
          label = 264;
          break L279;
         }
         $1160 = $1154 + ($indexA$i$i$0 << 3) | 0;
         $1166 = +HEAPF32[$1160 >> 2];
         $1167 = +HEAPF32[$1160 + 4 >> 2];
         $indexA$i$i$1 = $indexA$i$i$0;
         $indexB$i$i$1 = -1;
         $retval$0$i$i$i = $sub$i63$i$i$i * ($sub$i$i$i28$i$i + ($call2$i$i$i20$i$i * $1166 - $call$i$i$i19$i$i * $1167) - $add$i49$i$i$i) + $add$i65$i$i$i114 * ($sub4$i$i$i29$i$i + ($call$i$i$i19$i$i * $1166 + $call2$i$i$i20$i$i * $1167) - $add17$i54$i$i$i);
        } else {
         label = 266;
         break L279;
        }
        if ($retval$0$i$i$i > $add16$i$i) {
         $output$i$sroa$0$0 = 4;
         $output$i$sroa$1$0 = 1.0;
         label = 280;
         break L303;
        }
        if ($retval$0$i$i$i > $sub31$i$i) {
         $t1$1$i$i = $t2$0$i$i;
         break;
        }
        $call35$i49$i = +__ZNK20b2SeparationFunction8EvaluateEiif($fcn$i$i, $indexA$i$i$1, $indexB$i$i$1, $t1$0$i$i);
        if ($call35$i49$i < $sub31$i$i) {
         $output$i$sroa$0$0 = 1;
         $output$i$sroa$1$0 = $t1$0$i$i;
         label = 280;
         break L303;
        }
        if (!($call35$i49$i <= $add16$i$i)) {
         $a1$0$i$i = $t1$0$i$i;
         $a2$0$i$i = $t2$0$i$i;
         $rootIterCount$0$i$i = 0;
         $s1$0$i$i = $call35$i49$i;
         $s2$0$i$i = $retval$0$i$i$i;
        } else {
         $output$i$sroa$0$0 = 3;
         $output$i$sroa$1$0 = $t1$0$i$i;
         label = 280;
         break L303;
        }
        while (1) {
         if (($rootIterCount$0$i$i & 1 | 0) == 0) $t49$0$i$i = ($a1$0$i$i + $a2$0$i$i) * .5; else $t49$0$i$i = $a1$0$i$i + ($cond$i$i$i75 - $s1$0$i$i) * ($a2$0$i$i - $a1$0$i$i) / ($s2$0$i$i - $s1$0$i$i);
         $call58$i50$i = +__ZNK20b2SeparationFunction8EvaluateEiif($fcn$i$i, $indexA$i$i$1, $indexB$i$i$1, $t49$0$i$i);
         $sub59$i$i = $call58$i50$i - $cond$i$i$i75;
         if ($sub59$i$i > 0.0) $cond$i80$i$i = $sub59$i$i; else $cond$i80$i$i = -$sub59$i$i;
         if ($cond$i80$i$i < .0012499999720603228) {
          $rootIterCount$1$i$i = $rootIterCount$0$i$i;
          $t2$1$i$i = $t49$0$i$i;
          break;
         }
         $cmp64$i$i = $call58$i50$i > $cond$i$i$i75;
         $rootIterCount$0$i$i = $rootIterCount$0$i$i + 1 | 0;
         HEAP32[1572] = (HEAP32[1572] | 0) + 1;
         if (($rootIterCount$0$i$i | 0) == 50) {
          $rootIterCount$1$i$i = 50;
          $t2$1$i$i = $t2$0$i$i;
          break;
         } else {
          $a1$0$i$i = $cmp64$i$i ? $t49$0$i$i : $a1$0$i$i;
          $a2$0$i$i = $cmp64$i$i ? $a2$0$i$i : $t49$0$i$i;
          $s1$0$i$i = $cmp64$i$i ? $call58$i50$i : $s1$0$i$i;
          $s2$0$i$i = $cmp64$i$i ? $s2$0$i$i : $call58$i50$i;
         }
        }
        $1169 = HEAP32[1574] | 0;
        HEAP32[1574] = ($1169 | 0) > ($rootIterCount$1$i$i | 0) ? $1169 : $rootIterCount$1$i$i;
        if (($pushBackIter$0$i$i | 0) == 8) {
         $t1$1$i$i = $t1$0$i$i;
         break;
        }
        $1078 = +HEAPF32[$sweepA$i$i$sroa$2$8$idx413 >> 2];
        $1079 = +HEAPF32[$sweepA$i$i$sroa$3$12$idx417 >> 2];
        $1080 = +HEAPF32[$sweepA$i$i$sroa$4$16$idx421 >> 2];
        $1081 = +HEAPF32[$sweepA$i$i$sroa$5$20$idx425 >> 2];
        $1082 = +HEAPF32[$sweepA$i$i$sroa$6$24$idx430 >> 2];
        $1083 = +HEAPF32[$sweepA$i$i$sroa$7$28$idx435 >> 2];
        $1084 = +HEAPF32[$sweepA$i$i$sroa$0$0$idx405 >> 2];
        $1085 = +HEAPF32[$sweepA$i$i$sroa$1$4$idx409 >> 2];
        $1086 = +HEAPF32[$sweepB$i$i$sroa$2$8$idx376 >> 2];
        $1087 = +HEAPF32[$sweepB$i$i$sroa$3$12$idx380 >> 2];
        $1088 = +HEAPF32[$sweepB$i$i$sroa$4$16$idx384 >> 2];
        $1089 = +HEAPF32[$sweepB$i$i$sroa$5$20$idx388 >> 2];
        $1090 = +HEAPF32[$sweepB$i$i$sroa$6$24$idx393 >> 2];
        $1091 = +HEAPF32[$sweepB$i$i$sroa$7$28$idx398 >> 2];
        $1092 = +HEAPF32[$sweepB$i$i$sroa$0$0$idx368 >> 2];
        $1093 = +HEAPF32[$sweepB$i$i$sroa$1$4$idx372 >> 2];
        $1534 = HEAP32[$m_type$i$i$i95 >> 2] | 0;
        $pushBackIter$0$i$i = $pushBackIter$0$i$i + 1 | 0;
        $t2$0$i$i = $t2$1$i$i;
       }
       $inc79$i$i = $iter$0$i$i + 1 | 0;
       HEAP32[1568] = (HEAP32[1568] | 0) + 1;
       if (($inc79$i$i | 0) == 20) {
        $iter$1$i$i = 20;
        $output$i$sroa$0$1 = 1;
        $output$i$sroa$1$1 = $t1$1$i$i;
        break;
       } else {
        $iter$0$i$i = $inc79$i$i;
        $t1$0$i$i = $t1$1$i$i;
       }
      }
      if ((label | 0) == 280) {
       label = 0;
       HEAP32[1568] = (HEAP32[1568] | 0) + 1;
       $iter$1$i$i = $iter$0$i$i + 1 | 0;
       $output$i$sroa$0$1 = $output$i$sroa$0$0;
       $output$i$sroa$1$1 = $output$i$sroa$1$0;
      }
      $1172 = HEAP32[1570] | 0;
      HEAP32[1570] = ($1172 | 0) > ($iter$1$i$i | 0) ? $1172 : $iter$1$i$i;
      if (($output$i$sroa$0$1 | 0) == 3) {
       $add$i131 = $alpha089$0$i + (1.0 - $alpha089$0$i) * $output$i$sroa$1$1;
       $alpha$0$i = $add$i131 < 1.0 ? $add$i131 : 1.0;
      } else $alpha$0$i = 1.0;
      HEAPF32[$c14$0427$i + 132 >> 2] = $alpha$0$i;
      HEAP32[$m_flags$i$i43 >> 2] = HEAP32[$m_flags$i$i43 >> 2] | 32;
      $alpha$1$i = $alpha$0$i;
     } else $alpha$1$i = +HEAPF32[$c14$0427$i + 132 >> 2];
     if ($alpha$1$i < $minAlpha$0425$i) {
      $minAlpha$1$i = $alpha$1$i;
      $minContact$1$i = $c14$0427$i;
     } else {
      $minAlpha$1$i = $minAlpha$0425$i;
      $minContact$1$i = $minContact$0426$i;
     }
    } while (0);
    $c14$0427$i = HEAP32[$c14$0427$i + 12 >> 2] | 0;
    if (($c14$0427$i | 0) == 0) break; else {
     $minAlpha$0425$i = $minAlpha$1$i;
     $minContact$0426$i = $minContact$1$i;
    }
   }
   if (($minContact$1$i | 0) == 0 | $minAlpha$1$i > .9999988079071045) {
    label = 289;
    break;
   }
   $1176 = HEAP32[(HEAP32[$minContact$1$i + 48 >> 2] | 0) + 8 >> 2] | 0;
   $1177 = HEAP32[(HEAP32[$minContact$1$i + 52 >> 2] | 0) + 8 >> 2] | 0;
   $m_sweep166$i = $1176 + 28 | 0;
   dest = $backup1$i + 0 | 0;
   src = $m_sweep166$i + 0 | 0;
   stop = dest + 36 | 0;
   do {
    HEAP32[dest >> 2] = HEAP32[src >> 2];
    dest = dest + 4 | 0;
    src = src + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   $m_sweep167$i = $1177 + 28 | 0;
   dest = $backup2$i + 0 | 0;
   src = $m_sweep167$i + 0 | 0;
   stop = dest + 36 | 0;
   do {
    HEAP32[dest >> 2] = HEAP32[src >> 2];
    dest = dest + 4 | 0;
    src = src + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   $alpha0$i$i356$i = $1176 + 60 | 0;
   $1178 = +HEAPF32[$alpha0$i$i356$i >> 2];
   if (!($1178 < 1.0)) {
    label = 291;
    break;
   }
   $div$i$i361$i = ($minAlpha$1$i - $1178) / (1.0 - $1178);
   $c0$i$i362$i = $1176 + 36 | 0;
   $sub6$i$i363$i = 1.0 - $div$i$i361$i;
   $x$i9$i$i368$i = $1176 + 44 | 0;
   $y$i11$i$i370$i = $1176 + 48 | 0;
   $add$i$i$i372$i = +HEAPF32[$c0$i$i362$i >> 2] * $sub6$i$i363$i + $div$i$i361$i * +HEAPF32[$x$i9$i$i368$i >> 2];
   $add3$i$i$i373$i = $sub6$i$i363$i * +HEAPF32[$1176 + 40 >> 2] + $div$i$i361$i * +HEAPF32[$y$i11$i$i370$i >> 2];
   $1183 = +$add$i$i$i372$i;
   $1184 = +$add3$i$i$i373$i;
   $1185 = $c0$i$i362$i;
   HEAPF32[$1185 >> 2] = $1183;
   HEAPF32[$1185 + 4 >> 2] = $1184;
   $a0$i$i378$i = $1176 + 52 | 0;
   $a$i$i380$i = $1176 + 56 | 0;
   $add$i$i382$i = $sub6$i$i363$i * +HEAPF32[$a0$i$i378$i >> 2] + $div$i$i361$i * +HEAPF32[$a$i$i380$i >> 2];
   HEAPF32[$a0$i$i378$i >> 2] = $add$i$i382$i;
   HEAPF32[$alpha0$i$i356$i >> 2] = $minAlpha$1$i;
   $1191 = $1176 + 44 | 0;
   HEAPF32[$1191 >> 2] = $1183;
   HEAPF32[$1191 + 4 >> 2] = $1184;
   HEAPF32[$a$i$i380$i >> 2] = $add$i$i382$i;
   $call$i$i384$i = +Math_sin(+$add$i$i382$i);
   $s$i$i385$i = $1176 + 20 | 0;
   HEAPF32[$s$i$i385$i >> 2] = $call$i$i384$i;
   $call2$i$i386$i = +Math_cos(+$add$i$i382$i);
   $c$i$i387$i = $1176 + 24 | 0;
   HEAPF32[$c$i$i387$i >> 2] = $call2$i$i386$i;
   $p$i388$i = $1176 + 12 | 0;
   $x$i$i389$i = $1176 + 28 | 0;
   $1195 = +HEAPF32[$x$i$i389$i >> 2];
   $y$i$i391$i = $1176 + 32 | 0;
   $1196 = +HEAPF32[$y$i$i391$i >> 2];
   $1197 = +($add$i$i$i372$i - ($call2$i$i386$i * $1195 - $call$i$i384$i * $1196));
   $1198 = +($add3$i$i$i373$i - ($call$i$i384$i * $1195 + $call2$i$i386$i * $1196));
   $1199 = $p$i388$i;
   HEAPF32[$1199 >> 2] = $1197;
   HEAPF32[$1199 + 4 >> 2] = $1198;
   $alpha0$i$i304$i = $1177 + 60 | 0;
   $1203 = +HEAPF32[$alpha0$i$i304$i >> 2];
   if (!($1203 < 1.0)) {
    label = 293;
    break;
   }
   $div$i$i309$i = ($minAlpha$1$i - $1203) / (1.0 - $1203);
   $c0$i$i310$i = $1177 + 36 | 0;
   $sub6$i$i311$i = 1.0 - $div$i$i309$i;
   $x$i9$i$i316$i = $1177 + 44 | 0;
   $y$i11$i$i318$i = $1177 + 48 | 0;
   $add$i$i$i320$i = +HEAPF32[$c0$i$i310$i >> 2] * $sub6$i$i311$i + $div$i$i309$i * +HEAPF32[$x$i9$i$i316$i >> 2];
   $add3$i$i$i321$i = $sub6$i$i311$i * +HEAPF32[$1177 + 40 >> 2] + $div$i$i309$i * +HEAPF32[$y$i11$i$i318$i >> 2];
   $1208 = +$add$i$i$i320$i;
   $1209 = +$add3$i$i$i321$i;
   $1210 = $c0$i$i310$i;
   HEAPF32[$1210 >> 2] = $1208;
   HEAPF32[$1210 + 4 >> 2] = $1209;
   $a0$i$i326$i = $1177 + 52 | 0;
   $a$i$i328$i = $1177 + 56 | 0;
   $add$i$i330$i = $sub6$i$i311$i * +HEAPF32[$a0$i$i326$i >> 2] + $div$i$i309$i * +HEAPF32[$a$i$i328$i >> 2];
   HEAPF32[$a0$i$i326$i >> 2] = $add$i$i330$i;
   HEAPF32[$alpha0$i$i304$i >> 2] = $minAlpha$1$i;
   $1216 = $1177 + 44 | 0;
   HEAPF32[$1216 >> 2] = $1208;
   HEAPF32[$1216 + 4 >> 2] = $1209;
   HEAPF32[$a$i$i328$i >> 2] = $add$i$i330$i;
   $call$i$i332$i = +Math_sin(+$add$i$i330$i);
   $s$i$i333$i = $1177 + 20 | 0;
   HEAPF32[$s$i$i333$i >> 2] = $call$i$i332$i;
   $call2$i$i334$i = +Math_cos(+$add$i$i330$i);
   $c$i$i335$i = $1177 + 24 | 0;
   HEAPF32[$c$i$i335$i >> 2] = $call2$i$i334$i;
   $p$i336$i = $1177 + 12 | 0;
   $x$i$i337$i = $1177 + 28 | 0;
   $1220 = +HEAPF32[$x$i$i337$i >> 2];
   $y$i$i339$i = $1177 + 32 | 0;
   $1221 = +HEAPF32[$y$i$i339$i >> 2];
   $1222 = +($add$i$i$i320$i - ($call2$i$i334$i * $1220 - $call$i$i332$i * $1221));
   $1223 = +($add3$i$i$i321$i - ($call$i$i332$i * $1220 + $call2$i$i334$i * $1221));
   $1224 = $p$i336$i;
   HEAPF32[$1224 >> 2] = $1222;
   HEAPF32[$1224 + 4 >> 2] = $1223;
   __ZN9b2Contact6UpdateEP17b2ContactListener($minContact$1$i, HEAP32[$m_contactListener$i26 >> 2] | 0);
   $m_flags173$i = $minContact$1$i + 4 | 0;
   $1229 = HEAP32[$m_flags173$i >> 2] | 0;
   HEAP32[$m_flags173$i >> 2] = $1229 & -33;
   $m_toiCount175$i = $minContact$1$i + 128 | 0;
   HEAP32[$m_toiCount175$i >> 2] = (HEAP32[$m_toiCount175$i >> 2] | 0) + 1;
   if (($1229 & 6 | 0) != 6) {
    HEAP32[$m_flags173$i >> 2] = $1229 & -37;
    dest = $m_sweep166$i + 0 | 0;
    src = $backup1$i + 0 | 0;
    stop = dest + 36 | 0;
    do {
     HEAP32[dest >> 2] = HEAP32[src >> 2];
     dest = dest + 4 | 0;
     src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    dest = $m_sweep167$i + 0 | 0;
    src = $backup2$i + 0 | 0;
    stop = dest + 36 | 0;
    do {
     HEAP32[dest >> 2] = HEAP32[src >> 2];
     dest = dest + 4 | 0;
     src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    $1233 = +HEAPF32[$a$i$i380$i >> 2];
    $call$i$i272$i = +Math_sin(+$1233);
    HEAPF32[$s$i$i385$i >> 2] = $call$i$i272$i;
    $call2$i$i274$i = +Math_cos(+$1233);
    HEAPF32[$c$i$i387$i >> 2] = $call2$i$i274$i;
    $1234 = +HEAPF32[$x$i$i389$i >> 2];
    $1235 = +HEAPF32[$y$i$i391$i >> 2];
    $1238 = +(+HEAPF32[$x$i9$i$i368$i >> 2] - ($call2$i$i274$i * $1234 - $call$i$i272$i * $1235));
    $1239 = +(+HEAPF32[$y$i11$i$i370$i >> 2] - ($call$i$i272$i * $1234 + $call2$i$i274$i * $1235));
    $1240 = $p$i388$i;
    HEAPF32[$1240 >> 2] = $1238;
    HEAPF32[$1240 + 4 >> 2] = $1239;
    $1244 = +HEAPF32[$a$i$i328$i >> 2];
    $call$i$i249$i = +Math_sin(+$1244);
    HEAPF32[$s$i$i333$i >> 2] = $call$i$i249$i;
    $call2$i$i251$i = +Math_cos(+$1244);
    HEAPF32[$c$i$i335$i >> 2] = $call2$i$i251$i;
    $1245 = +HEAPF32[$x$i$i337$i >> 2];
    $1246 = +HEAPF32[$y$i$i339$i >> 2];
    $1249 = +(+HEAPF32[$x$i9$i$i316$i >> 2] - ($call2$i$i251$i * $1245 - $call$i$i249$i * $1246));
    $1250 = +(+HEAPF32[$y$i11$i$i318$i >> 2] - ($call$i$i249$i * $1245 + $call2$i$i251$i * $1246));
    $1251 = $p$i336$i;
    HEAPF32[$1251 >> 2] = $1249;
    HEAPF32[$1251 + 4 >> 2] = $1250;
    continue;
   }
   $m_flags$i239$i = $1176 + 4 | 0;
   $conv$i240$i = HEAPU16[$m_flags$i239$i >> 1] | 0;
   if (($conv$i240$i & 2 | 0) == 0) {
    HEAP16[$m_flags$i239$i >> 1] = $conv$i240$i | 2;
    HEAPF32[$1176 + 144 >> 2] = 0.0;
   }
   $m_flags$i230$i = $1177 + 4 | 0;
   $conv$i231$i = HEAPU16[$m_flags$i230$i >> 1] | 0;
   if (($conv$i231$i & 2 | 0) == 0) {
    HEAP16[$m_flags$i230$i >> 1] = $conv$i231$i | 2;
    HEAPF32[$1177 + 144 >> 2] = 0.0;
   }
   HEAP32[$m_bodyCount$i$i38 >> 2] = 0;
   HEAP32[$m_contactCount$i$i39 >> 2] = 0;
   HEAP32[$m_jointCount$i$i40 >> 2] = 0;
   __ZN8b2Island3AddEP6b2Body($island$i23, $1176);
   __ZN8b2Island3AddEP6b2Body($island$i23, $1177);
   __ZN8b2Island3AddEP9b2Contact($island$i23, $minContact$1$i);
   HEAP16[$m_flags$i239$i >> 1] = HEAPU16[$m_flags$i239$i >> 1] | 1;
   HEAP16[$m_flags$i230$i >> 1] = HEAPU16[$m_flags$i230$i >> 1] | 1;
   HEAP32[$m_flags173$i >> 2] = HEAP32[$m_flags173$i >> 2] | 1;
   HEAP32[$bodies$i >> 2] = $1176;
   HEAP32[$arrayinit$element$i >> 2] = $1177;
   $1261 = $1176;
   $i$0437$i = 1;
   while (1) {
    L404 : do if ((HEAP32[$1261 >> 2] | 0) == 2) {
     $ce$0434$i = HEAP32[$1261 + 112 >> 2] | 0;
     if (($ce$0434$i | 0) != 0) {
      $m_flags$i186$i = $1261 + 4 | 0;
      $ce$0436$i = $ce$0434$i;
      do {
       if ((HEAP32[$m_bodyCount$i$i38 >> 2] | 0) == (HEAP32[$m_bodyCapacity$i >> 2] | 0)) break L404;
       if ((HEAP32[$m_contactCount$i$i39 >> 2] | 0) == (HEAP32[$m_contactCapacity$i >> 2] | 0)) break L404;
       $1266 = HEAP32[$ce$0436$i + 4 >> 2] | 0;
       $m_flags225$i = $1266 + 4 | 0;
       L411 : do if ((HEAP32[$m_flags225$i >> 2] & 1 | 0) == 0) {
        $1268 = HEAP32[$ce$0436$i >> 2] | 0;
        do if ((HEAP32[$1268 >> 2] | 0) == 2) {
         if (!((HEAP16[$m_flags$i186$i >> 1] & 8) == 0)) break;
         if ((HEAP16[$1268 + 4 >> 1] & 8) == 0) break L411;
        } while (0);
        if ((HEAP8[(HEAP32[$1266 + 48 >> 2] | 0) + 38 >> 0] | 0) != 0) break;
        if ((HEAP8[(HEAP32[$1266 + 52 >> 2] | 0) + 38 >> 0] | 0) != 0) break;
        $m_sweep255$i = $1268 + 28 | 0;
        dest = $backup$i + 0 | 0;
        src = $m_sweep255$i + 0 | 0;
        stop = dest + 36 | 0;
        do {
         HEAP32[dest >> 2] = HEAP32[src >> 2];
         dest = dest + 4 | 0;
         src = src + 4 | 0;
        } while ((dest | 0) < (stop | 0));
        $m_flags256$i = $1268 + 4 | 0;
        if ((HEAP16[$m_flags256$i >> 1] & 1) == 0) {
         $alpha0$i$i$i = $1268 + 60 | 0;
         $1277 = +HEAPF32[$alpha0$i$i$i >> 2];
         if (!($1277 < 1.0)) {
          label = 314;
          break L279;
         }
         $div$i$i$i = ($minAlpha$1$i - $1277) / (1.0 - $1277);
         $c0$i$i$i = $1268 + 36 | 0;
         $sub6$i$i$i = 1.0 - $div$i$i$i;
         $add$i$i$i$i143 = +HEAPF32[$c0$i$i$i >> 2] * $sub6$i$i$i + $div$i$i$i * +HEAPF32[$1268 + 44 >> 2];
         $add3$i$i$i$i144 = $sub6$i$i$i * +HEAPF32[$1268 + 40 >> 2] + $div$i$i$i * +HEAPF32[$1268 + 48 >> 2];
         $1282 = +$add$i$i$i$i143;
         $1283 = +$add3$i$i$i$i144;
         $1284 = $c0$i$i$i;
         HEAPF32[$1284 >> 2] = $1282;
         HEAPF32[$1284 + 4 >> 2] = $1283;
         $a0$i$i$i = $1268 + 52 | 0;
         $a$i$i$i = $1268 + 56 | 0;
         $add$i$i157$i = $sub6$i$i$i * +HEAPF32[$a0$i$i$i >> 2] + $div$i$i$i * +HEAPF32[$a$i$i$i >> 2];
         HEAPF32[$a0$i$i$i >> 2] = $add$i$i157$i;
         HEAPF32[$alpha0$i$i$i >> 2] = $minAlpha$1$i;
         $1290 = $1268 + 44 | 0;
         HEAPF32[$1290 >> 2] = $1282;
         HEAPF32[$1290 + 4 >> 2] = $1283;
         HEAPF32[$a$i$i$i >> 2] = $add$i$i157$i;
         $call$i$i158$i = +Math_sin(+$add$i$i157$i);
         HEAPF32[$1268 + 20 >> 2] = $call$i$i158$i;
         $call2$i$i160$i = +Math_cos(+$add$i$i157$i);
         HEAPF32[$1268 + 24 >> 2] = $call2$i$i160$i;
         $1294 = +HEAPF32[$1268 + 28 >> 2];
         $1295 = +HEAPF32[$1268 + 32 >> 2];
         $1296 = +($add$i$i$i$i143 - ($call2$i$i160$i * $1294 - $call$i$i158$i * $1295));
         $1297 = +($add3$i$i$i$i144 - ($call$i$i158$i * $1294 + $call2$i$i160$i * $1295));
         $1298 = $1268 + 12 | 0;
         HEAPF32[$1298 >> 2] = $1296;
         HEAPF32[$1298 + 4 >> 2] = $1297;
        }
        __ZN9b2Contact6UpdateEP17b2ContactListener($1266, HEAP32[$m_contactListener$i26 >> 2] | 0);
        $1303 = HEAP32[$m_flags225$i >> 2] | 0;
        if (($1303 & 4 | 0) == 0) {
         dest = $m_sweep255$i + 0 | 0;
         src = $backup$i + 0 | 0;
         stop = dest + 36 | 0;
         do {
          HEAP32[dest >> 2] = HEAP32[src >> 2];
          dest = dest + 4 | 0;
          src = src + 4 | 0;
         } while ((dest | 0) < (stop | 0));
         $1304 = +HEAPF32[$1268 + 56 >> 2];
         $call$i$i127$i = +Math_sin(+$1304);
         HEAPF32[$1268 + 20 >> 2] = $call$i$i127$i;
         $call2$i$i129$i = +Math_cos(+$1304);
         HEAPF32[$1268 + 24 >> 2] = $call2$i$i129$i;
         $1305 = +HEAPF32[$1268 + 28 >> 2];
         $1306 = +HEAPF32[$1268 + 32 >> 2];
         $1309 = +(+HEAPF32[$1268 + 44 >> 2] - ($call2$i$i129$i * $1305 - $call$i$i127$i * $1306));
         $1310 = +(+HEAPF32[$1268 + 48 >> 2] - ($call$i$i127$i * $1305 + $call2$i$i129$i * $1306));
         $1311 = $1268 + 12 | 0;
         HEAPF32[$1311 >> 2] = $1309;
         HEAPF32[$1311 + 4 >> 2] = $1310;
         break;
        }
        if (($1303 & 2 | 0) == 0) {
         dest = $m_sweep255$i + 0 | 0;
         src = $backup$i + 0 | 0;
         stop = dest + 36 | 0;
         do {
          HEAP32[dest >> 2] = HEAP32[src >> 2];
          dest = dest + 4 | 0;
          src = src + 4 | 0;
         } while ((dest | 0) < (stop | 0));
         $1315 = +HEAPF32[$1268 + 56 >> 2];
         $call$i$i$i = +Math_sin(+$1315);
         HEAPF32[$1268 + 20 >> 2] = $call$i$i$i;
         $call2$i$i$i = +Math_cos(+$1315);
         HEAPF32[$1268 + 24 >> 2] = $call2$i$i$i;
         $1316 = +HEAPF32[$1268 + 28 >> 2];
         $1317 = +HEAPF32[$1268 + 32 >> 2];
         $1320 = +(+HEAPF32[$1268 + 44 >> 2] - ($call2$i$i$i * $1316 - $call$i$i$i * $1317));
         $1321 = +(+HEAPF32[$1268 + 48 >> 2] - ($call$i$i$i * $1316 + $call2$i$i$i * $1317));
         $1322 = $1268 + 12 | 0;
         HEAPF32[$1322 >> 2] = $1320;
         HEAPF32[$1322 + 4 >> 2] = $1321;
         break;
        }
        HEAP32[$m_flags225$i >> 2] = $1303 | 1;
        __ZN8b2Island3AddEP9b2Contact($island$i23, $1266);
        $conv286$i = HEAPU16[$m_flags256$i >> 1] | 0;
        if (($conv286$i & 1 | 0) != 0) break;
        HEAP16[$m_flags256$i >> 1] = $conv286$i | 1;
        do if ((HEAP32[$1268 >> 2] | 0) != 0) {
         if (($conv286$i & 2 | 0) != 0) break;
         HEAP16[$m_flags256$i >> 1] = $conv286$i | 3;
         HEAPF32[$1268 + 144 >> 2] = 0.0;
        } while (0);
        __ZN8b2Island3AddEP6b2Body($island$i23, $1268);
       } while (0);
       $ce$0436$i = HEAP32[$ce$0436$i + 12 >> 2] | 0;
      } while (($ce$0436$i | 0) != 0);
     }
    } while (0);
    if (($i$0437$i | 0) >= 2) break;
    $1261 = HEAP32[$bodies$i + ($i$0437$i << 2) >> 2] | 0;
    $i$0437$i = $i$0437$i + 1 | 0;
   }
   $mul308$i = (1.0 - $minAlpha$1$i) * $dt;
   $div$i = 1.0 / $mul308$i;
   $1328 = HEAP32[$1176 + 8 >> 2] | 0;
   $1329 = HEAP32[$1177 + 8 >> 2] | 0;
   $1330 = HEAP32[$m_bodyCount$i$i38 >> 2] | 0;
   if (($1330 | 0) <= ($1328 | 0)) {
    label = 329;
    break;
   }
   if (($1330 | 0) <= ($1329 | 0)) {
    label = 334;
    break;
   }
   $cmp7114$i$i = ($1330 | 0) > 0;
   if ($cmp7114$i$i) {
    $$pre = HEAP32[$m_bodies$i41 >> 2] | 0;
    $$pre461 = HEAP32[$m_positions$i$i162 >> 2] | 0;
    $$pre462 = HEAP32[$m_velocities$i$i163 >> 2] | 0;
    $i$0115$i$i = 0;
    do {
     $1331 = HEAP32[$$pre + ($i$0115$i$i << 2) >> 2] | 0;
     $1332 = $1331 + 44 | 0;
     $1337 = HEAP32[$1332 + 4 >> 2] | 0;
     $1338 = $$pre461 + ($i$0115$i$i * 12 | 0) | 0;
     HEAP32[$1338 >> 2] = HEAP32[$1332 >> 2];
     HEAP32[$1338 + 4 >> 2] = $1337;
     HEAPF32[$$pre461 + ($i$0115$i$i * 12 | 0) + 8 >> 2] = +HEAPF32[$1331 + 56 >> 2];
     $1343 = $1331 + 64 | 0;
     $1348 = HEAP32[$1343 + 4 >> 2] | 0;
     $1349 = $$pre462 + ($i$0115$i$i * 12 | 0) | 0;
     HEAP32[$1349 >> 2] = HEAP32[$1343 >> 2];
     HEAP32[$1349 + 4 >> 2] = $1348;
     HEAPF32[$$pre462 + ($i$0115$i$i * 12 | 0) + 8 >> 2] = +HEAPF32[$1331 + 72 >> 2];
     $i$0115$i$i = $i$0115$i$i + 1 | 0;
    } while (($i$0115$i$i | 0) < ($1330 | 0));
    $1357 = $$pre461;
    $1358 = $$pre462;
   } else {
    $1357 = HEAP32[$m_positions$i$i162 >> 2] | 0;
    $1358 = HEAP32[$m_velocities$i$i163 >> 2] | 0;
   }
   HEAP32[$contacts$i$i170 >> 2] = HEAP32[$m_contacts$i$i169 >> 2];
   HEAP32[$count$i60$i >> 2] = HEAP32[$m_contactCount$i$i39 >> 2];
   HEAP32[$allocator$i$i172 >> 2] = HEAP32[$island$i23 >> 2];
   HEAPF32[$contactSolverDef$i$i21 >> 2] = $mul308$i;
   HEAPF32[$subStep$i$sroa$1$4$idx347 >> 2] = $div$i;
   HEAPF32[$subStep$i$sroa$2$8$idx349 >> 2] = 1.0;
   HEAP32[$subStep$i$sroa$3$12$idx351 >> 2] = $velocityIterations;
   HEAP32[$subStep$i$sroa$4$16$idx354 >> 2] = 20;
   HEAP8[$subStep$i$sroa$5$20$idx >> 0] = 0;
   HEAP8[$subStep$i$sroa$6$21$raw_idx + 0 >> 0] = HEAP8[$subStep$i$sroa$6 + 0 >> 0] | 0;
   HEAP8[$subStep$i$sroa$6$21$raw_idx + 1 >> 0] = HEAP8[$subStep$i$sroa$6 + 1 >> 0] | 0;
   HEAP8[$subStep$i$sroa$6$21$raw_idx + 2 >> 0] = HEAP8[$subStep$i$sroa$6 + 2 >> 0] | 0;
   HEAP32[$positions$i$i173 >> 2] = $1357;
   HEAP32[$velocities$i$i174 >> 2] = $1358;
   __ZN15b2ContactSolverC2EP18b2ContactSolverDef($contactSolver$i$i22, $contactSolverDef$i$i21);
   $1359 = HEAP32[$m_count$i$i$i176 >> 2] | 0;
   $cmp195$i$i$i = ($1359 | 0) > 0;
   $1360 = HEAP32[$m_positionConstraints$i24$i$i >> 2] | 0;
   $1361 = HEAP32[$m_positions$i$i$i >> 2] | 0;
   $i19$0113$i$i = 0;
   do {
    if ($cmp195$i$i$i) {
     $i$0196$i$i$i = 0;
     $minSeparation$0197$i$i$i = 0.0;
     while (1) {
      $add$ptr$i$i$i = $1360 + ($i$0196$i$i$i * 88 | 0) | 0;
      $1362 = HEAP32[$1360 + ($i$0196$i$i$i * 88 | 0) + 32 >> 2] | 0;
      $1363 = HEAP32[$1360 + ($i$0196$i$i$i * 88 | 0) + 36 >> 2] | 0;
      $1364 = $1360 + ($i$0196$i$i$i * 88 | 0) + 48 | 0;
      $1370 = +HEAPF32[$1364 >> 2];
      $1371 = +HEAPF32[$1364 + 4 >> 2];
      $1372 = $1360 + ($i$0196$i$i$i * 88 | 0) + 56 | 0;
      $1378 = +HEAPF32[$1372 >> 2];
      $1379 = +HEAPF32[$1372 + 4 >> 2];
      $1380 = HEAP32[$1360 + ($i$0196$i$i$i * 88 | 0) + 84 >> 2] | 0;
      if (($1362 | 0) == ($1328 | 0) | ($1362 | 0) == ($1329 | 0)) {
       $iA$0$i$i$i = +HEAPF32[$1360 + ($i$0196$i$i$i * 88 | 0) + 64 >> 2];
       $mA$0$i$i$i = +HEAPF32[$1360 + ($i$0196$i$i$i * 88 | 0) + 40 >> 2];
      } else {
       $iA$0$i$i$i = 0.0;
       $mA$0$i$i$i = 0.0;
      }
      $mB$0$i$i$i = +HEAPF32[$1360 + ($i$0196$i$i$i * 88 | 0) + 44 >> 2];
      $iB$0$i$i$i = +HEAPF32[$1360 + ($i$0196$i$i$i * 88 | 0) + 68 >> 2];
      $c$i$i64$i = $1361 + ($1362 * 12 | 0) | 0;
      $1383 = $c$i$i64$i;
      $1389 = +HEAPF32[$1383 >> 2];
      $1390 = +HEAPF32[$1383 + 4 >> 2];
      $a$i$i65$i = $1361 + ($1362 * 12 | 0) + 8 | 0;
      $1391 = +HEAPF32[$a$i$i65$i >> 2];
      $c20$i$i$i = $1361 + ($1363 * 12 | 0) | 0;
      $1392 = $c20$i$i$i;
      $1398 = +HEAPF32[$1392 >> 2];
      $1399 = +HEAPF32[$1392 + 4 >> 2];
      $a23$i$i$i = $1361 + ($1363 * 12 | 0) + 8 | 0;
      $1400 = +HEAPF32[$a23$i$i$i >> 2];
      if (($1380 | 0) > 0) {
       $add40$i$i$i = $mA$0$i$i$i + $mB$0$i$i$i;
       $aA$0185$i$i$i = $1391;
       $aB$0186$i$i$i = $1400;
       $cA$sroa$0$0$load172178182$i$i$i = $1389;
       $cA$sroa$1$4$load175179181$i$i$i = $1390;
       $cB$sroa$0$0$load166176184$i$i$i = $1398;
       $cB$sroa$1$4$load169177183$i$i$i = $1399;
       $j$0187$i$i$i = 0;
       $minSeparation$1188$i$i$i = $minSeparation$0197$i$i$i;
       while (1) {
        $call$i144$i$i$i = +Math_sin(+$aA$0185$i$i$i);
        HEAPF32[$s$i145$i$i$i >> 2] = $call$i144$i$i$i;
        $call2$i146$i$i$i = +Math_cos(+$aA$0185$i$i$i);
        HEAPF32[$c$i147$i$i$i >> 2] = $call2$i146$i$i$i;
        $call$i$i1$i$i = +Math_sin(+$aB$0186$i$i$i);
        HEAPF32[$s$i142$i$i$i >> 2] = $call$i$i1$i$i;
        $call2$i$i2$i$i = +Math_cos(+$aB$0186$i$i$i);
        HEAPF32[$c$i143$i$i$i >> 2] = $call2$i$i2$i$i;
        $1401 = +($cA$sroa$0$0$load172178182$i$i$i - ($1370 * $call2$i146$i$i$i - $1371 * $call$i144$i$i$i));
        $1402 = +($cA$sroa$1$4$load175179181$i$i$i - ($1371 * $call2$i146$i$i$i + $1370 * $call$i144$i$i$i));
        $1403 = $vararg_buffer501;
        HEAPF32[$1403 >> 2] = $1401;
        HEAPF32[$1403 + 4 >> 2] = $1402;
        $1407 = +($cB$sroa$0$0$load166176184$i$i$i - ($1378 * $call2$i$i2$i$i - $1379 * $call$i$i1$i$i));
        $1408 = +($cB$sroa$1$4$load169177183$i$i$i - ($1379 * $call2$i$i2$i$i + $1378 * $call$i$i1$i$i));
        $1409 = $xfB$i$i$i;
        HEAPF32[$1409 >> 2] = $1407;
        HEAPF32[$1409 + 4 >> 2] = $1408;
        __ZN24b2PositionSolverManifold10InitializeEP27b2ContactPositionConstraintRK11b2TransformS4_i($psm$i$i$i, $add$ptr$i$i$i, $vararg_buffer501, $xfB$i$i$i, $j$0187$i$i$i);
        $1413 = $psm$i$i$i;
        $1419 = +HEAPF32[$1413 >> 2];
        $1420 = +HEAPF32[$1413 + 4 >> 2];
        $1421 = $point35$i$i$i;
        $1427 = +HEAPF32[$1421 >> 2];
        $1428 = +HEAPF32[$1421 + 4 >> 2];
        $1429 = +HEAPF32[$separation36$i$i$i >> 2];
        $sub$i100$i$i$i = $1427 - $cA$sroa$0$0$load172178182$i$i$i;
        $sub3$i103$i$i$i = $1428 - $cA$sroa$1$4$load175179181$i$i$i;
        $sub$i94$i$i$i190 = $1427 - $cB$sroa$0$0$load166176184$i$i$i;
        $sub3$i$i9$i$i = $1428 - $cB$sroa$1$4$load169177183$i$i$i;
        $cond$i$i$i$i191 = $minSeparation$1188$i$i$i < $1429 ? $minSeparation$1188$i$i$i : $1429;
        $mul$i11$i$i = ($1429 + .004999999888241291) * .75;
        $cond$i$i$i$i$i193 = $mul$i11$i$i < 0.0 ? $mul$i11$i$i : 0.0;
        $sub$i92$i$i$i = $1420 * $sub$i100$i$i$i - $1419 * $sub3$i103$i$i$i;
        $sub$i85$i$i$i = $1420 * $sub$i94$i$i$i190 - $1419 * $sub3$i$i9$i$i;
        $add46$i$i$i = $sub$i85$i$i$i * $iB$0$i$i$i * $sub$i85$i$i$i + ($add40$i$i$i + $sub$i92$i$i$i * $iA$0$i$i$i * $sub$i92$i$i$i);
        if ($add46$i$i$i > 0.0) $cond$i13$i$i = -($cond$i$i$i$i$i193 < -.20000000298023224 ? -.20000000298023224 : $cond$i$i$i$i$i193) / $add46$i$i$i; else $cond$i13$i$i = 0.0;
        $mul$i74$i$i$i = $1419 * $cond$i13$i$i;
        $mul1$i76$i$i$i = $1420 * $cond$i13$i$i;
        $sub$i64$i$i$i195 = $cA$sroa$0$0$load172178182$i$i$i - $mA$0$i$i$i * $mul$i74$i$i$i;
        $sub4$i$i$i69$i = $cA$sroa$1$4$load175179181$i$i$i - $mA$0$i$i$i * $mul1$i76$i$i$i;
        $sub51$i$i$i = $aA$0185$i$i$i - $iA$0$i$i$i * ($sub$i100$i$i$i * $mul1$i76$i$i$i - $sub3$i103$i$i$i * $mul$i74$i$i$i);
        $add$i$i15$i$i = $cB$sroa$0$0$load166176184$i$i$i + $mB$0$i$i$i * $mul$i74$i$i$i;
        $add4$i$i$i$i196 = $cB$sroa$1$4$load169177183$i$i$i + $mB$0$i$i$i * $mul1$i76$i$i$i;
        $add55$i$i$i = $aB$0186$i$i$i + $iB$0$i$i$i * ($sub$i94$i$i$i190 * $mul1$i76$i$i$i - $sub3$i$i9$i$i * $mul$i74$i$i$i);
        $j$0187$i$i$i = $j$0187$i$i$i + 1 | 0;
        if (($j$0187$i$i$i | 0) == ($1380 | 0)) {
         $aA$0$lcssa$i$i$i = $sub51$i$i$i;
         $aB$0$lcssa$i$i$i = $add55$i$i$i;
         $cA$sroa$0$0$load172178$lcssa$i$i$i = $sub$i64$i$i$i195;
         $cA$sroa$1$4$load175179$lcssa$i$i$i = $sub4$i$i$i69$i;
         $cB$sroa$0$0$load166176$lcssa$i$i$i = $add$i$i15$i$i;
         $cB$sroa$1$4$load169177$lcssa$i$i$i = $add4$i$i$i$i196;
         $minSeparation$1$lcssa$i$i$i = $cond$i$i$i$i191;
         break;
        } else {
         $aA$0185$i$i$i = $sub51$i$i$i;
         $aB$0186$i$i$i = $add55$i$i$i;
         $cA$sroa$0$0$load172178182$i$i$i = $sub$i64$i$i$i195;
         $cA$sroa$1$4$load175179181$i$i$i = $sub4$i$i$i69$i;
         $cB$sroa$0$0$load166176184$i$i$i = $add$i$i15$i$i;
         $cB$sroa$1$4$load169177183$i$i$i = $add4$i$i$i$i196;
         $minSeparation$1188$i$i$i = $cond$i$i$i$i191;
        }
       }
      } else {
       $aA$0$lcssa$i$i$i = $1391;
       $aB$0$lcssa$i$i$i = $1400;
       $cA$sroa$0$0$load172178$lcssa$i$i$i = $1389;
       $cA$sroa$1$4$load175179$lcssa$i$i$i = $1390;
       $cB$sroa$0$0$load166176$lcssa$i$i$i = $1398;
       $cB$sroa$1$4$load169177$lcssa$i$i$i = $1399;
       $minSeparation$1$lcssa$i$i$i = $minSeparation$0197$i$i$i;
      }
      $1430 = +$cA$sroa$0$0$load172178$lcssa$i$i$i;
      $1431 = +$cA$sroa$1$4$load175179$lcssa$i$i$i;
      $1432 = $c$i$i64$i;
      HEAPF32[$1432 >> 2] = $1430;
      HEAPF32[$1432 + 4 >> 2] = $1431;
      HEAPF32[$a$i$i65$i >> 2] = $aA$0$lcssa$i$i$i;
      $1436 = +$cB$sroa$0$0$load166176$lcssa$i$i$i;
      $1437 = +$cB$sroa$1$4$load169177$lcssa$i$i$i;
      $1438 = $c20$i$i$i;
      HEAPF32[$1438 >> 2] = $1436;
      HEAPF32[$1438 + 4 >> 2] = $1437;
      HEAPF32[$a23$i$i$i >> 2] = $aB$0$lcssa$i$i$i;
      $i$0196$i$i$i = $i$0196$i$i$i + 1 | 0;
      if (($i$0196$i$i$i | 0) >= ($1359 | 0)) {
       $minSeparation$0$lcssa$i$i$i = $minSeparation$1$lcssa$i$i$i;
       break;
      } else $minSeparation$0197$i$i$i = $minSeparation$1$lcssa$i$i$i;
     }
    } else $minSeparation$0$lcssa$i$i$i = 0.0;
    $i19$0113$i$i = $i19$0113$i$i + 1 | 0;
   } while (!($minSeparation$0$lcssa$i$i$i >= -.007499999832361937) & ($i19$0113$i$i | 0) < 20);
   $1442 = HEAP32[$m_bodies$i41 >> 2] | 0;
   $arrayidx27$i$i = $1442 + ($1328 << 2) | 0;
   $1444 = $1357 + ($1328 * 12 | 0) | 0;
   $1449 = HEAP32[$1444 + 4 >> 2] | 0;
   $1450 = (HEAP32[$arrayidx27$i$i >> 2] | 0) + 36 | 0;
   HEAP32[$1450 >> 2] = HEAP32[$1444 >> 2];
   HEAP32[$1450 + 4 >> 2] = $1449;
   HEAPF32[(HEAP32[$arrayidx27$i$i >> 2] | 0) + 52 >> 2] = +HEAPF32[$1357 + ($1328 * 12 | 0) + 8 >> 2];
   $arrayidx39$i$i = $1442 + ($1329 << 2) | 0;
   $1457 = $1357 + ($1329 * 12 | 0) | 0;
   $1462 = HEAP32[$1457 + 4 >> 2] | 0;
   $1463 = (HEAP32[$arrayidx39$i$i >> 2] | 0) + 36 | 0;
   HEAP32[$1463 >> 2] = HEAP32[$1457 >> 2];
   HEAP32[$1463 + 4 >> 2] = $1462;
   HEAPF32[(HEAP32[$arrayidx39$i$i >> 2] | 0) + 52 >> 2] = +HEAPF32[$1357 + ($1329 * 12 | 0) + 8 >> 2];
   __ZN15b2ContactSolver29InitializeVelocityConstraintsEv($contactSolver$i$i22);
   if ($cmp55107$i$i) {
    $i53$0108$i$i = 0;
    do {
     __ZN15b2ContactSolver24SolveVelocityConstraintsEv($contactSolver$i$i22);
     $i53$0108$i$i = $i53$0108$i$i + 1 | 0;
    } while (($i53$0108$i$i | 0) < ($velocityIterations | 0));
   }
   if ($cmp7114$i$i) {
    $1469 = $1357;
    $1479 = $1358;
    $i61$0104$i$i = 0;
    do {
     $c69$i$i = $1469 + ($i61$0104$i$i * 12 | 0) | 0;
     $1470 = $c69$i$i;
     $1476 = +HEAPF32[$1470 >> 2];
     $1477 = +HEAPF32[$1470 + 4 >> 2];
     $1478 = +HEAPF32[$1469 + ($i61$0104$i$i * 12 | 0) + 8 >> 2];
     $1480 = $1479 + ($i61$0104$i$i * 12 | 0) | 0;
     $1486 = +HEAPF32[$1480 >> 2];
     $1487 = +HEAPF32[$1480 + 4 >> 2];
     $1488 = +HEAPF32[$1479 + ($i61$0104$i$i * 12 | 0) + 8 >> 2];
     $mul$i$i74$i = $mul308$i * $1486;
     $mul1$i$i75$i = $mul308$i * $1487;
     $add$i$i76$i = $mul$i$i74$i * $mul$i$i74$i + $mul1$i$i75$i * $mul1$i$i75$i;
     if ($add$i$i76$i > 4.0) {
      $div$i78$i = 2.0 / +Math_sqrt(+$add$i$i76$i);
      $v74$sroa$0$0$load78101$i$i = $1486 * $div$i78$i;
      $v74$sroa$1$4$load85102$i$i = $1487 * $div$i78$i;
     } else {
      $v74$sroa$0$0$load78101$i$i = $1486;
      $v74$sroa$1$4$load85102$i$i = $1487;
     }
     $mul$i79$i = $mul308$i * $1488;
     if ($mul$i79$i * $mul$i79$i > 2.4674012660980225) {
      if ($mul$i79$i > 0.0) $cond$i$i83$i = $mul$i79$i; else $cond$i$i83$i = -$mul$i79$i;
      $w78$0$i$i = $1488 * (1.5707963705062866 / $cond$i$i83$i);
     } else $w78$0$i$i = $1488;
     $add$i69$i$i = $1476 + $mul308$i * $v74$sroa$0$0$load78101$i$i;
     $add4$i$i$i211 = $1477 + $mul308$i * $v74$sroa$1$4$load85102$i$i;
     $add$i85$i = $1478 + $mul308$i * $w78$0$i$i;
     $1489 = +$add$i69$i$i;
     $1490 = +$add4$i$i$i211;
     $1491 = $c69$i$i;
     HEAPF32[$1491 >> 2] = $1489;
     HEAPF32[$1491 + 4 >> 2] = $1490;
     $1469 = HEAP32[$m_positions$i$i162 >> 2] | 0;
     HEAPF32[$1469 + ($i61$0104$i$i * 12 | 0) + 8 >> 2] = $add$i85$i;
     $1479 = HEAP32[$m_velocities$i$i163 >> 2] | 0;
     $1497 = +$v74$sroa$0$0$load78101$i$i;
     $1498 = +$v74$sroa$1$4$load85102$i$i;
     $1499 = $1479 + ($i61$0104$i$i * 12 | 0) | 0;
     HEAPF32[$1499 >> 2] = $1497;
     HEAPF32[$1499 + 4 >> 2] = $1498;
     HEAPF32[$1479 + ($i61$0104$i$i * 12 | 0) + 8 >> 2] = $w78$0$i$i;
     $1504 = HEAP32[(HEAP32[$m_bodies$i41 >> 2] | 0) + ($i61$0104$i$i << 2) >> 2] | 0;
     $1505 = $1504 + 44 | 0;
     HEAPF32[$1505 >> 2] = $1489;
     HEAPF32[$1505 + 4 >> 2] = $1490;
     HEAPF32[$1504 + 56 >> 2] = $add$i85$i;
     $1509 = $1504 + 64 | 0;
     HEAPF32[$1509 >> 2] = $1497;
     HEAPF32[$1509 + 4 >> 2] = $1498;
     HEAPF32[$1504 + 72 >> 2] = $w78$0$i$i;
     $call$i$i61$i$i = +Math_sin(+$add$i85$i);
     HEAPF32[$1504 + 20 >> 2] = $call$i$i61$i$i;
     $call2$i$i$i86$i = +Math_cos(+$add$i85$i);
     HEAPF32[$1504 + 24 >> 2] = $call2$i$i$i86$i;
     $1513 = +HEAPF32[$1504 + 28 >> 2];
     $1514 = +HEAPF32[$1504 + 32 >> 2];
     $1515 = +($add$i69$i$i - ($call2$i$i$i86$i * $1513 - $call$i$i61$i$i * $1514));
     $1516 = +($add4$i$i$i211 - ($call$i$i61$i$i * $1513 + $call2$i$i$i86$i * $1514));
     $1517 = $1504 + 12 | 0;
     HEAPF32[$1517 >> 2] = $1515;
     HEAPF32[$1517 + 4 >> 2] = $1516;
     $i61$0104$i$i = $i61$0104$i$i + 1 | 0;
    } while (($i61$0104$i$i | 0) < (HEAP32[$m_bodyCount$i$i38 >> 2] | 0));
   }
   $1522 = HEAP32[$m_velocityConstraints$i$i216 >> 2] | 0;
   __ZN8b2Island6ReportEPK27b2ContactVelocityConstraint($island$i23, $1522);
   $1523 = HEAP32[$m_allocator$i22$i$i >> 2] | 0;
   __ZN16b2StackAllocator4FreeEPv($1523, $1522);
   __ZN16b2StackAllocator4FreeEPv($1523, HEAP32[$m_positionConstraints$i24$i$i >> 2] | 0);
   $1525 = HEAP32[$m_bodyCount$i$i38 >> 2] | 0;
   if (($1525 | 0) > 0) {
    $$pre464 = HEAP32[$m_bodies$i41 >> 2] | 0;
    $i314$0445$i = 0;
    do {
     $1526 = HEAP32[$$pre464 + ($i314$0445$i << 2) >> 2] | 0;
     $m_flags321$i = $1526 + 4 | 0;
     HEAP16[$m_flags321$i >> 1] = HEAPU16[$m_flags321$i >> 1] & 65534;
     do if ((HEAP32[$1526 >> 2] | 0) == 2) {
      __ZN6b2Body19SynchronizeFixturesEv($1526);
      $ce330$0438$i = HEAP32[$1526 + 112 >> 2] | 0;
      if (($ce330$0438$i | 0) == 0) break; else $ce330$0440$i = $ce330$0438$i;
      do {
       $m_flags336$i = (HEAP32[$ce330$0440$i + 4 >> 2] | 0) + 4 | 0;
       HEAP32[$m_flags336$i >> 2] = HEAP32[$m_flags336$i >> 2] & -34;
       $ce330$0440$i = HEAP32[$ce330$0440$i + 12 >> 2] | 0;
      } while (($ce330$0440$i | 0) != 0);
     } while (0);
     $i314$0445$i = $i314$0445$i + 1 | 0;
    } while (($i314$0445$i | 0) < ($1525 | 0));
   }
   __ZN16b2ContactManager15FindNewContactsEv($m_contactManager12);
   if ((HEAP8[$m_subStepping$i >> 0] | 0) != 0) {
    label = 364;
    break;
   }
  }
  switch (label | 0) {
  case 192:
   {
    ___assert_fail(14064, 13864, 641, 14120);
    break;
   }
  case 197:
   {
    ___assert_fail(14136, 14648, 715, 14688);
    break;
   }
  case 201:
   {
    ___assert_fail(14136, 14648, 715, 14688);
    break;
   }
  case 204:
   {
    ___assert_fail(14136, 13864, 676, 14120);
    break;
   }
  case 206:
   {
    ___assert_fail(6304, 6328, 280, 6376);
    break;
   }
  case 211:
   {
    ___assert_fail(6528, 6328, 50, 19512);
    break;
   }
  case 214:
   {
    ___assert_fail(6408, 6440, 103, 6488);
    break;
   }
  case 216:
   {
    ___assert_fail(6408, 6440, 103, 6488);
    break;
   }
  case 221:
   {
    ___assert_fail(6408, 6440, 103, 6488);
    break;
   }
  case 223:
   {
    ___assert_fail(6408, 6440, 103, 6488);
    break;
   }
  case 227:
   {
    ___assert_fail(6408, 6440, 103, 6488);
    break;
   }
  case 231:
   {
    ___assert_fail(6408, 6440, 103, 6488);
    break;
   }
  case 233:
   {
    ___assert_fail(6408, 6440, 103, 6488);
    break;
   }
  case 237:
   {
    ___assert_fail(6408, 6440, 103, 6488);
    break;
   }
  case 248:
   {
    ___assert_fail(6408, 6440, 103, 6488);
    break;
   }
  case 250:
   {
    ___assert_fail(6408, 6440, 103, 6488);
    break;
   }
  case 257:
   {
    ___assert_fail(6408, 6440, 103, 6488);
    break;
   }
  case 264:
   {
    ___assert_fail(6408, 6440, 103, 6488);
    break;
   }
  case 266:
   {
    ___assert_fail(18472, 6328, 183, 6504);
    break;
   }
  case 289:
   {
    HEAP8[$m_stepComplete >> 0] = 1;
    break;
   }
  case 291:
   {
    ___assert_fail(14136, 14648, 715, 14688);
    break;
   }
  case 293:
   {
    ___assert_fail(14136, 14648, 715, 14688);
    break;
   }
  case 314:
   {
    ___assert_fail(14136, 14648, 715, 14688);
    break;
   }
  case 329:
   {
    ___assert_fail(13744, 13768, 386, 14120);
    break;
   }
  case 334:
   {
    ___assert_fail(13816, 13768, 387, 14120);
    break;
   }
  case 364:
   {
    HEAP8[$m_stepComplete >> 0] = 0;
    break;
   }
  }
  __ZN8b2IslandD2Ev($island$i23);
  HEAPF32[$this + 103024 >> 2] = 0.0;
  label = 366;
 }
 if ((label | 0) == 366) if ($cmp) HEAPF32[$m_inv_dt0 >> 2] = $step$sroa$1$0;
 $1532 = HEAP32[$m_flags >> 2] | 0;
 if (($1532 & 4 | 0) == 0) {
  $and42 = $1532 & -3;
  HEAP32[$m_flags >> 2] = $and42;
  $step45 = $this + 102996 | 0;
  HEAPF32[$step45 >> 2] = 0.0;
  STACKTOP = sp;
  return;
 }
 $body$04$i = HEAP32[$this + 102952 >> 2] | 0;
 if (($body$04$i | 0) == 0) {
  $and42 = $1532 & -3;
  HEAP32[$m_flags >> 2] = $and42;
  $step45 = $this + 102996 | 0;
  HEAPF32[$step45 >> 2] = 0.0;
  STACKTOP = sp;
  return;
 } else $body$06$i = $body$04$i;
 do {
  HEAPF32[$body$06$i + 76 >> 2] = 0.0;
  HEAPF32[$body$06$i + 80 >> 2] = 0.0;
  HEAPF32[$body$06$i + 84 >> 2] = 0.0;
  $body$06$i = HEAP32[$body$06$i + 96 >> 2] | 0;
 } while (($body$06$i | 0) != 0);
 $and42 = $1532 & -3;
 HEAP32[$m_flags >> 2] = $and42;
 $step45 = $this + 102996 | 0;
 HEAPF32[$step45 >> 2] = 0.0;
 STACKTOP = sp;
 return;
}
function _malloc($bytes) {
 $bytes = $bytes | 0;
 var $$pre$phi$i$iZ2D = 0, $$pre$phi$i145Z2D = 0, $$pre$phi$i67$iZ2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $101 = 0, $102 = 0, $103 = 0, $105 = 0, $106 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $116 = 0, $120 = 0, $121 = 0, $125 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $133 = 0, $138 = 0, $14 = 0, $141 = 0, $143 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $168 = 0, $17 = 0, $174 = 0, $176 = 0, $179 = 0, $180 = 0, $181 = 0, $183 = 0, $184 = 0, $186 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $194 = 0, $196 = 0, $2 = 0, $20 = 0, $203 = 0, $204 = 0, $205 = 0, $208 = 0, $209 = 0, $211 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $41 = 0, $43 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $52 = 0, $53 = 0, $55 = 0, $59 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $78 = 0, $8 = 0, $80 = 0, $83 = 0, $84 = 0, $85 = 0, $87 = 0, $88 = 0, $9 = 0, $90 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $98 = 0, $99 = 0, $F$0$i$i = 0, $F104$0 = 0, $F197$0$i = 0, $F224$0$i$i = 0, $F289$0$i = 0, $I252$0$i$i = 0, $I315$0$i = 0, $I57$0$i$i = 0, $K105$017$i$i = 0, $K305$043$i$i = 0, $K372$024$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i135 = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i137 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i134 = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i69$i = 0, $T$016$i$i = 0, $T$023$i = 0, $T$042$i$i = 0, $add$i$i = 0, $add$i147 = 0, $add$ptr$i = 0, $add$ptr$i$i$i = 0, $add$ptr$i126 = 0, $add$ptr14$i$i = 0, $add$ptr16$i$i = 0, $add$ptr16$sum$i$i = 0, $add$ptr16$sum2627$i$i = 0, $add$ptr16$sum56$i$i = 0, $add$ptr17$i$i = 0, $add$ptr224$i = 0, $add$ptr2418$i$i = 0, $add$ptr2420$i$i = 0, $add$ptr4$sum$i49$i = 0, $add$ptr7$i$i = 0, $add$ptr95 = 0, $add143 = 0, $add147$i = 0, $add17$i = 0, $add17$i150 = 0, $add177$i = 0, $add212$i = 0, $add26$i$i = 0, $add267$i = 0, $add278$i$i = 0, $add345$i = 0, $add51$i = 0, $add64 = 0, $add8 = 0, $add83$i$i = 0, $add9$i = 0, $and$i110 = 0, $and101$i = 0, $and11$i = 0, $and12$i = 0, $and13$i = 0, $and144 = 0, $and17$i = 0, $and264$i$i = 0, $and268$i$i = 0, $and273$i$i = 0, $and3$i = 0, $and32$i = 0, $and330$i = 0, $and335$i = 0, $and340$i = 0, $and37$i$i = 0, $and41 = 0, $and46 = 0, $and49 = 0, $and53 = 0, $and57 = 0, $and6$i = 0, $and61 = 0, $and63$i = 0, $and69$i$i = 0, $and72$i = 0, $and73$i$i = 0, $and76$i = 0, $and77$i = 0, $and78$i$i = 0, $and8$i = 0, $and80$i = 0, $and84$i = 0, $and88$i = 0, $and9$i = 0, $arrayidx = 0, $arrayidx$i$i = 0, $arrayidx$i21$i = 0, $arrayidx$i57$i = 0, $arrayidx103 = 0, $arrayidx103$i$i = 0, $arrayidx107$i$i = 0, $arrayidx113$i = 0, $arrayidx123$i$i = 0, $arrayidx126$i$i = 0, $arrayidx143$i$i = 0, $arrayidx150$i = 0, $arrayidx154$i131 = 0, $arrayidx160$i = 0, $arrayidx164$i = 0, $arrayidx183$i = 0, $arrayidx196$i = 0, $arrayidx203$i = 0, $arrayidx223$i$i = 0, $arrayidx287$i$i = 0, $arrayidx288$i = 0, $arrayidx325$i$i = 0, $arrayidx354$i = 0, $arrayidx393$i = 0, $arrayidx61$i = 0, $arrayidx65$i = 0, $arrayidx66 = 0, $arrayidx71$i = 0, $arrayidx75$i = 0, $arrayidx91$i$i = 0, $arrayidx94$i = 0, $arrayidx96$i$i = 0, $bk = 0, $bk135$i = 0, $bk47$i = 0, $bk78 = 0, $bk82$i$i = 0, $br$0$i = 0, $call$i$i = 0, $call128$i = 0, $call129$i = 0, $call34$i = 0, $call65$i = 0, $call80$i = 0, $child$i$i = 0, $cmp101$i = 0, $cmp138$i164 = 0, $cmp32$i = 0, $cmp66$i158 = 0, $cmp82$i = 0, $cond = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i$i = 0, $cond$i17$i = 0, $cond$i27$i = 0, $cond$i42$i = 0, $cond115$i$i = 0, $cond13$i$i = 0, $cond15$i$i = 0, $cond315$i$i = 0, $cond382$i = 0, $cond6$i = 0, $fd138$i = 0, $fd145$i$i = 0, $fd344$i$i = 0, $fd412$i = 0, $fd50$i = 0, $fd59$i$i = 0, $fd68$pre$phi$i$iZ2D = 0, $fd69 = 0, $fd85$i$i = 0, $fd9 = 0, $head178 = 0, $head182$i = 0, $head208$i$i = 0, $head25 = 0, $head273$i = 0, $head31$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $neg$i149 = 0, $oldfirst$0$i$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i120 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$328$i = 0, $rst$0$i = 0, $rst$1$i = 0, $shl = 0, $shl$i$i = 0, $shl$i111 = 0, $shl$i20$i = 0, $shl102 = 0, $shl105 = 0, $shl195$i = 0, $shl198$i = 0, $shl22 = 0, $shl221$i$i = 0, $shl226$i$i = 0, $shl265$i$i = 0, $shl270$i$i = 0, $shl287$i = 0, $shl290$i = 0, $shl294$i$i = 0, $shl332$i = 0, $shl337$i = 0, $shl361$i = 0, $shl37 = 0, $shl39$i$i = 0, $shl59$i = 0, $shl65 = 0, $shl70$i$i = 0, $shl75$i$i = 0, $shl9$i = 0, $shl90 = 0, $shl95$i$i = 0, $shr = 0, $shr$i$i = 0, $shr$i106 = 0, $shr$i54$i = 0, $shr101 = 0, $shr11$i = 0, $shr15$i = 0, $shr194$i = 0, $shr214$i$i = 0, $shr253$i$i = 0, $shr282$i = 0, $shr3 = 0, $shr317$i = 0, $shr4$i = 0, $shr47 = 0, $shr51 = 0, $shr55 = 0, $shr58$i$i = 0, $shr59 = 0, $shr7$i = 0, $shr74$i = 0, $shr78$i = 0, $shr82$i = 0, $shr86$i = 0, $size$i$i = 0, $size185$i = 0, $size242$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$0109$i = 0, $sp$1105$i = 0, $ssize$0$i = 0, $ssize$1$i = 0, $ssize$2$i = 0, $sub$i105 = 0, $sub$i148 = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i$i = 0, $sub100$i = 0, $sub100$rsize$3$i = 0, $sub109$i = 0, $sub159 = 0, $sub18$i$i = 0, $sub187 = 0, $sub2$i = 0, $sub253$i = 0, $sub31$i = 0, $sub33$i = 0, $sub38$i = 0, $sub44 = 0, $sub5$i$i = 0, $sub5$i$i$i = 0, $sub5$i29$i = 0, $sub69$i = 0, $sub91 = 0, $t$0$i = 0, $t$0$i119 = 0, $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$227$i = 0, $tbase$0$i = 0, $tbase$291$i = 0, $tsize$0$i = 0, $tsize$0748284$i = 0, $tsize$1$i = 0, $tsize$290$i = 0, $v$0$i = 0, $v$0$i121 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$329$i = 0, label = 0, sp = 0, $add$ptr2420$i$i$looptemp = 0;
 sp = STACKTOP;
 do if ($bytes >>> 0 < 245) {
  if ($bytes >>> 0 < 11) $cond = 16; else $cond = $bytes + 11 & -8;
  $shr = $cond >>> 3;
  $0 = HEAP32[5506] | 0;
  $shr3 = $0 >>> $shr;
  if (($shr3 & 3 | 0) != 0) {
   $add8 = ($shr3 & 1 ^ 1) + $shr | 0;
   $shl = $add8 << 1;
   $arrayidx = 22064 + ($shl << 2) | 0;
   $1 = 22064 + ($shl + 2 << 2) | 0;
   $2 = HEAP32[$1 >> 2] | 0;
   $fd9 = $2 + 8 | 0;
   $3 = HEAP32[$fd9 >> 2] | 0;
   do if (($arrayidx | 0) == ($3 | 0)) HEAP32[5506] = $0 & ~(1 << $add8); else {
    if ($3 >>> 0 < (HEAP32[5510] | 0) >>> 0) _abort();
    $bk = $3 + 12 | 0;
    if ((HEAP32[$bk >> 2] | 0) == ($2 | 0)) {
     HEAP32[$bk >> 2] = $arrayidx;
     HEAP32[$1 >> 2] = $3;
     break;
    } else _abort();
   } while (0);
   $shl22 = $add8 << 3;
   HEAP32[$2 + 4 >> 2] = $shl22 | 3;
   $head25 = $2 + ($shl22 | 4) | 0;
   HEAP32[$head25 >> 2] = HEAP32[$head25 >> 2] | 1;
   $mem$0 = $fd9;
   STACKTOP = sp;
   return $mem$0 | 0;
  }
  if ($cond >>> 0 > (HEAP32[5508] | 0) >>> 0) {
   if (($shr3 | 0) != 0) {
    $shl37 = 2 << $shr;
    $and41 = $shr3 << $shr & ($shl37 | 0 - $shl37);
    $sub44 = ($and41 & 0 - $and41) + -1 | 0;
    $and46 = $sub44 >>> 12 & 16;
    $shr47 = $sub44 >>> $and46;
    $and49 = $shr47 >>> 5 & 8;
    $shr51 = $shr47 >>> $and49;
    $and53 = $shr51 >>> 2 & 4;
    $shr55 = $shr51 >>> $and53;
    $and57 = $shr55 >>> 1 & 2;
    $shr59 = $shr55 >>> $and57;
    $and61 = $shr59 >>> 1 & 1;
    $add64 = ($and49 | $and46 | $and53 | $and57 | $and61) + ($shr59 >>> $and61) | 0;
    $shl65 = $add64 << 1;
    $arrayidx66 = 22064 + ($shl65 << 2) | 0;
    $8 = 22064 + ($shl65 + 2 << 2) | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $fd69 = $9 + 8 | 0;
    $10 = HEAP32[$fd69 >> 2] | 0;
    do if (($arrayidx66 | 0) == ($10 | 0)) HEAP32[5506] = $0 & ~(1 << $add64); else {
     if ($10 >>> 0 < (HEAP32[5510] | 0) >>> 0) _abort();
     $bk78 = $10 + 12 | 0;
     if ((HEAP32[$bk78 >> 2] | 0) == ($9 | 0)) {
      HEAP32[$bk78 >> 2] = $arrayidx66;
      HEAP32[$8 >> 2] = $10;
      break;
     } else _abort();
    } while (0);
    $shl90 = $add64 << 3;
    $sub91 = $shl90 - $cond | 0;
    HEAP32[$9 + 4 >> 2] = $cond | 3;
    $add$ptr95 = $9 + $cond | 0;
    HEAP32[$9 + ($cond | 4) >> 2] = $sub91 | 1;
    HEAP32[$9 + $shl90 >> 2] = $sub91;
    $13 = HEAP32[5508] | 0;
    if (($13 | 0) != 0) {
     $14 = HEAP32[5511] | 0;
     $shr101 = $13 >>> 3;
     $shl102 = $shr101 << 1;
     $arrayidx103 = 22064 + ($shl102 << 2) | 0;
     $15 = HEAP32[5506] | 0;
     $shl105 = 1 << $shr101;
     if (($15 & $shl105 | 0) == 0) {
      HEAP32[5506] = $15 | $shl105;
      $$pre$phiZ2D = 22064 + ($shl102 + 2 << 2) | 0;
      $F104$0 = $arrayidx103;
     } else {
      $16 = 22064 + ($shl102 + 2 << 2) | 0;
      $17 = HEAP32[$16 >> 2] | 0;
      if ($17 >>> 0 < (HEAP32[5510] | 0) >>> 0) _abort(); else {
       $$pre$phiZ2D = $16;
       $F104$0 = $17;
      }
     }
     HEAP32[$$pre$phiZ2D >> 2] = $14;
     HEAP32[$F104$0 + 12 >> 2] = $14;
     HEAP32[$14 + 8 >> 2] = $F104$0;
     HEAP32[$14 + 12 >> 2] = $arrayidx103;
    }
    HEAP32[5508] = $sub91;
    HEAP32[5511] = $add$ptr95;
    $mem$0 = $fd69;
    STACKTOP = sp;
    return $mem$0 | 0;
   }
   $19 = HEAP32[5507] | 0;
   if (($19 | 0) == 0) $nb$0 = $cond; else {
    $sub2$i = ($19 & 0 - $19) + -1 | 0;
    $and3$i = $sub2$i >>> 12 & 16;
    $shr4$i = $sub2$i >>> $and3$i;
    $and6$i = $shr4$i >>> 5 & 8;
    $shr7$i = $shr4$i >>> $and6$i;
    $and9$i = $shr7$i >>> 2 & 4;
    $shr11$i = $shr7$i >>> $and9$i;
    $and13$i = $shr11$i >>> 1 & 2;
    $shr15$i = $shr11$i >>> $and13$i;
    $and17$i = $shr15$i >>> 1 & 1;
    $20 = HEAP32[22328 + (($and6$i | $and3$i | $and9$i | $and13$i | $and17$i) + ($shr15$i >>> $and17$i) << 2) >> 2] | 0;
    $rsize$0$i = (HEAP32[$20 + 4 >> 2] & -8) - $cond | 0;
    $t$0$i = $20;
    $v$0$i = $20;
    while (1) {
     $22 = HEAP32[$t$0$i + 16 >> 2] | 0;
     if (($22 | 0) == 0) {
      $23 = HEAP32[$t$0$i + 20 >> 2] | 0;
      if (($23 | 0) == 0) break; else $cond6$i = $23;
     } else $cond6$i = $22;
     $sub31$i = (HEAP32[$cond6$i + 4 >> 2] & -8) - $cond | 0;
     $cmp32$i = $sub31$i >>> 0 < $rsize$0$i >>> 0;
     $rsize$0$i = $cmp32$i ? $sub31$i : $rsize$0$i;
     $t$0$i = $cond6$i;
     $v$0$i = $cmp32$i ? $cond6$i : $v$0$i;
    }
    $25 = HEAP32[5510] | 0;
    if ($v$0$i >>> 0 < $25 >>> 0) _abort();
    $add$ptr$i = $v$0$i + $cond | 0;
    if (!($v$0$i >>> 0 < $add$ptr$i >>> 0)) _abort();
    $26 = HEAP32[$v$0$i + 24 >> 2] | 0;
    $27 = HEAP32[$v$0$i + 12 >> 2] | 0;
    do if (($27 | 0) == ($v$0$i | 0)) {
     $arrayidx61$i = $v$0$i + 20 | 0;
     $31 = HEAP32[$arrayidx61$i >> 2] | 0;
     if (($31 | 0) == 0) {
      $arrayidx65$i = $v$0$i + 16 | 0;
      $32 = HEAP32[$arrayidx65$i >> 2] | 0;
      if (($32 | 0) == 0) {
       $R$1$i = 0;
       break;
      } else {
       $R$0$i = $32;
       $RP$0$i = $arrayidx65$i;
      }
     } else {
      $R$0$i = $31;
      $RP$0$i = $arrayidx61$i;
     }
     while (1) {
      $arrayidx71$i = $R$0$i + 20 | 0;
      $33 = HEAP32[$arrayidx71$i >> 2] | 0;
      if (($33 | 0) != 0) {
       $R$0$i = $33;
       $RP$0$i = $arrayidx71$i;
       continue;
      }
      $arrayidx75$i = $R$0$i + 16 | 0;
      $34 = HEAP32[$arrayidx75$i >> 2] | 0;
      if (($34 | 0) == 0) break; else {
       $R$0$i = $34;
       $RP$0$i = $arrayidx75$i;
      }
     }
     if ($RP$0$i >>> 0 < $25 >>> 0) _abort(); else {
      HEAP32[$RP$0$i >> 2] = 0;
      $R$1$i = $R$0$i;
      break;
     }
    } else {
     $28 = HEAP32[$v$0$i + 8 >> 2] | 0;
     if ($28 >>> 0 < $25 >>> 0) _abort();
     $bk47$i = $28 + 12 | 0;
     if ((HEAP32[$bk47$i >> 2] | 0) != ($v$0$i | 0)) _abort();
     $fd50$i = $27 + 8 | 0;
     if ((HEAP32[$fd50$i >> 2] | 0) == ($v$0$i | 0)) {
      HEAP32[$bk47$i >> 2] = $27;
      HEAP32[$fd50$i >> 2] = $28;
      $R$1$i = $27;
      break;
     } else _abort();
    } while (0);
    do if (($26 | 0) != 0) {
     $35 = HEAP32[$v$0$i + 28 >> 2] | 0;
     $arrayidx94$i = 22328 + ($35 << 2) | 0;
     if (($v$0$i | 0) == (HEAP32[$arrayidx94$i >> 2] | 0)) {
      HEAP32[$arrayidx94$i >> 2] = $R$1$i;
      if (($R$1$i | 0) == 0) {
       HEAP32[5507] = HEAP32[5507] & ~(1 << $35);
       break;
      }
     } else {
      if ($26 >>> 0 < (HEAP32[5510] | 0) >>> 0) _abort();
      $arrayidx113$i = $26 + 16 | 0;
      if ((HEAP32[$arrayidx113$i >> 2] | 0) == ($v$0$i | 0)) HEAP32[$arrayidx113$i >> 2] = $R$1$i; else HEAP32[$26 + 20 >> 2] = $R$1$i;
      if (($R$1$i | 0) == 0) break;
     }
     if ($R$1$i >>> 0 < (HEAP32[5510] | 0) >>> 0) _abort();
     HEAP32[$R$1$i + 24 >> 2] = $26;
     $41 = HEAP32[$v$0$i + 16 >> 2] | 0;
     do if (($41 | 0) != 0) if ($41 >>> 0 < (HEAP32[5510] | 0) >>> 0) _abort(); else {
      HEAP32[$R$1$i + 16 >> 2] = $41;
      HEAP32[$41 + 24 >> 2] = $R$1$i;
      break;
     } while (0);
     $43 = HEAP32[$v$0$i + 20 >> 2] | 0;
     if (($43 | 0) != 0) if ($43 >>> 0 < (HEAP32[5510] | 0) >>> 0) _abort(); else {
      HEAP32[$R$1$i + 20 >> 2] = $43;
      HEAP32[$43 + 24 >> 2] = $R$1$i;
      break;
     }
    } while (0);
    if ($rsize$0$i >>> 0 < 16) {
     $add177$i = $rsize$0$i + $cond | 0;
     HEAP32[$v$0$i + 4 >> 2] = $add177$i | 3;
     $head182$i = $v$0$i + ($add177$i + 4) | 0;
     HEAP32[$head182$i >> 2] = HEAP32[$head182$i >> 2] | 1;
    } else {
     HEAP32[$v$0$i + 4 >> 2] = $cond | 3;
     HEAP32[$v$0$i + ($cond | 4) >> 2] = $rsize$0$i | 1;
     HEAP32[$v$0$i + ($rsize$0$i + $cond) >> 2] = $rsize$0$i;
     $46 = HEAP32[5508] | 0;
     if (($46 | 0) != 0) {
      $47 = HEAP32[5511] | 0;
      $shr194$i = $46 >>> 3;
      $shl195$i = $shr194$i << 1;
      $arrayidx196$i = 22064 + ($shl195$i << 2) | 0;
      $48 = HEAP32[5506] | 0;
      $shl198$i = 1 << $shr194$i;
      if (($48 & $shl198$i | 0) == 0) {
       HEAP32[5506] = $48 | $shl198$i;
       $$pre$phi$iZ2D = 22064 + ($shl195$i + 2 << 2) | 0;
       $F197$0$i = $arrayidx196$i;
      } else {
       $49 = 22064 + ($shl195$i + 2 << 2) | 0;
       $50 = HEAP32[$49 >> 2] | 0;
       if ($50 >>> 0 < (HEAP32[5510] | 0) >>> 0) _abort(); else {
        $$pre$phi$iZ2D = $49;
        $F197$0$i = $50;
       }
      }
      HEAP32[$$pre$phi$iZ2D >> 2] = $47;
      HEAP32[$F197$0$i + 12 >> 2] = $47;
      HEAP32[$47 + 8 >> 2] = $F197$0$i;
      HEAP32[$47 + 12 >> 2] = $arrayidx196$i;
     }
     HEAP32[5508] = $rsize$0$i;
     HEAP32[5511] = $add$ptr$i;
    }
    $mem$0 = $v$0$i + 8 | 0;
    STACKTOP = sp;
    return $mem$0 | 0;
   }
  } else $nb$0 = $cond;
 } else if ($bytes >>> 0 > 4294967231) $nb$0 = -1; else {
  $add143 = $bytes + 11 | 0;
  $and144 = $add143 & -8;
  $52 = HEAP32[5507] | 0;
  if (($52 | 0) == 0) $nb$0 = $and144; else {
   $sub$i105 = 0 - $and144 | 0;
   $shr$i106 = $add143 >>> 8;
   if (($shr$i106 | 0) == 0) $idx$0$i = 0; else if ($and144 >>> 0 > 16777215) $idx$0$i = 31; else {
    $and$i110 = ($shr$i106 + 1048320 | 0) >>> 16 & 8;
    $shl$i111 = $shr$i106 << $and$i110;
    $and8$i = ($shl$i111 + 520192 | 0) >>> 16 & 4;
    $shl9$i = $shl$i111 << $and8$i;
    $and12$i = ($shl9$i + 245760 | 0) >>> 16 & 2;
    $add17$i = 14 - ($and8$i | $and$i110 | $and12$i) + ($shl9$i << $and12$i >>> 15) | 0;
    $idx$0$i = $and144 >>> ($add17$i + 7 | 0) & 1 | $add17$i << 1;
   }
   $53 = HEAP32[22328 + ($idx$0$i << 2) >> 2] | 0;
   L9 : do if (($53 | 0) == 0) {
    $rsize$2$i = $sub$i105;
    $t$1$i = 0;
    $v$2$i = 0;
   } else {
    if (($idx$0$i | 0) == 31) $cond$i = 0; else $cond$i = 25 - ($idx$0$i >>> 1) | 0;
    $rsize$0$i120 = $sub$i105;
    $rst$0$i = 0;
    $sizebits$0$i = $and144 << $cond$i;
    $t$0$i119 = $53;
    $v$0$i121 = 0;
    while (1) {
     $and32$i = HEAP32[$t$0$i119 + 4 >> 2] & -8;
     $sub33$i = $and32$i - $and144 | 0;
     if ($sub33$i >>> 0 < $rsize$0$i120 >>> 0) if (($and32$i | 0) == ($and144 | 0)) {
      $rsize$2$i = $sub33$i;
      $t$1$i = $t$0$i119;
      $v$2$i = $t$0$i119;
      break L9;
     } else {
      $rsize$1$i = $sub33$i;
      $v$1$i = $t$0$i119;
     } else {
      $rsize$1$i = $rsize$0$i120;
      $v$1$i = $v$0$i121;
     }
     $55 = HEAP32[$t$0$i119 + 20 >> 2] | 0;
     $t$0$i119 = HEAP32[$t$0$i119 + ($sizebits$0$i >>> 31 << 2) + 16 >> 2] | 0;
     $rst$1$i = ($55 | 0) == 0 | ($55 | 0) == ($t$0$i119 | 0) ? $rst$0$i : $55;
     if (($t$0$i119 | 0) == 0) {
      $rsize$2$i = $rsize$1$i;
      $t$1$i = $rst$1$i;
      $v$2$i = $v$1$i;
      break;
     } else {
      $rsize$0$i120 = $rsize$1$i;
      $rst$0$i = $rst$1$i;
      $sizebits$0$i = $sizebits$0$i << 1;
      $v$0$i121 = $v$1$i;
     }
    }
   } while (0);
   if (($t$1$i | 0) == 0 & ($v$2$i | 0) == 0) {
    $shl59$i = 2 << $idx$0$i;
    $and63$i = $52 & ($shl59$i | 0 - $shl59$i);
    if (($and63$i | 0) == 0) {
     $nb$0 = $and144;
     break;
    }
    $sub69$i = ($and63$i & 0 - $and63$i) + -1 | 0;
    $and72$i = $sub69$i >>> 12 & 16;
    $shr74$i = $sub69$i >>> $and72$i;
    $and76$i = $shr74$i >>> 5 & 8;
    $shr78$i = $shr74$i >>> $and76$i;
    $and80$i = $shr78$i >>> 2 & 4;
    $shr82$i = $shr78$i >>> $and80$i;
    $and84$i = $shr82$i >>> 1 & 2;
    $shr86$i = $shr82$i >>> $and84$i;
    $and88$i = $shr86$i >>> 1 & 1;
    $t$2$ph$i = HEAP32[22328 + (($and76$i | $and72$i | $and80$i | $and84$i | $and88$i) + ($shr86$i >>> $and88$i) << 2) >> 2] | 0;
   } else $t$2$ph$i = $t$1$i;
   if (($t$2$ph$i | 0) == 0) {
    $rsize$3$lcssa$i = $rsize$2$i;
    $v$3$lcssa$i = $v$2$i;
   } else {
    $rsize$328$i = $rsize$2$i;
    $t$227$i = $t$2$ph$i;
    $v$329$i = $v$2$i;
    while (1) {
     $sub100$i = (HEAP32[$t$227$i + 4 >> 2] & -8) - $and144 | 0;
     $cmp101$i = $sub100$i >>> 0 < $rsize$328$i >>> 0;
     $sub100$rsize$3$i = $cmp101$i ? $sub100$i : $rsize$328$i;
     $t$2$v$3$i = $cmp101$i ? $t$227$i : $v$329$i;
     $59 = HEAP32[$t$227$i + 16 >> 2] | 0;
     if (($59 | 0) != 0) {
      $rsize$328$i = $sub100$rsize$3$i;
      $t$227$i = $59;
      $v$329$i = $t$2$v$3$i;
      continue;
     }
     $t$227$i = HEAP32[$t$227$i + 20 >> 2] | 0;
     if (($t$227$i | 0) == 0) {
      $rsize$3$lcssa$i = $sub100$rsize$3$i;
      $v$3$lcssa$i = $t$2$v$3$i;
      break;
     } else {
      $rsize$328$i = $sub100$rsize$3$i;
      $v$329$i = $t$2$v$3$i;
     }
    }
   }
   if (($v$3$lcssa$i | 0) == 0) $nb$0 = $and144; else if ($rsize$3$lcssa$i >>> 0 < ((HEAP32[5508] | 0) - $and144 | 0) >>> 0) {
    $62 = HEAP32[5510] | 0;
    if ($v$3$lcssa$i >>> 0 < $62 >>> 0) _abort();
    $add$ptr$i126 = $v$3$lcssa$i + $and144 | 0;
    if (!($v$3$lcssa$i >>> 0 < $add$ptr$i126 >>> 0)) _abort();
    $63 = HEAP32[$v$3$lcssa$i + 24 >> 2] | 0;
    $64 = HEAP32[$v$3$lcssa$i + 12 >> 2] | 0;
    do if (($64 | 0) == ($v$3$lcssa$i | 0)) {
     $arrayidx150$i = $v$3$lcssa$i + 20 | 0;
     $68 = HEAP32[$arrayidx150$i >> 2] | 0;
     if (($68 | 0) == 0) {
      $arrayidx154$i131 = $v$3$lcssa$i + 16 | 0;
      $69 = HEAP32[$arrayidx154$i131 >> 2] | 0;
      if (($69 | 0) == 0) {
       $R$1$i137 = 0;
       break;
      } else {
       $R$0$i135 = $69;
       $RP$0$i134 = $arrayidx154$i131;
      }
     } else {
      $R$0$i135 = $68;
      $RP$0$i134 = $arrayidx150$i;
     }
     while (1) {
      $arrayidx160$i = $R$0$i135 + 20 | 0;
      $70 = HEAP32[$arrayidx160$i >> 2] | 0;
      if (($70 | 0) != 0) {
       $R$0$i135 = $70;
       $RP$0$i134 = $arrayidx160$i;
       continue;
      }
      $arrayidx164$i = $R$0$i135 + 16 | 0;
      $71 = HEAP32[$arrayidx164$i >> 2] | 0;
      if (($71 | 0) == 0) break; else {
       $R$0$i135 = $71;
       $RP$0$i134 = $arrayidx164$i;
      }
     }
     if ($RP$0$i134 >>> 0 < $62 >>> 0) _abort(); else {
      HEAP32[$RP$0$i134 >> 2] = 0;
      $R$1$i137 = $R$0$i135;
      break;
     }
    } else {
     $65 = HEAP32[$v$3$lcssa$i + 8 >> 2] | 0;
     if ($65 >>> 0 < $62 >>> 0) _abort();
     $bk135$i = $65 + 12 | 0;
     if ((HEAP32[$bk135$i >> 2] | 0) != ($v$3$lcssa$i | 0)) _abort();
     $fd138$i = $64 + 8 | 0;
     if ((HEAP32[$fd138$i >> 2] | 0) == ($v$3$lcssa$i | 0)) {
      HEAP32[$bk135$i >> 2] = $64;
      HEAP32[$fd138$i >> 2] = $65;
      $R$1$i137 = $64;
      break;
     } else _abort();
    } while (0);
    do if (($63 | 0) != 0) {
     $72 = HEAP32[$v$3$lcssa$i + 28 >> 2] | 0;
     $arrayidx183$i = 22328 + ($72 << 2) | 0;
     if (($v$3$lcssa$i | 0) == (HEAP32[$arrayidx183$i >> 2] | 0)) {
      HEAP32[$arrayidx183$i >> 2] = $R$1$i137;
      if (($R$1$i137 | 0) == 0) {
       HEAP32[5507] = HEAP32[5507] & ~(1 << $72);
       break;
      }
     } else {
      if ($63 >>> 0 < (HEAP32[5510] | 0) >>> 0) _abort();
      $arrayidx203$i = $63 + 16 | 0;
      if ((HEAP32[$arrayidx203$i >> 2] | 0) == ($v$3$lcssa$i | 0)) HEAP32[$arrayidx203$i >> 2] = $R$1$i137; else HEAP32[$63 + 20 >> 2] = $R$1$i137;
      if (($R$1$i137 | 0) == 0) break;
     }
     if ($R$1$i137 >>> 0 < (HEAP32[5510] | 0) >>> 0) _abort();
     HEAP32[$R$1$i137 + 24 >> 2] = $63;
     $78 = HEAP32[$v$3$lcssa$i + 16 >> 2] | 0;
     do if (($78 | 0) != 0) if ($78 >>> 0 < (HEAP32[5510] | 0) >>> 0) _abort(); else {
      HEAP32[$R$1$i137 + 16 >> 2] = $78;
      HEAP32[$78 + 24 >> 2] = $R$1$i137;
      break;
     } while (0);
     $80 = HEAP32[$v$3$lcssa$i + 20 >> 2] | 0;
     if (($80 | 0) != 0) if ($80 >>> 0 < (HEAP32[5510] | 0) >>> 0) _abort(); else {
      HEAP32[$R$1$i137 + 20 >> 2] = $80;
      HEAP32[$80 + 24 >> 2] = $R$1$i137;
      break;
     }
    } while (0);
    L87 : do if ($rsize$3$lcssa$i >>> 0 < 16) {
     $add267$i = $rsize$3$lcssa$i + $and144 | 0;
     HEAP32[$v$3$lcssa$i + 4 >> 2] = $add267$i | 3;
     $head273$i = $v$3$lcssa$i + ($add267$i + 4) | 0;
     HEAP32[$head273$i >> 2] = HEAP32[$head273$i >> 2] | 1;
    } else {
     HEAP32[$v$3$lcssa$i + 4 >> 2] = $and144 | 3;
     HEAP32[$v$3$lcssa$i + ($and144 | 4) >> 2] = $rsize$3$lcssa$i | 1;
     HEAP32[$v$3$lcssa$i + ($rsize$3$lcssa$i + $and144) >> 2] = $rsize$3$lcssa$i;
     $shr282$i = $rsize$3$lcssa$i >>> 3;
     if ($rsize$3$lcssa$i >>> 0 < 256) {
      $shl287$i = $shr282$i << 1;
      $arrayidx288$i = 22064 + ($shl287$i << 2) | 0;
      $83 = HEAP32[5506] | 0;
      $shl290$i = 1 << $shr282$i;
      do if (($83 & $shl290$i | 0) == 0) {
       HEAP32[5506] = $83 | $shl290$i;
       $$pre$phi$i145Z2D = 22064 + ($shl287$i + 2 << 2) | 0;
       $F289$0$i = $arrayidx288$i;
      } else {
       $84 = 22064 + ($shl287$i + 2 << 2) | 0;
       $85 = HEAP32[$84 >> 2] | 0;
       if (!($85 >>> 0 < (HEAP32[5510] | 0) >>> 0)) {
        $$pre$phi$i145Z2D = $84;
        $F289$0$i = $85;
        break;
       }
       _abort();
      } while (0);
      HEAP32[$$pre$phi$i145Z2D >> 2] = $add$ptr$i126;
      HEAP32[$F289$0$i + 12 >> 2] = $add$ptr$i126;
      HEAP32[$v$3$lcssa$i + ($and144 + 8) >> 2] = $F289$0$i;
      HEAP32[$v$3$lcssa$i + ($and144 + 12) >> 2] = $arrayidx288$i;
      break;
     }
     $shr317$i = $rsize$3$lcssa$i >>> 8;
     if (($shr317$i | 0) == 0) $I315$0$i = 0; else if ($rsize$3$lcssa$i >>> 0 > 16777215) $I315$0$i = 31; else {
      $and330$i = ($shr317$i + 1048320 | 0) >>> 16 & 8;
      $shl332$i = $shr317$i << $and330$i;
      $and335$i = ($shl332$i + 520192 | 0) >>> 16 & 4;
      $shl337$i = $shl332$i << $and335$i;
      $and340$i = ($shl337$i + 245760 | 0) >>> 16 & 2;
      $add345$i = 14 - ($and335$i | $and330$i | $and340$i) + ($shl337$i << $and340$i >>> 15) | 0;
      $I315$0$i = $rsize$3$lcssa$i >>> ($add345$i + 7 | 0) & 1 | $add345$i << 1;
     }
     $arrayidx354$i = 22328 + ($I315$0$i << 2) | 0;
     HEAP32[$v$3$lcssa$i + ($and144 + 28) >> 2] = $I315$0$i;
     HEAP32[$v$3$lcssa$i + ($and144 + 20) >> 2] = 0;
     HEAP32[$v$3$lcssa$i + ($and144 + 16) >> 2] = 0;
     $87 = HEAP32[5507] | 0;
     $shl361$i = 1 << $I315$0$i;
     if (($87 & $shl361$i | 0) == 0) {
      HEAP32[5507] = $87 | $shl361$i;
      HEAP32[$arrayidx354$i >> 2] = $add$ptr$i126;
      HEAP32[$v$3$lcssa$i + ($and144 + 24) >> 2] = $arrayidx354$i;
      HEAP32[$v$3$lcssa$i + ($and144 + 12) >> 2] = $add$ptr$i126;
      HEAP32[$v$3$lcssa$i + ($and144 + 8) >> 2] = $add$ptr$i126;
      break;
     }
     $88 = HEAP32[$arrayidx354$i >> 2] | 0;
     if (($I315$0$i | 0) == 31) $cond382$i = 0; else $cond382$i = 25 - ($I315$0$i >>> 1) | 0;
     L108 : do if ((HEAP32[$88 + 4 >> 2] & -8 | 0) == ($rsize$3$lcssa$i | 0)) $T$0$lcssa$i = $88; else {
      $K372$024$i = $rsize$3$lcssa$i << $cond382$i;
      $T$023$i = $88;
      while (1) {
       $arrayidx393$i = $T$023$i + ($K372$024$i >>> 31 << 2) + 16 | 0;
       $90 = HEAP32[$arrayidx393$i >> 2] | 0;
       if (($90 | 0) == 0) break;
       if ((HEAP32[$90 + 4 >> 2] & -8 | 0) == ($rsize$3$lcssa$i | 0)) {
        $T$0$lcssa$i = $90;
        break L108;
       } else {
        $K372$024$i = $K372$024$i << 1;
        $T$023$i = $90;
       }
      }
      if ($arrayidx393$i >>> 0 < (HEAP32[5510] | 0) >>> 0) _abort(); else {
       HEAP32[$arrayidx393$i >> 2] = $add$ptr$i126;
       HEAP32[$v$3$lcssa$i + ($and144 + 24) >> 2] = $T$023$i;
       HEAP32[$v$3$lcssa$i + ($and144 + 12) >> 2] = $add$ptr$i126;
       HEAP32[$v$3$lcssa$i + ($and144 + 8) >> 2] = $add$ptr$i126;
       break L87;
      }
     } while (0);
     $fd412$i = $T$0$lcssa$i + 8 | 0;
     $93 = HEAP32[$fd412$i >> 2] | 0;
     $94 = HEAP32[5510] | 0;
     if ($T$0$lcssa$i >>> 0 < $94 >>> 0) _abort();
     if ($93 >>> 0 < $94 >>> 0) _abort(); else {
      HEAP32[$93 + 12 >> 2] = $add$ptr$i126;
      HEAP32[$fd412$i >> 2] = $add$ptr$i126;
      HEAP32[$v$3$lcssa$i + ($and144 + 8) >> 2] = $93;
      HEAP32[$v$3$lcssa$i + ($and144 + 12) >> 2] = $T$0$lcssa$i;
      HEAP32[$v$3$lcssa$i + ($and144 + 24) >> 2] = 0;
      break;
     }
    } while (0);
    $mem$0 = $v$3$lcssa$i + 8 | 0;
    STACKTOP = sp;
    return $mem$0 | 0;
   } else $nb$0 = $and144;
  }
 } while (0);
 $95 = HEAP32[5508] | 0;
 if (!($nb$0 >>> 0 > $95 >>> 0)) {
  $sub159 = $95 - $nb$0 | 0;
  $96 = HEAP32[5511] | 0;
  if ($sub159 >>> 0 > 15) {
   HEAP32[5511] = $96 + $nb$0;
   HEAP32[5508] = $sub159;
   HEAP32[$96 + ($nb$0 + 4) >> 2] = $sub159 | 1;
   HEAP32[$96 + $95 >> 2] = $sub159;
   HEAP32[$96 + 4 >> 2] = $nb$0 | 3;
  } else {
   HEAP32[5508] = 0;
   HEAP32[5511] = 0;
   HEAP32[$96 + 4 >> 2] = $95 | 3;
   $head178 = $96 + ($95 + 4) | 0;
   HEAP32[$head178 >> 2] = HEAP32[$head178 >> 2] | 1;
  }
  $mem$0 = $96 + 8 | 0;
  STACKTOP = sp;
  return $mem$0 | 0;
 }
 $98 = HEAP32[5509] | 0;
 if ($nb$0 >>> 0 < $98 >>> 0) {
  $sub187 = $98 - $nb$0 | 0;
  HEAP32[5509] = $sub187;
  $99 = HEAP32[5512] | 0;
  HEAP32[5512] = $99 + $nb$0;
  HEAP32[$99 + ($nb$0 + 4) >> 2] = $sub187 | 1;
  HEAP32[$99 + 4 >> 2] = $nb$0 | 3;
  $mem$0 = $99 + 8 | 0;
  STACKTOP = sp;
  return $mem$0 | 0;
 }
 do if ((HEAP32[5624] | 0) == 0) {
  $call$i$i = _sysconf(30) | 0;
  if (($call$i$i + -1 & $call$i$i | 0) == 0) {
   HEAP32[5626] = $call$i$i;
   HEAP32[5625] = $call$i$i;
   HEAP32[5627] = -1;
   HEAP32[5628] = -1;
   HEAP32[5629] = 0;
   HEAP32[5617] = 0;
   HEAP32[5624] = (_time(0) | 0) & -16 ^ 1431655768;
   break;
  } else _abort();
 } while (0);
 $add$i147 = $nb$0 + 48 | 0;
 $101 = HEAP32[5626] | 0;
 $sub$i148 = $nb$0 + 47 | 0;
 $add9$i = $101 + $sub$i148 | 0;
 $neg$i149 = 0 - $101 | 0;
 $and11$i = $add9$i & $neg$i149;
 if (!($and11$i >>> 0 > $nb$0 >>> 0)) {
  $mem$0 = 0;
  STACKTOP = sp;
  return $mem$0 | 0;
 }
 $102 = HEAP32[5616] | 0;
 if (($102 | 0) != 0) {
  $103 = HEAP32[5614] | 0;
  $add17$i150 = $103 + $and11$i | 0;
  if ($add17$i150 >>> 0 <= $103 >>> 0 | $add17$i150 >>> 0 > $102 >>> 0) {
   $mem$0 = 0;
   STACKTOP = sp;
   return $mem$0 | 0;
  }
 }
 L269 : do if ((HEAP32[5617] & 4 | 0) == 0) {
  $105 = HEAP32[5512] | 0;
  L271 : do if (($105 | 0) == 0) label = 182; else {
   $sp$0$i$i = 22472 | 0;
   while (1) {
    $106 = HEAP32[$sp$0$i$i >> 2] | 0;
    if (!($106 >>> 0 > $105 >>> 0)) {
     $size$i$i = $sp$0$i$i + 4 | 0;
     if (($106 + (HEAP32[$size$i$i >> 2] | 0) | 0) >>> 0 > $105 >>> 0) break;
    }
    $108 = HEAP32[$sp$0$i$i + 8 >> 2] | 0;
    if (($108 | 0) == 0) {
     label = 182;
     break L271;
    } else $sp$0$i$i = $108;
   }
   if (($sp$0$i$i | 0) == 0) label = 182; else {
    $and77$i = $add9$i - (HEAP32[5509] | 0) & $neg$i149;
    if ($and77$i >>> 0 < 2147483647) {
     $call80$i = _sbrk($and77$i | 0) | 0;
     $cmp82$i = ($call80$i | 0) == ((HEAP32[$sp$0$i$i >> 2] | 0) + (HEAP32[$size$i$i >> 2] | 0) | 0);
     $br$0$i = $call80$i;
     $ssize$1$i = $and77$i;
     $tbase$0$i = $cmp82$i ? $call80$i : -1;
     $tsize$0$i = $cmp82$i ? $and77$i : 0;
     label = 191;
    } else $tsize$0748284$i = 0;
   }
  } while (0);
  do if ((label | 0) == 182) {
   $call34$i = _sbrk(0) | 0;
   if (($call34$i | 0) == (-1 | 0)) $tsize$0748284$i = 0; else {
    $109 = $call34$i;
    $110 = HEAP32[5625] | 0;
    $sub38$i = $110 + -1 | 0;
    if (($sub38$i & $109 | 0) == 0) $ssize$0$i = $and11$i; else $ssize$0$i = $and11$i - $109 + ($sub38$i + $109 & 0 - $110) | 0;
    $111 = HEAP32[5614] | 0;
    $add51$i = $111 + $ssize$0$i | 0;
    if ($ssize$0$i >>> 0 > $nb$0 >>> 0 & $ssize$0$i >>> 0 < 2147483647) {
     $112 = HEAP32[5616] | 0;
     if (($112 | 0) != 0) if ($add51$i >>> 0 <= $111 >>> 0 | $add51$i >>> 0 > $112 >>> 0) {
      $tsize$0748284$i = 0;
      break;
     }
     $call65$i = _sbrk($ssize$0$i | 0) | 0;
     $cmp66$i158 = ($call65$i | 0) == ($call34$i | 0);
     $br$0$i = $call65$i;
     $ssize$1$i = $ssize$0$i;
     $tbase$0$i = $cmp66$i158 ? $call34$i : -1;
     $tsize$0$i = $cmp66$i158 ? $ssize$0$i : 0;
     label = 191;
    } else $tsize$0748284$i = 0;
   }
  } while (0);
  L291 : do if ((label | 0) == 191) {
   $sub109$i = 0 - $ssize$1$i | 0;
   if (($tbase$0$i | 0) != (-1 | 0)) {
    $tbase$291$i = $tbase$0$i;
    $tsize$290$i = $tsize$0$i;
    label = 202;
    break L269;
   }
   do if (($br$0$i | 0) != (-1 | 0) & $ssize$1$i >>> 0 < 2147483647 & $ssize$1$i >>> 0 < $add$i147 >>> 0) {
    $116 = HEAP32[5626] | 0;
    $and101$i = $sub$i148 - $ssize$1$i + $116 & 0 - $116;
    if ($and101$i >>> 0 < 2147483647) if ((_sbrk($and101$i | 0) | 0) == (-1 | 0)) {
     _sbrk($sub109$i | 0) | 0;
     $tsize$0748284$i = $tsize$0$i;
     break L291;
    } else {
     $ssize$2$i = $and101$i + $ssize$1$i | 0;
     break;
    } else $ssize$2$i = $ssize$1$i;
   } else $ssize$2$i = $ssize$1$i; while (0);
   if (($br$0$i | 0) == (-1 | 0)) $tsize$0748284$i = $tsize$0$i; else {
    $tbase$291$i = $br$0$i;
    $tsize$290$i = $ssize$2$i;
    label = 202;
    break L269;
   }
  } while (0);
  HEAP32[5617] = HEAP32[5617] | 4;
  $tsize$1$i = $tsize$0748284$i;
  label = 199;
 } else {
  $tsize$1$i = 0;
  label = 199;
 } while (0);
 if ((label | 0) == 199) if ($and11$i >>> 0 < 2147483647) {
  $call128$i = _sbrk($and11$i | 0) | 0;
  $call129$i = _sbrk(0) | 0;
  if (($call129$i | 0) != (-1 | 0) & ($call128$i | 0) != (-1 | 0) & $call128$i >>> 0 < $call129$i >>> 0) {
   $sub$ptr$sub$i = $call129$i - $call128$i | 0;
   $cmp138$i164 = $sub$ptr$sub$i >>> 0 > ($nb$0 + 40 | 0) >>> 0;
   if ($cmp138$i164) {
    $tbase$291$i = $call128$i;
    $tsize$290$i = $cmp138$i164 ? $sub$ptr$sub$i : $tsize$1$i;
    label = 202;
   }
  }
 }
 if ((label | 0) == 202) {
  $add147$i = (HEAP32[5614] | 0) + $tsize$290$i | 0;
  HEAP32[5614] = $add147$i;
  if ($add147$i >>> 0 > (HEAP32[5615] | 0) >>> 0) HEAP32[5615] = $add147$i;
  $120 = HEAP32[5512] | 0;
  L311 : do if (($120 | 0) == 0) {
   $121 = HEAP32[5510] | 0;
   if (($121 | 0) == 0 | $tbase$291$i >>> 0 < $121 >>> 0) HEAP32[5510] = $tbase$291$i;
   HEAP32[5618] = $tbase$291$i;
   HEAP32[5619] = $tsize$290$i;
   HEAP32[5621] = 0;
   HEAP32[5515] = HEAP32[5624];
   HEAP32[5514] = -1;
   $i$02$i$i = 0;
   do {
    $shl$i$i = $i$02$i$i << 1;
    $arrayidx$i$i = 22064 + ($shl$i$i << 2) | 0;
    HEAP32[22064 + ($shl$i$i + 3 << 2) >> 2] = $arrayidx$i$i;
    HEAP32[22064 + ($shl$i$i + 2 << 2) >> 2] = $arrayidx$i$i;
    $i$02$i$i = $i$02$i$i + 1 | 0;
   } while (($i$02$i$i | 0) != 32);
   $125 = $tbase$291$i + 8 | 0;
   if (($125 & 7 | 0) == 0) $cond$i$i = 0; else $cond$i$i = 0 - $125 & 7;
   $sub5$i$i = $tsize$290$i + -40 - $cond$i$i | 0;
   HEAP32[5512] = $tbase$291$i + $cond$i$i;
   HEAP32[5509] = $sub5$i$i;
   HEAP32[$tbase$291$i + ($cond$i$i + 4) >> 2] = $sub5$i$i | 1;
   HEAP32[$tbase$291$i + ($tsize$290$i + -36) >> 2] = 40;
   HEAP32[5513] = HEAP32[5628];
  } else {
   $sp$0109$i = 22472 | 0;
   while (1) {
    $128 = HEAP32[$sp$0109$i >> 2] | 0;
    $size185$i = $sp$0109$i + 4 | 0;
    $129 = HEAP32[$size185$i >> 2] | 0;
    if (($tbase$291$i | 0) == ($128 + $129 | 0)) {
     label = 214;
     break;
    }
    $130 = HEAP32[$sp$0109$i + 8 >> 2] | 0;
    if (($130 | 0) == 0) break; else $sp$0109$i = $130;
   }
   if ((label | 0) == 214) if ((HEAP32[$sp$0109$i + 12 >> 2] & 8 | 0) == 0) if ($120 >>> 0 >= $128 >>> 0 & $120 >>> 0 < $tbase$291$i >>> 0) {
    HEAP32[$size185$i >> 2] = $129 + $tsize$290$i;
    $add212$i = (HEAP32[5509] | 0) + $tsize$290$i | 0;
    $133 = $120 + 8 | 0;
    if (($133 & 7 | 0) == 0) $cond$i27$i = 0; else $cond$i27$i = 0 - $133 & 7;
    $sub5$i29$i = $add212$i - $cond$i27$i | 0;
    HEAP32[5512] = $120 + $cond$i27$i;
    HEAP32[5509] = $sub5$i29$i;
    HEAP32[$120 + ($cond$i27$i + 4) >> 2] = $sub5$i29$i | 1;
    HEAP32[$120 + ($add212$i + 4) >> 2] = 40;
    HEAP32[5513] = HEAP32[5628];
    break;
   }
   if ($tbase$291$i >>> 0 < (HEAP32[5510] | 0) >>> 0) HEAP32[5510] = $tbase$291$i;
   $add$ptr224$i = $tbase$291$i + $tsize$290$i | 0;
   $sp$1105$i = 22472 | 0;
   while (1) {
    if ((HEAP32[$sp$1105$i >> 2] | 0) == ($add$ptr224$i | 0)) {
     label = 224;
     break;
    }
    $138 = HEAP32[$sp$1105$i + 8 >> 2] | 0;
    if (($138 | 0) == 0) break; else $sp$1105$i = $138;
   }
   if ((label | 0) == 224) if ((HEAP32[$sp$1105$i + 12 >> 2] & 8 | 0) == 0) {
    HEAP32[$sp$1105$i >> 2] = $tbase$291$i;
    $size242$i = $sp$1105$i + 4 | 0;
    HEAP32[$size242$i >> 2] = (HEAP32[$size242$i >> 2] | 0) + $tsize$290$i;
    $141 = $tbase$291$i + 8 | 0;
    if (($141 & 7 | 0) == 0) $cond$i42$i = 0; else $cond$i42$i = 0 - $141 & 7;
    $143 = $tbase$291$i + ($tsize$290$i + 8) | 0;
    if (($143 & 7 | 0) == 0) $cond15$i$i = 0; else $cond15$i$i = 0 - $143 & 7;
    $add$ptr16$i$i = $tbase$291$i + ($cond15$i$i + $tsize$290$i) | 0;
    $add$ptr4$sum$i49$i = $cond$i42$i + $nb$0 | 0;
    $add$ptr17$i$i = $tbase$291$i + $add$ptr4$sum$i49$i | 0;
    $sub18$i$i = $add$ptr16$i$i - ($tbase$291$i + $cond$i42$i) - $nb$0 | 0;
    HEAP32[$tbase$291$i + ($cond$i42$i + 4) >> 2] = $nb$0 | 3;
    L348 : do if (($add$ptr16$i$i | 0) == (HEAP32[5512] | 0)) {
     $add$i$i = (HEAP32[5509] | 0) + $sub18$i$i | 0;
     HEAP32[5509] = $add$i$i;
     HEAP32[5512] = $add$ptr17$i$i;
     HEAP32[$tbase$291$i + ($add$ptr4$sum$i49$i + 4) >> 2] = $add$i$i | 1;
    } else {
     if (($add$ptr16$i$i | 0) == (HEAP32[5511] | 0)) {
      $add26$i$i = (HEAP32[5508] | 0) + $sub18$i$i | 0;
      HEAP32[5508] = $add26$i$i;
      HEAP32[5511] = $add$ptr17$i$i;
      HEAP32[$tbase$291$i + ($add$ptr4$sum$i49$i + 4) >> 2] = $add26$i$i | 1;
      HEAP32[$tbase$291$i + ($add26$i$i + $add$ptr4$sum$i49$i) >> 2] = $add26$i$i;
      break;
     }
     $add$ptr16$sum$i$i = $tsize$290$i + 4 | 0;
     $149 = HEAP32[$tbase$291$i + ($add$ptr16$sum$i$i + $cond15$i$i) >> 2] | 0;
     if (($149 & 3 | 0) == 1) {
      $and37$i$i = $149 & -8;
      $shr$i54$i = $149 >>> 3;
      L356 : do if ($149 >>> 0 < 256) {
       $150 = HEAP32[$tbase$291$i + (($cond15$i$i | 8) + $tsize$290$i) >> 2] | 0;
       $151 = HEAP32[$tbase$291$i + ($tsize$290$i + 12 + $cond15$i$i) >> 2] | 0;
       $arrayidx$i57$i = 22064 + ($shr$i54$i << 1 << 2) | 0;
       do if (($150 | 0) != ($arrayidx$i57$i | 0)) {
        if ($150 >>> 0 < (HEAP32[5510] | 0) >>> 0) _abort();
        if ((HEAP32[$150 + 12 >> 2] | 0) == ($add$ptr16$i$i | 0)) break;
        _abort();
       } while (0);
       if (($151 | 0) == ($150 | 0)) {
        HEAP32[5506] = HEAP32[5506] & ~(1 << $shr$i54$i);
        break;
       }
       do if (($151 | 0) == ($arrayidx$i57$i | 0)) $fd68$pre$phi$i$iZ2D = $151 + 8 | 0; else {
        if ($151 >>> 0 < (HEAP32[5510] | 0) >>> 0) _abort();
        $fd59$i$i = $151 + 8 | 0;
        if ((HEAP32[$fd59$i$i >> 2] | 0) == ($add$ptr16$i$i | 0)) {
         $fd68$pre$phi$i$iZ2D = $fd59$i$i;
         break;
        }
        _abort();
       } while (0);
       HEAP32[$150 + 12 >> 2] = $151;
       HEAP32[$fd68$pre$phi$i$iZ2D >> 2] = $150;
      } else {
       $157 = HEAP32[$tbase$291$i + (($cond15$i$i | 24) + $tsize$290$i) >> 2] | 0;
       $158 = HEAP32[$tbase$291$i + ($tsize$290$i + 12 + $cond15$i$i) >> 2] | 0;
       do if (($158 | 0) == ($add$ptr16$i$i | 0)) {
        $add$ptr16$sum56$i$i = $cond15$i$i | 16;
        $arrayidx96$i$i = $tbase$291$i + ($add$ptr16$sum$i$i + $add$ptr16$sum56$i$i) | 0;
        $163 = HEAP32[$arrayidx96$i$i >> 2] | 0;
        if (($163 | 0) == 0) {
         $child$i$i = $tbase$291$i + ($add$ptr16$sum56$i$i + $tsize$290$i) | 0;
         $164 = HEAP32[$child$i$i >> 2] | 0;
         if (($164 | 0) == 0) {
          $R$1$i$i = 0;
          break;
         } else {
          $R$0$i$i = $164;
          $RP$0$i$i = $child$i$i;
         }
        } else {
         $R$0$i$i = $163;
         $RP$0$i$i = $arrayidx96$i$i;
        }
        while (1) {
         $arrayidx103$i$i = $R$0$i$i + 20 | 0;
         $165 = HEAP32[$arrayidx103$i$i >> 2] | 0;
         if (($165 | 0) != 0) {
          $R$0$i$i = $165;
          $RP$0$i$i = $arrayidx103$i$i;
          continue;
         }
         $arrayidx107$i$i = $R$0$i$i + 16 | 0;
         $166 = HEAP32[$arrayidx107$i$i >> 2] | 0;
         if (($166 | 0) == 0) break; else {
          $R$0$i$i = $166;
          $RP$0$i$i = $arrayidx107$i$i;
         }
        }
        if ($RP$0$i$i >>> 0 < (HEAP32[5510] | 0) >>> 0) _abort(); else {
         HEAP32[$RP$0$i$i >> 2] = 0;
         $R$1$i$i = $R$0$i$i;
         break;
        }
       } else {
        $159 = HEAP32[$tbase$291$i + (($cond15$i$i | 8) + $tsize$290$i) >> 2] | 0;
        if ($159 >>> 0 < (HEAP32[5510] | 0) >>> 0) _abort();
        $bk82$i$i = $159 + 12 | 0;
        if ((HEAP32[$bk82$i$i >> 2] | 0) != ($add$ptr16$i$i | 0)) _abort();
        $fd85$i$i = $158 + 8 | 0;
        if ((HEAP32[$fd85$i$i >> 2] | 0) == ($add$ptr16$i$i | 0)) {
         HEAP32[$bk82$i$i >> 2] = $158;
         HEAP32[$fd85$i$i >> 2] = $159;
         $R$1$i$i = $158;
         break;
        } else _abort();
       } while (0);
       if (($157 | 0) == 0) break;
       $168 = HEAP32[$tbase$291$i + ($tsize$290$i + 28 + $cond15$i$i) >> 2] | 0;
       $arrayidx123$i$i = 22328 + ($168 << 2) | 0;
       do if (($add$ptr16$i$i | 0) == (HEAP32[$arrayidx123$i$i >> 2] | 0)) {
        HEAP32[$arrayidx123$i$i >> 2] = $R$1$i$i;
        if (($R$1$i$i | 0) != 0) break;
        HEAP32[5507] = HEAP32[5507] & ~(1 << $168);
        break L356;
       } else {
        if ($157 >>> 0 < (HEAP32[5510] | 0) >>> 0) _abort();
        $arrayidx143$i$i = $157 + 16 | 0;
        if ((HEAP32[$arrayidx143$i$i >> 2] | 0) == ($add$ptr16$i$i | 0)) HEAP32[$arrayidx143$i$i >> 2] = $R$1$i$i; else HEAP32[$157 + 20 >> 2] = $R$1$i$i;
        if (($R$1$i$i | 0) == 0) break L356;
       } while (0);
       if ($R$1$i$i >>> 0 < (HEAP32[5510] | 0) >>> 0) _abort();
       HEAP32[$R$1$i$i + 24 >> 2] = $157;
       $add$ptr16$sum2627$i$i = $cond15$i$i | 16;
       $174 = HEAP32[$tbase$291$i + ($add$ptr16$sum2627$i$i + $tsize$290$i) >> 2] | 0;
       do if (($174 | 0) != 0) if ($174 >>> 0 < (HEAP32[5510] | 0) >>> 0) _abort(); else {
        HEAP32[$R$1$i$i + 16 >> 2] = $174;
        HEAP32[$174 + 24 >> 2] = $R$1$i$i;
        break;
       } while (0);
       $176 = HEAP32[$tbase$291$i + ($add$ptr16$sum$i$i + $add$ptr16$sum2627$i$i) >> 2] | 0;
       if (($176 | 0) == 0) break;
       if ($176 >>> 0 < (HEAP32[5510] | 0) >>> 0) _abort(); else {
        HEAP32[$R$1$i$i + 20 >> 2] = $176;
        HEAP32[$176 + 24 >> 2] = $R$1$i$i;
        break;
       }
      } while (0);
      $oldfirst$0$i$i = $tbase$291$i + (($and37$i$i | $cond15$i$i) + $tsize$290$i) | 0;
      $qsize$0$i$i = $and37$i$i + $sub18$i$i | 0;
     } else {
      $oldfirst$0$i$i = $add$ptr16$i$i;
      $qsize$0$i$i = $sub18$i$i;
     }
     $head208$i$i = $oldfirst$0$i$i + 4 | 0;
     HEAP32[$head208$i$i >> 2] = HEAP32[$head208$i$i >> 2] & -2;
     HEAP32[$tbase$291$i + ($add$ptr4$sum$i49$i + 4) >> 2] = $qsize$0$i$i | 1;
     HEAP32[$tbase$291$i + ($qsize$0$i$i + $add$ptr4$sum$i49$i) >> 2] = $qsize$0$i$i;
     $shr214$i$i = $qsize$0$i$i >>> 3;
     if ($qsize$0$i$i >>> 0 < 256) {
      $shl221$i$i = $shr214$i$i << 1;
      $arrayidx223$i$i = 22064 + ($shl221$i$i << 2) | 0;
      $179 = HEAP32[5506] | 0;
      $shl226$i$i = 1 << $shr214$i$i;
      do if (($179 & $shl226$i$i | 0) == 0) {
       HEAP32[5506] = $179 | $shl226$i$i;
       $$pre$phi$i67$iZ2D = 22064 + ($shl221$i$i + 2 << 2) | 0;
       $F224$0$i$i = $arrayidx223$i$i;
      } else {
       $180 = 22064 + ($shl221$i$i + 2 << 2) | 0;
       $181 = HEAP32[$180 >> 2] | 0;
       if (!($181 >>> 0 < (HEAP32[5510] | 0) >>> 0)) {
        $$pre$phi$i67$iZ2D = $180;
        $F224$0$i$i = $181;
        break;
       }
       _abort();
      } while (0);
      HEAP32[$$pre$phi$i67$iZ2D >> 2] = $add$ptr17$i$i;
      HEAP32[$F224$0$i$i + 12 >> 2] = $add$ptr17$i$i;
      HEAP32[$tbase$291$i + ($add$ptr4$sum$i49$i + 8) >> 2] = $F224$0$i$i;
      HEAP32[$tbase$291$i + ($add$ptr4$sum$i49$i + 12) >> 2] = $arrayidx223$i$i;
      break;
     }
     $shr253$i$i = $qsize$0$i$i >>> 8;
     do if (($shr253$i$i | 0) == 0) $I252$0$i$i = 0; else {
      if ($qsize$0$i$i >>> 0 > 16777215) {
       $I252$0$i$i = 31;
       break;
      }
      $and264$i$i = ($shr253$i$i + 1048320 | 0) >>> 16 & 8;
      $shl265$i$i = $shr253$i$i << $and264$i$i;
      $and268$i$i = ($shl265$i$i + 520192 | 0) >>> 16 & 4;
      $shl270$i$i = $shl265$i$i << $and268$i$i;
      $and273$i$i = ($shl270$i$i + 245760 | 0) >>> 16 & 2;
      $add278$i$i = 14 - ($and268$i$i | $and264$i$i | $and273$i$i) + ($shl270$i$i << $and273$i$i >>> 15) | 0;
      $I252$0$i$i = $qsize$0$i$i >>> ($add278$i$i + 7 | 0) & 1 | $add278$i$i << 1;
     } while (0);
     $arrayidx287$i$i = 22328 + ($I252$0$i$i << 2) | 0;
     HEAP32[$tbase$291$i + ($add$ptr4$sum$i49$i + 28) >> 2] = $I252$0$i$i;
     HEAP32[$tbase$291$i + ($add$ptr4$sum$i49$i + 20) >> 2] = 0;
     HEAP32[$tbase$291$i + ($add$ptr4$sum$i49$i + 16) >> 2] = 0;
     $183 = HEAP32[5507] | 0;
     $shl294$i$i = 1 << $I252$0$i$i;
     if (($183 & $shl294$i$i | 0) == 0) {
      HEAP32[5507] = $183 | $shl294$i$i;
      HEAP32[$arrayidx287$i$i >> 2] = $add$ptr17$i$i;
      HEAP32[$tbase$291$i + ($add$ptr4$sum$i49$i + 24) >> 2] = $arrayidx287$i$i;
      HEAP32[$tbase$291$i + ($add$ptr4$sum$i49$i + 12) >> 2] = $add$ptr17$i$i;
      HEAP32[$tbase$291$i + ($add$ptr4$sum$i49$i + 8) >> 2] = $add$ptr17$i$i;
      break;
     }
     $184 = HEAP32[$arrayidx287$i$i >> 2] | 0;
     if (($I252$0$i$i | 0) == 31) $cond315$i$i = 0; else $cond315$i$i = 25 - ($I252$0$i$i >>> 1) | 0;
     L445 : do if ((HEAP32[$184 + 4 >> 2] & -8 | 0) == ($qsize$0$i$i | 0)) $T$0$lcssa$i69$i = $184; else {
      $K305$043$i$i = $qsize$0$i$i << $cond315$i$i;
      $T$042$i$i = $184;
      while (1) {
       $arrayidx325$i$i = $T$042$i$i + ($K305$043$i$i >>> 31 << 2) + 16 | 0;
       $186 = HEAP32[$arrayidx325$i$i >> 2] | 0;
       if (($186 | 0) == 0) break;
       if ((HEAP32[$186 + 4 >> 2] & -8 | 0) == ($qsize$0$i$i | 0)) {
        $T$0$lcssa$i69$i = $186;
        break L445;
       } else {
        $K305$043$i$i = $K305$043$i$i << 1;
        $T$042$i$i = $186;
       }
      }
      if ($arrayidx325$i$i >>> 0 < (HEAP32[5510] | 0) >>> 0) _abort(); else {
       HEAP32[$arrayidx325$i$i >> 2] = $add$ptr17$i$i;
       HEAP32[$tbase$291$i + ($add$ptr4$sum$i49$i + 24) >> 2] = $T$042$i$i;
       HEAP32[$tbase$291$i + ($add$ptr4$sum$i49$i + 12) >> 2] = $add$ptr17$i$i;
       HEAP32[$tbase$291$i + ($add$ptr4$sum$i49$i + 8) >> 2] = $add$ptr17$i$i;
       break L348;
      }
     } while (0);
     $fd344$i$i = $T$0$lcssa$i69$i + 8 | 0;
     $189 = HEAP32[$fd344$i$i >> 2] | 0;
     $190 = HEAP32[5510] | 0;
     if ($T$0$lcssa$i69$i >>> 0 < $190 >>> 0) _abort();
     if ($189 >>> 0 < $190 >>> 0) _abort(); else {
      HEAP32[$189 + 12 >> 2] = $add$ptr17$i$i;
      HEAP32[$fd344$i$i >> 2] = $add$ptr17$i$i;
      HEAP32[$tbase$291$i + ($add$ptr4$sum$i49$i + 8) >> 2] = $189;
      HEAP32[$tbase$291$i + ($add$ptr4$sum$i49$i + 12) >> 2] = $T$0$lcssa$i69$i;
      HEAP32[$tbase$291$i + ($add$ptr4$sum$i49$i + 24) >> 2] = 0;
      break;
     }
    } while (0);
    $mem$0 = $tbase$291$i + ($cond$i42$i | 8) | 0;
    STACKTOP = sp;
    return $mem$0 | 0;
   }
   $sp$0$i$i$i = 22472 | 0;
   while (1) {
    $191 = HEAP32[$sp$0$i$i$i >> 2] | 0;
    if (!($191 >>> 0 > $120 >>> 0)) {
     $192 = HEAP32[$sp$0$i$i$i + 4 >> 2] | 0;
     $add$ptr$i$i$i = $191 + $192 | 0;
     if ($add$ptr$i$i$i >>> 0 > $120 >>> 0) break;
    }
    $sp$0$i$i$i = HEAP32[$sp$0$i$i$i + 8 >> 2] | 0;
   }
   $194 = $191 + ($192 + -39) | 0;
   if (($194 & 7 | 0) == 0) $cond$i17$i = 0; else $cond$i17$i = 0 - $194 & 7;
   $add$ptr7$i$i = $191 + ($192 + -47 + $cond$i17$i) | 0;
   $cond13$i$i = $add$ptr7$i$i >>> 0 < ($120 + 16 | 0) >>> 0 ? $120 : $add$ptr7$i$i;
   $add$ptr14$i$i = $cond13$i$i + 8 | 0;
   $196 = $tbase$291$i + 8 | 0;
   if (($196 & 7 | 0) == 0) $cond$i$i$i = 0; else $cond$i$i$i = 0 - $196 & 7;
   $sub5$i$i$i = $tsize$290$i + -40 - $cond$i$i$i | 0;
   HEAP32[5512] = $tbase$291$i + $cond$i$i$i;
   HEAP32[5509] = $sub5$i$i$i;
   HEAP32[$tbase$291$i + ($cond$i$i$i + 4) >> 2] = $sub5$i$i$i | 1;
   HEAP32[$tbase$291$i + ($tsize$290$i + -36) >> 2] = 40;
   HEAP32[5513] = HEAP32[5628];
   HEAP32[$cond13$i$i + 4 >> 2] = 27;
   HEAP32[$add$ptr14$i$i + 0 >> 2] = HEAP32[5618];
   HEAP32[$add$ptr14$i$i + 4 >> 2] = HEAP32[5619];
   HEAP32[$add$ptr14$i$i + 8 >> 2] = HEAP32[5620];
   HEAP32[$add$ptr14$i$i + 12 >> 2] = HEAP32[5621];
   HEAP32[5618] = $tbase$291$i;
   HEAP32[5619] = $tsize$290$i;
   HEAP32[5621] = 0;
   HEAP32[5620] = $add$ptr14$i$i;
   $add$ptr2418$i$i = $cond13$i$i + 28 | 0;
   HEAP32[$add$ptr2418$i$i >> 2] = 7;
   if (($cond13$i$i + 32 | 0) >>> 0 < $add$ptr$i$i$i >>> 0) {
    $add$ptr2420$i$i = $add$ptr2418$i$i;
    do {
     $add$ptr2420$i$i$looptemp = $add$ptr2420$i$i;
     $add$ptr2420$i$i = $add$ptr2420$i$i + 4 | 0;
     HEAP32[$add$ptr2420$i$i >> 2] = 7;
    } while (($add$ptr2420$i$i$looptemp + 8 | 0) >>> 0 < $add$ptr$i$i$i >>> 0);
   }
   if (($cond13$i$i | 0) != ($120 | 0)) {
    $sub$ptr$sub$i$i = $cond13$i$i - $120 | 0;
    $head31$i$i = $120 + ($sub$ptr$sub$i$i + 4) | 0;
    HEAP32[$head31$i$i >> 2] = HEAP32[$head31$i$i >> 2] & -2;
    HEAP32[$120 + 4 >> 2] = $sub$ptr$sub$i$i | 1;
    HEAP32[$120 + $sub$ptr$sub$i$i >> 2] = $sub$ptr$sub$i$i;
    $shr$i$i = $sub$ptr$sub$i$i >>> 3;
    if ($sub$ptr$sub$i$i >>> 0 < 256) {
     $shl$i20$i = $shr$i$i << 1;
     $arrayidx$i21$i = 22064 + ($shl$i20$i << 2) | 0;
     $203 = HEAP32[5506] | 0;
     $shl39$i$i = 1 << $shr$i$i;
     do if (($203 & $shl39$i$i | 0) == 0) {
      HEAP32[5506] = $203 | $shl39$i$i;
      $$pre$phi$i$iZ2D = 22064 + ($shl$i20$i + 2 << 2) | 0;
      $F$0$i$i = $arrayidx$i21$i;
     } else {
      $204 = 22064 + ($shl$i20$i + 2 << 2) | 0;
      $205 = HEAP32[$204 >> 2] | 0;
      if (!($205 >>> 0 < (HEAP32[5510] | 0) >>> 0)) {
       $$pre$phi$i$iZ2D = $204;
       $F$0$i$i = $205;
       break;
      }
      _abort();
     } while (0);
     HEAP32[$$pre$phi$i$iZ2D >> 2] = $120;
     HEAP32[$F$0$i$i + 12 >> 2] = $120;
     HEAP32[$120 + 8 >> 2] = $F$0$i$i;
     HEAP32[$120 + 12 >> 2] = $arrayidx$i21$i;
     break;
    }
    $shr58$i$i = $sub$ptr$sub$i$i >>> 8;
    if (($shr58$i$i | 0) == 0) $I57$0$i$i = 0; else if ($sub$ptr$sub$i$i >>> 0 > 16777215) $I57$0$i$i = 31; else {
     $and69$i$i = ($shr58$i$i + 1048320 | 0) >>> 16 & 8;
     $shl70$i$i = $shr58$i$i << $and69$i$i;
     $and73$i$i = ($shl70$i$i + 520192 | 0) >>> 16 & 4;
     $shl75$i$i = $shl70$i$i << $and73$i$i;
     $and78$i$i = ($shl75$i$i + 245760 | 0) >>> 16 & 2;
     $add83$i$i = 14 - ($and73$i$i | $and69$i$i | $and78$i$i) + ($shl75$i$i << $and78$i$i >>> 15) | 0;
     $I57$0$i$i = $sub$ptr$sub$i$i >>> ($add83$i$i + 7 | 0) & 1 | $add83$i$i << 1;
    }
    $arrayidx91$i$i = 22328 + ($I57$0$i$i << 2) | 0;
    HEAP32[$120 + 28 >> 2] = $I57$0$i$i;
    HEAP32[$120 + 20 >> 2] = 0;
    HEAP32[$120 + 16 >> 2] = 0;
    $208 = HEAP32[5507] | 0;
    $shl95$i$i = 1 << $I57$0$i$i;
    if (($208 & $shl95$i$i | 0) == 0) {
     HEAP32[5507] = $208 | $shl95$i$i;
     HEAP32[$arrayidx91$i$i >> 2] = $120;
     HEAP32[$120 + 24 >> 2] = $arrayidx91$i$i;
     HEAP32[$120 + 12 >> 2] = $120;
     HEAP32[$120 + 8 >> 2] = $120;
     break;
    }
    $209 = HEAP32[$arrayidx91$i$i >> 2] | 0;
    if (($I57$0$i$i | 0) == 31) $cond115$i$i = 0; else $cond115$i$i = 25 - ($I57$0$i$i >>> 1) | 0;
    L499 : do if ((HEAP32[$209 + 4 >> 2] & -8 | 0) == ($sub$ptr$sub$i$i | 0)) $T$0$lcssa$i$i = $209; else {
     $K105$017$i$i = $sub$ptr$sub$i$i << $cond115$i$i;
     $T$016$i$i = $209;
     while (1) {
      $arrayidx126$i$i = $T$016$i$i + ($K105$017$i$i >>> 31 << 2) + 16 | 0;
      $211 = HEAP32[$arrayidx126$i$i >> 2] | 0;
      if (($211 | 0) == 0) break;
      if ((HEAP32[$211 + 4 >> 2] & -8 | 0) == ($sub$ptr$sub$i$i | 0)) {
       $T$0$lcssa$i$i = $211;
       break L499;
      } else {
       $K105$017$i$i = $K105$017$i$i << 1;
       $T$016$i$i = $211;
      }
     }
     if ($arrayidx126$i$i >>> 0 < (HEAP32[5510] | 0) >>> 0) _abort(); else {
      HEAP32[$arrayidx126$i$i >> 2] = $120;
      HEAP32[$120 + 24 >> 2] = $T$016$i$i;
      HEAP32[$120 + 12 >> 2] = $120;
      HEAP32[$120 + 8 >> 2] = $120;
      break L311;
     }
    } while (0);
    $fd145$i$i = $T$0$lcssa$i$i + 8 | 0;
    $214 = HEAP32[$fd145$i$i >> 2] | 0;
    $215 = HEAP32[5510] | 0;
    if ($T$0$lcssa$i$i >>> 0 < $215 >>> 0) _abort();
    if ($214 >>> 0 < $215 >>> 0) _abort(); else {
     HEAP32[$214 + 12 >> 2] = $120;
     HEAP32[$fd145$i$i >> 2] = $120;
     HEAP32[$120 + 8 >> 2] = $214;
     HEAP32[$120 + 12 >> 2] = $T$0$lcssa$i$i;
     HEAP32[$120 + 24 >> 2] = 0;
     break;
    }
   }
  } while (0);
  $216 = HEAP32[5509] | 0;
  if ($216 >>> 0 > $nb$0 >>> 0) {
   $sub253$i = $216 - $nb$0 | 0;
   HEAP32[5509] = $sub253$i;
   $217 = HEAP32[5512] | 0;
   HEAP32[5512] = $217 + $nb$0;
   HEAP32[$217 + ($nb$0 + 4) >> 2] = $sub253$i | 1;
   HEAP32[$217 + 4 >> 2] = $nb$0 | 3;
   $mem$0 = $217 + 8 | 0;
   STACKTOP = sp;
   return $mem$0 | 0;
  }
 }
 HEAP32[(___errno_location() | 0) >> 2] = 12;
 $mem$0 = 0;
 STACKTOP = sp;
 return $mem$0 | 0;
}
function __Z23b2CollideEdgeAndPolygonP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS6_($manifold, $edgeA, $xfA, $polygonB, $xfB) {
 $manifold = $manifold | 0;
 $edgeA = $edgeA | 0;
 $xfA = $xfA | 0;
 $polygonB = $polygonB | 0;
 $xfB = $xfB | 0;
 var $$in$i = 0, $$in597$i = 0, $0 = 0.0, $1 = 0.0, $103 = 0, $104 = 0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0, $114 = 0, $118 = 0, $12 = 0.0, $122 = 0, $127 = 0, $128 = 0, $13 = 0, $132 = 0, $137 = 0, $138 = 0, $142 = 0, $147 = 0, $148 = 0, $152 = 0.0, $153 = 0.0, $154 = 0, $160 = 0.0, $161 = 0.0, $162 = 0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0, $174 = 0, $179 = 0, $180 = 0, $184 = 0, $189 = 0, $190 = 0, $194 = 0, $199 = 0, $2 = 0.0, $200 = 0, $204 = 0.0, $205 = 0.0, $206 = 0, $21 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0, $22 = 0.0, $220 = 0.0, $221 = 0.0, $222 = 0, $226 = 0, $228 = 0, $23 = 0.0, $231 = 0, $232 = 0, $236 = 0, $24 = 0.0, $240 = 0, $244 = 0.0, $245 = 0.0, $246 = 0, $25 = 0, $252 = 0.0, $253 = 0.0, $254 = 0, $260 = 0.0, $261 = 0.0, $262 = 0, $266 = 0, $271 = 0, $272 = 0, $276 = 0, $281 = 0, $282 = 0, $288 = 0.0, $289 = 0.0, $29 = 0, $290 = 0, $294 = 0.0, $295 = 0.0, $296 = 0, $3 = 0.0, $300 = 0, $302 = 0, $305 = 0, $306 = 0, $31 = 0, $311 = 0, $315 = 0, $317 = 0, $320 = 0, $321 = 0, $325 = 0, $329 = 0.0, $330 = 0.0, $331 = 0, $335 = 0.0, $336 = 0.0, $337 = 0, $34 = 0, $341 = 0, $346 = 0, $347 = 0, $35 = 0, $353 = 0.0, $354 = 0.0, $355 = 0, $359 = 0, $364 = 0, $365 = 0, $371 = 0.0, $372 = 0.0, $373 = 0, $377 = 0, $382 = 0, $383 = 0, $387 = 0.0, $388 = 0.0, $389 = 0, $39 = 0, $393 = 0, $397 = 0, $4 = 0.0, $402 = 0, $403 = 0, $407 = 0, $409 = 0, $41 = 0, $412 = 0, $413 = 0, $417 = 0.0, $418 = 0.0, $419 = 0, $423 = 0, $427 = 0.0, $428 = 0.0, $429 = 0, $435 = 0.0, $436 = 0.0, $437 = 0, $44 = 0, $441 = 0, $446 = 0, $447 = 0, $45 = 0, $451 = 0, $453 = 0, $456 = 0, $457 = 0, $461 = 0.0, $462 = 0.0, $463 = 0, $467 = 0, $471 = 0.0, $472 = 0.0, $473 = 0, $477 = 0, $479 = 0, $482 = 0, $483 = 0, $487 = 0, $49 = 0, $491 = 0, $492 = 0.0, $493 = 0.0, $494 = 0.0, $495 = 0.0, $498 = 0.0, $499 = 0.0, $5 = 0.0, $500 = 0, $504 = 0.0, $505 = 0.0, $506 = 0.0, $507 = 0.0, $508 = 0.0, $509 = 0.0, $51 = 0, $510 = 0, $514 = 0, $515 = 0, $516 = 0.0, $517 = 0.0, $518 = 0.0, $519 = 0.0, $522 = 0.0, $524 = 0.0, $525 = 0.0, $526 = 0.0, $527 = 0.0, $528 = 0.0, $529 = 0.0, $530 = 0.0, $531 = 0.0, $532 = 0.0, $533 = 0.0, $534 = 0.0, $536 = 0.0, $537 = 0.0, $538 = 0.0, $54 = 0, $543 = 0, $548 = 0, $549 = 0, $55 = 0, $553 = 0, $558 = 0, $559 = 0, $563 = 0, $569 = 0, $575 = 0, $581 = 0, $587 = 0, $59 = 0, $595 = 0, $597 = 0, $602 = 0, $603 = 0, $607 = 0, $61 = 0, $612 = 0, $613 = 0, $617 = 0, $623 = 0, $629 = 0, $635 = 0.0, $636 = 0.0, $637 = 0.0, $639 = 0.0, $64 = 0, $642 = 0, $646 = 0, $65 = 0, $650 = 0, $655 = 0, $656 = 0, $660 = 0, $665 = 0, $666 = 0, $670 = 0.0, $671 = 0.0, $672 = 0.0, $673 = 0.0, $674 = 0.0, $675 = 0.0, $676 = 0.0, $677 = 0.0, $678 = 0.0, $680 = 0.0, $681 = 0.0, $682 = 0, $689 = 0, $694 = 0, $695 = 0, $703 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $83 = 0, $84 = 0, $88 = 0, $93 = 0, $94 = 0, $98 = 0, $add$i$i$i = 0.0, $add$i$i8$i = 0.0, $add$i14$i$i = 0.0, $add$i149$i = 0.0, $add$i174$i = 0.0, $add$i189$i = 0.0, $add$i394$i = 0.0, $add$i42$i$i = 0.0, $add$i497$i = 0.0, $add$i57$i$i = 0.0, $add$ptr$i = 0, $add17$i$i = 0.0, $add374$$i = 0, $add374$i = 0, $add480$$i = 0, $add480$i = 0, $add8$i$i$i = 0.0, $array$begin$i41 = 0, $array$begin$i42 = 0, $arrayidx574$i = 0, $bestIndex$0$lcssa$i = 0, $bestIndex$0572$i = 0, $bestIndex$1$i = 0, $bestValue$0573$i = 0.0, $bitcast581$i = 0.0, $bitcast583$i = 0.0, $c$i182$i = 0, $call$i$i$i$i = 0.0, $call$i$i$i420$i = 0.0, $call$i$i$i467$i = 0.0, $clipPoints1$i = 0, $clipPoints2$i = 0, $cmp108$i = 0, $cmp138$i = 0, $cmp170$i = 0, $cmp172$i = 0, $cmp199$i = 0, $cmp229$i = 0, $cmp229604$i = 0, $cmp231$i = 0, $cmp259$i = 0, $cmp349$i = 0, $cmp349$i43 = 0, $cmp349$i44 = 0, $cmp36$i = 0, $cmp368$i = 0, $cmp4$i$i = 0, $cmp53$i = 0, $cmp77$i = 0, $cmp8$i$i = 0, $collider = 0, $cond$i$i$i = 0.0, $conv443$i = 0, $convex1$0$off0$i = 0, $count$i = 0, $div$i$i = 0.0, $div$i422$i = 0.0, $div$i469$i = 0.0, $edge1$sroa$0$0$load508517$i = 0.0, $edgeAxis$i$sroa$2$0 = 0.0, $edgeAxis$i$sroa$2$1 = 0.0, $edgeAxis$i$sroa$2$2 = 0.0, $i$0577$i = 0, $i$079$i$i = 0, $i$09$i$i = 0, $i357$0574$i = 0, $i567$0570$i = 0, $id$i = 0, $id399$i = 0, $id440$i = 0, $id460$i = 0, $id598$i = 0, $id601$i = 0, $ie$i = 0, $localNormal$i = 0, $m_normal$i = 0, $m_normal1$i = 0, $m_normal116$i = 0, $m_normal116542$i = 0, $m_normal116547$i = 0, $m_normal145$i = 0, $m_normal145551$i = 0, $m_normal179$i = 0, $m_normal179555$i = 0, $m_normal206$i = 0, $m_normal206559$i = 0, $m_normal239$i = 0, $m_normal239563$i = 0, $m_normal266$i = 0, $m_normal266567$i = 0, $m_normal291608$i = 0, $m_normal529$i = 0, $m_normal84$i = 0, $m_normal84533$i = 0, $m_normal84538$i = 0, $m_radius$i = 0, $m_v1$i = 0, $m_v2$i = 0, $m_xf$i = 0, $offset0$0$i = 0.0, $pointCount$i = 0, $pointCount566$0569$i = 0, $pointCount566$1$i = 0, $polygonAxis$i$sroa$0$0 = 0, $polygonAxis$i$sroa$0$1 = 0, $polygonAxis$i$sroa$0$2 = 0, $polygonAxis$i$sroa$0$235 = 0, $polygonAxis$i$sroa$1$0 = 0, $polygonAxis$i$sroa$1$1 = 0, $polygonAxis$i$sroa$1$2 = 0, $polygonAxis$i$sroa$1$236 = 0, $polygonAxis$i$sroa$2$0 = 0.0, $polygonAxis$i$sroa$2$1 = 0.0, $polygonAxis$i$sroa$2$2 = 0.0, $polygonAxis$i$sroa$2$237 = 0.0, $primaryAxis$sroa$1$0$i = 0, $rf$i$sroa$0$0 = 0, $rf$i$sroa$1$0 = 0, $rf$i$sroa$2$sroa$0$0$in = 0, $rf$i$sroa$2$sroa$1$0 = 0.0, $rf$i$sroa$2$sroa$1$0$in = 0, $rf$i$sroa$4$sroa$0$0$in = 0, $rf$i$sroa$4$sroa$1$0 = 0.0, $rf$i$sroa$4$sroa$1$0$in = 0, $s$i185$i = 0, $sub$i = 0.0, $sub$i$i = 0.0, $sub$i$i$i = 0.0, $sub$i12$i$i = 0.0, $sub$i158$i = 0.0, $sub$i194$i = 0.0, $sub$i432$i = 0.0, $sub$i432513$i = 0.0, $sub$i485$i = 0.0, $sub$i485515$i = 0.0, $sub$i67$i$i = 0.0, $sub19$i = 0.0, $sub2$i$i$i = 0.0, $sub3$i$i$i = 0.0, $sub3$i197$i = 0.0, $sub3$i435$i = 0.0, $sub3$i435514$i = 0.0, $sub3$i488$i = 0.0, $sub3$i488516$i = 0.0, $sub34$i = 0.0, $sub4$i$i = 0.0, $sub511$i = 0.0, $tobool$i = 0, $tobool4$i = 0, $type351$i = 0, $type351$i45 = 0, $x$i408$i = 0, $y$i409$i = 0, $y$i429$i = 0, $y16$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336 | 0;
 $ie$i = sp;
 $clipPoints1$i = sp + 304 | 0;
 $clipPoints2$i = sp + 24 | 0;
 $collider = sp + 48 | 0;
 $m_xf$i = $collider + 132 | 0;
 $0 = +HEAPF32[$xfA + 12 >> 2];
 $1 = +HEAPF32[$xfB + 8 >> 2];
 $2 = +HEAPF32[$xfA + 8 >> 2];
 $3 = +HEAPF32[$xfB + 12 >> 2];
 $sub$i12$i$i = $0 * $1 - $2 * $3;
 $add$i14$i$i = $1 * $2 + $0 * $3;
 $4 = +$sub$i12$i$i;
 $5 = +$add$i14$i$i;
 $sub$i$i$i = +HEAPF32[$xfB >> 2] - +HEAPF32[$xfA >> 2];
 $sub3$i$i$i = +HEAPF32[$xfB + 4 >> 2] - +HEAPF32[$xfA + 4 >> 2];
 $add$i$i$i = $0 * $sub$i$i$i + $2 * $sub3$i$i$i;
 $add8$i$i$i = $0 * $sub3$i$i$i - $2 * $sub$i$i$i;
 $11 = +$add$i$i$i;
 $12 = +$add8$i$i$i;
 $13 = $m_xf$i;
 HEAPF32[$13 >> 2] = $11;
 HEAPF32[$13 + 4 >> 2] = $12;
 $17 = $collider + 140 | 0;
 HEAPF32[$17 >> 2] = $4;
 HEAPF32[$17 + 4 >> 2] = $5;
 $c$i182$i = $collider + 144 | 0;
 $21 = +HEAPF32[$polygonB + 12 >> 2];
 $s$i185$i = $collider + 140 | 0;
 $22 = +HEAPF32[$polygonB + 16 >> 2];
 $add$i189$i = $add$i$i$i + ($add$i14$i$i * $21 - $sub$i12$i$i * $22);
 $y16$i$i = $collider + 136 | 0;
 $add17$i$i = $21 * $sub$i12$i$i + $add$i14$i$i * $22 + $add8$i$i$i;
 $23 = +$add$i189$i;
 $24 = +$add17$i$i;
 $25 = $collider + 148 | 0;
 HEAPF32[$25 >> 2] = $23;
 HEAPF32[$25 + 4 >> 2] = $24;
 $29 = $edgeA + 28 | 0;
 $31 = HEAP32[$29 >> 2] | 0;
 $34 = HEAP32[$29 + 4 >> 2] | 0;
 $35 = $collider + 156 | 0;
 HEAP32[$35 >> 2] = $31;
 HEAP32[$35 + 4 >> 2] = $34;
 $m_v1$i = $collider + 164 | 0;
 $39 = $edgeA + 12 | 0;
 $41 = HEAP32[$39 >> 2] | 0;
 $44 = HEAP32[$39 + 4 >> 2] | 0;
 $45 = $m_v1$i;
 HEAP32[$45 >> 2] = $41;
 HEAP32[$45 + 4 >> 2] = $44;
 $m_v2$i = $collider + 172 | 0;
 $49 = $edgeA + 20 | 0;
 $51 = HEAP32[$49 >> 2] | 0;
 $54 = HEAP32[$49 + 4 >> 2] | 0;
 $55 = $m_v2$i;
 HEAP32[$55 >> 2] = $51;
 HEAP32[$55 + 4 >> 2] = $54;
 $59 = $edgeA + 36 | 0;
 $61 = HEAP32[$59 >> 2] | 0;
 $64 = HEAP32[$59 + 4 >> 2] | 0;
 $65 = $collider + 180 | 0;
 HEAP32[$65 >> 2] = $61;
 HEAP32[$65 + 4 >> 2] = $64;
 $tobool$i = (HEAP8[$edgeA + 44 >> 0] | 0) != 0;
 $tobool4$i = (HEAP8[$edgeA + 45 >> 0] | 0) == 0;
 $bitcast581$i = (HEAP32[tempDoublePtr >> 2] = $51, +HEAPF32[tempDoublePtr >> 2]);
 $bitcast583$i = (HEAP32[tempDoublePtr >> 2] = $41, +HEAPF32[tempDoublePtr >> 2]);
 $sub$i194$i = $bitcast581$i - $bitcast583$i;
 $71 = (HEAP32[tempDoublePtr >> 2] = $54, +HEAPF32[tempDoublePtr >> 2]);
 $72 = (HEAP32[tempDoublePtr >> 2] = $44, +HEAPF32[tempDoublePtr >> 2]);
 $sub3$i197$i = $71 - $72;
 $call$i$i$i420$i = +Math_sqrt(+($sub$i194$i * $sub$i194$i + $sub3$i197$i * $sub3$i197$i));
 $73 = (HEAP32[tempDoublePtr >> 2] = $31, +HEAPF32[tempDoublePtr >> 2]);
 $74 = (HEAP32[tempDoublePtr >> 2] = $34, +HEAPF32[tempDoublePtr >> 2]);
 $75 = (HEAP32[tempDoublePtr >> 2] = $61, +HEAPF32[tempDoublePtr >> 2]);
 $76 = (HEAP32[tempDoublePtr >> 2] = $64, +HEAPF32[tempDoublePtr >> 2]);
 if ($call$i$i$i420$i < 1.1920928955078125e-7) {
  $77 = $sub3$i197$i;
  $edge1$sroa$0$0$load508517$i = $sub$i194$i;
 } else {
  $div$i422$i = 1.0 / $call$i$i$i420$i;
  $77 = $sub3$i197$i * $div$i422$i;
  $edge1$sroa$0$0$load508517$i = $sub$i194$i * $div$i422$i;
 }
 $m_normal1$i = $collider + 196 | 0;
 $sub$i = -$edge1$sroa$0$0$load508517$i;
 HEAPF32[$m_normal1$i >> 2] = $77;
 $y$i429$i = $collider + 200 | 0;
 HEAPF32[$y$i429$i >> 2] = $sub$i;
 $add$i497$i = ($add$i189$i - $bitcast583$i) * $77 + ($add17$i$i - $72) * $sub$i;
 if ($tobool$i) {
  $sub$i485$i = $bitcast583$i - $73;
  $sub3$i488$i = $72 - $74;
  $call$i$i$i467$i = +Math_sqrt(+($sub$i485$i * $sub$i485$i + $sub3$i488$i * $sub3$i488$i));
  if ($call$i$i$i467$i < 1.1920928955078125e-7) {
   $sub$i485515$i = $sub$i485$i;
   $sub3$i488516$i = $sub3$i488$i;
  } else {
   $div$i469$i = 1.0 / $call$i$i$i467$i;
   $sub$i485515$i = $sub$i485$i * $div$i469$i;
   $sub3$i488516$i = $sub3$i488$i * $div$i469$i;
  }
  $sub19$i = -$sub$i485515$i;
  HEAPF32[$collider + 188 >> 2] = $sub3$i488516$i;
  HEAPF32[$collider + 192 >> 2] = $sub19$i;
  $convex1$0$off0$i = $77 * $sub$i485515$i - $edge1$sroa$0$0$load508517$i * $sub3$i488516$i >= 0.0;
  $offset0$0$i = ($add$i189$i - $73) * $sub3$i488516$i + ($add17$i$i - $74) * $sub19$i;
 } else {
  $convex1$0$off0$i = 0;
  $offset0$0$i = 0.0;
 }
 L10 : do if ($tobool4$i) {
  if (!$tobool$i) {
   $cmp229604$i = $add$i497$i >= 0.0;
   HEAP8[$collider + 248 >> 0] = $cmp229604$i & 1;
   $m_normal291608$i = $collider + 212 | 0;
   if ($cmp229604$i) {
    $451 = $m_normal1$i;
    $453 = HEAP32[$451 >> 2] | 0;
    $456 = HEAP32[$451 + 4 >> 2] | 0;
    $457 = $m_normal291608$i;
    HEAP32[$457 >> 2] = $453;
    HEAP32[$457 + 4 >> 2] = $456;
    $461 = +-(HEAP32[tempDoublePtr >> 2] = $453, +HEAPF32[tempDoublePtr >> 2]);
    $462 = +$edge1$sroa$0$0$load508517$i;
    $463 = $collider + 228 | 0;
    HEAPF32[$463 >> 2] = $461;
    HEAPF32[$463 + 4 >> 2] = $462;
    $467 = $collider + 236 | 0;
    HEAPF32[$467 >> 2] = $461;
    HEAPF32[$467 + 4 >> 2] = $462;
    break;
   } else {
    $471 = +-$77;
    $472 = +$edge1$sroa$0$0$load508517$i;
    $473 = $m_normal291608$i;
    HEAPF32[$473 >> 2] = $471;
    HEAPF32[$473 + 4 >> 2] = $472;
    $477 = $m_normal1$i;
    $479 = HEAP32[$477 >> 2] | 0;
    $482 = HEAP32[$477 + 4 >> 2] | 0;
    $483 = $collider + 228 | 0;
    HEAP32[$483 >> 2] = $479;
    HEAP32[$483 + 4 >> 2] = $482;
    $487 = $collider + 236 | 0;
    HEAP32[$487 >> 2] = $479;
    HEAP32[$487 + 4 >> 2] = $482;
    break;
   }
  }
  $cmp170$i = $offset0$0$i >= 0.0;
  if ($convex1$0$off0$i) {
   if ($cmp170$i) {
    HEAP8[$collider + 248 >> 0] = 1;
    $m_normal179555$i = $collider + 212 | 0;
   } else {
    $cmp172$i = $add$i497$i >= 0.0;
    HEAP8[$collider + 248 >> 0] = $cmp172$i & 1;
    $m_normal179$i = $collider + 212 | 0;
    if ($cmp172$i) $m_normal179555$i = $m_normal179$i; else {
     $294 = +-$77;
     $295 = +$edge1$sroa$0$0$load508517$i;
     $296 = $m_normal179$i;
     HEAPF32[$296 >> 2] = $294;
     HEAPF32[$296 + 4 >> 2] = $295;
     $300 = $m_normal1$i;
     $302 = HEAP32[$300 >> 2] | 0;
     $305 = HEAP32[$300 + 4 >> 2] | 0;
     $306 = $collider + 228 | 0;
     HEAP32[$306 >> 2] = $302;
     HEAP32[$306 + 4 >> 2] = $305;
     $311 = $collider + 236 | 0;
     HEAPF32[$311 >> 2] = -(HEAP32[tempDoublePtr >> 2] = $302, +HEAPF32[tempDoublePtr >> 2]);
     HEAPF32[$311 + 4 >> 2] = $295;
     break;
    }
   }
   $266 = $m_normal1$i;
   $271 = HEAP32[$266 + 4 >> 2] | 0;
   $272 = $m_normal179555$i;
   HEAP32[$272 >> 2] = HEAP32[$266 >> 2];
   HEAP32[$272 + 4 >> 2] = $271;
   $276 = $collider + 188 | 0;
   $281 = HEAP32[$276 + 4 >> 2] | 0;
   $282 = $collider + 228 | 0;
   HEAP32[$282 >> 2] = HEAP32[$276 >> 2];
   HEAP32[$282 + 4 >> 2] = $281;
   $288 = +-+HEAPF32[$m_normal1$i >> 2];
   $289 = +-+HEAPF32[$y$i429$i >> 2];
   $290 = $collider + 236 | 0;
   HEAPF32[$290 >> 2] = $288;
   HEAPF32[$290 + 4 >> 2] = $289;
   break;
  } else {
   if ($cmp170$i) {
    $cmp199$i = $add$i497$i >= 0.0;
    HEAP8[$collider + 248 >> 0] = $cmp199$i & 1;
    $m_normal206$i = $collider + 212 | 0;
    if ($cmp199$i) {
     $315 = $m_normal1$i;
     $317 = HEAP32[$315 >> 2] | 0;
     $320 = HEAP32[$315 + 4 >> 2] | 0;
     $321 = $m_normal206$i;
     HEAP32[$321 >> 2] = $317;
     HEAP32[$321 + 4 >> 2] = $320;
     $325 = $collider + 228 | 0;
     HEAP32[$325 >> 2] = $317;
     HEAP32[$325 + 4 >> 2] = $320;
     $329 = +-(HEAP32[tempDoublePtr >> 2] = $317, +HEAPF32[tempDoublePtr >> 2]);
     $330 = +$edge1$sroa$0$0$load508517$i;
     $331 = $collider + 236 | 0;
     HEAPF32[$331 >> 2] = $329;
     HEAPF32[$331 + 4 >> 2] = $330;
     break;
    } else $m_normal206559$i = $m_normal206$i;
   } else {
    HEAP8[$collider + 248 >> 0] = 0;
    $m_normal206559$i = $collider + 212 | 0;
   }
   $335 = +-$77;
   $336 = +$edge1$sroa$0$0$load508517$i;
   $337 = $m_normal206559$i;
   HEAPF32[$337 >> 2] = $335;
   HEAPF32[$337 + 4 >> 2] = $336;
   $341 = $m_normal1$i;
   $346 = HEAP32[$341 + 4 >> 2] | 0;
   $347 = $collider + 228 | 0;
   HEAP32[$347 >> 2] = HEAP32[$341 >> 2];
   HEAP32[$347 + 4 >> 2] = $346;
   $353 = +-+HEAPF32[$collider + 188 >> 2];
   $354 = +-+HEAPF32[$collider + 192 >> 2];
   $355 = $collider + 236 | 0;
   HEAPF32[$355 >> 2] = $353;
   HEAPF32[$355 + 4 >> 2] = $354;
   break;
  }
 } else {
  $sub$i432$i = $75 - $bitcast581$i;
  $sub3$i435$i = $76 - $71;
  $call$i$i$i$i = +Math_sqrt(+($sub$i432$i * $sub$i432$i + $sub3$i435$i * $sub3$i435$i));
  if ($call$i$i$i$i < 1.1920928955078125e-7) {
   $sub$i432513$i = $sub$i432$i;
   $sub3$i435514$i = $sub3$i435$i;
  } else {
   $div$i$i = 1.0 / $call$i$i$i$i;
   $sub$i432513$i = $sub$i432$i * $div$i$i;
   $sub3$i435514$i = $sub3$i435$i * $div$i$i;
  }
  $sub34$i = -$sub$i432513$i;
  $x$i408$i = $collider + 204 | 0;
  HEAPF32[$x$i408$i >> 2] = $sub3$i435514$i;
  $y$i409$i = $collider + 208 | 0;
  HEAPF32[$y$i409$i >> 2] = $sub34$i;
  $cmp36$i = $edge1$sroa$0$0$load508517$i * $sub3$i435514$i - $77 * $sub$i432513$i > 0.0;
  $add$i394$i = ($add$i189$i - $bitcast581$i) * $sub3$i435514$i + ($add17$i$i - $71) * $sub34$i;
  if (!$tobool$i) {
   $cmp229$i = $add$i497$i >= 0.0;
   if ($cmp36$i) {
    if ($cmp229$i) {
     HEAP8[$collider + 248 >> 0] = 1;
     $m_normal239563$i = $collider + 212 | 0;
    } else {
     $cmp231$i = $add$i394$i >= 0.0;
     HEAP8[$collider + 248 >> 0] = $cmp231$i & 1;
     $m_normal239$i = $collider + 212 | 0;
     if ($cmp231$i) $m_normal239563$i = $m_normal239$i; else {
      $387 = +-$77;
      $388 = +$edge1$sroa$0$0$load508517$i;
      $389 = $m_normal239$i;
      HEAPF32[$389 >> 2] = $387;
      HEAPF32[$389 + 4 >> 2] = $388;
      $393 = $collider + 228 | 0;
      HEAPF32[$393 >> 2] = $387;
      HEAPF32[$393 + 4 >> 2] = $388;
      $397 = $m_normal1$i;
      $402 = HEAP32[$397 + 4 >> 2] | 0;
      $403 = $collider + 236 | 0;
      HEAP32[$403 >> 2] = HEAP32[$397 >> 2];
      HEAP32[$403 + 4 >> 2] = $402;
      break;
     }
    }
    $359 = $m_normal1$i;
    $364 = HEAP32[$359 + 4 >> 2] | 0;
    $365 = $m_normal239563$i;
    HEAP32[$365 >> 2] = HEAP32[$359 >> 2];
    HEAP32[$365 + 4 >> 2] = $364;
    $371 = +-+HEAPF32[$m_normal1$i >> 2];
    $372 = +-+HEAPF32[$y$i429$i >> 2];
    $373 = $collider + 228 | 0;
    HEAPF32[$373 >> 2] = $371;
    HEAPF32[$373 + 4 >> 2] = $372;
    $377 = $collider + 204 | 0;
    $382 = HEAP32[$377 + 4 >> 2] | 0;
    $383 = $collider + 236 | 0;
    HEAP32[$383 >> 2] = HEAP32[$377 >> 2];
    HEAP32[$383 + 4 >> 2] = $382;
    break;
   } else {
    if ($cmp229$i) {
     $cmp259$i = $add$i394$i >= 0.0;
     HEAP8[$collider + 248 >> 0] = $cmp259$i & 1;
     $m_normal266$i = $collider + 212 | 0;
     if ($cmp259$i) {
      $407 = $m_normal1$i;
      $409 = HEAP32[$407 >> 2] | 0;
      $412 = HEAP32[$407 + 4 >> 2] | 0;
      $413 = $m_normal266$i;
      HEAP32[$413 >> 2] = $409;
      HEAP32[$413 + 4 >> 2] = $412;
      $417 = +-(HEAP32[tempDoublePtr >> 2] = $409, +HEAPF32[tempDoublePtr >> 2]);
      $418 = +$edge1$sroa$0$0$load508517$i;
      $419 = $collider + 228 | 0;
      HEAPF32[$419 >> 2] = $417;
      HEAPF32[$419 + 4 >> 2] = $418;
      $423 = $collider + 236 | 0;
      HEAP32[$423 >> 2] = $409;
      HEAP32[$423 + 4 >> 2] = $412;
      break;
     } else $m_normal266567$i = $m_normal266$i;
    } else {
     HEAP8[$collider + 248 >> 0] = 0;
     $m_normal266567$i = $collider + 212 | 0;
    }
    $427 = +-$77;
    $428 = +$edge1$sroa$0$0$load508517$i;
    $429 = $m_normal266567$i;
    HEAPF32[$429 >> 2] = $427;
    HEAPF32[$429 + 4 >> 2] = $428;
    $435 = +-+HEAPF32[$x$i408$i >> 2];
    $436 = +-+HEAPF32[$y$i409$i >> 2];
    $437 = $collider + 228 | 0;
    HEAPF32[$437 >> 2] = $435;
    HEAPF32[$437 + 4 >> 2] = $436;
    $441 = $m_normal1$i;
    $446 = HEAP32[$441 + 4 >> 2] | 0;
    $447 = $collider + 236 | 0;
    HEAP32[$447 >> 2] = HEAP32[$441 >> 2];
    HEAP32[$447 + 4 >> 2] = $446;
    break;
   }
  }
  if ($convex1$0$off0$i & $cmp36$i) {
   if (!($offset0$0$i >= 0.0) & !($add$i497$i >= 0.0)) {
    $cmp53$i = $add$i394$i >= 0.0;
    HEAP8[$collider + 248 >> 0] = $cmp53$i & 1;
    $m_normal$i = $collider + 212 | 0;
    if ($cmp53$i) $m_normal529$i = $m_normal$i; else {
     $108 = +-$77;
     $109 = +$edge1$sroa$0$0$load508517$i;
     $110 = $m_normal$i;
     HEAPF32[$110 >> 2] = $108;
     HEAPF32[$110 + 4 >> 2] = $109;
     $114 = $collider + 228 | 0;
     HEAPF32[$114 >> 2] = $108;
     HEAPF32[$114 + 4 >> 2] = $109;
     $118 = $collider + 236 | 0;
     HEAPF32[$118 >> 2] = $108;
     HEAPF32[$118 + 4 >> 2] = $109;
     break;
    }
   } else {
    HEAP8[$collider + 248 >> 0] = 1;
    $m_normal529$i = $collider + 212 | 0;
   }
   $78 = $m_normal1$i;
   $83 = HEAP32[$78 + 4 >> 2] | 0;
   $84 = $m_normal529$i;
   HEAP32[$84 >> 2] = HEAP32[$78 >> 2];
   HEAP32[$84 + 4 >> 2] = $83;
   $88 = $collider + 188 | 0;
   $93 = HEAP32[$88 + 4 >> 2] | 0;
   $94 = $collider + 228 | 0;
   HEAP32[$94 >> 2] = HEAP32[$88 >> 2];
   HEAP32[$94 + 4 >> 2] = $93;
   $98 = $collider + 204 | 0;
   $103 = HEAP32[$98 + 4 >> 2] | 0;
   $104 = $collider + 236 | 0;
   HEAP32[$104 >> 2] = HEAP32[$98 >> 2];
   HEAP32[$104 + 4 >> 2] = $103;
   break;
  }
  if ($convex1$0$off0$i) {
   do if (!($offset0$0$i >= 0.0)) {
    if (!($add$i497$i >= 0.0)) {
     HEAP8[$collider + 248 >> 0] = 0;
     $m_normal84533$i = $collider + 212 | 0;
    } else {
     $cmp77$i = $add$i394$i >= 0.0;
     HEAP8[$collider + 248 >> 0] = $cmp77$i & 1;
     $m_normal84$i = $collider + 212 | 0;
     if ($cmp77$i) {
      $m_normal84538$i = $m_normal84$i;
      break;
     } else $m_normal84533$i = $m_normal84$i;
    }
    $152 = +-$77;
    $153 = +$edge1$sroa$0$0$load508517$i;
    $154 = $m_normal84533$i;
    HEAPF32[$154 >> 2] = $152;
    HEAPF32[$154 + 4 >> 2] = $153;
    $160 = +-+HEAPF32[$x$i408$i >> 2];
    $161 = +-+HEAPF32[$y$i409$i >> 2];
    $162 = $collider + 228 | 0;
    HEAPF32[$162 >> 2] = $160;
    HEAPF32[$162 + 4 >> 2] = $161;
    $168 = +-+HEAPF32[$m_normal1$i >> 2];
    $169 = +-+HEAPF32[$y$i429$i >> 2];
    $170 = $collider + 236 | 0;
    HEAPF32[$170 >> 2] = $168;
    HEAPF32[$170 + 4 >> 2] = $169;
    break L10;
   } else {
    HEAP8[$collider + 248 >> 0] = 1;
    $m_normal84538$i = $collider + 212 | 0;
   } while (0);
   $122 = $m_normal1$i;
   $127 = HEAP32[$122 + 4 >> 2] | 0;
   $128 = $m_normal84538$i;
   HEAP32[$128 >> 2] = HEAP32[$122 >> 2];
   HEAP32[$128 + 4 >> 2] = $127;
   $132 = $collider + 188 | 0;
   $137 = HEAP32[$132 + 4 >> 2] | 0;
   $138 = $collider + 228 | 0;
   HEAP32[$138 >> 2] = HEAP32[$132 >> 2];
   HEAP32[$138 + 4 >> 2] = $137;
   $142 = $m_normal1$i;
   $147 = HEAP32[$142 + 4 >> 2] | 0;
   $148 = $collider + 236 | 0;
   HEAP32[$148 >> 2] = HEAP32[$142 >> 2];
   HEAP32[$148 + 4 >> 2] = $147;
   break;
  }
  if (!$cmp36$i) {
   if (!($offset0$0$i >= 0.0) | !($add$i497$i >= 0.0)) {
    HEAP8[$collider + 248 >> 0] = 0;
    $m_normal145551$i = $collider + 212 | 0;
   } else {
    $cmp138$i = $add$i394$i >= 0.0;
    HEAP8[$collider + 248 >> 0] = $cmp138$i & 1;
    $m_normal145$i = $collider + 212 | 0;
    if ($cmp138$i) {
     $226 = $m_normal1$i;
     $228 = HEAP32[$226 >> 2] | 0;
     $231 = HEAP32[$226 + 4 >> 2] | 0;
     $232 = $m_normal145$i;
     HEAP32[$232 >> 2] = $228;
     HEAP32[$232 + 4 >> 2] = $231;
     $236 = $collider + 228 | 0;
     HEAP32[$236 >> 2] = $228;
     HEAP32[$236 + 4 >> 2] = $231;
     $240 = $collider + 236 | 0;
     HEAP32[$240 >> 2] = $228;
     HEAP32[$240 + 4 >> 2] = $231;
     break;
    } else $m_normal145551$i = $m_normal145$i;
   }
   $244 = +-$77;
   $245 = +$edge1$sroa$0$0$load508517$i;
   $246 = $m_normal145551$i;
   HEAPF32[$246 >> 2] = $244;
   HEAPF32[$246 + 4 >> 2] = $245;
   $252 = +-+HEAPF32[$x$i408$i >> 2];
   $253 = +-+HEAPF32[$y$i409$i >> 2];
   $254 = $collider + 228 | 0;
   HEAPF32[$254 >> 2] = $252;
   HEAPF32[$254 + 4 >> 2] = $253;
   $260 = +-+HEAPF32[$collider + 188 >> 2];
   $261 = +-+HEAPF32[$collider + 192 >> 2];
   $262 = $collider + 236 | 0;
   HEAPF32[$262 >> 2] = $260;
   HEAPF32[$262 + 4 >> 2] = $261;
   break;
  }
  do if (!($add$i394$i >= 0.0)) {
   if (!($offset0$0$i >= 0.0)) {
    HEAP8[$collider + 248 >> 0] = 0;
    $m_normal116542$i = $collider + 212 | 0;
   } else {
    $cmp108$i = $add$i497$i >= 0.0;
    HEAP8[$collider + 248 >> 0] = $cmp108$i & 1;
    $m_normal116$i = $collider + 212 | 0;
    if ($cmp108$i) {
     $m_normal116547$i = $m_normal116$i;
     break;
    } else $m_normal116542$i = $m_normal116$i;
   }
   $204 = +-$77;
   $205 = +$edge1$sroa$0$0$load508517$i;
   $206 = $m_normal116542$i;
   HEAPF32[$206 >> 2] = $204;
   HEAPF32[$206 + 4 >> 2] = $205;
   $212 = +-+HEAPF32[$m_normal1$i >> 2];
   $213 = +-+HEAPF32[$y$i429$i >> 2];
   $214 = $collider + 228 | 0;
   HEAPF32[$214 >> 2] = $212;
   HEAPF32[$214 + 4 >> 2] = $213;
   $220 = +-+HEAPF32[$collider + 188 >> 2];
   $221 = +-+HEAPF32[$collider + 192 >> 2];
   $222 = $collider + 236 | 0;
   HEAPF32[$222 >> 2] = $220;
   HEAPF32[$222 + 4 >> 2] = $221;
   break L10;
  } else {
   HEAP8[$collider + 248 >> 0] = 1;
   $m_normal116547$i = $collider + 212 | 0;
  } while (0);
  $174 = $m_normal1$i;
  $179 = HEAP32[$174 + 4 >> 2] | 0;
  $180 = $m_normal116547$i;
  HEAP32[$180 >> 2] = HEAP32[$174 >> 2];
  HEAP32[$180 + 4 >> 2] = $179;
  $184 = $m_normal1$i;
  $189 = HEAP32[$184 + 4 >> 2] | 0;
  $190 = $collider + 228 | 0;
  HEAP32[$190 >> 2] = HEAP32[$184 >> 2];
  HEAP32[$190 + 4 >> 2] = $189;
  $194 = $collider + 204 | 0;
  $199 = HEAP32[$194 + 4 >> 2] | 0;
  $200 = $collider + 236 | 0;
  HEAP32[$200 >> 2] = HEAP32[$194 >> 2];
  HEAP32[$200 + 4 >> 2] = $199;
 } while (0);
 $491 = HEAP32[$polygonB + 148 >> 2] | 0;
 $count$i = $collider + 128 | 0;
 HEAP32[$count$i >> 2] = $491;
 if (($491 | 0) > 0) {
  $i$0577$i = 0;
  do {
   $492 = +HEAPF32[$c$i182$i >> 2];
   $493 = +HEAPF32[$polygonB + ($i$0577$i << 3) + 20 >> 2];
   $494 = +HEAPF32[$s$i185$i >> 2];
   $495 = +HEAPF32[$polygonB + ($i$0577$i << 3) + 24 >> 2];
   $498 = +(+HEAPF32[$m_xf$i >> 2] + ($492 * $493 - $494 * $495));
   $499 = +($493 * $494 + $492 * $495 + +HEAPF32[$y16$i$i >> 2]);
   $500 = $collider + ($i$0577$i << 3) | 0;
   HEAPF32[$500 >> 2] = $498;
   HEAPF32[$500 + 4 >> 2] = $499;
   $504 = +HEAPF32[$c$i182$i >> 2];
   $505 = +HEAPF32[$polygonB + ($i$0577$i << 3) + 84 >> 2];
   $506 = +HEAPF32[$s$i185$i >> 2];
   $507 = +HEAPF32[$polygonB + ($i$0577$i << 3) + 88 >> 2];
   $508 = +($504 * $505 - $506 * $507);
   $509 = +($505 * $506 + $504 * $507);
   $510 = $collider + ($i$0577$i << 3) + 64 | 0;
   HEAPF32[$510 >> 2] = $508;
   HEAPF32[$510 + 4 >> 2] = $509;
   $i$0577$i = $i$0577$i + 1 | 0;
  } while (($i$0577$i | 0) < ($491 | 0));
  $515 = HEAP32[$count$i >> 2] | 0;
 } else $515 = $491;
 $m_radius$i = $collider + 244 | 0;
 HEAPF32[$m_radius$i >> 2] = .019999999552965164;
 $pointCount$i = $manifold + 60 | 0;
 HEAP32[$pointCount$i >> 2] = 0;
 $514 = HEAP8[$collider + 248 >> 0] | 0;
 $cmp8$i$i = ($515 | 0) > 0;
 if (!$cmp8$i$i) {
  STACKTOP = sp;
  return;
 }
 $516 = +HEAPF32[$collider + 164 >> 2];
 $517 = +HEAPF32[$collider + 168 >> 2];
 $518 = +HEAPF32[$collider + 212 >> 2];
 $519 = +HEAPF32[$collider + 216 >> 2];
 $522 = 3.4028234663852886e+38;
 $edgeAxis$i$sroa$2$0 = 3.4028234663852886e+38;
 $i$09$i$i = 0;
 while (1) {
  $add$i$i8$i = (+HEAPF32[$collider + ($i$09$i$i << 3) >> 2] - $516) * $518 + (+HEAPF32[$collider + ($i$09$i$i << 3) + 4 >> 2] - $517) * $519;
  $cmp4$i$i = $add$i$i8$i < $522;
  $edgeAxis$i$sroa$2$1 = $cmp4$i$i ? $add$i$i8$i : $edgeAxis$i$sroa$2$0;
  $i$09$i$i = $i$09$i$i + 1 | 0;
  if (($i$09$i$i | 0) >= ($515 | 0)) {
   $edgeAxis$i$sroa$2$2 = $edgeAxis$i$sroa$2$1;
   break;
  } else {
   $522 = $cmp4$i$i ? $add$i$i8$i : $522;
   $edgeAxis$i$sroa$2$0 = $edgeAxis$i$sroa$2$1;
  }
 }
 if ($edgeAxis$i$sroa$2$2 > .019999999552965164) {
  STACKTOP = sp;
  return;
 }
 $524 = +HEAPF32[$collider + 216 >> 2];
 $525 = +HEAPF32[$collider + 212 >> 2];
 do if ($cmp8$i$i) {
  $526 = +HEAPF32[$collider + 164 >> 2];
  $527 = +HEAPF32[$collider + 168 >> 2];
  $528 = +HEAPF32[$collider + 172 >> 2];
  $529 = +HEAPF32[$collider + 176 >> 2];
  $530 = +HEAPF32[$collider + 228 >> 2];
  $531 = +HEAPF32[$collider + 232 >> 2];
  $532 = +HEAPF32[$collider + 236 >> 2];
  $533 = +HEAPF32[$collider + 240 >> 2];
  $538 = -3.4028234663852886e+38;
  $i$079$i$i = 0;
  $polygonAxis$i$sroa$0$0 = 0;
  $polygonAxis$i$sroa$1$0 = -1;
  $polygonAxis$i$sroa$2$0 = -3.4028234663852886e+38;
  while (1) {
   $534 = +HEAPF32[$collider + ($i$079$i$i << 3) + 64 >> 2];
   $sub$i67$i$i = -$534;
   $sub2$i$i$i = -+HEAPF32[$collider + ($i$079$i$i << 3) + 68 >> 2];
   $536 = +HEAPF32[$collider + ($i$079$i$i << 3) >> 2];
   $537 = +HEAPF32[$collider + ($i$079$i$i << 3) + 4 >> 2];
   $add$i57$i$i = ($536 - $526) * $sub$i67$i$i + ($537 - $527) * $sub2$i$i$i;
   $add$i42$i$i = ($536 - $528) * $sub$i67$i$i + ($537 - $529) * $sub2$i$i$i;
   $cond$i$i$i = $add$i57$i$i < $add$i42$i$i ? $add$i57$i$i : $add$i42$i$i;
   if ($cond$i$i$i > .019999999552965164) {
    $polygonAxis$i$sroa$0$235 = 2;
    $polygonAxis$i$sroa$1$236 = $i$079$i$i;
    $polygonAxis$i$sroa$2$237 = $cond$i$i$i;
    break;
   }
   if (!($524 * $534 + $525 * $sub2$i$i$i >= 0.0)) if ($cond$i$i$i > $538 ? !(($sub$i67$i$i - $530) * $525 + ($sub2$i$i$i - $531) * $524 < -.03490658849477768) : 0) label = 77; else {
    $703 = $538;
    $polygonAxis$i$sroa$0$1 = $polygonAxis$i$sroa$0$0;
    $polygonAxis$i$sroa$1$1 = $polygonAxis$i$sroa$1$0;
    $polygonAxis$i$sroa$2$1 = $polygonAxis$i$sroa$2$0;
   } else if ($cond$i$i$i > $538 ? !(($sub$i67$i$i - $532) * $525 + ($sub2$i$i$i - $533) * $524 < -.03490658849477768) : 0) label = 77; else {
    $703 = $538;
    $polygonAxis$i$sroa$0$1 = $polygonAxis$i$sroa$0$0;
    $polygonAxis$i$sroa$1$1 = $polygonAxis$i$sroa$1$0;
    $polygonAxis$i$sroa$2$1 = $polygonAxis$i$sroa$2$0;
   }
   if ((label | 0) == 77) {
    label = 0;
    $703 = $cond$i$i$i;
    $polygonAxis$i$sroa$0$1 = 2;
    $polygonAxis$i$sroa$1$1 = $i$079$i$i;
    $polygonAxis$i$sroa$2$1 = $cond$i$i$i;
   }
   $i$079$i$i = $i$079$i$i + 1 | 0;
   if (($i$079$i$i | 0) >= ($515 | 0)) {
    $polygonAxis$i$sroa$0$2 = $polygonAxis$i$sroa$0$1;
    $polygonAxis$i$sroa$1$2 = $polygonAxis$i$sroa$1$1;
    $polygonAxis$i$sroa$2$2 = $polygonAxis$i$sroa$2$1;
    label = 79;
    break;
   } else {
    $538 = $703;
    $polygonAxis$i$sroa$0$0 = $polygonAxis$i$sroa$0$1;
    $polygonAxis$i$sroa$1$0 = $polygonAxis$i$sroa$1$1;
    $polygonAxis$i$sroa$2$0 = $polygonAxis$i$sroa$2$1;
   }
  }
  if ((label | 0) == 79) if (($polygonAxis$i$sroa$0$2 | 0) == 0) {
   label = 82;
   break;
  } else {
   $polygonAxis$i$sroa$0$235 = $polygonAxis$i$sroa$0$2;
   $polygonAxis$i$sroa$1$236 = $polygonAxis$i$sroa$1$2;
   $polygonAxis$i$sroa$2$237 = $polygonAxis$i$sroa$2$2;
  }
  if ($polygonAxis$i$sroa$2$237 > .019999999552965164) {
   STACKTOP = sp;
   return;
  }
  if ($polygonAxis$i$sroa$2$237 > $edgeAxis$i$sroa$2$2 * .9800000190734863 + .0010000000474974513) {
   $primaryAxis$sroa$1$0$i = $polygonAxis$i$sroa$1$236;
   $cmp349$i = ($polygonAxis$i$sroa$0$235 | 0) == 1;
   $type351$i = $manifold + 56 | 0;
   if ($cmp349$i) {
    $array$begin$i42 = $ie$i;
    $cmp349$i44 = $cmp349$i;
    $type351$i45 = $type351$i;
    label = 84;
   } else {
    HEAP32[$type351$i >> 2] = 2;
    $597 = $m_v1$i;
    $602 = HEAP32[$597 + 4 >> 2] | 0;
    $603 = $ie$i;
    HEAP32[$603 >> 2] = HEAP32[$597 >> 2];
    HEAP32[$603 + 4 >> 2] = $602;
    $id440$i = $ie$i + 8 | 0;
    HEAP8[$id440$i >> 0] = 0;
    $conv443$i = $primaryAxis$sroa$1$0$i & 255;
    HEAP8[$id440$i + 1 >> 0] = $conv443$i;
    HEAP8[$id440$i + 2 >> 0] = 0;
    HEAP8[$id440$i + 3 >> 0] = 1;
    $607 = $m_v2$i;
    $612 = HEAP32[$607 + 4 >> 2] | 0;
    $613 = $ie$i + 12 | 0;
    HEAP32[$613 >> 2] = HEAP32[$607 >> 2];
    HEAP32[$613 + 4 >> 2] = $612;
    $id460$i = $ie$i + 20 | 0;
    HEAP8[$id460$i >> 0] = 0;
    HEAP8[$id460$i + 1 >> 0] = $conv443$i;
    HEAP8[$id460$i + 2 >> 0] = 0;
    HEAP8[$id460$i + 3 >> 0] = 1;
    $add480$i = $primaryAxis$sroa$1$0$i + 1 | 0;
    $add480$$i = ($add480$i | 0) < ($515 | 0) ? $add480$i : 0;
    $617 = $collider + ($primaryAxis$sroa$1$0$i << 3) | 0;
    $623 = $collider + ($add480$$i << 3) | 0;
    $629 = $collider + ($primaryAxis$sroa$1$0$i << 3) + 64 | 0;
    $$in$i = HEAP32[$623 + 4 >> 2] | 0;
    $$in597$i = HEAP32[$623 >> 2] | 0;
    $array$begin$i41 = $ie$i;
    $cmp349$i43 = $cmp349$i;
    $rf$i$sroa$0$0 = $primaryAxis$sroa$1$0$i;
    $rf$i$sroa$1$0 = $add480$$i;
    $rf$i$sroa$2$sroa$0$0$in = HEAP32[$617 >> 2] | 0;
    $rf$i$sroa$2$sroa$1$0$in = HEAP32[$617 + 4 >> 2] | 0;
    $rf$i$sroa$4$sroa$0$0$in = HEAP32[$629 >> 2] | 0;
    $rf$i$sroa$4$sroa$1$0$in = HEAP32[$629 + 4 >> 2] | 0;
   }
  } else label = 82;
 } else label = 82; while (0);
 if ((label | 0) == 82) {
  $array$begin$i42 = $ie$i;
  $cmp349$i44 = 1;
  $type351$i45 = $manifold + 56 | 0;
  label = 84;
 }
 do if ((label | 0) == 84) {
  HEAP32[$type351$i45 >> 2] = 1;
  if (($515 | 0) > 1) {
   $bestIndex$0572$i = 0;
   $bestValue$0573$i = $525 * +HEAPF32[$collider + 64 >> 2] + $524 * +HEAPF32[$collider + 68 >> 2];
   $i357$0574$i = 1;
   while (1) {
    $add$i174$i = $525 * +HEAPF32[$collider + ($i357$0574$i << 3) + 64 >> 2] + $524 * +HEAPF32[$collider + ($i357$0574$i << 3) + 68 >> 2];
    $cmp368$i = $add$i174$i < $bestValue$0573$i;
    $bestIndex$1$i = $cmp368$i ? $i357$0574$i : $bestIndex$0572$i;
    $i357$0574$i = $i357$0574$i + 1 | 0;
    if (($i357$0574$i | 0) >= ($515 | 0)) {
     $bestIndex$0$lcssa$i = $bestIndex$1$i;
     break;
    } else {
     $bestIndex$0572$i = $bestIndex$1$i;
     $bestValue$0573$i = $cmp368$i ? $add$i174$i : $bestValue$0573$i;
    }
   }
  } else $bestIndex$0$lcssa$i = 0;
  $add374$i = $bestIndex$0$lcssa$i + 1 | 0;
  $add374$$i = ($add374$i | 0) < ($515 | 0) ? $add374$i : 0;
  $543 = $collider + ($bestIndex$0$lcssa$i << 3) | 0;
  $548 = HEAP32[$543 + 4 >> 2] | 0;
  $549 = $ie$i;
  HEAP32[$549 >> 2] = HEAP32[$543 >> 2];
  HEAP32[$549 + 4 >> 2] = $548;
  $id$i = $ie$i + 8 | 0;
  HEAP8[$id$i >> 0] = 0;
  HEAP8[$id$i + 1 >> 0] = $bestIndex$0$lcssa$i;
  HEAP8[$id$i + 2 >> 0] = 1;
  HEAP8[$id$i + 3 >> 0] = 0;
  $553 = $collider + ($add374$$i << 3) | 0;
  $558 = HEAP32[$553 + 4 >> 2] | 0;
  $559 = $ie$i + 12 | 0;
  HEAP32[$559 >> 2] = HEAP32[$553 >> 2];
  HEAP32[$559 + 4 >> 2] = $558;
  $id399$i = $ie$i + 20 | 0;
  HEAP8[$id399$i >> 0] = 0;
  HEAP8[$id399$i + 1 >> 0] = $add374$$i;
  HEAP8[$id399$i + 2 >> 0] = 1;
  HEAP8[$id399$i + 3 >> 0] = 0;
  if ($514 << 24 >> 24 == 0) {
   $581 = $m_v2$i;
   $587 = $m_v1$i;
   $595 = (HEAPF32[tempDoublePtr >> 2] = -+HEAPF32[$m_normal1$i >> 2], HEAP32[tempDoublePtr >> 2] | 0);
   $$in$i = HEAP32[$587 + 4 >> 2] | 0;
   $$in597$i = HEAP32[$587 >> 2] | 0;
   $array$begin$i41 = $array$begin$i42;
   $cmp349$i43 = $cmp349$i44;
   $rf$i$sroa$0$0 = 1;
   $rf$i$sroa$1$0 = 0;
   $rf$i$sroa$2$sroa$0$0$in = HEAP32[$581 >> 2] | 0;
   $rf$i$sroa$2$sroa$1$0$in = HEAP32[$581 + 4 >> 2] | 0;
   $rf$i$sroa$4$sroa$0$0$in = $595;
   $rf$i$sroa$4$sroa$1$0$in = (HEAPF32[tempDoublePtr >> 2] = -+HEAPF32[$y$i429$i >> 2], HEAP32[tempDoublePtr >> 2] | 0);
   break;
  } else {
   $563 = $m_v1$i;
   $569 = $m_v2$i;
   $575 = $m_normal1$i;
   $$in$i = HEAP32[$569 + 4 >> 2] | 0;
   $$in597$i = HEAP32[$569 >> 2] | 0;
   $array$begin$i41 = $array$begin$i42;
   $cmp349$i43 = $cmp349$i44;
   $rf$i$sroa$0$0 = 0;
   $rf$i$sroa$1$0 = 1;
   $rf$i$sroa$2$sroa$0$0$in = HEAP32[$563 >> 2] | 0;
   $rf$i$sroa$2$sroa$1$0$in = HEAP32[$563 + 4 >> 2] | 0;
   $rf$i$sroa$4$sroa$0$0$in = HEAP32[$575 >> 2] | 0;
   $rf$i$sroa$4$sroa$1$0$in = HEAP32[$575 + 4 >> 2] | 0;
   break;
  }
 } while (0);
 $rf$i$sroa$2$sroa$1$0 = (HEAP32[tempDoublePtr >> 2] = $rf$i$sroa$2$sroa$1$0$in, +HEAPF32[tempDoublePtr >> 2]);
 $rf$i$sroa$4$sroa$1$0 = (HEAP32[tempDoublePtr >> 2] = $rf$i$sroa$4$sroa$1$0$in, +HEAPF32[tempDoublePtr >> 2]);
 $635 = (HEAP32[tempDoublePtr >> 2] = $rf$i$sroa$4$sroa$1$0$in, +HEAPF32[tempDoublePtr >> 2]);
 $636 = (HEAP32[tempDoublePtr >> 2] = $rf$i$sroa$4$sroa$0$0$in, +HEAPF32[tempDoublePtr >> 2]);
 $637 = (HEAP32[tempDoublePtr >> 2] = $rf$i$sroa$2$sroa$0$0$in, +HEAPF32[tempDoublePtr >> 2]);
 $sub511$i = -$636;
 $sub$i158$i = -$635;
 if ((__Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi($clipPoints1$i, $array$begin$i41, $635, $sub511$i, $635 * $637 + (HEAP32[tempDoublePtr >> 2] = $rf$i$sroa$2$sroa$1$0$in, +HEAPF32[tempDoublePtr >> 2]) * $sub511$i, $rf$i$sroa$0$0) | 0) < 2) {
  STACKTOP = sp;
  return;
 }
 $639 = (HEAP32[tempDoublePtr >> 2] = $$in$i, +HEAPF32[tempDoublePtr >> 2]);
 $add$i149$i = (HEAP32[tempDoublePtr >> 2] = $$in597$i, +HEAPF32[tempDoublePtr >> 2]) * $sub$i158$i + $636 * $639;
 if ((__Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi($clipPoints2$i, $clipPoints1$i, $sub$i158$i, (HEAP32[tempDoublePtr >> 2] = $rf$i$sroa$4$sroa$0$0$in, +HEAPF32[tempDoublePtr >> 2]), $add$i149$i, $rf$i$sroa$1$0) | 0) < 2) {
  STACKTOP = sp;
  return;
 }
 $localNormal$i = $manifold + 40 | 0;
 if ($cmp349$i43) {
  $642 = $localNormal$i;
  HEAP32[$642 >> 2] = $rf$i$sroa$4$sroa$0$0$in;
  HEAP32[$642 + 4 >> 2] = $rf$i$sroa$4$sroa$1$0$in;
  $646 = $manifold + 48 | 0;
  HEAP32[$646 >> 2] = $rf$i$sroa$2$sroa$0$0$in;
  HEAP32[$646 + 4 >> 2] = $rf$i$sroa$2$sroa$1$0$in;
 } else {
  $650 = $polygonB + ($rf$i$sroa$0$0 << 3) + 84 | 0;
  $655 = HEAP32[$650 + 4 >> 2] | 0;
  $656 = $localNormal$i;
  HEAP32[$656 >> 2] = HEAP32[$650 >> 2];
  HEAP32[$656 + 4 >> 2] = $655;
  $660 = $polygonB + ($rf$i$sroa$0$0 << 3) + 20 | 0;
  $665 = HEAP32[$660 + 4 >> 2] | 0;
  $666 = $manifold + 48 | 0;
  HEAP32[$666 >> 2] = HEAP32[$660 >> 2];
  HEAP32[$666 + 4 >> 2] = $665;
 }
 $670 = (HEAP32[tempDoublePtr >> 2] = $rf$i$sroa$2$sroa$0$0$in, +HEAPF32[tempDoublePtr >> 2]);
 $671 = (HEAP32[tempDoublePtr >> 2] = $rf$i$sroa$4$sroa$0$0$in, +HEAPF32[tempDoublePtr >> 2]);
 $672 = +HEAPF32[$m_radius$i >> 2];
 $673 = +HEAPF32[$m_xf$i >> 2];
 $674 = +HEAPF32[$y16$i$i >> 2];
 $675 = +HEAPF32[$c$i182$i >> 2];
 $676 = +HEAPF32[$s$i185$i >> 2];
 $i567$0570$i = 0;
 $pointCount566$0569$i = 0;
 while (1) {
  $arrayidx574$i = $clipPoints2$i + ($i567$0570$i * 12 | 0) | 0;
  $677 = +HEAPF32[$arrayidx574$i >> 2];
  $678 = +HEAPF32[$clipPoints2$i + ($i567$0570$i * 12 | 0) + 4 >> 2];
  if (!(($677 - $670) * $671 + ($678 - $rf$i$sroa$2$sroa$1$0) * $rf$i$sroa$4$sroa$1$0 <= $672)) $pointCount566$1$i = $pointCount566$0569$i; else {
   $add$ptr$i = $manifold + ($pointCount566$0569$i * 20 | 0) | 0;
   if ($cmp349$i43) {
    $sub$i$i = $677 - $673;
    $sub4$i$i = $678 - $674;
    $680 = +($sub$i$i * $675 + $sub4$i$i * $676);
    $681 = +($675 * $sub4$i$i - $sub$i$i * $676);
    $682 = $add$ptr$i;
    HEAPF32[$682 >> 2] = $680;
    HEAPF32[$682 + 4 >> 2] = $681;
    HEAP32[$manifold + ($pointCount566$0569$i * 20 | 0) + 16 >> 2] = HEAP32[$clipPoints2$i + ($i567$0570$i * 12 | 0) + 8 >> 2];
   } else {
    $689 = $arrayidx574$i;
    $694 = HEAP32[$689 + 4 >> 2] | 0;
    $695 = $add$ptr$i;
    HEAP32[$695 >> 2] = HEAP32[$689 >> 2];
    HEAP32[$695 + 4 >> 2] = $694;
    $id598$i = $clipPoints2$i + ($i567$0570$i * 12 | 0) + 8 | 0;
    $id601$i = $manifold + ($pointCount566$0569$i * 20 | 0) + 16 | 0;
    HEAP8[$id601$i + 2 >> 0] = HEAP8[$id598$i + 3 >> 0] | 0;
    HEAP8[$id601$i + 3 >> 0] = HEAP8[$id598$i + 2 >> 0] | 0;
    HEAP8[$id601$i >> 0] = HEAP8[$id598$i + 1 >> 0] | 0;
    HEAP8[$id601$i + 1 >> 0] = HEAP8[$id598$i >> 0] | 0;
   }
   $pointCount566$1$i = $pointCount566$0569$i + 1 | 0;
  }
  $i567$0570$i = $i567$0570$i + 1 | 0;
  if (($i567$0570$i | 0) == 2) break; else $pointCount566$0569$i = $pointCount566$1$i;
 }
 HEAP32[$pointCount$i >> 2] = $pointCount566$1$i;
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2World_CreateJoint_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $102 = 0, $104 = 0, $107 = 0, $108 = 0, $11 = 0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0, $139 = 0, $144 = 0, $145 = 0, $149 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $177 = 0, $182 = 0, $183 = 0, $187 = 0, $192 = 0, $193 = 0, $197 = 0, $202 = 0, $203 = 0, $207 = 0, $21 = 0, $212 = 0, $213 = 0, $219 = 0.0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0.0, $239 = 0.0, $240 = 0, $245 = 0, $246 = 0, $250 = 0, $255 = 0, $256 = 0, $26 = 0, $260 = 0.0, $261 = 0, $263 = 0, $266 = 0, $267 = 0, $27 = 0, $271 = 0, $273 = 0, $276 = 0, $277 = 0, $282 = 0, $284 = 0, $287 = 0, $288 = 0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $297 = 0, $298 = 0, $299 = 0, $300 = 0.0, $301 = 0.0, $302 = 0, $307 = 0, $308 = 0, $312 = 0, $317 = 0, $318 = 0, $322 = 0.0, $323 = 0, $325 = 0, $328 = 0, $329 = 0, $333 = 0, $335 = 0, $338 = 0, $339 = 0, $344 = 0, $346 = 0, $349 = 0, $350 = 0, $354 = 0.0, $355 = 0.0, $356 = 0.0, $359 = 0.0, $369 = 0, $374 = 0, $375 = 0, $379 = 0, $38 = 0, $384 = 0, $385 = 0, $389 = 0, $391 = 0, $394 = 0, $395 = 0, $401 = 0, $420 = 0, $425 = 0, $426 = 0, $43 = 0.0, $430 = 0, $435 = 0, $436 = 0, $44 = 0.0, $45 = 0.0, $452 = 0, $457 = 0, $458 = 0, $46 = 0.0, $462 = 0, $467 = 0, $468 = 0, $47 = 0.0, $48 = 0, $483 = 0, $488 = 0, $489 = 0, $493 = 0, $498 = 0, $499 = 0, $50 = 0, $505 = 0, $508 = 0, $510 = 0, $511 = 0, $513 = 0, $515 = 0, $516 = 0, $517 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $54 = 0, $61 = 0.0, $62 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $82 = 0, $87 = 0, $88 = 0, $92 = 0, $97 = 0, $98 = 0, $add$i31$i$i$i = 0.0, $add$i85$i$i$i = 0.0, $add3$i$i$i$i = 0.0, $add3$i88$i$i$i = 0.0, $bitcast$i12$i$i = 0.0, $bitcast$i49$i$i = 0.0, $bitcast131$i$i$i = 0.0, $bodyA$i = 0, $bodyA$i116 = 0, $bodyA$i134 = 0, $bodyA$i152 = 0, $bodyA$i26 = 0, $bodyA$i44 = 0, $bodyA$i62 = 0, $bodyA$i8 = 0, $bodyA$i80 = 0, $bodyA$i98 = 0, $bodyB$i = 0, $bodyB$i117 = 0, $bodyB$i135 = 0, $bodyB$i153 = 0, $bodyB$i27 = 0, $bodyB$i45 = 0, $bodyB$i63 = 0, $bodyB$i81 = 0, $bodyB$i9 = 0, $bodyB$i99 = 0, $call$i$i = 0, $call$i$i$i$i$i$i = 0.0, $call15$i$i = 0, $call21$i$i = 0, $call27$i$i = 0, $call3$i$i = 0, $call33$i$i = 0, $call39$i$i = 0, $call45$i$i = 0, $call51$i$i = 0, $call9$i$i = 0, $coordinateA$0$i$i$i = 0.0, $coordinateB$0$i$i$i = 0.0, $dampingRatio$i3$i$i = 0, $div$i$i$i$i = 0.0, $edge$039$i = 0, $edge$041$i = 0, $frequencyHz$i2$i$i = 0, $joint$0$i$i = 0, $joint1$i$i$i = 0, $joint2$i$i$i = 0, $lengthA$i$i$i = 0, $lengthB$i$i$i = 0, $lowerAngle$i$i$i = 0, $lowerTranslation$i$i$i = 0, $m_bodyA$i = 0, $m_bodyA$i4 = 0, $m_bodyB$i = 0, $m_bodyB$i5 = 0, $m_edgeA$i = 0, $m_edgeB$i = 0, $m_flags$i35$i = 0, $m_jointCount$i = 0, $m_jointList$i = 0, $m_jointList12$i = 0, $m_jointList33$i = 0, $m_localAnchorA$i41$i$i = 0, $m_localAnchorB$i42$i$i = 0, $m_localAnchorC$i$i$i = 0, $m_localAnchorD$i$i$i = 0, $m_localAxisC$i$i$i = 0, $m_localAxisD$i$i$i = 0, $m_localXAxisA$i$i$i = 0, $maxForce$i$i$i = 0, $mul$i$i52$i$i = 0.0, $mul$i17$i$i$i = 0.0, $mul$i59$i$i$i = 0.0, $mul2$i$i$i$i = 0.0, $other$i114 = 0, $other$i132 = 0, $other$i150 = 0, $other$i168 = 0, $other$i24 = 0, $other$i42 = 0, $other$i60 = 0, $other$i7 = 0, $other$i78 = 0, $other$i96 = 0, $sub$i$i$i$i = 0.0, $sub4$i$i$i$i = 0.0, $target$i$i$i = 0, $x$i$i25$i$i = 0, $x$i11$i$i$i = 0, $x$i13$i$i$i = 0, $x$i9$i$i$i = 0, $xfA$sroa$0$0$copyload$i$i$i = 0.0, $xfA$sroa$1$4$copyload$i$i$i = 0.0, $xfA$sroa$2$8$copyload$i$i$i = 0.0, $xfA$sroa$3$12$copyload$i$i$i = 0.0, $xfB$sroa$0$0$copyload$i$i$i = 0.0, $xfB$sroa$1$4$copyload$i$i$i = 0.0, $xfB$sroa$2$8$copyload$i$i$i = 0.0, $xfB$sroa$3$12$copyload$i$i$i = 0.0, $xfC$sroa$0$0$copyload$i$i$i = 0.0, $xfC$sroa$1$4$copyload$i$i$i = 0.0, $xfC$sroa$2$8$copyload$i$i$i = 0.0, $xfC$sroa$3$12$copyload$i$i$i = 0.0, $xfD$sroa$0$0$copyload$i$i$i = 0.0, $xfD$sroa$1$4$copyload$i$i$i = 0.0, $xfD$sroa$2$8$copyload$i$i$i = 0.0, $xfD$sroa$3$12$copyload$i$i$i = 0.0, sp = 0;
 sp = STACKTOP;
 if ((HEAP32[$self + 102868 >> 2] & 2 | 0) != 0) ___assert_fail(13840, 13864, 214, 13952);
 do switch (HEAP32[$arg0 >> 2] | 0) {
 case 5:
  {
   $call3$i$i = __ZN16b2BlockAllocator8AllocateEi($self, 168) | 0;
   do if (($call3$i$i | 0) == 0) $524 = 0; else {
    HEAP32[$call3$i$i >> 2] = 18552;
    $bodyA$i116 = $arg0 + 8 | 0;
    $bodyB$i117 = $arg0 + 12 | 0;
    if ((HEAP32[$bodyA$i116 >> 2] | 0) == (HEAP32[$bodyB$i117 >> 2] | 0)) ___assert_fail(18592, 18480, 173, 18624);
    HEAP32[$call3$i$i + 4 >> 2] = HEAP32[$arg0 >> 2];
    HEAP32[$call3$i$i + 8 >> 2] = 0;
    HEAP32[$call3$i$i + 12 >> 2] = 0;
    HEAP32[$call3$i$i + 48 >> 2] = HEAP32[$bodyA$i116 >> 2];
    $38 = HEAP32[$bodyB$i117 >> 2] | 0;
    HEAP32[$call3$i$i + 52 >> 2] = $38;
    HEAP32[$call3$i$i + 56 >> 2] = 0;
    HEAP8[$call3$i$i + 61 >> 0] = HEAP8[$arg0 + 16 >> 0] | 0;
    HEAP8[$call3$i$i + 60 >> 0] = 0;
    HEAP32[$call3$i$i + 64 >> 2] = HEAP32[$arg0 + 4 >> 2];
    $other$i132 = $call3$i$i + 16 | 0;
    HEAP32[$other$i132 + 0 >> 2] = 0;
    HEAP32[$other$i132 + 4 >> 2] = 0;
    HEAP32[$other$i132 + 8 >> 2] = 0;
    HEAP32[$other$i132 + 12 >> 2] = 0;
    HEAP32[$other$i132 + 16 >> 2] = 0;
    HEAP32[$other$i132 + 20 >> 2] = 0;
    HEAP32[$other$i132 + 24 >> 2] = 0;
    HEAP32[$other$i132 + 28 >> 2] = 0;
    HEAP32[$call3$i$i >> 2] = 18688;
    $target$i$i$i = $arg0 + 20 | 0;
    $43 = +HEAPF32[$target$i$i$i >> 2];
    if (!($43 == $43 & 0.0 == 0.0 & $43 > -inf & $43 < inf)) ___assert_fail(18728, 18752, 34, 18808);
    $44 = +HEAPF32[$arg0 + 24 >> 2];
    if (!($44 == $44 & 0.0 == 0.0 & $44 > -inf & $44 < inf)) ___assert_fail(18728, 18752, 34, 18808);
    $maxForce$i$i$i = $arg0 + 28 | 0;
    $45 = +HEAPF32[$maxForce$i$i$i >> 2];
    if (!($45 >= 0.0) | $45 == $45 & 0.0 == 0.0 & $45 > -inf & $45 < inf ^ 1) ___assert_fail(18824, 18752, 35, 18808);
    $frequencyHz$i2$i$i = $arg0 + 32 | 0;
    $46 = +HEAPF32[$frequencyHz$i2$i$i >> 2];
    if (!($46 >= 0.0) | $46 == $46 & 0.0 == 0.0 & $46 > -inf & $46 < inf ^ 1) ___assert_fail(18880, 18752, 36, 18808);
    $dampingRatio$i3$i$i = $arg0 + 36 | 0;
    $47 = +HEAPF32[$dampingRatio$i3$i$i >> 2];
    if (!($47 >= 0.0) | $47 == $47 & 0.0 == 0.0 & $47 > -inf & $47 < inf ^ 1) ___assert_fail(18936, 18752, 37, 18808); else {
     $48 = $target$i$i$i;
     $50 = HEAP32[$48 >> 2] | 0;
     $53 = HEAP32[$48 + 4 >> 2] | 0;
     $54 = $call3$i$i + 76 | 0;
     HEAP32[$54 >> 2] = $50;
     HEAP32[$54 + 4 >> 2] = $53;
     $sub$i$i$i$i = (HEAP32[tempDoublePtr >> 2] = $50, +HEAPF32[tempDoublePtr >> 2]) - +HEAPF32[$38 + 12 >> 2];
     $sub4$i$i$i$i = (HEAP32[tempDoublePtr >> 2] = $53, +HEAPF32[tempDoublePtr >> 2]) - +HEAPF32[$38 + 16 >> 2];
     $61 = +HEAPF32[$38 + 24 >> 2];
     $62 = +HEAPF32[$38 + 20 >> 2];
     $64 = +($sub$i$i$i$i * $61 + $sub4$i$i$i$i * $62);
     $65 = +($61 * $sub4$i$i$i$i - $sub$i$i$i$i * $62);
     $66 = $call3$i$i + 68 | 0;
     HEAPF32[$66 >> 2] = $64;
     HEAPF32[$66 + 4 >> 2] = $65;
     HEAPF32[$call3$i$i + 104 >> 2] = +HEAPF32[$maxForce$i$i$i >> 2];
     HEAPF32[$call3$i$i + 96 >> 2] = 0.0;
     HEAPF32[$call3$i$i + 100 >> 2] = 0.0;
     HEAPF32[$call3$i$i + 84 >> 2] = +HEAPF32[$frequencyHz$i2$i$i >> 2];
     HEAPF32[$call3$i$i + 88 >> 2] = +HEAPF32[$dampingRatio$i3$i$i >> 2];
     HEAPF32[$call3$i$i + 92 >> 2] = 0.0;
     HEAPF32[$call3$i$i + 108 >> 2] = 0.0;
     $524 = $call3$i$i;
     break;
    }
   } while (0);
   $joint$0$i$i = $524;
   break;
  }
 case 3:
  {
   $call$i$i = __ZN16b2BlockAllocator8AllocateEi($self, 176) | 0;
   do if (($call$i$i | 0) == 0) $523 = 0; else {
    HEAP32[$call$i$i >> 2] = 18552;
    $bodyA$i8 = $arg0 + 8 | 0;
    $bodyB$i9 = $arg0 + 12 | 0;
    if ((HEAP32[$bodyA$i8 >> 2] | 0) == (HEAP32[$bodyB$i9 >> 2] | 0)) ___assert_fail(18592, 18480, 173, 18624); else {
     HEAP32[$call$i$i + 4 >> 2] = HEAP32[$arg0 >> 2];
     HEAP32[$call$i$i + 8 >> 2] = 0;
     HEAP32[$call$i$i + 12 >> 2] = 0;
     HEAP32[$call$i$i + 48 >> 2] = HEAP32[$bodyA$i8 >> 2];
     HEAP32[$call$i$i + 52 >> 2] = HEAP32[$bodyB$i9 >> 2];
     HEAP32[$call$i$i + 56 >> 2] = 0;
     HEAP8[$call$i$i + 61 >> 0] = HEAP8[$arg0 + 16 >> 0] | 0;
     HEAP8[$call$i$i + 60 >> 0] = 0;
     HEAP32[$call$i$i + 64 >> 2] = HEAP32[$arg0 + 4 >> 2];
     $other$i24 = $call$i$i + 16 | 0;
     HEAP32[$other$i24 + 0 >> 2] = 0;
     HEAP32[$other$i24 + 4 >> 2] = 0;
     HEAP32[$other$i24 + 8 >> 2] = 0;
     HEAP32[$other$i24 + 12 >> 2] = 0;
     HEAP32[$other$i24 + 16 >> 2] = 0;
     HEAP32[$other$i24 + 20 >> 2] = 0;
     HEAP32[$other$i24 + 24 >> 2] = 0;
     HEAP32[$other$i24 + 28 >> 2] = 0;
     HEAP32[$call$i$i >> 2] = 17552;
     $11 = $arg0 + 20 | 0;
     $16 = HEAP32[$11 + 4 >> 2] | 0;
     $17 = $call$i$i + 80 | 0;
     HEAP32[$17 >> 2] = HEAP32[$11 >> 2];
     HEAP32[$17 + 4 >> 2] = $16;
     $21 = $arg0 + 28 | 0;
     $26 = HEAP32[$21 + 4 >> 2] | 0;
     $27 = $call$i$i + 88 | 0;
     HEAP32[$27 >> 2] = HEAP32[$21 >> 2];
     HEAP32[$27 + 4 >> 2] = $26;
     HEAPF32[$call$i$i + 104 >> 2] = +HEAPF32[$arg0 + 36 >> 2];
     HEAPF32[$call$i$i + 68 >> 2] = +HEAPF32[$arg0 + 40 >> 2];
     HEAPF32[$call$i$i + 72 >> 2] = +HEAPF32[$arg0 + 44 >> 2];
     HEAPF32[$call$i$i + 100 >> 2] = 0.0;
     HEAPF32[$call$i$i + 96 >> 2] = 0.0;
     HEAPF32[$call$i$i + 76 >> 2] = 0.0;
     $523 = $call$i$i;
     break;
    }
   } while (0);
   $joint$0$i$i = $523;
   break;
  }
 case 2:
  {
   $call9$i$i = __ZN16b2BlockAllocator8AllocateEi($self, 256) | 0;
   if (($call9$i$i | 0) == 0) $525 = 0; else {
    HEAP32[$call9$i$i >> 2] = 18552;
    $bodyA$i134 = $arg0 + 8 | 0;
    $bodyB$i135 = $arg0 + 12 | 0;
    if ((HEAP32[$bodyA$i134 >> 2] | 0) == (HEAP32[$bodyB$i135 >> 2] | 0)) ___assert_fail(18592, 18480, 173, 18624);
    HEAP32[$call9$i$i + 4 >> 2] = HEAP32[$arg0 >> 2];
    HEAP32[$call9$i$i + 8 >> 2] = 0;
    HEAP32[$call9$i$i + 12 >> 2] = 0;
    HEAP32[$call9$i$i + 48 >> 2] = HEAP32[$bodyA$i134 >> 2];
    HEAP32[$call9$i$i + 52 >> 2] = HEAP32[$bodyB$i135 >> 2];
    HEAP32[$call9$i$i + 56 >> 2] = 0;
    HEAP8[$call9$i$i + 61 >> 0] = HEAP8[$arg0 + 16 >> 0] | 0;
    HEAP8[$call9$i$i + 60 >> 0] = 0;
    HEAP32[$call9$i$i + 64 >> 2] = HEAP32[$arg0 + 4 >> 2];
    $other$i150 = $call9$i$i + 16 | 0;
    HEAP32[$other$i150 + 0 >> 2] = 0;
    HEAP32[$other$i150 + 4 >> 2] = 0;
    HEAP32[$other$i150 + 8 >> 2] = 0;
    HEAP32[$other$i150 + 12 >> 2] = 0;
    HEAP32[$other$i150 + 16 >> 2] = 0;
    HEAP32[$other$i150 + 20 >> 2] = 0;
    HEAP32[$other$i150 + 24 >> 2] = 0;
    HEAP32[$other$i150 + 28 >> 2] = 0;
    HEAP32[$call9$i$i >> 2] = 19144;
    $m_localXAxisA$i$i$i = $call9$i$i + 84 | 0;
    $82 = $arg0 + 20 | 0;
    $87 = HEAP32[$82 + 4 >> 2] | 0;
    $88 = $call9$i$i + 68 | 0;
    HEAP32[$88 >> 2] = HEAP32[$82 >> 2];
    HEAP32[$88 + 4 >> 2] = $87;
    $92 = $arg0 + 28 | 0;
    $97 = HEAP32[$92 + 4 >> 2] | 0;
    $98 = $call9$i$i + 76 | 0;
    HEAP32[$98 >> 2] = HEAP32[$92 >> 2];
    HEAP32[$98 + 4 >> 2] = $97;
    $102 = $arg0 + 36 | 0;
    $104 = HEAP32[$102 >> 2] | 0;
    $107 = HEAP32[$102 + 4 >> 2] | 0;
    $108 = $m_localXAxisA$i$i$i;
    HEAP32[$108 >> 2] = $104;
    HEAP32[$108 + 4 >> 2] = $107;
    $bitcast$i12$i$i = (HEAP32[tempDoublePtr >> 2] = $104, +HEAPF32[tempDoublePtr >> 2]);
    $112 = (HEAP32[tempDoublePtr >> 2] = $107, +HEAPF32[tempDoublePtr >> 2]);
    $call$i$i$i$i$i$i = +Math_sqrt(+($bitcast$i12$i$i * $bitcast$i12$i$i + $112 * $112));
    if ($call$i$i$i$i$i$i < 1.1920928955078125e-7) {
     $113 = $112;
     $116 = $bitcast$i12$i$i;
    } else {
     $div$i$i$i$i = 1.0 / $call$i$i$i$i$i$i;
     $mul$i17$i$i$i = $bitcast$i12$i$i * $div$i$i$i$i;
     HEAPF32[$m_localXAxisA$i$i$i >> 2] = $mul$i17$i$i$i;
     $mul2$i$i$i$i = $112 * $div$i$i$i$i;
     HEAPF32[$call9$i$i + 88 >> 2] = $mul2$i$i$i$i;
     $113 = $mul2$i$i$i$i;
     $116 = $mul$i17$i$i$i;
    }
    $114 = +-$113;
    $115 = +$116;
    $117 = $call9$i$i + 92 | 0;
    HEAPF32[$117 >> 2] = $114;
    HEAPF32[$117 + 4 >> 2] = $115;
    HEAPF32[$call9$i$i + 100 >> 2] = +HEAPF32[$arg0 + 44 >> 2];
    $x$i13$i$i$i = $call9$i$i + 104 | 0;
    HEAPF32[$call9$i$i + 252 >> 2] = 0.0;
    $lowerTranslation$i$i$i = $arg0 + 52 | 0;
    HEAP32[$x$i13$i$i$i + 0 >> 2] = 0;
    HEAP32[$x$i13$i$i$i + 4 >> 2] = 0;
    HEAP32[$x$i13$i$i$i + 8 >> 2] = 0;
    HEAP32[$x$i13$i$i$i + 12 >> 2] = 0;
    HEAPF32[$call9$i$i + 120 >> 2] = +HEAPF32[$lowerTranslation$i$i$i >> 2];
    HEAPF32[$call9$i$i + 124 >> 2] = +HEAPF32[$arg0 + 56 >> 2];
    HEAPF32[$call9$i$i + 128 >> 2] = +HEAPF32[$arg0 + 64 >> 2];
    HEAPF32[$call9$i$i + 132 >> 2] = +HEAPF32[$arg0 + 68 >> 2];
    HEAP8[$call9$i$i + 136 >> 0] = HEAP8[$arg0 + 48 >> 0] | 0;
    HEAP8[$call9$i$i + 137 >> 0] = HEAP8[$arg0 + 60 >> 0] | 0;
    HEAP32[$call9$i$i + 140 >> 2] = 0;
    $x$i11$i$i$i = $call9$i$i + 184 | 0;
    HEAP32[$x$i11$i$i$i + 0 >> 2] = 0;
    HEAP32[$x$i11$i$i$i + 4 >> 2] = 0;
    HEAP32[$x$i11$i$i$i + 8 >> 2] = 0;
    HEAP32[$x$i11$i$i$i + 12 >> 2] = 0;
    $525 = $call9$i$i;
   }
   $joint$0$i$i = $525;
   break;
  }
 case 7:
  {
   $call33$i$i = __ZN16b2BlockAllocator8AllocateEi($self, 224) | 0;
   do if (($call33$i$i | 0) == 0) $529 = 0; else {
    HEAP32[$call33$i$i >> 2] = 18552;
    $bodyA$i44 = $arg0 + 8 | 0;
    $bodyB$i45 = $arg0 + 12 | 0;
    if ((HEAP32[$bodyA$i44 >> 2] | 0) == (HEAP32[$bodyB$i45 >> 2] | 0)) ___assert_fail(18592, 18480, 173, 18624); else {
     HEAP32[$call33$i$i + 4 >> 2] = HEAP32[$arg0 >> 2];
     HEAP32[$call33$i$i + 8 >> 2] = 0;
     HEAP32[$call33$i$i + 12 >> 2] = 0;
     HEAP32[$call33$i$i + 48 >> 2] = HEAP32[$bodyA$i44 >> 2];
     HEAP32[$call33$i$i + 52 >> 2] = HEAP32[$bodyB$i45 >> 2];
     HEAP32[$call33$i$i + 56 >> 2] = 0;
     HEAP8[$call33$i$i + 61 >> 0] = HEAP8[$arg0 + 16 >> 0] | 0;
     HEAP8[$call33$i$i + 60 >> 0] = 0;
     HEAP32[$call33$i$i + 64 >> 2] = HEAP32[$arg0 + 4 >> 2];
     $other$i60 = $call33$i$i + 16 | 0;
     HEAP32[$other$i60 + 0 >> 2] = 0;
     HEAP32[$other$i60 + 4 >> 2] = 0;
     HEAP32[$other$i60 + 8 >> 2] = 0;
     HEAP32[$other$i60 + 12 >> 2] = 0;
     HEAP32[$other$i60 + 16 >> 2] = 0;
     HEAP32[$other$i60 + 20 >> 2] = 0;
     HEAP32[$other$i60 + 24 >> 2] = 0;
     HEAP32[$other$i60 + 28 >> 2] = 0;
     HEAP32[$call33$i$i >> 2] = 20440;
     $369 = $arg0 + 20 | 0;
     $374 = HEAP32[$369 + 4 >> 2] | 0;
     $375 = $call33$i$i + 76 | 0;
     HEAP32[$375 >> 2] = HEAP32[$369 >> 2];
     HEAP32[$375 + 4 >> 2] = $374;
     $379 = $arg0 + 28 | 0;
     $384 = HEAP32[$379 + 4 >> 2] | 0;
     $385 = $call33$i$i + 84 | 0;
     HEAP32[$385 >> 2] = HEAP32[$379 >> 2];
     HEAP32[$385 + 4 >> 2] = $384;
     $389 = $arg0 + 36 | 0;
     $391 = HEAP32[$389 >> 2] | 0;
     $394 = HEAP32[$389 + 4 >> 2] | 0;
     $395 = $call33$i$i + 92 | 0;
     HEAP32[$395 >> 2] = $391;
     HEAP32[$395 + 4 >> 2] = $394;
     $401 = $call33$i$i + 100 | 0;
     HEAPF32[$401 >> 2] = -(HEAP32[tempDoublePtr >> 2] = $394, +HEAPF32[tempDoublePtr >> 2]);
     HEAP32[$401 + 4 >> 2] = $391;
     HEAPF32[$call33$i$i + 204 >> 2] = 0.0;
     HEAPF32[$call33$i$i + 108 >> 2] = 0.0;
     HEAPF32[$call33$i$i + 208 >> 2] = 0.0;
     HEAPF32[$call33$i$i + 112 >> 2] = 0.0;
     HEAPF32[$call33$i$i + 212 >> 2] = 0.0;
     HEAPF32[$call33$i$i + 116 >> 2] = 0.0;
     HEAPF32[$call33$i$i + 120 >> 2] = +HEAPF32[$arg0 + 48 >> 2];
     HEAPF32[$call33$i$i + 124 >> 2] = +HEAPF32[$arg0 + 52 >> 2];
     HEAP8[$call33$i$i + 128 >> 0] = HEAP8[$arg0 + 44 >> 0] | 0;
     HEAPF32[$call33$i$i + 68 >> 2] = +HEAPF32[$arg0 + 56 >> 2];
     HEAPF32[$call33$i$i + 72 >> 2] = +HEAPF32[$arg0 + 60 >> 2];
     HEAPF32[$call33$i$i + 216 >> 2] = 0.0;
     HEAPF32[$call33$i$i + 220 >> 2] = 0.0;
     $x$i9$i$i$i = $call33$i$i + 172 | 0;
     HEAP32[$x$i9$i$i$i + 0 >> 2] = 0;
     HEAP32[$x$i9$i$i$i + 4 >> 2] = 0;
     HEAP32[$x$i9$i$i$i + 8 >> 2] = 0;
     HEAP32[$x$i9$i$i$i + 12 >> 2] = 0;
     $529 = $call33$i$i;
     break;
    }
   } while (0);
   $joint$0$i$i = $529;
   break;
  }
 case 4:
  {
   $call21$i$i = __ZN16b2BlockAllocator8AllocateEi($self, 196) | 0;
   do if (($call21$i$i | 0) == 0) $527 = 0; else {
    HEAP32[$call21$i$i >> 2] = 18552;
    $bodyA$i152 = $arg0 + 8 | 0;
    $bodyB$i153 = $arg0 + 12 | 0;
    if ((HEAP32[$bodyA$i152 >> 2] | 0) == (HEAP32[$bodyB$i153 >> 2] | 0)) ___assert_fail(18592, 18480, 173, 18624);
    HEAP32[$call21$i$i + 4 >> 2] = HEAP32[$arg0 >> 2];
    HEAP32[$call21$i$i + 8 >> 2] = 0;
    HEAP32[$call21$i$i + 12 >> 2] = 0;
    HEAP32[$call21$i$i + 48 >> 2] = HEAP32[$bodyA$i152 >> 2];
    HEAP32[$call21$i$i + 52 >> 2] = HEAP32[$bodyB$i153 >> 2];
    HEAP32[$call21$i$i + 56 >> 2] = 0;
    HEAP8[$call21$i$i + 61 >> 0] = HEAP8[$arg0 + 16 >> 0] | 0;
    HEAP8[$call21$i$i + 60 >> 0] = 0;
    HEAP32[$call21$i$i + 64 >> 2] = HEAP32[$arg0 + 4 >> 2];
    $other$i168 = $call21$i$i + 16 | 0;
    HEAP32[$other$i168 + 0 >> 2] = 0;
    HEAP32[$other$i168 + 4 >> 2] = 0;
    HEAP32[$other$i168 + 8 >> 2] = 0;
    HEAP32[$other$i168 + 12 >> 2] = 0;
    HEAP32[$other$i168 + 16 >> 2] = 0;
    HEAP32[$other$i168 + 20 >> 2] = 0;
    HEAP32[$other$i168 + 24 >> 2] = 0;
    HEAP32[$other$i168 + 28 >> 2] = 0;
    HEAP32[$call21$i$i >> 2] = 19536;
    $177 = $arg0 + 20 | 0;
    $182 = HEAP32[$177 + 4 >> 2] | 0;
    $183 = $call21$i$i + 68 | 0;
    HEAP32[$183 >> 2] = HEAP32[$177 >> 2];
    HEAP32[$183 + 4 >> 2] = $182;
    $187 = $arg0 + 28 | 0;
    $192 = HEAP32[$187 + 4 >> 2] | 0;
    $193 = $call21$i$i + 76 | 0;
    HEAP32[$193 >> 2] = HEAP32[$187 >> 2];
    HEAP32[$193 + 4 >> 2] = $192;
    $197 = $arg0 + 36 | 0;
    $202 = HEAP32[$197 + 4 >> 2] | 0;
    $203 = $call21$i$i + 92 | 0;
    HEAP32[$203 >> 2] = HEAP32[$197 >> 2];
    HEAP32[$203 + 4 >> 2] = $202;
    $207 = $arg0 + 44 | 0;
    $212 = HEAP32[$207 + 4 >> 2] | 0;
    $213 = $call21$i$i + 100 | 0;
    HEAP32[$213 >> 2] = HEAP32[$207 >> 2];
    HEAP32[$213 + 4 >> 2] = $212;
    $lengthA$i$i$i = $arg0 + 52 | 0;
    HEAPF32[$call21$i$i + 84 >> 2] = +HEAPF32[$lengthA$i$i$i >> 2];
    $lengthB$i$i$i = $arg0 + 56 | 0;
    HEAPF32[$call21$i$i + 88 >> 2] = +HEAPF32[$lengthB$i$i$i >> 2];
    $219 = +HEAPF32[$arg0 + 60 >> 2];
    if ($219 != 0.0) {
     HEAPF32[$call21$i$i + 112 >> 2] = $219;
     HEAPF32[$call21$i$i + 108 >> 2] = +HEAPF32[$lengthA$i$i$i >> 2] + $219 * +HEAPF32[$lengthB$i$i$i >> 2];
     HEAPF32[$call21$i$i + 116 >> 2] = 0.0;
     $527 = $call21$i$i;
     break;
    } else ___assert_fail(19576, 19456, 65, 19600);
   } while (0);
   $joint$0$i$i = $527;
   break;
  }
 case 1:
  {
   $call15$i$i = __ZN16b2BlockAllocator8AllocateEi($self, 228) | 0;
   do if (($call15$i$i | 0) == 0) $526 = 0; else {
    HEAP32[$call15$i$i >> 2] = 18552;
    $bodyA$i26 = $arg0 + 8 | 0;
    $bodyB$i27 = $arg0 + 12 | 0;
    if ((HEAP32[$bodyA$i26 >> 2] | 0) == (HEAP32[$bodyB$i27 >> 2] | 0)) ___assert_fail(18592, 18480, 173, 18624); else {
     HEAP32[$call15$i$i + 4 >> 2] = HEAP32[$arg0 >> 2];
     HEAP32[$call15$i$i + 8 >> 2] = 0;
     HEAP32[$call15$i$i + 12 >> 2] = 0;
     HEAP32[$call15$i$i + 48 >> 2] = HEAP32[$bodyA$i26 >> 2];
     HEAP32[$call15$i$i + 52 >> 2] = HEAP32[$bodyB$i27 >> 2];
     HEAP32[$call15$i$i + 56 >> 2] = 0;
     HEAP8[$call15$i$i + 61 >> 0] = HEAP8[$arg0 + 16 >> 0] | 0;
     HEAP8[$call15$i$i + 60 >> 0] = 0;
     HEAP32[$call15$i$i + 64 >> 2] = HEAP32[$arg0 + 4 >> 2];
     $other$i42 = $call15$i$i + 16 | 0;
     HEAP32[$other$i42 + 0 >> 2] = 0;
     HEAP32[$other$i42 + 4 >> 2] = 0;
     HEAP32[$other$i42 + 8 >> 2] = 0;
     HEAP32[$other$i42 + 12 >> 2] = 0;
     HEAP32[$other$i42 + 16 >> 2] = 0;
     HEAP32[$other$i42 + 20 >> 2] = 0;
     HEAP32[$other$i42 + 24 >> 2] = 0;
     HEAP32[$other$i42 + 28 >> 2] = 0;
     HEAP32[$call15$i$i >> 2] = 19864;
     $139 = $arg0 + 20 | 0;
     $144 = HEAP32[$139 + 4 >> 2] | 0;
     $145 = $call15$i$i + 68 | 0;
     HEAP32[$145 >> 2] = HEAP32[$139 >> 2];
     HEAP32[$145 + 4 >> 2] = $144;
     $149 = $arg0 + 28 | 0;
     $154 = HEAP32[$149 + 4 >> 2] | 0;
     $155 = $call15$i$i + 76 | 0;
     HEAP32[$155 >> 2] = HEAP32[$149 >> 2];
     HEAP32[$155 + 4 >> 2] = $154;
     HEAPF32[$call15$i$i + 116 >> 2] = +HEAPF32[$arg0 + 36 >> 2];
     $x$i$i25$i$i = $call15$i$i + 84 | 0;
     $lowerAngle$i$i$i = $arg0 + 44 | 0;
     HEAP32[$x$i$i25$i$i + 0 >> 2] = 0;
     HEAP32[$x$i$i25$i$i + 4 >> 2] = 0;
     HEAP32[$x$i$i25$i$i + 8 >> 2] = 0;
     HEAP32[$x$i$i25$i$i + 12 >> 2] = 0;
     HEAPF32[$call15$i$i + 120 >> 2] = +HEAPF32[$lowerAngle$i$i$i >> 2];
     HEAPF32[$call15$i$i + 124 >> 2] = +HEAPF32[$arg0 + 48 >> 2];
     HEAPF32[$call15$i$i + 104 >> 2] = +HEAPF32[$arg0 + 60 >> 2];
     HEAPF32[$call15$i$i + 108 >> 2] = +HEAPF32[$arg0 + 56 >> 2];
     HEAP8[$call15$i$i + 112 >> 0] = HEAP8[$arg0 + 40 >> 0] | 0;
     HEAP8[$call15$i$i + 100 >> 0] = HEAP8[$arg0 + 52 >> 0] | 0;
     HEAP32[$call15$i$i + 224 >> 2] = 0;
     $526 = $call15$i$i;
     break;
    }
   } while (0);
   $joint$0$i$i = $526;
   break;
  }
 case 6:
  {
   $call27$i$i = __ZN16b2BlockAllocator8AllocateEi($self, 276) | 0;
   if (($call27$i$i | 0) == 0) $528 = 0; else {
    HEAP32[$call27$i$i >> 2] = 18552;
    $bodyA$i = $arg0 + 8 | 0;
    $bodyB$i = $arg0 + 12 | 0;
    if ((HEAP32[$bodyA$i >> 2] | 0) == (HEAP32[$bodyB$i >> 2] | 0)) ___assert_fail(18592, 18480, 173, 18624);
    HEAP32[$call27$i$i + 4 >> 2] = HEAP32[$arg0 >> 2];
    HEAP32[$call27$i$i + 8 >> 2] = 0;
    HEAP32[$call27$i$i + 12 >> 2] = 0;
    $m_bodyA$i4 = $call27$i$i + 48 | 0;
    HEAP32[$m_bodyA$i4 >> 2] = HEAP32[$bodyA$i >> 2];
    $m_bodyB$i5 = $call27$i$i + 52 | 0;
    HEAP32[$m_bodyB$i5 >> 2] = HEAP32[$bodyB$i >> 2];
    HEAP32[$call27$i$i + 56 >> 2] = 0;
    HEAP8[$call27$i$i + 61 >> 0] = HEAP8[$arg0 + 16 >> 0] | 0;
    HEAP8[$call27$i$i + 60 >> 0] = 0;
    HEAP32[$call27$i$i + 64 >> 2] = HEAP32[$arg0 + 4 >> 2];
    $other$i7 = $call27$i$i + 16 | 0;
    HEAP32[$other$i7 + 0 >> 2] = 0;
    HEAP32[$other$i7 + 4 >> 2] = 0;
    HEAP32[$other$i7 + 8 >> 2] = 0;
    HEAP32[$other$i7 + 12 >> 2] = 0;
    HEAP32[$other$i7 + 16 >> 2] = 0;
    HEAP32[$other$i7 + 20 >> 2] = 0;
    HEAP32[$other$i7 + 24 >> 2] = 0;
    HEAP32[$other$i7 + 28 >> 2] = 0;
    HEAP32[$call27$i$i >> 2] = 18072;
    $m_localAnchorA$i41$i$i = $call27$i$i + 92 | 0;
    $m_localAnchorB$i42$i$i = $call27$i$i + 100 | 0;
    $m_localAnchorC$i$i$i = $call27$i$i + 108 | 0;
    $m_localAnchorD$i$i$i = $call27$i$i + 116 | 0;
    $m_localAxisC$i$i$i = $call27$i$i + 124 | 0;
    $m_localAxisD$i$i$i = $call27$i$i + 132 | 0;
    $joint1$i$i$i = $arg0 + 20 | 0;
    $231 = HEAP32[$joint1$i$i$i >> 2] | 0;
    HEAP32[$call27$i$i + 68 >> 2] = $231;
    $joint2$i$i$i = $arg0 + 24 | 0;
    $232 = HEAP32[$joint2$i$i$i >> 2] | 0;
    HEAP32[$call27$i$i + 72 >> 2] = $232;
    $233 = HEAP32[$231 + 4 >> 2] | 0;
    HEAP32[$call27$i$i + 76 >> 2] = $233;
    $234 = HEAP32[$232 + 4 >> 2] | 0;
    HEAP32[$call27$i$i + 80 >> 2] = $234;
    if (!(($233 + -1 | 0) >>> 0 < 2)) ___assert_fail(18112, 18176, 53, 18232);
    if (!(($234 + -1 | 0) >>> 0 < 2)) ___assert_fail(18248, 18176, 54, 18232);
    $235 = HEAP32[$231 + 48 >> 2] | 0;
    HEAP32[$call27$i$i + 84 >> 2] = $235;
    $236 = HEAP32[$231 + 52 >> 2] | 0;
    HEAP32[$m_bodyA$i4 >> 2] = $236;
    $xfA$sroa$2$8$copyload$i$i$i = +HEAPF32[$236 + 20 >> 2];
    $xfA$sroa$3$12$copyload$i$i$i = +HEAPF32[$236 + 24 >> 2];
    $xfC$sroa$2$8$copyload$i$i$i = +HEAPF32[$235 + 20 >> 2];
    $xfC$sroa$3$12$copyload$i$i$i = +HEAPF32[$235 + 24 >> 2];
    $237 = HEAP32[$joint1$i$i$i >> 2] | 0;
    if (($233 | 0) == 1) {
     $238 = +HEAPF32[$236 + 56 >> 2];
     $239 = +HEAPF32[$235 + 56 >> 2];
     $240 = $237 + 68 | 0;
     $245 = HEAP32[$240 + 4 >> 2] | 0;
     $246 = $m_localAnchorC$i$i$i;
     HEAP32[$246 >> 2] = HEAP32[$240 >> 2];
     HEAP32[$246 + 4 >> 2] = $245;
     $250 = $237 + 76 | 0;
     $255 = HEAP32[$250 + 4 >> 2] | 0;
     $256 = $m_localAnchorA$i41$i$i;
     HEAP32[$256 >> 2] = HEAP32[$250 >> 2];
     HEAP32[$256 + 4 >> 2] = $255;
     $260 = +HEAPF32[$237 + 116 >> 2];
     HEAPF32[$call27$i$i + 140 >> 2] = $260;
     HEAPF32[$m_localAxisC$i$i$i >> 2] = 0.0;
     HEAPF32[$call27$i$i + 128 >> 2] = 0.0;
     $coordinateA$0$i$i$i = $238 - $239 - $260;
    } else {
     $xfC$sroa$1$4$copyload$i$i$i = +HEAPF32[$235 + 16 >> 2];
     $xfC$sroa$0$0$copyload$i$i$i = +HEAPF32[$235 + 12 >> 2];
     $xfA$sroa$1$4$copyload$i$i$i = +HEAPF32[$236 + 16 >> 2];
     $xfA$sroa$0$0$copyload$i$i$i = +HEAPF32[$236 + 12 >> 2];
     $261 = $237 + 68 | 0;
     $263 = HEAP32[$261 >> 2] | 0;
     $266 = HEAP32[$261 + 4 >> 2] | 0;
     $267 = $m_localAnchorC$i$i$i;
     HEAP32[$267 >> 2] = $263;
     HEAP32[$267 + 4 >> 2] = $266;
     $271 = $237 + 76 | 0;
     $273 = HEAP32[$271 >> 2] | 0;
     $276 = HEAP32[$271 + 4 >> 2] | 0;
     $277 = $m_localAnchorA$i41$i$i;
     HEAP32[$277 >> 2] = $273;
     HEAP32[$277 + 4 >> 2] = $276;
     HEAPF32[$call27$i$i + 140 >> 2] = +HEAPF32[$237 + 100 >> 2];
     $282 = $237 + 84 | 0;
     $284 = HEAP32[$282 >> 2] | 0;
     $287 = HEAP32[$282 + 4 >> 2] | 0;
     $288 = $m_localAxisC$i$i$i;
     HEAP32[$288 >> 2] = $284;
     HEAP32[$288 + 4 >> 2] = $287;
     $292 = (HEAP32[tempDoublePtr >> 2] = $263, +HEAPF32[tempDoublePtr >> 2]);
     $293 = (HEAP32[tempDoublePtr >> 2] = $266, +HEAPF32[tempDoublePtr >> 2]);
     $bitcast131$i$i$i = (HEAP32[tempDoublePtr >> 2] = $273, +HEAPF32[tempDoublePtr >> 2]);
     $294 = (HEAP32[tempDoublePtr >> 2] = $276, +HEAPF32[tempDoublePtr >> 2]);
     $add$i85$i$i$i = $xfA$sroa$0$0$copyload$i$i$i - $xfC$sroa$0$0$copyload$i$i$i + ($xfA$sroa$3$12$copyload$i$i$i * $bitcast131$i$i$i - $xfA$sroa$2$8$copyload$i$i$i * $294);
     $add3$i88$i$i$i = $xfA$sroa$1$4$copyload$i$i$i - $xfC$sroa$1$4$copyload$i$i$i + ($xfA$sroa$2$8$copyload$i$i$i * $bitcast131$i$i$i + $xfA$sroa$3$12$copyload$i$i$i * $294);
     $mul$i59$i$i$i = (HEAP32[tempDoublePtr >> 2] = $284, +HEAPF32[tempDoublePtr >> 2]) * ($xfC$sroa$3$12$copyload$i$i$i * $add$i85$i$i$i + $xfC$sroa$2$8$copyload$i$i$i * $add3$i88$i$i$i - $292);
     $coordinateA$0$i$i$i = $mul$i59$i$i$i + (HEAP32[tempDoublePtr >> 2] = $287, +HEAPF32[tempDoublePtr >> 2]) * ($xfC$sroa$3$12$copyload$i$i$i * $add3$i88$i$i$i - $xfC$sroa$2$8$copyload$i$i$i * $add$i85$i$i$i - $293);
    }
    $297 = HEAP32[$232 + 48 >> 2] | 0;
    HEAP32[$call27$i$i + 88 >> 2] = $297;
    $298 = HEAP32[$232 + 52 >> 2] | 0;
    HEAP32[$m_bodyB$i5 >> 2] = $298;
    $xfB$sroa$2$8$copyload$i$i$i = +HEAPF32[$298 + 20 >> 2];
    $xfB$sroa$3$12$copyload$i$i$i = +HEAPF32[$298 + 24 >> 2];
    $xfD$sroa$2$8$copyload$i$i$i = +HEAPF32[$297 + 20 >> 2];
    $xfD$sroa$3$12$copyload$i$i$i = +HEAPF32[$297 + 24 >> 2];
    $299 = HEAP32[$joint2$i$i$i >> 2] | 0;
    if (($234 | 0) == 1) {
     $300 = +HEAPF32[$298 + 56 >> 2];
     $301 = +HEAPF32[$297 + 56 >> 2];
     $302 = $299 + 68 | 0;
     $307 = HEAP32[$302 + 4 >> 2] | 0;
     $308 = $m_localAnchorD$i$i$i;
     HEAP32[$308 >> 2] = HEAP32[$302 >> 2];
     HEAP32[$308 + 4 >> 2] = $307;
     $312 = $299 + 76 | 0;
     $317 = HEAP32[$312 + 4 >> 2] | 0;
     $318 = $m_localAnchorB$i42$i$i;
     HEAP32[$318 >> 2] = HEAP32[$312 >> 2];
     HEAP32[$318 + 4 >> 2] = $317;
     $322 = +HEAPF32[$299 + 116 >> 2];
     HEAPF32[$call27$i$i + 144 >> 2] = $322;
     HEAPF32[$m_localAxisD$i$i$i >> 2] = 0.0;
     HEAPF32[$call27$i$i + 136 >> 2] = 0.0;
     $coordinateB$0$i$i$i = $300 - $301 - $322;
    } else {
     $xfD$sroa$1$4$copyload$i$i$i = +HEAPF32[$297 + 16 >> 2];
     $xfD$sroa$0$0$copyload$i$i$i = +HEAPF32[$297 + 12 >> 2];
     $xfB$sroa$1$4$copyload$i$i$i = +HEAPF32[$298 + 16 >> 2];
     $xfB$sroa$0$0$copyload$i$i$i = +HEAPF32[$298 + 12 >> 2];
     $323 = $299 + 68 | 0;
     $325 = HEAP32[$323 >> 2] | 0;
     $328 = HEAP32[$323 + 4 >> 2] | 0;
     $329 = $m_localAnchorD$i$i$i;
     HEAP32[$329 >> 2] = $325;
     HEAP32[$329 + 4 >> 2] = $328;
     $333 = $299 + 76 | 0;
     $335 = HEAP32[$333 >> 2] | 0;
     $338 = HEAP32[$333 + 4 >> 2] | 0;
     $339 = $m_localAnchorB$i42$i$i;
     HEAP32[$339 >> 2] = $335;
     HEAP32[$339 + 4 >> 2] = $338;
     HEAPF32[$call27$i$i + 144 >> 2] = +HEAPF32[$299 + 100 >> 2];
     $344 = $299 + 84 | 0;
     $346 = HEAP32[$344 >> 2] | 0;
     $349 = HEAP32[$344 + 4 >> 2] | 0;
     $350 = $m_localAxisD$i$i$i;
     HEAP32[$350 >> 2] = $346;
     HEAP32[$350 + 4 >> 2] = $349;
     $354 = (HEAP32[tempDoublePtr >> 2] = $325, +HEAPF32[tempDoublePtr >> 2]);
     $355 = (HEAP32[tempDoublePtr >> 2] = $328, +HEAPF32[tempDoublePtr >> 2]);
     $bitcast$i49$i$i = (HEAP32[tempDoublePtr >> 2] = $335, +HEAPF32[tempDoublePtr >> 2]);
     $356 = (HEAP32[tempDoublePtr >> 2] = $338, +HEAPF32[tempDoublePtr >> 2]);
     $add$i31$i$i$i = $xfB$sroa$0$0$copyload$i$i$i - $xfD$sroa$0$0$copyload$i$i$i + ($xfB$sroa$3$12$copyload$i$i$i * $bitcast$i49$i$i - $xfB$sroa$2$8$copyload$i$i$i * $356);
     $add3$i$i$i$i = $xfB$sroa$1$4$copyload$i$i$i - $xfD$sroa$1$4$copyload$i$i$i + ($xfB$sroa$2$8$copyload$i$i$i * $bitcast$i49$i$i + $xfB$sroa$3$12$copyload$i$i$i * $356);
     $mul$i$i52$i$i = (HEAP32[tempDoublePtr >> 2] = $346, +HEAPF32[tempDoublePtr >> 2]) * ($xfD$sroa$3$12$copyload$i$i$i * $add$i31$i$i$i + $xfD$sroa$2$8$copyload$i$i$i * $add3$i$i$i$i - $354);
     $coordinateB$0$i$i$i = $mul$i$i52$i$i + (HEAP32[tempDoublePtr >> 2] = $349, +HEAPF32[tempDoublePtr >> 2]) * ($xfD$sroa$3$12$copyload$i$i$i * $add3$i$i$i$i - $xfD$sroa$2$8$copyload$i$i$i * $add$i31$i$i$i - $355);
    }
    $359 = +HEAPF32[$arg0 + 28 >> 2];
    HEAPF32[$call27$i$i + 152 >> 2] = $359;
    HEAPF32[$call27$i$i + 148 >> 2] = $coordinateA$0$i$i$i + $coordinateB$0$i$i$i * $359;
    HEAPF32[$call27$i$i + 156 >> 2] = 0.0;
    $528 = $call27$i$i;
   }
   $joint$0$i$i = $528;
   break;
  }
 case 10:
  {
   $call51$i$i = __ZN16b2BlockAllocator8AllocateEi($self, 168) | 0;
   do if (($call51$i$i | 0) == 0) $532 = 0; else {
    HEAP32[$call51$i$i >> 2] = 18552;
    $bodyA$i98 = $arg0 + 8 | 0;
    $bodyB$i99 = $arg0 + 12 | 0;
    if ((HEAP32[$bodyA$i98 >> 2] | 0) == (HEAP32[$bodyB$i99 >> 2] | 0)) ___assert_fail(18592, 18480, 173, 18624); else {
     HEAP32[$call51$i$i + 4 >> 2] = HEAP32[$arg0 >> 2];
     HEAP32[$call51$i$i + 8 >> 2] = 0;
     HEAP32[$call51$i$i + 12 >> 2] = 0;
     HEAP32[$call51$i$i + 48 >> 2] = HEAP32[$bodyA$i98 >> 2];
     HEAP32[$call51$i$i + 52 >> 2] = HEAP32[$bodyB$i99 >> 2];
     HEAP32[$call51$i$i + 56 >> 2] = 0;
     HEAP8[$call51$i$i + 61 >> 0] = HEAP8[$arg0 + 16 >> 0] | 0;
     HEAP8[$call51$i$i + 60 >> 0] = 0;
     HEAP32[$call51$i$i + 64 >> 2] = HEAP32[$arg0 + 4 >> 2];
     $other$i114 = $call51$i$i + 16 | 0;
     HEAP32[$other$i114 + 0 >> 2] = 0;
     HEAP32[$other$i114 + 4 >> 2] = 0;
     HEAP32[$other$i114 + 8 >> 2] = 0;
     HEAP32[$other$i114 + 12 >> 2] = 0;
     HEAP32[$other$i114 + 16 >> 2] = 0;
     HEAP32[$other$i114 + 20 >> 2] = 0;
     HEAP32[$other$i114 + 24 >> 2] = 0;
     HEAP32[$other$i114 + 28 >> 2] = 0;
     HEAP32[$call51$i$i >> 2] = 20168;
     $483 = $arg0 + 20 | 0;
     $488 = HEAP32[$483 + 4 >> 2] | 0;
     $489 = $call51$i$i + 68 | 0;
     HEAP32[$489 >> 2] = HEAP32[$483 >> 2];
     HEAP32[$489 + 4 >> 2] = $488;
     $493 = $arg0 + 28 | 0;
     $498 = HEAP32[$493 + 4 >> 2] | 0;
     $499 = $call51$i$i + 76 | 0;
     HEAP32[$499 >> 2] = HEAP32[$493 >> 2];
     HEAP32[$499 + 4 >> 2] = $498;
     HEAPF32[$call51$i$i + 84 >> 2] = +HEAPF32[$arg0 + 36 >> 2];
     HEAPF32[$call51$i$i + 160 >> 2] = 0.0;
     HEAPF32[$call51$i$i + 92 >> 2] = 0.0;
     HEAP32[$call51$i$i + 164 >> 2] = 0;
     HEAPF32[$call51$i$i + 88 >> 2] = 0.0;
     $532 = $call51$i$i;
     break;
    }
   } while (0);
   $joint$0$i$i = $532;
   break;
  }
 case 9:
  {
   $call45$i$i = __ZN16b2BlockAllocator8AllocateEi($self, 180) | 0;
   do if (($call45$i$i | 0) == 0) $531 = 0; else {
    HEAP32[$call45$i$i >> 2] = 18552;
    $bodyA$i80 = $arg0 + 8 | 0;
    $bodyB$i81 = $arg0 + 12 | 0;
    if ((HEAP32[$bodyA$i80 >> 2] | 0) == (HEAP32[$bodyB$i81 >> 2] | 0)) ___assert_fail(18592, 18480, 173, 18624); else {
     HEAP32[$call45$i$i + 4 >> 2] = HEAP32[$arg0 >> 2];
     HEAP32[$call45$i$i + 8 >> 2] = 0;
     HEAP32[$call45$i$i + 12 >> 2] = 0;
     HEAP32[$call45$i$i + 48 >> 2] = HEAP32[$bodyA$i80 >> 2];
     HEAP32[$call45$i$i + 52 >> 2] = HEAP32[$bodyB$i81 >> 2];
     HEAP32[$call45$i$i + 56 >> 2] = 0;
     HEAP8[$call45$i$i + 61 >> 0] = HEAP8[$arg0 + 16 >> 0] | 0;
     HEAP8[$call45$i$i + 60 >> 0] = 0;
     HEAP32[$call45$i$i + 64 >> 2] = HEAP32[$arg0 + 4 >> 2];
     $other$i96 = $call45$i$i + 16 | 0;
     HEAP32[$other$i96 + 0 >> 2] = 0;
     HEAP32[$other$i96 + 4 >> 2] = 0;
     HEAP32[$other$i96 + 8 >> 2] = 0;
     HEAP32[$other$i96 + 12 >> 2] = 0;
     HEAP32[$other$i96 + 16 >> 2] = 0;
     HEAP32[$other$i96 + 20 >> 2] = 0;
     HEAP32[$other$i96 + 24 >> 2] = 0;
     HEAP32[$other$i96 + 28 >> 2] = 0;
     HEAP32[$call45$i$i >> 2] = 17720;
     $452 = $arg0 + 20 | 0;
     $457 = HEAP32[$452 + 4 >> 2] | 0;
     $458 = $call45$i$i + 68 | 0;
     HEAP32[$458 >> 2] = HEAP32[$452 >> 2];
     HEAP32[$458 + 4 >> 2] = $457;
     $462 = $arg0 + 28 | 0;
     $467 = HEAP32[$462 + 4 >> 2] | 0;
     $468 = $call45$i$i + 76 | 0;
     HEAP32[$468 >> 2] = HEAP32[$462 >> 2];
     HEAP32[$468 + 4 >> 2] = $467;
     HEAPF32[$call45$i$i + 84 >> 2] = 0.0;
     HEAPF32[$call45$i$i + 88 >> 2] = 0.0;
     HEAPF32[$call45$i$i + 92 >> 2] = 0.0;
     HEAPF32[$call45$i$i + 96 >> 2] = +HEAPF32[$arg0 + 36 >> 2];
     HEAPF32[$call45$i$i + 100 >> 2] = +HEAPF32[$arg0 + 40 >> 2];
     $531 = $call45$i$i;
     break;
    }
   } while (0);
   $joint$0$i$i = $531;
   break;
  }
 case 8:
  {
   $call39$i$i = __ZN16b2BlockAllocator8AllocateEi($self, 208) | 0;
   do if (($call39$i$i | 0) == 0) $530 = 0; else {
    HEAP32[$call39$i$i >> 2] = 18552;
    $bodyA$i62 = $arg0 + 8 | 0;
    $bodyB$i63 = $arg0 + 12 | 0;
    if ((HEAP32[$bodyA$i62 >> 2] | 0) == (HEAP32[$bodyB$i63 >> 2] | 0)) ___assert_fail(18592, 18480, 173, 18624); else {
     HEAP32[$call39$i$i + 4 >> 2] = HEAP32[$arg0 >> 2];
     HEAP32[$call39$i$i + 8 >> 2] = 0;
     HEAP32[$call39$i$i + 12 >> 2] = 0;
     HEAP32[$call39$i$i + 48 >> 2] = HEAP32[$bodyA$i62 >> 2];
     HEAP32[$call39$i$i + 52 >> 2] = HEAP32[$bodyB$i63 >> 2];
     HEAP32[$call39$i$i + 56 >> 2] = 0;
     HEAP8[$call39$i$i + 61 >> 0] = HEAP8[$arg0 + 16 >> 0] | 0;
     HEAP8[$call39$i$i + 60 >> 0] = 0;
     HEAP32[$call39$i$i + 64 >> 2] = HEAP32[$arg0 + 4 >> 2];
     $other$i78 = $call39$i$i + 16 | 0;
     HEAP32[$other$i78 + 0 >> 2] = 0;
     HEAP32[$other$i78 + 4 >> 2] = 0;
     HEAP32[$other$i78 + 8 >> 2] = 0;
     HEAP32[$other$i78 + 12 >> 2] = 0;
     HEAP32[$other$i78 + 16 >> 2] = 0;
     HEAP32[$other$i78 + 20 >> 2] = 0;
     HEAP32[$other$i78 + 24 >> 2] = 0;
     HEAP32[$other$i78 + 28 >> 2] = 0;
     HEAP32[$call39$i$i >> 2] = 20304;
     $420 = $arg0 + 20 | 0;
     $425 = HEAP32[$420 + 4 >> 2] | 0;
     $426 = $call39$i$i + 80 | 0;
     HEAP32[$426 >> 2] = HEAP32[$420 >> 2];
     HEAP32[$426 + 4 >> 2] = $425;
     $430 = $arg0 + 28 | 0;
     $435 = HEAP32[$430 + 4 >> 2] | 0;
     $436 = $call39$i$i + 88 | 0;
     HEAP32[$436 >> 2] = HEAP32[$430 >> 2];
     HEAP32[$436 + 4 >> 2] = $435;
     HEAPF32[$call39$i$i + 96 >> 2] = +HEAPF32[$arg0 + 36 >> 2];
     HEAPF32[$call39$i$i + 68 >> 2] = +HEAPF32[$arg0 + 40 >> 2];
     HEAPF32[$call39$i$i + 72 >> 2] = +HEAPF32[$arg0 + 44 >> 2];
     HEAPF32[$call39$i$i + 104 >> 2] = 0.0;
     HEAPF32[$call39$i$i + 108 >> 2] = 0.0;
     HEAPF32[$call39$i$i + 112 >> 2] = 0.0;
     $530 = $call39$i$i;
     break;
    }
   } while (0);
   $joint$0$i$i = $530;
   break;
  }
 default:
  ___assert_fail(18472, 18480, 113, 18528);
 } while (0);
 HEAP32[$joint$0$i$i + 8 >> 2] = 0;
 $m_jointList$i = $self + 102956 | 0;
 HEAP32[$joint$0$i$i + 12 >> 2] = HEAP32[$m_jointList$i >> 2];
 $505 = HEAP32[$m_jointList$i >> 2] | 0;
 if (($505 | 0) != 0) HEAP32[$505 + 8 >> 2] = $joint$0$i$i;
 HEAP32[$m_jointList$i >> 2] = $joint$0$i$i;
 $m_jointCount$i = $self + 102964 | 0;
 HEAP32[$m_jointCount$i >> 2] = (HEAP32[$m_jointCount$i >> 2] | 0) + 1;
 $m_edgeA$i = $joint$0$i$i + 16 | 0;
 HEAP32[$joint$0$i$i + 20 >> 2] = $joint$0$i$i;
 $m_bodyB$i = $joint$0$i$i + 52 | 0;
 HEAP32[$m_edgeA$i >> 2] = HEAP32[$m_bodyB$i >> 2];
 HEAP32[$joint$0$i$i + 24 >> 2] = 0;
 $m_bodyA$i = $joint$0$i$i + 48 | 0;
 $508 = HEAP32[$m_bodyA$i >> 2] | 0;
 $m_jointList12$i = $508 + 108 | 0;
 HEAP32[$joint$0$i$i + 28 >> 2] = HEAP32[$m_jointList12$i >> 2];
 $510 = HEAP32[$m_jointList12$i >> 2] | 0;
 if (($510 | 0) == 0) $511 = $508; else {
  HEAP32[$510 + 8 >> 2] = $m_edgeA$i;
  $511 = HEAP32[$m_bodyA$i >> 2] | 0;
 }
 HEAP32[$511 + 108 >> 2] = $m_edgeA$i;
 $m_edgeB$i = $joint$0$i$i + 32 | 0;
 HEAP32[$joint$0$i$i + 36 >> 2] = $joint$0$i$i;
 HEAP32[$m_edgeB$i >> 2] = HEAP32[$m_bodyA$i >> 2];
 HEAP32[$joint$0$i$i + 40 >> 2] = 0;
 $513 = HEAP32[$m_bodyB$i >> 2] | 0;
 $m_jointList33$i = $513 + 108 | 0;
 HEAP32[$joint$0$i$i + 44 >> 2] = HEAP32[$m_jointList33$i >> 2];
 $515 = HEAP32[$m_jointList33$i >> 2] | 0;
 if (($515 | 0) == 0) $516 = $513; else {
  HEAP32[$515 + 8 >> 2] = $m_edgeB$i;
  $516 = HEAP32[$m_bodyB$i >> 2] | 0;
 }
 HEAP32[$516 + 108 >> 2] = $m_edgeB$i;
 $517 = HEAP32[$arg0 + 8 >> 2] | 0;
 if ((HEAP8[$arg0 + 16 >> 0] | 0) != 0) {
  STACKTOP = sp;
  return $joint$0$i$i | 0;
 }
 $edge$039$i = HEAP32[(HEAP32[$arg0 + 12 >> 2] | 0) + 112 >> 2] | 0;
 if (($edge$039$i | 0) == 0) {
  STACKTOP = sp;
  return $joint$0$i$i | 0;
 } else $edge$041$i = $edge$039$i;
 do {
  if ((HEAP32[$edge$041$i >> 2] | 0) == ($517 | 0)) {
   $m_flags$i35$i = (HEAP32[$edge$041$i + 4 >> 2] | 0) + 4 | 0;
   HEAP32[$m_flags$i35$i >> 2] = HEAP32[$m_flags$i35$i >> 2] | 8;
  }
  $edge$041$i = HEAP32[$edge$041$i + 12 >> 2] | 0;
 } while (($edge$041$i | 0) != 0);
 STACKTOP = sp;
 return $joint$0$i$i | 0;
}
function __Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput($output, $cache, $input) {
 $output = $output | 0;
 $cache = $cache | 0;
 $input = $input | 0;
 var $$lcssa$i = 0, $$pr$i = 0, $$pr122$i = 0, $$pre$phiZ2D = 0, $$pre117 = 0, $1 = 0, $100 = 0.0, $102 = 0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0, $116 = 0.0, $117 = 0.0, $118 = 0, $12 = 0.0, $124 = 0.0, $125 = 0.0, $129 = 0, $130 = 0, $134 = 0.0, $136 = 0.0, $140 = 0, $141 = 0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0, $155 = 0, $156 = 0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0, $171 = 0.0, $172 = 0.0, $173 = 0, $178 = 0, $183 = 0, $184 = 0, $186 = 0, $189 = 0, $190 = 0, $194 = 0, $196 = 0, $199 = 0, $200 = 0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $208 = 0.0, $21 = 0.0, $211 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0, $22 = 0.0, $224 = 0.0, $225 = 0.0, $226 = 0, $23 = 0.0, $230 = 0.0, $233 = 0.0, $236 = 0.0, $239 = 0.0, $24 = 0.0, $240 = 0.0, $241 = 0, $245 = 0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $260 = 0.0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $268 = 0.0, $269 = 0.0, $270 = 0, $274 = 0, $278 = 0, $29 = 0.0, $30 = 0.0, $31 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $43 = 0.0, $46 = 0, $5 = 0, $52 = 0.0, $53 = 0.0, $56 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $76 = 0.0, $77 = 0.0, $78 = 0, $82 = 0, $85 = 0, $91 = 0.0, $92 = 0.0, $93 = 0, $99 = 0.0, $a15$i = 0, $a18$i = 0, $a86$i = 0, $add = 0.0, $add$i$i21 = 0.0, $add$i$i39 = 0.0, $add$i$i7 = 0.0, $add$i$i78 = 0.0, $add$i100$i = 0.0, $add$i100$i37 = 0.0, $add$i115$i = 0.0, $add$i12$i = 0.0, $add$i12$i196 = 0.0, $add$i121 = 0.0, $add$i122$i = 0.0, $add$i131 = 0.0, $add$i149 = 0.0, $add$i162 = 0.0, $add$i17$i = 0.0, $add$i40$i = 0.0, $add$i60$i = 0.0, $add$i62$i = 0.0, $add$i78$i = 0.0, $add$i78$i38 = 0.0, $add$i93$i = 0.0, $add$ptr = 0, $add17$i67$i = 0.0, $add17$i83$i = 0.0, $add3$i$i = 0.0, $add3$i43$i = 0.0, $add3$i63$i = 0.0, $add8$i = 0.0, $add8$i151 = 0.0, $bestIndex$0$lcssa$i203224 = 0, $bestIndex$0$lcssa$i230 = 0, $bestIndex$016$i = 0, $bestIndex$016$i189 = 0, $bestValue$014$i = 0.0, $bestValue$014$i191 = 0.0, $call$i$i$i = 0.0, $call20$i = 0.0, $closestPoint = 0, $cmp5$i = 0, $cmp5$i197 = 0, $cmp5233 = 0, $conv$i = 0, $conv6$i = 0, $conv9$i = 0, $count$i = 0, $d$sroa$0$0 = 0.0, $d$sroa$1$0 = 0.0, $distance = 0, $div$i = 0.0, $div$i24 = 0.0, $div$i53 = 0.0, $div42$i = 0.0, $div80$i = 0.0, $div93$i = 0.0, $i$011$i = 0, $i$0127$i = 0, $i$015$i = 0, $i$015$i190 = 0, $i$0234 = 0, $i41$0236 = 0, $inc39 = 0, $inc59 = 0, $indexA25 = 0, $indexA25221 = 0, $indexA25225 = 0, $indexB32 = 0, $indexB32227 = 0, $indexB32231 = 0, $iter$0242 = 0, $iter$1 = 0, $iter$1122 = 0, $iter$1123 = 0, $m_count$i = 0, $m_count$i108$i = 0, $m_count$i135$pre$phiZZ2D = 0, $m_count$i179$pre$phiZZ2D = 0, $m_count$i42$i = 0, $m_count$i86$i = 0, $m_v2$i = 0, $m_v3$i = 0, $m_vertices$i$i = 0, $m_vertices$i112$i = 0, $m_vertices$i134$pre$phiZZ2D = 0, $m_vertices$i178$pre$phiZZ2D = 0, $m_vertices$i46$i = 0, $m_vertices$i90$i = 0, $mul$i40 = 0.0, $mul16$i41 = 0.0, $mul18$i = 0.0, $p = 0, $pointB = 0, $pointB124 = 0, $pointB125 = 0, $saveA = 0, $saveB = 0, $simplex = 0, $sub$i$i = 0.0, $sub$i$i13 = 0.0, $sub$i$i35 = 0.0, $sub$i103$i = 0.0, $sub$i104 = 0.0, $sub$i18$i = 0.0, $sub$i65$i = 0.0, $sub$i81$i = 0.0, $sub$i88 = 0.0, $sub$i88218 = 0.0, $sub2$i = 0.0, $sub3$i = 0.0, $sub3$i$i = 0.0, $sub3$i$i14 = 0.0, $sub3$i$i36 = 0.0, $sub3$i$i58 = 0.0, $sub3$i106$i = 0.0, $sub3$i219 = 0.0, $sub3$i84$i = 0.0, $transformA$sroa$0$0$copyload = 0.0, $transformA$sroa$1$4$copyload = 0.0, $transformA$sroa$2$8$copyload = 0.0, $transformA$sroa$3$12$copyload = 0.0, $transformB$sroa$0$0$copyload = 0.0, $transformB$sroa$1$4$copyload = 0.0, $transformB$sroa$2$8$copyload = 0.0, $transformB$sroa$3$12$copyload = 0.0, $w3$i = 0, $w44$i = 0, $w5$i = 0, $x$i$i = 0, $x$i17$i = 0, $y$i$i = 0, $y$i$i94 = 0, $y$i19$i = 0, $y2$i$i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 $simplex = sp;
 $saveA = sp + 144 | 0;
 $saveB = sp + 112 | 0;
 $closestPoint = sp + 128 | 0;
 $p = sp + 136 | 0;
 HEAP32[1354] = (HEAP32[1354] | 0) + 1;
 $transformA$sroa$0$0$copyload = +HEAPF32[$input + 56 >> 2];
 $transformA$sroa$1$4$copyload = +HEAPF32[$input + 60 >> 2];
 $transformA$sroa$2$8$copyload = +HEAPF32[$input + 64 >> 2];
 $transformA$sroa$3$12$copyload = +HEAPF32[$input + 68 >> 2];
 $transformB$sroa$0$0$copyload = +HEAPF32[$input + 72 >> 2];
 $transformB$sroa$1$4$copyload = +HEAPF32[$input + 76 >> 2];
 $transformB$sroa$2$8$copyload = +HEAPF32[$input + 80 >> 2];
 $transformB$sroa$3$12$copyload = +HEAPF32[$input + 84 >> 2];
 $count$i = $cache + 4 | 0;
 $1 = HEAP16[$count$i >> 1] | 0;
 if (!(($1 & 65535) < 4)) ___assert_fail(5624, 5480, 102, 5648);
 $conv$i = $1 & 65535;
 $m_count$i = $simplex + 108 | 0;
 HEAP32[$m_count$i >> 2] = $conv$i;
 L4 : do if ($1 << 16 >> 16 == 0) $$lcssa$i = $conv$i; else {
  $m_vertices$i$i = $input + 16 | 0;
  $m_count$i42$i = $input + 48 | 0;
  $m_vertices$i46$i = $input + 44 | 0;
  $$pre117 = HEAP32[$input + 20 >> 2] | 0;
  $i$0127$i = 0;
  while (1) {
   $conv6$i = HEAPU8[$cache + $i$0127$i + 6 >> 0] | 0;
   HEAP32[$simplex + ($i$0127$i * 36 | 0) + 28 >> 2] = $conv6$i;
   $conv9$i = HEAPU8[$cache + $i$0127$i + 9 >> 0] | 0;
   HEAP32[$simplex + ($i$0127$i * 36 | 0) + 32 >> 2] = $conv9$i;
   if (($$pre117 | 0) <= ($conv6$i | 0)) {
    label = 6;
    break;
   }
   $5 = (HEAP32[$m_vertices$i$i >> 2] | 0) + ($conv6$i << 3) | 0;
   $11 = +HEAPF32[$5 >> 2];
   $12 = +HEAPF32[$5 + 4 >> 2];
   if ((HEAP32[$m_count$i42$i >> 2] | 0) <= ($conv9$i | 0)) {
    label = 8;
    break;
   }
   $15 = (HEAP32[$m_vertices$i46$i >> 2] | 0) + ($conv9$i << 3) | 0;
   $21 = +HEAPF32[$15 >> 2];
   $22 = +HEAPF32[$15 + 4 >> 2];
   $add$i$i7 = $transformA$sroa$0$0$copyload + ($11 * $transformA$sroa$3$12$copyload - $12 * $transformA$sroa$2$8$copyload);
   $23 = +$add$i$i7;
   $24 = +($12 * $transformA$sroa$3$12$copyload + $11 * $transformA$sroa$2$8$copyload + $transformA$sroa$1$4$copyload);
   $25 = $simplex + ($i$0127$i * 36 | 0) | 0;
   HEAPF32[$25 >> 2] = $23;
   HEAPF32[$25 + 4 >> 2] = $24;
   $add$i100$i = $transformB$sroa$0$0$copyload + ($21 * $transformB$sroa$3$12$copyload - $22 * $transformB$sroa$2$8$copyload);
   $29 = +$add$i100$i;
   $30 = +($22 * $transformB$sroa$3$12$copyload + $21 * $transformB$sroa$2$8$copyload + $transformB$sroa$1$4$copyload);
   $31 = $simplex + ($i$0127$i * 36 | 0) + 8 | 0;
   HEAPF32[$31 >> 2] = $29;
   HEAPF32[$31 + 4 >> 2] = $30;
   $37 = +($add$i100$i - $add$i$i7);
   $38 = +(+HEAPF32[$simplex + ($i$0127$i * 36 | 0) + 12 >> 2] - +HEAPF32[$simplex + ($i$0127$i * 36 | 0) + 4 >> 2]);
   $39 = $simplex + ($i$0127$i * 36 | 0) + 16 | 0;
   HEAPF32[$39 >> 2] = $37;
   HEAPF32[$39 + 4 >> 2] = $38;
   HEAPF32[$simplex + ($i$0127$i * 36 | 0) + 24 >> 2] = 0.0;
   $i$0127$i = $i$0127$i + 1 | 0;
   $$pr$i = HEAP32[$m_count$i >> 2] | 0;
   if (($i$0127$i | 0) >= ($$pr$i | 0)) {
    $$lcssa$i = $$pr$i;
    break L4;
   }
  }
  if ((label | 0) == 6) ___assert_fail(6408, 6440, 103, 6488); else if ((label | 0) == 8) ___assert_fail(6408, 6440, 103, 6488);
 } while (0);
 do if (($$lcssa$i | 0) > 1) {
  $43 = +HEAPF32[$cache >> 2];
  $call20$i = +__ZNK9b2Simplex9GetMetricEv($simplex);
  if (!($call20$i < $43 * .5)) if (!($43 * 2.0 < $call20$i | $call20$i < 1.1920928955078125e-7)) {
   $$pr122$i = HEAP32[$m_count$i >> 2] | 0;
   label = 15;
   break;
  }
  HEAP32[$m_count$i >> 2] = 0;
  label = 17;
 } else {
  $$pr122$i = $$lcssa$i;
  label = 15;
 } while (0);
 if ((label | 0) == 15) if (($$pr122$i | 0) == 0) label = 17; else {
  $$pre$phiZ2D = $simplex + 16 | 0;
  $m_count$i135$pre$phiZZ2D = $input + 48 | 0;
  $m_count$i179$pre$phiZZ2D = $input + 20 | 0;
  $m_vertices$i134$pre$phiZZ2D = $input + 44 | 0;
  $m_vertices$i178$pre$phiZZ2D = $input + 16 | 0;
 }
 do if ((label | 0) == 17) {
  HEAP32[$simplex + 28 >> 2] = 0;
  HEAP32[$simplex + 32 >> 2] = 0;
  $m_count$i108$i = $input + 20 | 0;
  if ((HEAP32[$m_count$i108$i >> 2] | 0) <= 0) ___assert_fail(6408, 6440, 103, 6488);
  $m_vertices$i112$i = $input + 16 | 0;
  $46 = HEAP32[$m_vertices$i112$i >> 2] | 0;
  $52 = +HEAPF32[$46 >> 2];
  $53 = +HEAPF32[$46 + 4 >> 2];
  $m_count$i86$i = $input + 48 | 0;
  if ((HEAP32[$m_count$i86$i >> 2] | 0) > 0) {
   $m_vertices$i90$i = $input + 44 | 0;
   $56 = HEAP32[$m_vertices$i90$i >> 2] | 0;
   $62 = +HEAPF32[$56 >> 2];
   $63 = +HEAPF32[$56 + 4 >> 2];
   $add$i78$i = $transformA$sroa$0$0$copyload + ($52 * $transformA$sroa$3$12$copyload - $53 * $transformA$sroa$2$8$copyload);
   $add17$i83$i = $53 * $transformA$sroa$3$12$copyload + $52 * $transformA$sroa$2$8$copyload + $transformA$sroa$1$4$copyload;
   $64 = +$add$i78$i;
   $65 = +$add17$i83$i;
   $66 = $simplex;
   HEAPF32[$66 >> 2] = $64;
   HEAPF32[$66 + 4 >> 2] = $65;
   $add$i62$i = $transformB$sroa$0$0$copyload + ($62 * $transformB$sroa$3$12$copyload - $63 * $transformB$sroa$2$8$copyload);
   $add17$i67$i = $63 * $transformB$sroa$3$12$copyload + $62 * $transformB$sroa$2$8$copyload + $transformB$sroa$1$4$copyload;
   $70 = +$add$i62$i;
   $71 = +$add17$i67$i;
   $72 = $simplex + 8 | 0;
   HEAPF32[$72 >> 2] = $70;
   HEAPF32[$72 + 4 >> 2] = $71;
   $w44$i = $simplex + 16 | 0;
   $76 = +($add$i62$i - $add$i78$i);
   $77 = +($add17$i67$i - $add17$i83$i);
   $78 = $w44$i;
   HEAPF32[$78 >> 2] = $76;
   HEAPF32[$78 + 4 >> 2] = $77;
   HEAP32[$m_count$i >> 2] = 1;
   $$pre$phiZ2D = $w44$i;
   $m_count$i135$pre$phiZZ2D = $m_count$i86$i;
   $m_count$i179$pre$phiZZ2D = $m_count$i108$i;
   $m_vertices$i134$pre$phiZZ2D = $m_vertices$i90$i;
   $m_vertices$i178$pre$phiZZ2D = $m_vertices$i112$i;
   break;
  } else ___assert_fail(6408, 6440, 103, 6488);
 } while (0);
 __ZNK9b2Simplex15GetClosestPointEv($closestPoint, $simplex);
 $x$i$i = $simplex + 16 | 0;
 $y$i$i = $simplex + 20 | 0;
 $x$i17$i = $simplex + 52 | 0;
 $y$i19$i = $simplex + 56 | 0;
 $m_v2$i = $simplex + 36 | 0;
 $w3$i = $simplex + 52 | 0;
 $a15$i = $simplex + 24 | 0;
 $a18$i = $simplex + 60 | 0;
 $m_v3$i = $simplex + 72 | 0;
 $w5$i = $simplex + 88 | 0;
 $a86$i = $simplex + 96 | 0;
 $82 = HEAP32[$m_count$i >> 2] | 0;
 $iter$0242 = 0;
 L32 : while (1) {
  $cmp5233 = ($82 | 0) > 0;
  if ($cmp5233) {
   $i$0234 = 0;
   do {
    HEAP32[$saveA + ($i$0234 << 2) >> 2] = HEAP32[$simplex + ($i$0234 * 36 | 0) + 28 >> 2];
    HEAP32[$saveB + ($i$0234 << 2) >> 2] = HEAP32[$simplex + ($i$0234 * 36 | 0) + 32 >> 2];
    $i$0234 = $i$0234 + 1 | 0;
   } while (($i$0234 | 0) != ($82 | 0));
  }
  do if (($82 | 0) == 2) {
   $85 = $$pre$phiZ2D;
   $91 = +HEAPF32[$85 >> 2];
   $92 = +HEAPF32[$85 + 4 >> 2];
   $93 = $w3$i;
   $99 = +HEAPF32[$93 >> 2];
   $100 = +HEAPF32[$93 + 4 >> 2];
   $sub$i$i13 = $99 - $91;
   $sub3$i$i14 = $100 - $92;
   $add$i17$i = $91 * $sub$i$i13 + $92 * $sub3$i$i14;
   if ($add$i17$i >= -0.0) {
    HEAPF32[$a15$i >> 2] = 1.0;
    HEAP32[$m_count$i >> 2] = 1;
    break;
   }
   $add$i$i21 = $99 * $sub$i$i13 + $100 * $sub3$i$i14;
   if (!($add$i$i21 <= 0.0)) {
    $div$i24 = 1.0 / ($add$i$i21 - $add$i17$i);
    HEAPF32[$a15$i >> 2] = $add$i$i21 * $div$i24;
    HEAPF32[$a18$i >> 2] = -($add$i17$i * $div$i24);
    HEAP32[$m_count$i >> 2] = 2;
    break;
   } else {
    HEAPF32[$a18$i >> 2] = 1.0;
    HEAP32[$m_count$i >> 2] = 1;
    dest = $simplex + 0 | 0;
    src = $m_v2$i + 0 | 0;
    stop = dest + 36 | 0;
    do {
     HEAP32[dest >> 2] = HEAP32[src >> 2];
     dest = dest + 4 | 0;
     src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    break;
   }
  } else if (($82 | 0) == 3) {
   $102 = $$pre$phiZ2D;
   $108 = +HEAPF32[$102 >> 2];
   $109 = +HEAPF32[$102 + 4 >> 2];
   $110 = $w3$i;
   $116 = +HEAPF32[$110 >> 2];
   $117 = +HEAPF32[$110 + 4 >> 2];
   $118 = $w5$i;
   $124 = +HEAPF32[$118 >> 2];
   $125 = +HEAPF32[$118 + 4 >> 2];
   $sub$i$i35 = $116 - $108;
   $sub3$i$i36 = $117 - $109;
   $add$i122$i = $108 * $sub$i$i35 + $109 * $sub3$i$i36;
   $add$i115$i = $116 * $sub$i$i35 + $117 * $sub3$i$i36;
   $sub$i103$i = $124 - $108;
   $sub3$i106$i = $125 - $109;
   $add$i100$i37 = $108 * $sub$i103$i + $109 * $sub3$i106$i;
   $add$i93$i = $124 * $sub$i103$i + $125 * $sub3$i106$i;
   $sub$i81$i = $124 - $116;
   $sub3$i84$i = $125 - $117;
   $add$i78$i38 = $116 * $sub$i81$i + $117 * $sub3$i84$i;
   $add$i$i39 = $124 * $sub$i81$i + $125 * $sub3$i84$i;
   $sub$i65$i = $sub$i$i35 * $sub3$i106$i - $sub3$i$i36 * $sub$i103$i;
   $mul$i40 = ($116 * $125 - $117 * $124) * $sub$i65$i;
   $mul16$i41 = ($109 * $124 - $108 * $125) * $sub$i65$i;
   $mul18$i = ($108 * $117 - $109 * $116) * $sub$i65$i;
   if (!(!($add$i122$i >= -0.0) | !($add$i100$i37 >= -0.0))) {
    HEAPF32[$a15$i >> 2] = 1.0;
    HEAP32[$m_count$i >> 2] = 1;
    break;
   }
   if (!(!($add$i122$i < -0.0) | !($add$i115$i > 0.0) | !($mul18$i <= 0.0))) {
    $div$i53 = 1.0 / ($add$i115$i - $add$i122$i);
    HEAPF32[$a15$i >> 2] = $add$i115$i * $div$i53;
    HEAPF32[$a18$i >> 2] = -($add$i122$i * $div$i53);
    HEAP32[$m_count$i >> 2] = 2;
    break;
   }
   if (!(!($add$i100$i37 < -0.0) | !($add$i93$i > 0.0) | !($mul16$i41 <= 0.0))) {
    $div42$i = 1.0 / ($add$i93$i - $add$i100$i37);
    HEAPF32[$a15$i >> 2] = $add$i93$i * $div42$i;
    HEAPF32[$a86$i >> 2] = -($add$i100$i37 * $div42$i);
    HEAP32[$m_count$i >> 2] = 2;
    dest = $m_v2$i + 0 | 0;
    src = $m_v3$i + 0 | 0;
    stop = dest + 36 | 0;
    do {
     HEAP32[dest >> 2] = HEAP32[src >> 2];
     dest = dest + 4 | 0;
     src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    break;
   }
   if (!(!($add$i115$i <= 0.0) | !($add$i78$i38 >= -0.0))) {
    HEAPF32[$a18$i >> 2] = 1.0;
    HEAP32[$m_count$i >> 2] = 1;
    dest = $simplex + 0 | 0;
    src = $m_v2$i + 0 | 0;
    stop = dest + 36 | 0;
    do {
     HEAP32[dest >> 2] = HEAP32[src >> 2];
     dest = dest + 4 | 0;
     src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    break;
   }
   if (!(!($add$i93$i <= 0.0) | !($add$i$i39 <= 0.0))) {
    HEAPF32[$a86$i >> 2] = 1.0;
    HEAP32[$m_count$i >> 2] = 1;
    dest = $simplex + 0 | 0;
    src = $m_v3$i + 0 | 0;
    stop = dest + 36 | 0;
    do {
     HEAP32[dest >> 2] = HEAP32[src >> 2];
     dest = dest + 4 | 0;
     src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    break;
   }
   if (!($add$i78$i38 < -0.0) | !($add$i$i39 > 0.0) | !($mul$i40 <= 0.0)) {
    label = 43;
    break L32;
   }
   $div80$i = 1.0 / ($add$i$i39 - $add$i78$i38);
   HEAPF32[$a18$i >> 2] = $add$i$i39 * $div80$i;
   HEAPF32[$a86$i >> 2] = -($add$i78$i38 * $div80$i);
   HEAP32[$m_count$i >> 2] = 2;
   dest = $simplex + 0 | 0;
   src = $m_v3$i + 0 | 0;
   stop = dest + 36 | 0;
   do {
    HEAP32[dest >> 2] = HEAP32[src >> 2];
    dest = dest + 4 | 0;
    src = src + 4 | 0;
   } while ((dest | 0) < (stop | 0));
  } else if (($82 | 0) != 1) {
   label = 44;
   break L32;
  } while (0);
  __ZNK9b2Simplex15GetClosestPointEv($p, $simplex);
  $130 = HEAP32[$m_count$i >> 2] | 0;
  do if (($130 | 0) == 1) {
   $d$sroa$0$0 = -+HEAPF32[$x$i$i >> 2];
   $d$sroa$1$0 = -+HEAPF32[$y$i$i >> 2];
  } else if (($130 | 0) == 2) {
   $134 = +HEAPF32[$x$i$i >> 2];
   $sub$i18$i = +HEAPF32[$x$i17$i >> 2] - $134;
   $136 = +HEAPF32[$y$i$i >> 2];
   $sub3$i$i58 = +HEAPF32[$y$i19$i >> 2] - $136;
   if ($134 * $sub3$i$i58 - $sub$i18$i * $136 > 0.0) {
    $d$sroa$0$0 = -$sub3$i$i58;
    $d$sroa$1$0 = $sub$i18$i;
    break;
   } else {
    $d$sroa$0$0 = $sub3$i$i58;
    $d$sroa$1$0 = -$sub$i18$i;
    break;
   }
  } else {
   label = 50;
   break L32;
  } while (0);
  if ($d$sroa$0$0 * $d$sroa$0$0 + $d$sroa$1$0 * $d$sroa$1$0 < 1.4210854715202004e-14) {
   $278 = $130;
   $iter$1 = $iter$0242;
   label = 73;
   break;
  }
  $add$ptr = $simplex + ($130 * 36 | 0) | 0;
  $sub$i104 = -$d$sroa$0$0;
  $sub2$i = -$d$sroa$1$0;
  $add$i131 = $transformA$sroa$3$12$copyload * $sub$i104 + $transformA$sroa$2$8$copyload * $sub2$i;
  $add8$i = $transformA$sroa$3$12$copyload * $sub2$i - $transformA$sroa$2$8$copyload * $sub$i104;
  $140 = HEAP32[$m_vertices$i178$pre$phiZZ2D >> 2] | 0;
  $141 = HEAP32[$m_count$i179$pre$phiZZ2D >> 2] | 0;
  if (($141 | 0) > 1) {
   $bestIndex$016$i189 = 0;
   $bestValue$014$i191 = $add8$i * +HEAPF32[$140 + 4 >> 2] + $add$i131 * +HEAPF32[$140 >> 2];
   $i$015$i190 = 1;
   while (1) {
    $add$i12$i196 = $add$i131 * +HEAPF32[$140 + ($i$015$i190 << 3) >> 2] + $add8$i * +HEAPF32[$140 + ($i$015$i190 << 3) + 4 >> 2];
    $cmp5$i197 = $add$i12$i196 > $bestValue$014$i191;
    $bestIndex$016$i189 = $cmp5$i197 ? $i$015$i190 : $bestIndex$016$i189;
    $i$015$i190 = $i$015$i190 + 1 | 0;
    if (($i$015$i190 | 0) == ($141 | 0)) break; else $bestValue$014$i191 = $cmp5$i197 ? $add$i12$i196 : $bestValue$014$i191;
   }
   $indexA25 = $simplex + ($130 * 36 | 0) + 28 | 0;
   HEAP32[$indexA25 >> 2] = $bestIndex$016$i189;
   if (($bestIndex$016$i189 | 0) > -1) {
    $bestIndex$0$lcssa$i203224 = $bestIndex$016$i189;
    $indexA25225 = $indexA25;
   } else {
    label = 58;
    break;
   }
  } else {
   $indexA25221 = $simplex + ($130 * 36 | 0) + 28 | 0;
   HEAP32[$indexA25221 >> 2] = 0;
   $bestIndex$0$lcssa$i203224 = 0;
   $indexA25225 = $indexA25221;
  }
  if (($141 | 0) <= ($bestIndex$0$lcssa$i203224 | 0)) {
   label = 58;
   break;
  }
  $146 = +HEAPF32[$140 + ($bestIndex$0$lcssa$i203224 << 3) >> 2];
  $147 = +HEAPF32[$140 + ($bestIndex$0$lcssa$i203224 << 3) + 4 >> 2];
  $add$i162 = $transformA$sroa$0$0$copyload + ($transformA$sroa$3$12$copyload * $146 - $transformA$sroa$2$8$copyload * $147);
  $148 = +$add$i162;
  $149 = +($146 * $transformA$sroa$2$8$copyload + $transformA$sroa$3$12$copyload * $147 + $transformA$sroa$1$4$copyload);
  $150 = $add$ptr;
  HEAPF32[$150 >> 2] = $148;
  HEAPF32[$150 + 4 >> 2] = $149;
  $add$i149 = $transformB$sroa$3$12$copyload * $d$sroa$0$0 + $transformB$sroa$2$8$copyload * $d$sroa$1$0;
  $add8$i151 = $transformB$sroa$3$12$copyload * $d$sroa$1$0 - $d$sroa$0$0 * $transformB$sroa$2$8$copyload;
  $155 = HEAP32[$m_vertices$i134$pre$phiZZ2D >> 2] | 0;
  $156 = HEAP32[$m_count$i135$pre$phiZZ2D >> 2] | 0;
  if (($156 | 0) > 1) {
   $bestIndex$016$i = 0;
   $bestValue$014$i = $add8$i151 * +HEAPF32[$155 + 4 >> 2] + $add$i149 * +HEAPF32[$155 >> 2];
   $i$015$i = 1;
   while (1) {
    $add$i12$i = $add$i149 * +HEAPF32[$155 + ($i$015$i << 3) >> 2] + $add8$i151 * +HEAPF32[$155 + ($i$015$i << 3) + 4 >> 2];
    $cmp5$i = $add$i12$i > $bestValue$014$i;
    $bestIndex$016$i = $cmp5$i ? $i$015$i : $bestIndex$016$i;
    $i$015$i = $i$015$i + 1 | 0;
    if (($i$015$i | 0) == ($156 | 0)) break; else $bestValue$014$i = $cmp5$i ? $add$i12$i : $bestValue$014$i;
   }
   $indexB32 = $simplex + ($130 * 36 | 0) + 32 | 0;
   HEAP32[$indexB32 >> 2] = $bestIndex$016$i;
   if (($bestIndex$016$i | 0) > -1) {
    $bestIndex$0$lcssa$i230 = $bestIndex$016$i;
    $indexB32231 = $indexB32;
   } else {
    label = 65;
    break;
   }
  } else {
   $indexB32227 = $simplex + ($130 * 36 | 0) + 32 | 0;
   HEAP32[$indexB32227 >> 2] = 0;
   $bestIndex$0$lcssa$i230 = 0;
   $indexB32231 = $indexB32227;
  }
  if (($156 | 0) <= ($bestIndex$0$lcssa$i230 | 0)) {
   label = 65;
   break;
  }
  $161 = +HEAPF32[$155 + ($bestIndex$0$lcssa$i230 << 3) >> 2];
  $162 = +HEAPF32[$155 + ($bestIndex$0$lcssa$i230 << 3) + 4 >> 2];
  $add$i121 = $transformB$sroa$0$0$copyload + ($transformB$sroa$3$12$copyload * $161 - $transformB$sroa$2$8$copyload * $162);
  $163 = +$add$i121;
  $164 = +($161 * $transformB$sroa$2$8$copyload + $transformB$sroa$3$12$copyload * $162 + $transformB$sroa$1$4$copyload);
  $165 = $simplex + ($130 * 36 | 0) + 8 | 0;
  HEAPF32[$165 >> 2] = $163;
  HEAPF32[$165 + 4 >> 2] = $164;
  $171 = +($add$i121 - $add$i162);
  $172 = +(+HEAPF32[$simplex + ($130 * 36 | 0) + 12 >> 2] - +HEAPF32[$simplex + ($130 * 36 | 0) + 4 >> 2]);
  $173 = $simplex + ($130 * 36 | 0) + 16 | 0;
  HEAPF32[$173 >> 2] = $171;
  HEAPF32[$173 + 4 >> 2] = $172;
  $inc39 = $iter$0242 + 1 | 0;
  HEAP32[1356] = (HEAP32[1356] | 0) + 1;
  if ($cmp5233) {
   $178 = HEAP32[$indexA25225 >> 2] | 0;
   $i41$0236 = 0;
   do {
    if (($178 | 0) == (HEAP32[$saveA + ($i41$0236 << 2) >> 2] | 0)) if ((HEAP32[$indexB32231 >> 2] | 0) == (HEAP32[$saveB + ($i41$0236 << 2) >> 2] | 0)) {
     label = 72;
     break L32;
    }
    $i41$0236 = $i41$0236 + 1 | 0;
   } while (($i41$0236 | 0) < ($82 | 0));
  }
  $inc59 = (HEAP32[$m_count$i >> 2] | 0) + 1 | 0;
  HEAP32[$m_count$i >> 2] = $inc59;
  if (($inc39 | 0) < 20) {
   $82 = $inc59;
   $iter$0242 = $inc39;
  } else {
   $278 = $inc59;
   $iter$1 = $inc39;
   label = 73;
   break;
  }
 }
 if ((label | 0) == 43) {
  $div93$i = 1.0 / ($mul18$i + ($mul$i40 + $mul16$i41));
  HEAPF32[$a15$i >> 2] = $mul$i40 * $div93$i;
  HEAPF32[$a18$i >> 2] = $mul16$i41 * $div93$i;
  HEAPF32[$a86$i >> 2] = $mul18$i * $div93$i;
  HEAP32[$m_count$i >> 2] = 3;
  $129 = HEAP32[1358] | 0;
  HEAP32[1358] = ($129 | 0) > ($iter$0242 | 0) ? $129 : $iter$0242;
  $iter$1123 = $iter$0242;
  $pointB125 = $output + 8 | 0;
  label = 77;
 } else if ((label | 0) == 44) ___assert_fail(18472, 5480, 498, 5528); else if ((label | 0) == 50) ___assert_fail(18472, 5480, 184, 5584); else if ((label | 0) == 58) ___assert_fail(6408, 6440, 103, 6488); else if ((label | 0) == 65) ___assert_fail(6408, 6440, 103, 6488); else if ((label | 0) == 72) {
  $278 = HEAP32[$m_count$i >> 2] | 0;
  $iter$1 = $inc39;
  label = 73;
 }
 do if ((label | 0) == 73) {
  $183 = HEAP32[1358] | 0;
  HEAP32[1358] = ($183 | 0) > ($iter$1 | 0) ? $183 : $iter$1;
  $pointB = $output + 8 | 0;
  if (($278 | 0) == 3) {
   $iter$1123 = $iter$1;
   $pointB125 = $pointB;
   label = 77;
   break;
  } else if (($278 | 0) == 2) {
   $208 = +HEAPF32[$a15$i >> 2];
   $211 = +HEAPF32[$a18$i >> 2];
   $add$i60$i = $208 * +HEAPF32[$simplex >> 2] + $211 * +HEAPF32[$simplex + 36 >> 2];
   $add3$i63$i = $208 * +HEAPF32[$simplex + 4 >> 2] + $211 * +HEAPF32[$simplex + 40 >> 2];
   $214 = +$add$i60$i;
   $215 = +$add3$i63$i;
   $216 = $output;
   HEAPF32[$216 >> 2] = $214;
   HEAPF32[$216 + 4 >> 2] = $215;
   $add$i40$i = $208 * +HEAPF32[$simplex + 8 >> 2] + $211 * +HEAPF32[$simplex + 44 >> 2];
   $add3$i43$i = $208 * +HEAPF32[$simplex + 12 >> 2] + $211 * +HEAPF32[$simplex + 48 >> 2];
   $224 = +$add$i40$i;
   $225 = +$add3$i43$i;
   $226 = $pointB;
   HEAPF32[$226 >> 2] = $224;
   HEAPF32[$226 + 4 >> 2] = $225;
   $249 = $add$i40$i;
   $250 = $add$i60$i;
   $251 = $add3$i43$i;
   $252 = $add3$i63$i;
   $iter$1122 = $iter$1;
   $pointB124 = $pointB;
   break;
  } else if (($278 | 0) == 1) {
   $184 = $simplex;
   $186 = HEAP32[$184 >> 2] | 0;
   $189 = HEAP32[$184 + 4 >> 2] | 0;
   $190 = $output;
   HEAP32[$190 >> 2] = $186;
   HEAP32[$190 + 4 >> 2] = $189;
   $194 = $simplex + 8 | 0;
   $196 = HEAP32[$194 >> 2] | 0;
   $199 = HEAP32[$194 + 4 >> 2] | 0;
   $200 = $pointB;
   HEAP32[$200 >> 2] = $196;
   HEAP32[$200 + 4 >> 2] = $199;
   $204 = (HEAP32[tempDoublePtr >> 2] = $186, +HEAPF32[tempDoublePtr >> 2]);
   $205 = (HEAP32[tempDoublePtr >> 2] = $196, +HEAPF32[tempDoublePtr >> 2]);
   $206 = (HEAP32[tempDoublePtr >> 2] = $189, +HEAPF32[tempDoublePtr >> 2]);
   $249 = $205;
   $250 = $204;
   $251 = (HEAP32[tempDoublePtr >> 2] = $199, +HEAPF32[tempDoublePtr >> 2]);
   $252 = $206;
   $iter$1122 = $iter$1;
   $pointB124 = $pointB;
   break;
  } else if (($278 | 0) == 0) ___assert_fail(18472, 5480, 217, 5560); else ___assert_fail(18472, 5480, 236, 5560);
 } while (0);
 if ((label | 0) == 77) {
  $230 = +HEAPF32[$a15$i >> 2];
  $233 = +HEAPF32[$a18$i >> 2];
  $236 = +HEAPF32[$a86$i >> 2];
  $add$i$i78 = $230 * +HEAPF32[$simplex >> 2] + $233 * +HEAPF32[$simplex + 36 >> 2] + $236 * +HEAPF32[$simplex + 72 >> 2];
  $add3$i$i = $230 * +HEAPF32[$simplex + 4 >> 2] + $233 * +HEAPF32[$simplex + 40 >> 2] + $236 * +HEAPF32[$simplex + 76 >> 2];
  $239 = +$add$i$i78;
  $240 = +$add3$i$i;
  $241 = $output;
  HEAPF32[$241 >> 2] = $239;
  HEAPF32[$241 + 4 >> 2] = $240;
  $245 = $pointB125;
  HEAPF32[$245 >> 2] = $239;
  HEAPF32[$245 + 4 >> 2] = $240;
  $249 = $add$i$i78;
  $250 = $add$i$i78;
  $251 = $add3$i$i;
  $252 = $add3$i$i;
  $iter$1122 = $iter$1123;
  $pointB124 = $pointB125;
 }
 $sub$i$i = $250 - $249;
 $y$i$i94 = $output + 4 | 0;
 $y2$i$i = $output + 12 | 0;
 $sub3$i$i = $252 - $251;
 $distance = $output + 16 | 0;
 HEAPF32[$distance >> 2] = +Math_sqrt(+($sub$i$i * $sub$i$i + $sub3$i$i * $sub3$i$i));
 HEAP32[$output + 20 >> 2] = $iter$1122;
 HEAPF32[$cache >> 2] = +__ZNK9b2Simplex9GetMetricEv($simplex);
 $253 = HEAP32[$m_count$i >> 2] | 0;
 HEAP16[$count$i >> 1] = $253;
 if (($253 | 0) > 0) {
  $i$011$i = 0;
  do {
   HEAP8[$cache + $i$011$i + 6 >> 0] = HEAP32[$simplex + ($i$011$i * 36 | 0) + 28 >> 2];
   HEAP8[$cache + $i$011$i + 9 >> 0] = HEAP32[$simplex + ($i$011$i * 36 | 0) + 32 >> 2];
   $i$011$i = $i$011$i + 1 | 0;
  } while (($i$011$i | 0) < ($253 | 0));
 }
 if ((HEAP8[$input + 88 >> 0] | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 $257 = +HEAPF32[$input + 24 >> 2];
 $258 = +HEAPF32[$input + 52 >> 2];
 $259 = +HEAPF32[$distance >> 2];
 $add = $257 + $258;
 if (!($259 > $add & $259 > 1.1920928955078125e-7)) {
  $268 = +((+HEAPF32[$output >> 2] + +HEAPF32[$pointB124 >> 2]) * .5);
  $269 = +((+HEAPF32[$y$i$i94 >> 2] + +HEAPF32[$y2$i$i >> 2]) * .5);
  $270 = $output;
  HEAPF32[$270 >> 2] = $268;
  HEAPF32[$270 + 4 >> 2] = $269;
  $274 = $pointB124;
  HEAPF32[$274 >> 2] = $268;
  HEAPF32[$274 + 4 >> 2] = $269;
  HEAPF32[$distance >> 2] = 0.0;
  STACKTOP = sp;
  return;
 }
 HEAPF32[$distance >> 2] = $259 - $add;
 $260 = +HEAPF32[$pointB124 >> 2];
 $261 = +HEAPF32[$output >> 2];
 $sub$i88 = $260 - $261;
 $262 = +HEAPF32[$y2$i$i >> 2];
 $263 = +HEAPF32[$y$i$i94 >> 2];
 $sub3$i = $262 - $263;
 $call$i$i$i = +Math_sqrt(+($sub$i88 * $sub$i88 + $sub3$i * $sub3$i));
 if ($call$i$i$i < 1.1920928955078125e-7) {
  $sub$i88218 = $sub$i88;
  $sub3$i219 = $sub3$i;
 } else {
  $div$i = 1.0 / $call$i$i$i;
  $sub$i88218 = $sub$i88 * $div$i;
  $sub3$i219 = $sub3$i * $div$i;
 }
 HEAPF32[$output >> 2] = $257 * $sub$i88218 + $261;
 HEAPF32[$y$i$i94 >> 2] = $257 * $sub3$i219 + $263;
 HEAPF32[$pointB124 >> 2] = $260 - $258 * $sub$i88218;
 HEAPF32[$y2$i$i >> 2] = $262 - $258 * $sub3$i219;
 STACKTOP = sp;
 return;
}
function __ZN15b2ContactSolverC2EP18b2ContactSolverDef($this, $def) {
 $this = $this | 0;
 $def = $def | 0;
 var $$lcssa$i = 0, $$lcssa$i9 = 0, $$pre12 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $109 = 0, $11 = 0, $113 = 0, $114 = 0, $116 = 0, $12 = 0, $121 = 0, $122 = 0, $13 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $28 = 0, $33 = 0, $38 = 0, $39 = 0, $43 = 0, $48 = 0, $49 = 0, $55 = 0, $6 = 0, $60 = 0, $61 = 0, $65 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $81 = 0, $86 = 0, $87 = 0, $9 = 0, $91 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add$i5 = 0, $add$ptr$sum28$i = 0, $add$ptr$sum29$i = 0, $add$ptr$sum30$i = 0, $add$ptr49 = 0, $and$i = 0, $arrayidx$i$i = 0, $arrayidx64 = 0, $arrayidx7$i$i = 0, $arrayinit$element$i = 0, $arrayinit$element13$i = 0, $arrayinit$element16$i = 0, $arrayinit$element19$i = 0, $arrayinit$element5$i = 0, $arrayinit$element8$i = 0, $call$i = 0, $call$i3 = 0, $call13$i = 0, $cmp13$i$i$i = 0, $dtRatio = 0, $i$024$in$i$i = 0, $i$025$i = 0, $i$039$i = 0, $i$083 = 0, $i$123$i = 0, $i$132$i = 0, $i$220$i = 0, $i4$033$i = 0, $inc$i$i = 0, $inc23$i = 0, $inc34$i = 0, $inc67 = 0, $index$014$i$i$i = 0, $indexA$i = 0, $indexB$i = 0, $indexNoOverlapCount$0$lcssa$i = 0, $indexNoOverlapCount$037$i = 0, $indexNoOverlapCount$1$i = 0, $indexOverlapCount$0$lcssa$i = 0, $indexOverlapCount$038$i = 0, $indexOverlapCount$1$i = 0, $j$0$lcssa$i$i = 0, $j$0$lcssa30$i$i = 0, $j$020$i$i = 0, $j$081 = 0, $m_allocator = 0, $m_contacts = 0, $m_count = 0, $m_invI = 0, $m_invI22 = 0, $m_invMass = 0, $m_invMass21 = 0, $m_islandIndex = 0, $m_islandIndex20 = 0, $m_positionConstraints = 0, $m_velocityConstraints = 0, $normalMass = 0, $vararg_buffer34 = 0, $warmStarting = 0, $x$i77 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0, $i$024$in$i$i$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $vararg_buffer34 = sp;
 $indexA$i = sp + 40 | 0;
 $indexB$i = sp + 24 | 0;
 HEAP32[$this + 0 >> 2] = HEAP32[$def + 0 >> 2];
 HEAP32[$this + 4 >> 2] = HEAP32[$def + 4 >> 2];
 HEAP32[$this + 8 >> 2] = HEAP32[$def + 8 >> 2];
 HEAP32[$this + 12 >> 2] = HEAP32[$def + 12 >> 2];
 HEAP32[$this + 16 >> 2] = HEAP32[$def + 16 >> 2];
 HEAP32[$this + 20 >> 2] = HEAP32[$def + 20 >> 2];
 $0 = HEAP32[$def + 40 >> 2] | 0;
 $m_allocator = $this + 32 | 0;
 HEAP32[$m_allocator >> 2] = $0;
 $1 = HEAP32[$def + 28 >> 2] | 0;
 $m_count = $this + 48 | 0;
 HEAP32[$m_count >> 2] = $1;
 $m_positionConstraints = $this + 36 | 0;
 HEAP32[$m_positionConstraints >> 2] = __ZN16b2StackAllocator8AllocateEi($0, $1 * 88 | 0) | 0;
 $m_velocityConstraints = $this + 40 | 0;
 HEAP32[$m_velocityConstraints >> 2] = __ZN16b2StackAllocator8AllocateEi(HEAP32[$m_allocator >> 2] | 0, (HEAP32[$m_count >> 2] | 0) * 152 | 0) | 0;
 HEAP32[$this + 24 >> 2] = HEAP32[$def + 32 >> 2];
 HEAP32[$this + 28 >> 2] = HEAP32[$def + 36 >> 2];
 $6 = HEAP32[$def + 24 >> 2] | 0;
 $m_contacts = $this + 44 | 0;
 HEAP32[$m_contacts >> 2] = $6;
 $7 = HEAP32[$m_count >> 2] | 0;
 L1 : do if (($7 | 0) > 0) {
  $warmStarting = $this + 20 | 0;
  $dtRatio = $this + 8 | 0;
  $8 = $6;
  $i$083 = 0;
  while (1) {
   $9 = HEAP32[$8 + ($i$083 << 2) >> 2] | 0;
   $10 = HEAP32[$9 + 48 >> 2] | 0;
   $11 = HEAP32[$9 + 52 >> 2] | 0;
   $12 = HEAP32[$10 + 8 >> 2] | 0;
   $13 = HEAP32[$11 + 8 >> 2] | 0;
   $14 = HEAP32[$9 + 124 >> 2] | 0;
   if (($14 | 0) <= 0) break;
   $17 = +HEAPF32[(HEAP32[$11 + 12 >> 2] | 0) + 8 >> 2];
   $18 = +HEAPF32[(HEAP32[$10 + 12 >> 2] | 0) + 8 >> 2];
   $19 = HEAP32[$m_velocityConstraints >> 2] | 0;
   HEAPF32[$19 + ($i$083 * 152 | 0) + 136 >> 2] = +HEAPF32[$9 + 136 >> 2];
   HEAPF32[$19 + ($i$083 * 152 | 0) + 140 >> 2] = +HEAPF32[$9 + 140 >> 2];
   $m_islandIndex = $12 + 8 | 0;
   HEAP32[$19 + ($i$083 * 152 | 0) + 112 >> 2] = HEAP32[$m_islandIndex >> 2];
   $m_islandIndex20 = $13 + 8 | 0;
   HEAP32[$19 + ($i$083 * 152 | 0) + 116 >> 2] = HEAP32[$m_islandIndex20 >> 2];
   $m_invMass = $12 + 120 | 0;
   HEAPF32[$19 + ($i$083 * 152 | 0) + 120 >> 2] = +HEAPF32[$m_invMass >> 2];
   $m_invMass21 = $13 + 120 | 0;
   HEAPF32[$19 + ($i$083 * 152 | 0) + 124 >> 2] = +HEAPF32[$m_invMass21 >> 2];
   $m_invI = $12 + 128 | 0;
   HEAPF32[$19 + ($i$083 * 152 | 0) + 128 >> 2] = +HEAPF32[$m_invI >> 2];
   $m_invI22 = $13 + 128 | 0;
   HEAPF32[$19 + ($i$083 * 152 | 0) + 132 >> 2] = +HEAPF32[$m_invI22 >> 2];
   HEAP32[$19 + ($i$083 * 152 | 0) + 148 >> 2] = $i$083;
   HEAP32[$19 + ($i$083 * 152 | 0) + 144 >> 2] = $14;
   $normalMass = $19 + ($i$083 * 152 | 0) + 80 | 0;
   HEAP32[$normalMass + 0 >> 2] = 0;
   HEAP32[$normalMass + 4 >> 2] = 0;
   HEAP32[$normalMass + 8 >> 2] = 0;
   HEAP32[$normalMass + 12 >> 2] = 0;
   HEAP32[$normalMass + 16 >> 2] = 0;
   HEAP32[$normalMass + 20 >> 2] = 0;
   HEAP32[$normalMass + 24 >> 2] = 0;
   HEAP32[$normalMass + 28 >> 2] = 0;
   $28 = HEAP32[$m_positionConstraints >> 2] | 0;
   HEAP32[$28 + ($i$083 * 88 | 0) + 32 >> 2] = HEAP32[$m_islandIndex >> 2];
   HEAP32[$28 + ($i$083 * 88 | 0) + 36 >> 2] = HEAP32[$m_islandIndex20 >> 2];
   HEAPF32[$28 + ($i$083 * 88 | 0) + 40 >> 2] = +HEAPF32[$m_invMass >> 2];
   HEAPF32[$28 + ($i$083 * 88 | 0) + 44 >> 2] = +HEAPF32[$m_invMass21 >> 2];
   $33 = $12 + 28 | 0;
   $38 = HEAP32[$33 + 4 >> 2] | 0;
   $39 = $28 + ($i$083 * 88 | 0) + 48 | 0;
   HEAP32[$39 >> 2] = HEAP32[$33 >> 2];
   HEAP32[$39 + 4 >> 2] = $38;
   $43 = $13 + 28 | 0;
   $48 = HEAP32[$43 + 4 >> 2] | 0;
   $49 = $28 + ($i$083 * 88 | 0) + 56 | 0;
   HEAP32[$49 >> 2] = HEAP32[$43 >> 2];
   HEAP32[$49 + 4 >> 2] = $48;
   HEAPF32[$28 + ($i$083 * 88 | 0) + 64 >> 2] = +HEAPF32[$m_invI >> 2];
   HEAPF32[$28 + ($i$083 * 88 | 0) + 68 >> 2] = +HEAPF32[$m_invI22 >> 2];
   $55 = $9 + 104 | 0;
   $60 = HEAP32[$55 + 4 >> 2] | 0;
   $61 = $28 + ($i$083 * 88 | 0) + 16 | 0;
   HEAP32[$61 >> 2] = HEAP32[$55 >> 2];
   HEAP32[$61 + 4 >> 2] = $60;
   $65 = $9 + 112 | 0;
   $70 = HEAP32[$65 + 4 >> 2] | 0;
   $71 = $28 + ($i$083 * 88 | 0) + 24 | 0;
   HEAP32[$71 >> 2] = HEAP32[$65 >> 2];
   HEAP32[$71 + 4 >> 2] = $70;
   HEAP32[$28 + ($i$083 * 88 | 0) + 84 >> 2] = $14;
   HEAPF32[$28 + ($i$083 * 88 | 0) + 76 >> 2] = $18;
   HEAPF32[$28 + ($i$083 * 88 | 0) + 80 >> 2] = $17;
   HEAP32[$28 + ($i$083 * 88 | 0) + 72 >> 2] = HEAP32[$9 + 120 >> 2];
   $j$081 = 0;
   do {
    $add$ptr49 = $9 + ($j$081 * 20 | 0) + 64 | 0;
    if ((HEAP8[$warmStarting >> 0] | 0) == 0) {
     HEAPF32[$19 + ($i$083 * 152 | 0) + ($j$081 * 36 | 0) + 16 >> 2] = 0.0;
     HEAPF32[$19 + ($i$083 * 152 | 0) + ($j$081 * 36 | 0) + 20 >> 2] = 0.0;
    } else {
     HEAPF32[$19 + ($i$083 * 152 | 0) + ($j$081 * 36 | 0) + 16 >> 2] = +HEAPF32[$dtRatio >> 2] * +HEAPF32[$9 + ($j$081 * 20 | 0) + 72 >> 2];
     HEAPF32[$19 + ($i$083 * 152 | 0) + ($j$081 * 36 | 0) + 20 >> 2] = +HEAPF32[$dtRatio >> 2] * +HEAPF32[$9 + ($j$081 * 20 | 0) + 76 >> 2];
    }
    $x$i77 = $19 + ($i$083 * 152 | 0) + ($j$081 * 36 | 0) | 0;
    HEAPF32[$19 + ($i$083 * 152 | 0) + ($j$081 * 36 | 0) + 24 >> 2] = 0.0;
    HEAPF32[$19 + ($i$083 * 152 | 0) + ($j$081 * 36 | 0) + 28 >> 2] = 0.0;
    HEAPF32[$19 + ($i$083 * 152 | 0) + ($j$081 * 36 | 0) + 32 >> 2] = 0.0;
    $arrayidx64 = $28 + ($i$083 * 88 | 0) + ($j$081 << 3) | 0;
    HEAP32[$x$i77 + 0 >> 2] = 0;
    HEAP32[$x$i77 + 4 >> 2] = 0;
    HEAP32[$x$i77 + 8 >> 2] = 0;
    HEAP32[$x$i77 + 12 >> 2] = 0;
    $81 = $add$ptr49;
    $86 = HEAP32[$81 + 4 >> 2] | 0;
    $87 = $arrayidx64;
    HEAP32[$87 >> 2] = HEAP32[$81 >> 2];
    HEAP32[$87 + 4 >> 2] = $86;
    $j$081 = $j$081 + 1 | 0;
   } while (($j$081 | 0) != ($14 | 0));
   $inc67 = $i$083 + 1 | 0;
   $91 = HEAP32[$m_count >> 2] | 0;
   if (($inc67 | 0) >= ($91 | 0)) {
    $94 = $91;
    break L1;
   }
   $8 = HEAP32[$m_contacts >> 2] | 0;
   $i$083 = $inc67;
  }
  ___assert_fail(15936, 15952, 71, 16016);
 } else $94 = $7; while (0);
 if ((HEAP8[8400] | 0) != 0) {
  $call$i = __ZN16b2StackAllocator8AllocateEi(HEAP32[$m_allocator >> 2] | 0, $94 << 2) | 0;
  $95 = HEAP32[$m_count >> 2] | 0;
  if (($95 | 0) > 0) {
   $i$025$i = 0;
   do {
    HEAP32[$call$i + ($i$025$i << 2) >> 2] = $i$025$i;
    $i$025$i = $i$025$i + 1 | 0;
    $97 = HEAP32[$m_count >> 2] | 0;
   } while (($i$025$i | 0) < ($97 | 0));
   $96 = $97;
  } else $96 = $95;
  if (($96 + -3 | 0) > 0) {
   $145 = $96;
   $i$123$i = 0;
   while (1) {
    $98 = $i$123$i | 2;
    $99 = $145;
    $i$024$in$i$i = $i$123$i;
    while (1) {
     $i$024$in$i$i$looptemp = $i$024$in$i$i;
     $i$024$in$i$i = $i$024$in$i$i + 1 | 0;
     if (($i$024$in$i$i | 0) < ($99 | 0)) {
      $100 = HEAP32[$m_positionConstraints >> 2] | 0;
      $cmp13$i$i$i = ($i$123$i | 0) > ($i$024$in$i$i$looptemp | 0);
      $j$020$i$i = $i$024$in$i$i;
      L29 : while (1) {
       $101 = HEAP32[$call$i + ($j$020$i$i << 2) >> 2] | 0;
       $102 = HEAP32[$100 + ($101 * 88 | 0) + 32 >> 2] | 0;
       $103 = HEAP32[$100 + ($101 * 88 | 0) + 36 >> 2] | 0;
       if ($cmp13$i$i$i) {
        $j$0$lcssa$i$i = $j$020$i$i;
        break;
       } else $index$014$i$i$i = $i$123$i;
       while (1) {
        $104 = HEAP32[$call$i + ($index$014$i$i$i << 2) >> 2] | 0;
        $105 = HEAP32[$100 + ($104 * 88 | 0) + 32 >> 2] | 0;
        $106 = HEAP32[$100 + ($104 * 88 | 0) + 36 >> 2] | 0;
        if (($105 | 0) == ($102 | 0) | ($105 | 0) == ($103 | 0) | ($106 | 0) == ($102 | 0) | ($106 | 0) == ($103 | 0)) break;
        if (($index$014$i$i$i | 0) < ($i$024$in$i$i$looptemp | 0)) $index$014$i$i$i = $index$014$i$i$i + 1 | 0; else {
         $j$0$lcssa$i$i = $j$020$i$i;
         break L29;
        }
       }
       $inc$i$i = $j$020$i$i + 1 | 0;
       if (($inc$i$i | 0) < ($99 | 0)) $j$020$i$i = $inc$i$i; else {
        $j$0$lcssa$i$i = $inc$i$i;
        break;
       }
      }
      if (($j$0$lcssa$i$i | 0) >= ($99 | 0) | ($j$0$lcssa$i$i | 0) == ($i$024$in$i$i | 0)) {
       $j$0$lcssa30$i$i = $j$0$lcssa$i$i;
       label = 26;
      } else {
       $arrayidx$i$i = $call$i + ($i$024$in$i$i << 2) | 0;
       $107 = HEAP32[$arrayidx$i$i >> 2] | 0;
       $arrayidx7$i$i = $call$i + ($j$0$lcssa$i$i << 2) | 0;
       HEAP32[$arrayidx$i$i >> 2] = HEAP32[$arrayidx7$i$i >> 2];
       HEAP32[$arrayidx7$i$i >> 2] = $107;
      }
     } else {
      $j$0$lcssa30$i$i = $i$024$in$i$i;
      label = 26;
     }
     if ((label | 0) == 26) {
      label = 0;
      if (($j$0$lcssa30$i$i | 0) == ($99 | 0)) {
       $109 = $99;
       break;
      }
     }
     $$pre12 = HEAP32[$m_count >> 2] | 0;
     if (($i$024$in$i$i$looptemp | 0) >= ($98 | 0)) {
      $109 = $$pre12;
      break;
     } else $99 = $$pre12;
    }
    $i$123$i = $i$123$i + 4 | 0;
    if (($i$123$i | 0) >= ($109 + -3 | 0)) {
     $$lcssa$i = $109;
     break;
    } else $145 = $109;
   }
  } else $$lcssa$i = $96;
  $call13$i = __ZN16b2StackAllocator8AllocateEi(HEAP32[$m_allocator >> 2] | 0, $$lcssa$i * 88 | 0) | 0;
  _memcpy($call13$i | 0, HEAP32[$m_positionConstraints >> 2] | 0, (HEAP32[$m_count >> 2] | 0) * 88 | 0) | 0;
  $113 = HEAP32[$m_count >> 2] | 0;
  if (($113 | 0) > 0) {
   $146 = $113;
   $i$220$i = 0;
   while (1) {
    $114 = HEAP32[$call$i + ($i$220$i << 2) >> 2] | 0;
    if (($114 | 0) == ($i$220$i | 0)) $116 = $146; else {
     dest = (HEAP32[$m_positionConstraints >> 2] | 0) + ($i$220$i * 88 | 0) + 0 | 0;
     src = $call13$i + ($114 * 88 | 0) + 0 | 0;
     stop = dest + 88 | 0;
     do {
      HEAP32[dest >> 2] = HEAP32[src >> 2];
      dest = dest + 4 | 0;
      src = src + 4 | 0;
     } while ((dest | 0) < (stop | 0));
     $116 = HEAP32[$m_count >> 2] | 0;
    }
    $i$220$i = $i$220$i + 1 | 0;
    if (($i$220$i | 0) >= ($116 | 0)) break; else $146 = $116;
   }
  }
  __ZN16b2StackAllocator4FreeEPv(HEAP32[$m_allocator >> 2] | 0, $call13$i);
  __ZN16b2StackAllocator4FreeEPv(HEAP32[$m_allocator >> 2] | 0, $call$i);
 }
 if ((HEAP8[8360] | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP8[8368] | 0) != 0) __Z5b2LogPKcz(16032, $vararg_buffer34);
 $121 = HEAP32[$m_count >> 2] | 0;
 if (($121 + -3 | 0) > 0) {
  $arrayinit$element$i = $indexA$i + 4 | 0;
  $arrayinit$element5$i = $indexA$i + 8 | 0;
  $arrayinit$element8$i = $indexA$i + 12 | 0;
  $arrayinit$element13$i = $indexB$i + 4 | 0;
  $arrayinit$element16$i = $indexB$i + 8 | 0;
  $arrayinit$element19$i = $indexB$i + 12 | 0;
  $i$039$i = 0;
  $indexNoOverlapCount$037$i = 0;
  $indexOverlapCount$038$i = 0;
  while (1) {
   $122 = HEAP32[$m_positionConstraints >> 2] | 0;
   HEAP32[$indexA$i >> 2] = HEAP32[$122 + ($i$039$i * 88 | 0) + 32 >> 2];
   $add$ptr$sum28$i = $i$039$i | 1;
   HEAP32[$arrayinit$element$i >> 2] = HEAP32[$122 + ($add$ptr$sum28$i * 88 | 0) + 32 >> 2];
   $add$ptr$sum29$i = $i$039$i | 2;
   HEAP32[$arrayinit$element5$i >> 2] = HEAP32[$122 + ($add$ptr$sum29$i * 88 | 0) + 32 >> 2];
   $add$ptr$sum30$i = $i$039$i | 3;
   HEAP32[$arrayinit$element8$i >> 2] = HEAP32[$122 + ($add$ptr$sum30$i * 88 | 0) + 32 >> 2];
   HEAP32[$indexB$i >> 2] = HEAP32[$122 + ($i$039$i * 88 | 0) + 36 >> 2];
   HEAP32[$arrayinit$element13$i >> 2] = HEAP32[$122 + ($add$ptr$sum28$i * 88 | 0) + 36 >> 2];
   HEAP32[$arrayinit$element16$i >> 2] = HEAP32[$122 + ($add$ptr$sum29$i * 88 | 0) + 36 >> 2];
   HEAP32[$arrayinit$element19$i >> 2] = HEAP32[$122 + ($add$ptr$sum30$i * 88 | 0) + 36 >> 2];
   $call$i3 = __ZN15b2ContactSolver12IndexOverlapEPiS0_($indexA$i, $indexB$i) | 0;
   $131 = $call$i3 & 1;
   $inc23$i = $131 ^ 1;
   $132 = $122;
   $i4$033$i = 0;
   while (1) {
    $add$i5 = $i4$033$i + $i$039$i | 0;
    $133 = HEAP32[$132 + ($add$i5 * 88 | 0) + 32 >> 2] | 0;
    $134 = HEAP32[$132 + ($add$i5 * 88 | 0) + 36 >> 2] | 0;
    $135 = HEAP32[$132 + ($add$i5 * 88 | 0) + 84 >> 2] | 0;
    $136 = HEAP32[$132 + ($add$i5 * 88 | 0) + 72 >> 2] | 0;
    HEAP32[$vararg_buffer34 >> 2] = $i$039$i;
    HEAP32[$vararg_buffer34 + 4 >> 2] = $133;
    HEAP32[$vararg_buffer34 + 8 >> 2] = $134;
    HEAP32[$vararg_buffer34 + 12 >> 2] = $135;
    HEAP32[$vararg_buffer34 + 16 >> 2] = $136;
    __Z5b2LogPKcz(16392, $vararg_buffer34);
    if ($call$i3) __Z5b2LogPKcz(16456, $vararg_buffer34);
    __Z5b2LogPKcz(16472, $vararg_buffer34);
    $inc34$i = $i4$033$i + 1 | 0;
    if (($inc34$i | 0) == 4) break;
    $132 = HEAP32[$m_positionConstraints >> 2] | 0;
    $i4$033$i = $inc34$i;
   }
   $indexNoOverlapCount$1$i = $inc23$i + $indexNoOverlapCount$037$i | 0;
   $indexOverlapCount$1$i = $131 + $indexOverlapCount$038$i | 0;
   $i$039$i = $i$039$i + 4 | 0;
   $137 = HEAP32[$m_count >> 2] | 0;
   if (($i$039$i | 0) >= ($137 + -3 | 0)) {
    $138 = $137;
    $indexNoOverlapCount$0$lcssa$i = $indexNoOverlapCount$1$i;
    $indexOverlapCount$0$lcssa$i = $indexOverlapCount$1$i;
    break;
   } else {
    $indexNoOverlapCount$037$i = $indexNoOverlapCount$1$i;
    $indexOverlapCount$038$i = $indexOverlapCount$1$i;
   }
  }
 } else {
  $138 = $121;
  $indexNoOverlapCount$0$lcssa$i = 0;
  $indexOverlapCount$0$lcssa$i = 0;
 }
 $and$i = $138 & -4;
 if (($and$i | 0) < ($138 | 0)) {
  $i$132$i = $and$i;
  do {
   $139 = HEAP32[$m_positionConstraints >> 2] | 0;
   $140 = HEAP32[$139 + ($i$132$i * 88 | 0) + 32 >> 2] | 0;
   $141 = HEAP32[$139 + ($i$132$i * 88 | 0) + 36 >> 2] | 0;
   $142 = HEAP32[$139 + ($i$132$i * 88 | 0) + 84 >> 2] | 0;
   $143 = HEAP32[$139 + ($i$132$i * 88 | 0) + 72 >> 2] | 0;
   HEAP32[$vararg_buffer34 >> 2] = $i$132$i;
   HEAP32[$vararg_buffer34 + 4 >> 2] = $140;
   HEAP32[$vararg_buffer34 + 8 >> 2] = $141;
   HEAP32[$vararg_buffer34 + 12 >> 2] = $142;
   HEAP32[$vararg_buffer34 + 16 >> 2] = $143;
   __Z5b2LogPKcz(16480, $vararg_buffer34);
   $i$132$i = $i$132$i + 1 | 0;
   $144 = HEAP32[$m_count >> 2] | 0;
  } while (($i$132$i | 0) < ($144 | 0));
  $$lcssa$i9 = $144;
 } else $$lcssa$i9 = $138;
 if (($$lcssa$i9 | 0) <= 0) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$vararg_buffer34 >> 2] = $indexOverlapCount$0$lcssa$i;
 __Z5b2LogPKcz(16544, $vararg_buffer34);
 HEAP32[$vararg_buffer34 >> 2] = $indexNoOverlapCount$0$lcssa$i;
 __Z5b2LogPKcz(16576, $vararg_buffer34);
 STACKTOP = sp;
 return;
}
function __ZN15b2ContactSolver29InitializeVelocityConstraintsEv($this) {
 $this = $this | 0;
 var $1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0, $128 = 0.0, $129 = 0.0, $130 = 0, $134 = 0, $139 = 0, $140 = 0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0, $153 = 0.0, $154 = 0.0, $155 = 0, $159 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $172 = 0.0, $174 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $5 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $6 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $add = 0.0, $add$i = 0.0, $add$i114$i = 0.0, $add$i182$i = 0.0, $add$i198$i = 0.0, $add$i215$i = 0.0, $add$i271$i = 0.0, $add$i299$i = 0.0, $add$i88$i = 0.0, $add$i99$i = 0.0, $add117 = 0.0, $add124 = 0.0, $add131 = 0.0, $add17$i$i = 0.0, $add17$i104$i = 0.0, $add17$i187$i = 0.0, $add17$i203$i = 0.0, $add17$i276$i = 0.0, $add17$i304$i = 0.0, $add58 = 0.0, $add71 = 0.0, $arrayidx14$i = 0, $call$i = 0.0, $call$i$i$i$i = 0.0, $call$i249 = 0.0, $call2$i = 0.0, $call2$i251 = 0.0, $cond = 0.0, $cond77 = 0.0, $det$0$i = 0.0, $div$i$i = 0.0, $i$0262 = 0, $i$0324$i = 0, $i46$0326$i = 0, $inc$i = 0, $j$0260 = 0, $m_contacts = 0, $m_count = 0, $m_positionConstraints = 0, $m_positions = 0, $m_velocities = 0, $m_velocityConstraints = 0, $mul$i262$i = 0.0, $mul1$i178 = 0.0, $mul11$i = 0.0, $mul112 = 0.0, $mul115 = 0.0, $mul2$i$i = 0.0, $normal = 0, $pointCount37 = 0, $restitution = 0, $sub$i = 0.0, $sub$i$i$i = 0.0, $sub$i1 = 0.0, $sub$i112 = 0.0, $sub$i113$i = 0.0, $sub$i119 = 0.0, $sub$i126 = 0.0, $sub$i168 = 0.0, $sub$i175 = 0.0, $sub$i187 = 0.0, $sub$i194 = 0.0, $sub$i197 = 0.0, $sub$i205 = 0.0, $sub$i212$i = 0.0, $sub$i213 = 0.0, $sub$i229 = 0.0, $sub$i281$i = 0.0, $sub135 = 0.0, $sub3$i$i$i = 0.0, $sub3$i216 = 0.0, $sub3$i232 = 0.0, $sub3$i284$i = 0.0, $sub60$i = 0.0, $velocityBias = 0, $worldManifold = 0, $y$i$i = 0, $y$i189 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $worldManifold = sp;
 $m_count = $this + 48 | 0;
 if ((HEAP32[$m_count >> 2] | 0) <= 0) {
  STACKTOP = sp;
  return;
 }
 $m_velocityConstraints = $this + 40 | 0;
 $m_positionConstraints = $this + 36 | 0;
 $m_contacts = $this + 44 | 0;
 $m_positions = $this + 24 | 0;
 $m_velocities = $this + 28 | 0;
 $y$i$i = $worldManifold + 4 | 0;
 $arrayidx14$i = $worldManifold + 8 | 0;
 $i$0262 = 0;
 while (1) {
  $1 = HEAP32[$m_velocityConstraints >> 2] | 0;
  $2 = HEAP32[$m_positionConstraints >> 2] | 0;
  $5 = HEAP32[(HEAP32[$m_contacts >> 2] | 0) + (HEAP32[$1 + ($i$0262 * 152 | 0) + 148 >> 2] << 2) >> 2] | 0;
  $6 = HEAP32[$1 + ($i$0262 * 152 | 0) + 112 >> 2] | 0;
  $7 = HEAP32[$1 + ($i$0262 * 152 | 0) + 116 >> 2] | 0;
  $8 = +HEAPF32[$1 + ($i$0262 * 152 | 0) + 120 >> 2];
  $9 = +HEAPF32[$1 + ($i$0262 * 152 | 0) + 124 >> 2];
  $10 = +HEAPF32[$1 + ($i$0262 * 152 | 0) + 128 >> 2];
  $11 = +HEAPF32[$1 + ($i$0262 * 152 | 0) + 132 >> 2];
  $12 = $2 + ($i$0262 * 88 | 0) + 48 | 0;
  $18 = +HEAPF32[$12 >> 2];
  $19 = +HEAPF32[$12 + 4 >> 2];
  $20 = $2 + ($i$0262 * 88 | 0) + 56 | 0;
  $26 = +HEAPF32[$20 >> 2];
  $27 = +HEAPF32[$20 + 4 >> 2];
  $28 = HEAP32[$m_positions >> 2] | 0;
  $29 = $28 + ($6 * 12 | 0) | 0;
  $35 = +HEAPF32[$29 >> 2];
  $36 = +HEAPF32[$29 + 4 >> 2];
  $37 = +HEAPF32[$28 + ($6 * 12 | 0) + 8 >> 2];
  $38 = HEAP32[$m_velocities >> 2] | 0;
  $39 = $38 + ($6 * 12 | 0) | 0;
  $45 = +HEAPF32[$39 >> 2];
  $46 = +HEAPF32[$39 + 4 >> 2];
  $47 = +HEAPF32[$38 + ($6 * 12 | 0) + 8 >> 2];
  $48 = $28 + ($7 * 12 | 0) | 0;
  $54 = +HEAPF32[$48 >> 2];
  $55 = +HEAPF32[$48 + 4 >> 2];
  $56 = +HEAPF32[$28 + ($7 * 12 | 0) + 8 >> 2];
  $57 = $38 + ($7 * 12 | 0) | 0;
  $63 = +HEAPF32[$57 >> 2];
  $64 = +HEAPF32[$57 + 4 >> 2];
  $65 = +HEAPF32[$38 + ($7 * 12 | 0) + 8 >> 2];
  $66 = HEAP32[$5 + 124 >> 2] | 0;
  if (($66 | 0) <= 0) {
   label = 4;
   break;
  }
  $67 = +HEAPF32[$2 + ($i$0262 * 88 | 0) + 80 >> 2];
  $68 = +HEAPF32[$2 + ($i$0262 * 88 | 0) + 76 >> 2];
  $call$i249 = +Math_sin(+$37);
  $call2$i251 = +Math_cos(+$37);
  $call$i = +Math_sin(+$56);
  $call2$i = +Math_cos(+$56);
  $sub$i229 = $35 - ($18 * $call2$i251 - $19 * $call$i249);
  $sub3$i232 = $36 - ($19 * $call2$i251 + $18 * $call$i249);
  $sub$i213 = $54 - ($26 * $call2$i - $27 * $call$i);
  $sub3$i216 = $55 - ($27 * $call2$i + $26 * $call$i);
  $69 = HEAP32[$5 + 120 >> 2] | 0;
  L7 : do if (($69 | 0) == 1) {
   $88 = +HEAPF32[$5 + 104 >> 2];
   $89 = +HEAPF32[$5 + 108 >> 2];
   $sub$i212$i = $call2$i251 * $88 - $call$i249 * $89;
   $add$i215$i = $88 * $call$i249 + $call2$i251 * $89;
   $90 = +$sub$i212$i;
   $91 = +$add$i215$i;
   $92 = $worldManifold;
   HEAPF32[$92 >> 2] = $90;
   HEAPF32[$92 + 4 >> 2] = $91;
   $96 = +HEAPF32[$5 + 112 >> 2];
   $97 = +HEAPF32[$5 + 116 >> 2];
   $add$i198$i = $sub$i229 + ($call2$i251 * $96 - $call$i249 * $97);
   $add17$i203$i = $96 * $call$i249 + $call2$i251 * $97 + $sub3$i232;
   $100 = $sub$i212$i;
   $101 = $add$i215$i;
   $i$0324$i = 0;
   while (1) {
    $98 = +HEAPF32[$5 + ($i$0324$i * 20 | 0) + 64 >> 2];
    $99 = +HEAPF32[$5 + ($i$0324$i * 20 | 0) + 68 >> 2];
    $add$i182$i = $sub$i213 + ($call2$i * $98 - $call$i * $99);
    $add17$i187$i = $98 * $call$i + $call2$i * $99 + $sub3$i216;
    $sub$i1 = $68 - ($100 * ($add$i182$i - $add$i198$i) + ($add17$i187$i - $add17$i203$i) * $101);
    $102 = +(($add$i182$i - $100 * $67 + ($add$i182$i + $100 * $sub$i1)) * .5);
    $103 = +(($add17$i187$i - $101 * $67 + ($add17$i187$i + $101 * $sub$i1)) * .5);
    $104 = $worldManifold + ($i$0324$i << 3) + 8 | 0;
    HEAPF32[$104 >> 2] = $102;
    HEAPF32[$104 + 4 >> 2] = $103;
    $inc$i = $i$0324$i + 1 | 0;
    if (($inc$i | 0) >= ($66 | 0)) break L7;
    $100 = +HEAPF32[$worldManifold >> 2];
    $101 = +HEAPF32[$y$i$i >> 2];
    $i$0324$i = $inc$i;
   }
  } else if (($69 | 0) == 0) {
   HEAPF32[$worldManifold >> 2] = 1.0;
   HEAPF32[$y$i$i >> 2] = 0.0;
   $70 = +HEAPF32[$5 + 112 >> 2];
   $71 = +HEAPF32[$5 + 116 >> 2];
   $add$i271$i = $sub$i229 + ($call2$i251 * $70 - $call$i249 * $71);
   $add17$i276$i = $70 * $call$i249 + $call2$i251 * $71 + $sub3$i232;
   $72 = +HEAPF32[$5 + 64 >> 2];
   $73 = +HEAPF32[$5 + 68 >> 2];
   $add$i299$i = $sub$i213 + ($call2$i * $72 - $call$i * $73);
   $add17$i304$i = $72 * $call$i + $call2$i * $73 + $sub3$i216;
   $sub$i$i$i = $add$i271$i - $add$i299$i;
   $sub3$i$i$i = $add17$i276$i - $add17$i304$i;
   if ($sub$i$i$i * $sub$i$i$i + $sub3$i$i$i * $sub3$i$i$i > 1.4210854715202004e-14) {
    $sub$i281$i = $add$i299$i - $add$i271$i;
    $sub3$i284$i = $add17$i304$i - $add17$i276$i;
    $74 = +$sub$i281$i;
    $75 = +$sub3$i284$i;
    $76 = $worldManifold;
    HEAPF32[$76 >> 2] = $74;
    HEAPF32[$76 + 4 >> 2] = $75;
    $call$i$i$i$i = +Math_sqrt(+($sub$i281$i * $sub$i281$i + $sub3$i284$i * $sub3$i284$i));
    if ($call$i$i$i$i < 1.1920928955078125e-7) {
     $80 = $sub$i281$i;
     $81 = $sub3$i284$i;
    } else {
     $div$i$i = 1.0 / $call$i$i$i$i;
     $mul$i262$i = $sub$i281$i * $div$i$i;
     HEAPF32[$worldManifold >> 2] = $mul$i262$i;
     $mul2$i$i = $sub3$i284$i * $div$i$i;
     HEAPF32[$y$i$i >> 2] = $mul2$i$i;
     $80 = $mul$i262$i;
     $81 = $mul2$i$i;
    }
   } else {
    $80 = 1.0;
    $81 = 0.0;
   }
   $82 = +(($add$i271$i + $80 * $68 + ($add$i299$i - $80 * $67)) * .5);
   $83 = +(($add17$i276$i + $81 * $68 + ($add17$i304$i - $81 * $67)) * .5);
   $84 = $arrayidx14$i;
   HEAPF32[$84 >> 2] = $82;
   HEAPF32[$84 + 4 >> 2] = $83;
  } else if (($69 | 0) == 2) {
   $108 = +HEAPF32[$5 + 104 >> 2];
   $109 = +HEAPF32[$5 + 108 >> 2];
   $sub$i113$i = $call2$i * $108 - $call$i * $109;
   $add$i114$i = $108 * $call$i + $call2$i * $109;
   $110 = +$sub$i113$i;
   $111 = +$add$i114$i;
   $112 = $worldManifold;
   HEAPF32[$112 >> 2] = $110;
   HEAPF32[$112 + 4 >> 2] = $111;
   $116 = +HEAPF32[$5 + 112 >> 2];
   $117 = +HEAPF32[$5 + 116 >> 2];
   $add$i99$i = $sub$i213 + ($call2$i * $116 - $call$i * $117);
   $add17$i104$i = $116 * $call$i + $call2$i * $117 + $sub3$i216;
   $120 = $sub$i113$i;
   $121 = $add$i114$i;
   $i46$0326$i = 0;
   do {
    $118 = +HEAPF32[$5 + ($i46$0326$i * 20 | 0) + 64 >> 2];
    $119 = +HEAPF32[$5 + ($i46$0326$i * 20 | 0) + 68 >> 2];
    $add$i88$i = $sub$i229 + ($call2$i251 * $118 - $call$i249 * $119);
    $add17$i$i = $118 * $call$i249 + $call2$i251 * $119 + $sub3$i232;
    $sub60$i = $67 - ($120 * ($add$i88$i - $add$i99$i) + ($add17$i$i - $add17$i104$i) * $121);
    $122 = +(($add$i88$i - $120 * $68 + ($add$i88$i + $120 * $sub60$i)) * .5);
    $123 = +(($add17$i$i - $121 * $68 + ($add17$i$i + $121 * $sub60$i)) * .5);
    $124 = $worldManifold + ($i46$0326$i << 3) + 8 | 0;
    HEAPF32[$124 >> 2] = $122;
    HEAPF32[$124 + 4 >> 2] = $123;
    $i46$0326$i = $i46$0326$i + 1 | 0;
    $120 = +HEAPF32[$worldManifold >> 2];
    $121 = +HEAPF32[$y$i$i >> 2];
   } while (($i46$0326$i | 0) < ($66 | 0));
   $128 = +-$120;
   $129 = +-$121;
   $130 = $worldManifold;
   HEAPF32[$130 >> 2] = $128;
   HEAPF32[$130 + 4 >> 2] = $129;
  } while (0);
  $normal = $1 + ($i$0262 * 152 | 0) + 72 | 0;
  $134 = $worldManifold;
  $139 = HEAP32[$134 + 4 >> 2] | 0;
  $140 = $normal;
  HEAP32[$140 >> 2] = HEAP32[$134 >> 2];
  HEAP32[$140 + 4 >> 2] = $139;
  $pointCount37 = $1 + ($i$0262 * 152 | 0) + 144 | 0;
  $144 = HEAP32[$pointCount37 >> 2] | 0;
  do if (($144 | 0) > 0) {
   $y$i189 = $1 + ($i$0262 * 152 | 0) + 76 | 0;
   $add = $8 + $9;
   $restitution = $1 + ($i$0262 * 152 | 0) + 140 | 0;
   $j$0260 = 0;
   do {
    $145 = +HEAPF32[$worldManifold + ($j$0260 << 3) + 8 >> 2];
    $sub$i205 = $145 - $35;
    $146 = +HEAPF32[$worldManifold + ($j$0260 << 3) + 12 >> 2];
    $147 = +$sub$i205;
    $148 = +($146 - $36);
    $149 = $1 + ($i$0262 * 152 | 0) + ($j$0260 * 36 | 0) | 0;
    HEAPF32[$149 >> 2] = $147;
    HEAPF32[$149 + 4 >> 2] = $148;
    $sub$i197 = $145 - $54;
    $153 = +$sub$i197;
    $154 = +($146 - $55);
    $155 = $1 + ($i$0262 * 152 | 0) + ($j$0260 * 36 | 0) + 8 | 0;
    HEAPF32[$155 >> 2] = $153;
    HEAPF32[$155 + 4 >> 2] = $154;
    $159 = +HEAPF32[$y$i189 >> 2];
    $160 = +HEAPF32[$1 + ($i$0262 * 152 | 0) + ($j$0260 * 36 | 0) + 4 >> 2];
    $161 = +HEAPF32[$normal >> 2];
    $sub$i194 = $sub$i205 * $159 - $160 * $161;
    $162 = +HEAPF32[$1 + ($i$0262 * 152 | 0) + ($j$0260 * 36 | 0) + 12 >> 2];
    $sub$i187 = $159 * $sub$i197 - $161 * $162;
    $add58 = $add + $sub$i194 * $10 * $sub$i194 + $sub$i187 * $11 * $sub$i187;
    if ($add58 > 0.0) $cond = 1.0 / $add58; else $cond = 0.0;
    HEAPF32[$1 + ($i$0262 * 152 | 0) + ($j$0260 * 36 | 0) + 24 >> 2] = $cond;
    $163 = +HEAPF32[$y$i189 >> 2];
    $mul1$i178 = -+HEAPF32[$normal >> 2];
    $sub$i175 = $sub$i205 * $mul1$i178 - $163 * $160;
    $sub$i168 = $sub$i197 * $mul1$i178 - $163 * $162;
    $add71 = $add + $sub$i175 * $10 * $sub$i175 + $sub$i168 * $11 * $sub$i168;
    if ($add71 > 0.0) $cond77 = 1.0 / $add71; else $cond77 = 0.0;
    HEAPF32[$1 + ($i$0262 * 152 | 0) + ($j$0260 * 36 | 0) + 28 >> 2] = $cond77;
    $velocityBias = $1 + ($i$0262 * 152 | 0) + ($j$0260 * 36 | 0) + 32 | 0;
    HEAPF32[$velocityBias >> 2] = 0.0;
    $add$i = +HEAPF32[$normal >> 2] * ($63 - $65 * $162 - $45 + $47 * $160) + +HEAPF32[$y$i189 >> 2] * ($64 + $65 * $sub$i197 - $46 - $47 * $sub$i205);
    if ($add$i < -1.0) HEAPF32[$velocityBias >> 2] = -($add$i * +HEAPF32[$restitution >> 2]);
    $j$0260 = $j$0260 + 1 | 0;
   } while (($j$0260 | 0) != ($144 | 0));
   if ((HEAP32[$pointCount37 >> 2] | 0) == 2) {
    $172 = +HEAPF32[$y$i189 >> 2];
    $174 = +HEAPF32[$normal >> 2];
    $sub$i126 = +HEAPF32[$1 + ($i$0262 * 152 | 0) >> 2] * $172 - +HEAPF32[$1 + ($i$0262 * 152 | 0) + 4 >> 2] * $174;
    $sub$i119 = $172 * +HEAPF32[$1 + ($i$0262 * 152 | 0) + 8 >> 2] - $174 * +HEAPF32[$1 + ($i$0262 * 152 | 0) + 12 >> 2];
    $sub$i112 = $172 * +HEAPF32[$1 + ($i$0262 * 152 | 0) + 36 >> 2] - $174 * +HEAPF32[$1 + ($i$0262 * 152 | 0) + 40 >> 2];
    $sub$i = $172 * +HEAPF32[$1 + ($i$0262 * 152 | 0) + 44 >> 2] - $174 * +HEAPF32[$1 + ($i$0262 * 152 | 0) + 48 >> 2];
    $mul112 = $10 * $sub$i126;
    $mul115 = $11 * $sub$i119;
    $add117 = $add + $sub$i126 * $mul112 + $sub$i119 * $mul115;
    $add124 = $add + $sub$i112 * $10 * $sub$i112 + $sub$i * $11 * $sub$i;
    $add131 = $add + $mul112 * $sub$i112 + $mul115 * $sub$i;
    $sub135 = $add117 * $add124 - $add131 * $add131;
    if (!($add117 * $add117 < $sub135 * 1.0e3)) {
     HEAP32[$pointCount37 >> 2] = 1;
     break;
    }
    HEAPF32[$1 + ($i$0262 * 152 | 0) + 96 >> 2] = $add117;
    HEAPF32[$1 + ($i$0262 * 152 | 0) + 100 >> 2] = $add131;
    HEAPF32[$1 + ($i$0262 * 152 | 0) + 104 >> 2] = $add131;
    HEAPF32[$1 + ($i$0262 * 152 | 0) + 108 >> 2] = $add124;
    if ($sub135 != 0.0) $det$0$i = 1.0 / $sub135; else $det$0$i = $sub135;
    $mul11$i = -($det$0$i * $add131);
    HEAPF32[$1 + ($i$0262 * 152 | 0) + 80 >> 2] = $add124 * $det$0$i;
    HEAPF32[$1 + ($i$0262 * 152 | 0) + 84 >> 2] = $mul11$i;
    HEAPF32[$1 + ($i$0262 * 152 | 0) + 88 >> 2] = $mul11$i;
    HEAPF32[$1 + ($i$0262 * 152 | 0) + 92 >> 2] = $add117 * $det$0$i;
   }
  } while (0);
  $i$0262 = $i$0262 + 1 | 0;
  if (($i$0262 | 0) >= (HEAP32[$m_count >> 2] | 0)) {
   label = 32;
   break;
  }
 }
 if ((label | 0) == 4) ___assert_fail(16056, 15952, 175, 16088); else if ((label | 0) == 32) {
  STACKTOP = sp;
  return;
 }
}
function _free($mem) {
 $mem = $mem | 0;
 var $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $24 = 0, $26 = 0, $30 = 0, $36 = 0, $37 = 0, $4 = 0, $43 = 0, $44 = 0, $45 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $54 = 0, $60 = 0, $62 = 0, $65 = 0, $66 = 0, $67 = 0, $70 = 0, $71 = 0, $73 = 0, $76 = 0, $77 = 0, $9 = 0, $F502$0 = 0, $I526$0 = 0, $K575$0270 = 0, $R$0 = 0, $R$1 = 0, $R327$0 = 0, $R327$1 = 0, $RP$0 = 0, $RP355$0 = 0, $T$0$lcssa = 0, $T$0269 = 0, $add$ptr = 0, $add$ptr$sum230 = 0, $add$ptr16 = 0, $add$ptr6 = 0, $add17 = 0, $add243 = 0, $add254 = 0, $add262 = 0, $add551 = 0, $and = 0, $and5 = 0, $and537 = 0, $and541 = 0, $and546 = 0, $arrayidx = 0, $arrayidx108 = 0, $arrayidx113 = 0, $arrayidx130 = 0, $arrayidx149 = 0, $arrayidx274 = 0, $arrayidx357 = 0, $arrayidx369 = 0, $arrayidx374 = 0, $arrayidx395 = 0, $arrayidx414 = 0, $arrayidx501 = 0, $arrayidx559 = 0, $arrayidx591 = 0, $arrayidx99 = 0, $bk338 = 0, $bk82 = 0, $child = 0, $child356 = 0, $cond = 0, $dec = 0, $fd306 = 0, $fd317$pre$phiZ2D = 0, $fd342 = 0, $fd56 = 0, $fd609 = 0, $fd67$pre$phiZ2D = 0, $fd86 = 0, $head209 = 0, $head228 = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $shl500 = 0, $shl503 = 0, $shl538 = 0, $shl543 = 0, $shl565 = 0, $shr = 0, $shr263 = 0, $shr493 = 0, $shr527 = 0, $sp$0$i = 0, $sp$0$in$i = 0, sp = 0;
 sp = STACKTOP;
 if (($mem | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 $add$ptr = $mem + -8 | 0;
 $0 = HEAP32[5510] | 0;
 if ($add$ptr >>> 0 < $0 >>> 0) _abort();
 $1 = HEAP32[$mem + -4 >> 2] | 0;
 $and = $1 & 3;
 if (($and | 0) == 1) _abort();
 $and5 = $1 & -8;
 $add$ptr6 = $mem + ($and5 + -8) | 0;
 do if (($1 & 1 | 0) == 0) {
  $2 = HEAP32[$add$ptr >> 2] | 0;
  if (($and | 0) == 0) {
   STACKTOP = sp;
   return;
  }
  $add$ptr$sum230 = -8 - $2 | 0;
  $add$ptr16 = $mem + $add$ptr$sum230 | 0;
  $add17 = $2 + $and5 | 0;
  if ($add$ptr16 >>> 0 < $0 >>> 0) _abort();
  if (($add$ptr16 | 0) == (HEAP32[5511] | 0)) {
   $head209 = $mem + ($and5 + -4) | 0;
   if ((HEAP32[$head209 >> 2] & 3 | 0) != 3) {
    $p$0 = $add$ptr16;
    $psize$0 = $add17;
    break;
   }
   HEAP32[5508] = $add17;
   HEAP32[$head209 >> 2] = HEAP32[$head209 >> 2] & -2;
   HEAP32[$mem + ($add$ptr$sum230 + 4) >> 2] = $add17 | 1;
   HEAP32[$add$ptr6 >> 2] = $add17;
   STACKTOP = sp;
   return;
  }
  $shr = $2 >>> 3;
  if ($2 >>> 0 < 256) {
   $4 = HEAP32[$mem + ($add$ptr$sum230 + 8) >> 2] | 0;
   $5 = HEAP32[$mem + ($add$ptr$sum230 + 12) >> 2] | 0;
   $arrayidx = 22064 + ($shr << 1 << 2) | 0;
   if (($4 | 0) != ($arrayidx | 0)) {
    if ($4 >>> 0 < $0 >>> 0) _abort();
    if ((HEAP32[$4 + 12 >> 2] | 0) != ($add$ptr16 | 0)) _abort();
   }
   if (($5 | 0) == ($4 | 0)) {
    HEAP32[5506] = HEAP32[5506] & ~(1 << $shr);
    $p$0 = $add$ptr16;
    $psize$0 = $add17;
    break;
   }
   if (($5 | 0) == ($arrayidx | 0)) $fd67$pre$phiZ2D = $5 + 8 | 0; else {
    if ($5 >>> 0 < $0 >>> 0) _abort();
    $fd56 = $5 + 8 | 0;
    if ((HEAP32[$fd56 >> 2] | 0) == ($add$ptr16 | 0)) $fd67$pre$phiZ2D = $fd56; else _abort();
   }
   HEAP32[$4 + 12 >> 2] = $5;
   HEAP32[$fd67$pre$phiZ2D >> 2] = $4;
   $p$0 = $add$ptr16;
   $psize$0 = $add17;
   break;
  }
  $9 = HEAP32[$mem + ($add$ptr$sum230 + 24) >> 2] | 0;
  $10 = HEAP32[$mem + ($add$ptr$sum230 + 12) >> 2] | 0;
  do if (($10 | 0) == ($add$ptr16 | 0)) {
   $arrayidx99 = $mem + ($add$ptr$sum230 + 20) | 0;
   $14 = HEAP32[$arrayidx99 >> 2] | 0;
   if (($14 | 0) == 0) {
    $child = $mem + ($add$ptr$sum230 + 16) | 0;
    $15 = HEAP32[$child >> 2] | 0;
    if (($15 | 0) == 0) {
     $R$1 = 0;
     break;
    } else {
     $R$0 = $15;
     $RP$0 = $child;
    }
   } else {
    $R$0 = $14;
    $RP$0 = $arrayidx99;
   }
   while (1) {
    $arrayidx108 = $R$0 + 20 | 0;
    $16 = HEAP32[$arrayidx108 >> 2] | 0;
    if (($16 | 0) != 0) {
     $R$0 = $16;
     $RP$0 = $arrayidx108;
     continue;
    }
    $arrayidx113 = $R$0 + 16 | 0;
    $17 = HEAP32[$arrayidx113 >> 2] | 0;
    if (($17 | 0) == 0) break; else {
     $R$0 = $17;
     $RP$0 = $arrayidx113;
    }
   }
   if ($RP$0 >>> 0 < $0 >>> 0) _abort(); else {
    HEAP32[$RP$0 >> 2] = 0;
    $R$1 = $R$0;
    break;
   }
  } else {
   $11 = HEAP32[$mem + ($add$ptr$sum230 + 8) >> 2] | 0;
   if ($11 >>> 0 < $0 >>> 0) _abort();
   $bk82 = $11 + 12 | 0;
   if ((HEAP32[$bk82 >> 2] | 0) != ($add$ptr16 | 0)) _abort();
   $fd86 = $10 + 8 | 0;
   if ((HEAP32[$fd86 >> 2] | 0) == ($add$ptr16 | 0)) {
    HEAP32[$bk82 >> 2] = $10;
    HEAP32[$fd86 >> 2] = $11;
    $R$1 = $10;
    break;
   } else _abort();
  } while (0);
  if (($9 | 0) == 0) {
   $p$0 = $add$ptr16;
   $psize$0 = $add17;
  } else {
   $18 = HEAP32[$mem + ($add$ptr$sum230 + 28) >> 2] | 0;
   $arrayidx130 = 22328 + ($18 << 2) | 0;
   if (($add$ptr16 | 0) == (HEAP32[$arrayidx130 >> 2] | 0)) {
    HEAP32[$arrayidx130 >> 2] = $R$1;
    if (($R$1 | 0) == 0) {
     HEAP32[5507] = HEAP32[5507] & ~(1 << $18);
     $p$0 = $add$ptr16;
     $psize$0 = $add17;
     break;
    }
   } else {
    if ($9 >>> 0 < (HEAP32[5510] | 0) >>> 0) _abort();
    $arrayidx149 = $9 + 16 | 0;
    if ((HEAP32[$arrayidx149 >> 2] | 0) == ($add$ptr16 | 0)) HEAP32[$arrayidx149 >> 2] = $R$1; else HEAP32[$9 + 20 >> 2] = $R$1;
    if (($R$1 | 0) == 0) {
     $p$0 = $add$ptr16;
     $psize$0 = $add17;
     break;
    }
   }
   if ($R$1 >>> 0 < (HEAP32[5510] | 0) >>> 0) _abort();
   HEAP32[$R$1 + 24 >> 2] = $9;
   $24 = HEAP32[$mem + ($add$ptr$sum230 + 16) >> 2] | 0;
   do if (($24 | 0) != 0) if ($24 >>> 0 < (HEAP32[5510] | 0) >>> 0) _abort(); else {
    HEAP32[$R$1 + 16 >> 2] = $24;
    HEAP32[$24 + 24 >> 2] = $R$1;
    break;
   } while (0);
   $26 = HEAP32[$mem + ($add$ptr$sum230 + 20) >> 2] | 0;
   if (($26 | 0) == 0) {
    $p$0 = $add$ptr16;
    $psize$0 = $add17;
   } else if ($26 >>> 0 < (HEAP32[5510] | 0) >>> 0) _abort(); else {
    HEAP32[$R$1 + 20 >> 2] = $26;
    HEAP32[$26 + 24 >> 2] = $R$1;
    $p$0 = $add$ptr16;
    $psize$0 = $add17;
    break;
   }
  }
 } else {
  $p$0 = $add$ptr;
  $psize$0 = $and5;
 } while (0);
 if (!($p$0 >>> 0 < $add$ptr6 >>> 0)) _abort();
 $head228 = $mem + ($and5 + -4) | 0;
 $30 = HEAP32[$head228 >> 2] | 0;
 if (($30 & 1 | 0) == 0) _abort();
 if (($30 & 2 | 0) == 0) {
  if (($add$ptr6 | 0) == (HEAP32[5512] | 0)) {
   $add243 = (HEAP32[5509] | 0) + $psize$0 | 0;
   HEAP32[5509] = $add243;
   HEAP32[5512] = $p$0;
   HEAP32[$p$0 + 4 >> 2] = $add243 | 1;
   if (($p$0 | 0) != (HEAP32[5511] | 0)) {
    STACKTOP = sp;
    return;
   }
   HEAP32[5511] = 0;
   HEAP32[5508] = 0;
   STACKTOP = sp;
   return;
  }
  if (($add$ptr6 | 0) == (HEAP32[5511] | 0)) {
   $add254 = (HEAP32[5508] | 0) + $psize$0 | 0;
   HEAP32[5508] = $add254;
   HEAP32[5511] = $p$0;
   HEAP32[$p$0 + 4 >> 2] = $add254 | 1;
   HEAP32[$p$0 + $add254 >> 2] = $add254;
   STACKTOP = sp;
   return;
  }
  $add262 = ($30 & -8) + $psize$0 | 0;
  $shr263 = $30 >>> 3;
  do if ($30 >>> 0 < 256) {
   $36 = HEAP32[$mem + $and5 >> 2] | 0;
   $37 = HEAP32[$mem + ($and5 | 4) >> 2] | 0;
   $arrayidx274 = 22064 + ($shr263 << 1 << 2) | 0;
   if (($36 | 0) != ($arrayidx274 | 0)) {
    if ($36 >>> 0 < (HEAP32[5510] | 0) >>> 0) _abort();
    if ((HEAP32[$36 + 12 >> 2] | 0) != ($add$ptr6 | 0)) _abort();
   }
   if (($37 | 0) == ($36 | 0)) {
    HEAP32[5506] = HEAP32[5506] & ~(1 << $shr263);
    break;
   }
   if (($37 | 0) == ($arrayidx274 | 0)) $fd317$pre$phiZ2D = $37 + 8 | 0; else {
    if ($37 >>> 0 < (HEAP32[5510] | 0) >>> 0) _abort();
    $fd306 = $37 + 8 | 0;
    if ((HEAP32[$fd306 >> 2] | 0) == ($add$ptr6 | 0)) $fd317$pre$phiZ2D = $fd306; else _abort();
   }
   HEAP32[$36 + 12 >> 2] = $37;
   HEAP32[$fd317$pre$phiZ2D >> 2] = $36;
  } else {
   $43 = HEAP32[$mem + ($and5 + 16) >> 2] | 0;
   $44 = HEAP32[$mem + ($and5 | 4) >> 2] | 0;
   do if (($44 | 0) == ($add$ptr6 | 0)) {
    $arrayidx357 = $mem + ($and5 + 12) | 0;
    $49 = HEAP32[$arrayidx357 >> 2] | 0;
    if (($49 | 0) == 0) {
     $child356 = $mem + ($and5 + 8) | 0;
     $50 = HEAP32[$child356 >> 2] | 0;
     if (($50 | 0) == 0) {
      $R327$1 = 0;
      break;
     } else {
      $R327$0 = $50;
      $RP355$0 = $child356;
     }
    } else {
     $R327$0 = $49;
     $RP355$0 = $arrayidx357;
    }
    while (1) {
     $arrayidx369 = $R327$0 + 20 | 0;
     $51 = HEAP32[$arrayidx369 >> 2] | 0;
     if (($51 | 0) != 0) {
      $R327$0 = $51;
      $RP355$0 = $arrayidx369;
      continue;
     }
     $arrayidx374 = $R327$0 + 16 | 0;
     $52 = HEAP32[$arrayidx374 >> 2] | 0;
     if (($52 | 0) == 0) break; else {
      $R327$0 = $52;
      $RP355$0 = $arrayidx374;
     }
    }
    if ($RP355$0 >>> 0 < (HEAP32[5510] | 0) >>> 0) _abort(); else {
     HEAP32[$RP355$0 >> 2] = 0;
     $R327$1 = $R327$0;
     break;
    }
   } else {
    $45 = HEAP32[$mem + $and5 >> 2] | 0;
    if ($45 >>> 0 < (HEAP32[5510] | 0) >>> 0) _abort();
    $bk338 = $45 + 12 | 0;
    if ((HEAP32[$bk338 >> 2] | 0) != ($add$ptr6 | 0)) _abort();
    $fd342 = $44 + 8 | 0;
    if ((HEAP32[$fd342 >> 2] | 0) == ($add$ptr6 | 0)) {
     HEAP32[$bk338 >> 2] = $44;
     HEAP32[$fd342 >> 2] = $45;
     $R327$1 = $44;
     break;
    } else _abort();
   } while (0);
   if (($43 | 0) != 0) {
    $54 = HEAP32[$mem + ($and5 + 20) >> 2] | 0;
    $arrayidx395 = 22328 + ($54 << 2) | 0;
    if (($add$ptr6 | 0) == (HEAP32[$arrayidx395 >> 2] | 0)) {
     HEAP32[$arrayidx395 >> 2] = $R327$1;
     if (($R327$1 | 0) == 0) {
      HEAP32[5507] = HEAP32[5507] & ~(1 << $54);
      break;
     }
    } else {
     if ($43 >>> 0 < (HEAP32[5510] | 0) >>> 0) _abort();
     $arrayidx414 = $43 + 16 | 0;
     if ((HEAP32[$arrayidx414 >> 2] | 0) == ($add$ptr6 | 0)) HEAP32[$arrayidx414 >> 2] = $R327$1; else HEAP32[$43 + 20 >> 2] = $R327$1;
     if (($R327$1 | 0) == 0) break;
    }
    if ($R327$1 >>> 0 < (HEAP32[5510] | 0) >>> 0) _abort();
    HEAP32[$R327$1 + 24 >> 2] = $43;
    $60 = HEAP32[$mem + ($and5 + 8) >> 2] | 0;
    do if (($60 | 0) != 0) if ($60 >>> 0 < (HEAP32[5510] | 0) >>> 0) _abort(); else {
     HEAP32[$R327$1 + 16 >> 2] = $60;
     HEAP32[$60 + 24 >> 2] = $R327$1;
     break;
    } while (0);
    $62 = HEAP32[$mem + ($and5 + 12) >> 2] | 0;
    if (($62 | 0) != 0) if ($62 >>> 0 < (HEAP32[5510] | 0) >>> 0) _abort(); else {
     HEAP32[$R327$1 + 20 >> 2] = $62;
     HEAP32[$62 + 24 >> 2] = $R327$1;
     break;
    }
   }
  } while (0);
  HEAP32[$p$0 + 4 >> 2] = $add262 | 1;
  HEAP32[$p$0 + $add262 >> 2] = $add262;
  if (($p$0 | 0) == (HEAP32[5511] | 0)) {
   HEAP32[5508] = $add262;
   STACKTOP = sp;
   return;
  } else $psize$1 = $add262;
 } else {
  HEAP32[$head228 >> 2] = $30 & -2;
  HEAP32[$p$0 + 4 >> 2] = $psize$0 | 1;
  HEAP32[$p$0 + $psize$0 >> 2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $shr493 = $psize$1 >>> 3;
 if ($psize$1 >>> 0 < 256) {
  $shl500 = $shr493 << 1;
  $arrayidx501 = 22064 + ($shl500 << 2) | 0;
  $65 = HEAP32[5506] | 0;
  $shl503 = 1 << $shr493;
  if (($65 & $shl503 | 0) == 0) {
   HEAP32[5506] = $65 | $shl503;
   $$pre$phiZ2D = 22064 + ($shl500 + 2 << 2) | 0;
   $F502$0 = $arrayidx501;
  } else {
   $66 = 22064 + ($shl500 + 2 << 2) | 0;
   $67 = HEAP32[$66 >> 2] | 0;
   if ($67 >>> 0 < (HEAP32[5510] | 0) >>> 0) _abort(); else {
    $$pre$phiZ2D = $66;
    $F502$0 = $67;
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $p$0;
  HEAP32[$F502$0 + 12 >> 2] = $p$0;
  HEAP32[$p$0 + 8 >> 2] = $F502$0;
  HEAP32[$p$0 + 12 >> 2] = $arrayidx501;
  STACKTOP = sp;
  return;
 }
 $shr527 = $psize$1 >>> 8;
 if (($shr527 | 0) == 0) $I526$0 = 0; else if ($psize$1 >>> 0 > 16777215) $I526$0 = 31; else {
  $and537 = ($shr527 + 1048320 | 0) >>> 16 & 8;
  $shl538 = $shr527 << $and537;
  $and541 = ($shl538 + 520192 | 0) >>> 16 & 4;
  $shl543 = $shl538 << $and541;
  $and546 = ($shl543 + 245760 | 0) >>> 16 & 2;
  $add551 = 14 - ($and541 | $and537 | $and546) + ($shl543 << $and546 >>> 15) | 0;
  $I526$0 = $psize$1 >>> ($add551 + 7 | 0) & 1 | $add551 << 1;
 }
 $arrayidx559 = 22328 + ($I526$0 << 2) | 0;
 HEAP32[$p$0 + 28 >> 2] = $I526$0;
 HEAP32[$p$0 + 20 >> 2] = 0;
 HEAP32[$p$0 + 16 >> 2] = 0;
 $70 = HEAP32[5507] | 0;
 $shl565 = 1 << $I526$0;
 L199 : do if (($70 & $shl565 | 0) == 0) {
  HEAP32[5507] = $70 | $shl565;
  HEAP32[$arrayidx559 >> 2] = $p$0;
  HEAP32[$p$0 + 24 >> 2] = $arrayidx559;
  HEAP32[$p$0 + 12 >> 2] = $p$0;
  HEAP32[$p$0 + 8 >> 2] = $p$0;
 } else {
  $71 = HEAP32[$arrayidx559 >> 2] | 0;
  if (($I526$0 | 0) == 31) $cond = 0; else $cond = 25 - ($I526$0 >>> 1) | 0;
  L205 : do if ((HEAP32[$71 + 4 >> 2] & -8 | 0) == ($psize$1 | 0)) $T$0$lcssa = $71; else {
   $K575$0270 = $psize$1 << $cond;
   $T$0269 = $71;
   while (1) {
    $arrayidx591 = $T$0269 + ($K575$0270 >>> 31 << 2) + 16 | 0;
    $73 = HEAP32[$arrayidx591 >> 2] | 0;
    if (($73 | 0) == 0) break;
    if ((HEAP32[$73 + 4 >> 2] & -8 | 0) == ($psize$1 | 0)) {
     $T$0$lcssa = $73;
     break L205;
    } else {
     $K575$0270 = $K575$0270 << 1;
     $T$0269 = $73;
    }
   }
   if ($arrayidx591 >>> 0 < (HEAP32[5510] | 0) >>> 0) _abort(); else {
    HEAP32[$arrayidx591 >> 2] = $p$0;
    HEAP32[$p$0 + 24 >> 2] = $T$0269;
    HEAP32[$p$0 + 12 >> 2] = $p$0;
    HEAP32[$p$0 + 8 >> 2] = $p$0;
    break L199;
   }
  } while (0);
  $fd609 = $T$0$lcssa + 8 | 0;
  $76 = HEAP32[$fd609 >> 2] | 0;
  $77 = HEAP32[5510] | 0;
  if ($T$0$lcssa >>> 0 < $77 >>> 0) _abort();
  if ($76 >>> 0 < $77 >>> 0) _abort(); else {
   HEAP32[$76 + 12 >> 2] = $p$0;
   HEAP32[$fd609 >> 2] = $p$0;
   HEAP32[$p$0 + 8 >> 2] = $76;
   HEAP32[$p$0 + 12 >> 2] = $T$0$lcssa;
   HEAP32[$p$0 + 24 >> 2] = 0;
   break;
  }
 } while (0);
 $dec = (HEAP32[5514] | 0) + -1 | 0;
 HEAP32[5514] = $dec;
 if (($dec | 0) == 0) $sp$0$in$i = 22480 | 0; else {
  STACKTOP = sp;
  return;
 }
 while (1) {
  $sp$0$i = HEAP32[$sp$0$in$i >> 2] | 0;
  if (($sp$0$i | 0) == 0) break; else $sp$0$in$i = $sp$0$i + 8 | 0;
 }
 HEAP32[5514] = -1;
 STACKTOP = sp;
 return;
}
function __ZN15b2ContactSolver24SolveVelocityConstraintsEv($this) {
 $this = $this | 0;
 var $1 = 0, $10 = 0, $16 = 0, $2 = 0, $22 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $33 = 0.0, $34 = 0.0, $36 = 0.0, $38 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $43 = 0.0, $47 = 0.0, $48 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $53 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $62 = 0.0, $63 = 0.0, $65 = 0.0, $66 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $71 = 0.0, $75 = 0.0, $76 = 0.0, $8 = 0, $83 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0, $9 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0, $add = 0.0, $add$i177 = 0.0, $add$i264 = 0.0, $add$i352 = 0.0, $add$i440 = 0.0, $add$i475 = 0.0, $add$ptr = 0, $add12$i = 0.0, $add3$i180 = 0.0, $add3$i267 = 0.0, $add3$i355 = 0.0, $add3$i443 = 0.0, $add60 = 0.0, $cond$i = 0.0, $cond$i$i = 0.0, $cond$i2$i = 0.0, $i$0943 = 0, $j$0934 = 0, $m_count = 0, $m_velocities = 0, $m_velocityConstraints = 0, $mul$i184 = 0.0, $mul$i190 = 0.0, $mul$i271 = 0.0, $mul$i277 = 0.0, $mul$i359 = 0.0, $mul$i365 = 0.0, $mul$i447 = 0.0, $mul$i453 = 0.0, $mul$i623 = 0.0, $mul$i710 = 0.0, $mul1$i = 0.0, $mul1$i186 = 0.0, $mul1$i192 = 0.0, $mul1$i273 = 0.0, $mul1$i279 = 0.0, $mul1$i361 = 0.0, $mul1$i367 = 0.0, $mul1$i449 = 0.0, $mul1$i455 = 0.0, $mul1$i625 = 0.0, $mul1$i712 = 0.0, $mul148 = 0.0, $mul197 = 0.0, $mul24 = 0.0, $normalImpulse59 = 0, $normalImpulse82 = 0, $normalImpulse83 = 0, $pointCount4 = 0, $sub$i197 = 0.0, $sub$i284 = 0.0, $sub$i372 = 0.0, $sub$i460 = 0.0, $sub$i467 = 0.0, $sub$i480 = 0.0, $sub2$i = 0.0, $sub25 = 0.0, $sub28 = 0.0, $sub3$i = 0.0, $sub3$i287 = 0.0, $sub3$i375 = 0.0, $sub3$i463 = 0.0, $sub4$i483 = 0.0, $sub63 = 0.0, $tangentImpulse = 0, $v = 0, $vA$sroa$0$0$load908923 = 0.0, $vA$sroa$0$0$load908924931 = 0.0, $vA$sroa$1$4$load918925 = 0.0, $vA$sroa$1$4$load918926930 = 0.0, $vB$sroa$0$0$load888919 = 0.0, $vB$sroa$0$0$load888920933 = 0.0, $vB$sroa$1$4$load898921 = 0.0, $vB$sroa$1$4$load898922932 = 0.0, $wA$0936 = 0.0, $wA$1 = 0.0, $wB$0935 = 0.0, $wB$1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $m_count = $this + 48 | 0;
 if ((HEAP32[$m_count >> 2] | 0) <= 0) {
  STACKTOP = sp;
  return;
 }
 $m_velocityConstraints = $this + 40 | 0;
 $m_velocities = $this + 28 | 0;
 $9 = HEAP32[$m_velocities >> 2] | 0;
 $i$0943 = 0;
 L4 : while (1) {
  $1 = HEAP32[$m_velocityConstraints >> 2] | 0;
  $add$ptr = $1 + ($i$0943 * 152 | 0) | 0;
  $2 = HEAP32[$1 + ($i$0943 * 152 | 0) + 112 >> 2] | 0;
  $3 = HEAP32[$1 + ($i$0943 * 152 | 0) + 116 >> 2] | 0;
  $4 = +HEAPF32[$1 + ($i$0943 * 152 | 0) + 120 >> 2];
  $5 = +HEAPF32[$1 + ($i$0943 * 152 | 0) + 128 >> 2];
  $6 = +HEAPF32[$1 + ($i$0943 * 152 | 0) + 124 >> 2];
  $7 = +HEAPF32[$1 + ($i$0943 * 152 | 0) + 132 >> 2];
  $pointCount4 = $1 + ($i$0943 * 152 | 0) + 144 | 0;
  $8 = HEAP32[$pointCount4 >> 2] | 0;
  $v = $9 + ($2 * 12 | 0) | 0;
  $10 = $v;
  $16 = $9 + ($3 * 12 | 0) | 0;
  $22 = $1 + ($i$0943 * 152 | 0) + 72 | 0;
  $28 = +HEAPF32[$22 >> 2];
  $29 = +HEAPF32[$22 + 4 >> 2];
  $mul1$i = -$28;
  $30 = +HEAPF32[$1 + ($i$0943 * 152 | 0) + 136 >> 2];
  if (!(($8 + -1 | 0) >>> 0 < 2)) {
   label = 5;
   break;
  }
  $33 = +HEAPF32[$16 + 4 >> 2];
  $34 = +HEAPF32[$16 >> 2];
  $36 = +HEAPF32[$10 + 4 >> 2];
  $j$0934 = 0;
  $vA$sroa$0$0$load908924931 = +HEAPF32[$10 >> 2];
  $vA$sroa$1$4$load918926930 = $36;
  $vB$sroa$0$0$load888920933 = $34;
  $vB$sroa$1$4$load898922932 = $33;
  $wA$0936 = +HEAPF32[$9 + ($2 * 12 | 0) + 8 >> 2];
  $wB$0935 = +HEAPF32[$9 + ($3 * 12 | 0) + 8 >> 2];
  do {
   $38 = +HEAPF32[$1 + ($i$0943 * 152 | 0) + ($j$0934 * 36 | 0) + 12 >> 2];
   $40 = +HEAPF32[$1 + ($i$0943 * 152 | 0) + ($j$0934 * 36 | 0) + 8 >> 2];
   $41 = +HEAPF32[$1 + ($i$0943 * 152 | 0) + ($j$0934 * 36 | 0) + 4 >> 2];
   $43 = +HEAPF32[$1 + ($i$0943 * 152 | 0) + ($j$0934 * 36 | 0) >> 2];
   $mul24 = $30 * +HEAPF32[$1 + ($i$0943 * 152 | 0) + ($j$0934 * 36 | 0) + 16 >> 2];
   $tangentImpulse = $1 + ($i$0943 * 152 | 0) + ($j$0934 * 36 | 0) + 20 | 0;
   $47 = +HEAPF32[$tangentImpulse >> 2];
   $add = $47 - +HEAPF32[$1 + ($i$0943 * 152 | 0) + ($j$0934 * 36 | 0) + 28 >> 2] * ($29 * ($vB$sroa$0$0$load888920933 - $wB$0935 * $38 - $vA$sroa$0$0$load908924931 + $wA$0936 * $41) + ($vB$sroa$1$4$load898922932 + $wB$0935 * $40 - $vA$sroa$1$4$load918926930 - $wA$0936 * $43) * $mul1$i);
   $sub25 = -$mul24;
   $cond$i$i = $add < $mul24 ? $add : $mul24;
   $cond$i2$i = $cond$i$i < $sub25 ? $sub25 : $cond$i$i;
   $sub28 = $cond$i2$i - $47;
   HEAPF32[$tangentImpulse >> 2] = $cond$i2$i;
   $mul$i710 = $29 * $sub28;
   $mul1$i712 = $sub28 * $mul1$i;
   $vA$sroa$0$0$load908924931 = $vA$sroa$0$0$load908924931 - $4 * $mul$i710;
   $vA$sroa$1$4$load918926930 = $vA$sroa$1$4$load918926930 - $4 * $mul1$i712;
   $wA$0936 = $wA$0936 - $5 * ($43 * $mul1$i712 - $41 * $mul$i710);
   $vB$sroa$0$0$load888920933 = $vB$sroa$0$0$load888920933 + $6 * $mul$i710;
   $vB$sroa$1$4$load898922932 = $vB$sroa$1$4$load898922932 + $6 * $mul1$i712;
   $wB$0935 = $wB$0935 + $7 * ($40 * $mul1$i712 - $38 * $mul$i710);
   $j$0934 = $j$0934 + 1 | 0;
  } while (($j$0934 | 0) != ($8 | 0));
  do if ((HEAP32[$pointCount4 >> 2] | 0) == 1) {
   $48 = +HEAPF32[$1 + ($i$0943 * 152 | 0) + 12 >> 2];
   $50 = +HEAPF32[$1 + ($i$0943 * 152 | 0) + 8 >> 2];
   $51 = +HEAPF32[$1 + ($i$0943 * 152 | 0) + 4 >> 2];
   $53 = +HEAPF32[$add$ptr >> 2];
   $normalImpulse59 = $1 + ($i$0943 * 152 | 0) + 16 | 0;
   $57 = +HEAPF32[$normalImpulse59 >> 2];
   $add60 = $57 - +HEAPF32[$1 + ($i$0943 * 152 | 0) + 24 >> 2] * ($28 * ($vB$sroa$0$0$load888920933 - $wB$0935 * $48 - $vA$sroa$0$0$load908924931 + $wA$0936 * $51) + $29 * ($vB$sroa$1$4$load898922932 + $wB$0935 * $50 - $vA$sroa$1$4$load918926930 - $wA$0936 * $53) - +HEAPF32[$1 + ($i$0943 * 152 | 0) + 32 >> 2]);
   $cond$i = $add60 > 0.0 ? $add60 : 0.0;
   $sub63 = $cond$i - $57;
   HEAPF32[$normalImpulse59 >> 2] = $cond$i;
   $mul$i623 = $28 * $sub63;
   $mul1$i625 = $29 * $sub63;
   $vA$sroa$0$0$load908923 = $vA$sroa$0$0$load908924931 - $4 * $mul$i623;
   $vA$sroa$1$4$load918925 = $vA$sroa$1$4$load918926930 - $4 * $mul1$i625;
   $vB$sroa$0$0$load888919 = $vB$sroa$0$0$load888920933 + $6 * $mul$i623;
   $vB$sroa$1$4$load898921 = $vB$sroa$1$4$load898922932 + $6 * $mul1$i625;
   $wA$1 = $wA$0936 - $5 * ($53 * $mul1$i625 - $51 * $mul$i623);
   $wB$1 = $wB$0935 + $7 * ($50 * $mul1$i625 - $48 * $mul$i623);
  } else {
   $normalImpulse82 = $1 + ($i$0943 * 152 | 0) + 16 | 0;
   $58 = +HEAPF32[$normalImpulse82 >> 2];
   $normalImpulse83 = $1 + ($i$0943 * 152 | 0) + 52 | 0;
   $59 = +HEAPF32[$normalImpulse83 >> 2];
   if (!($58 >= 0.0) | !($59 >= 0.0)) {
    label = 10;
    break L4;
   }
   $60 = +HEAPF32[$1 + ($i$0943 * 152 | 0) + 12 >> 2];
   $62 = +HEAPF32[$1 + ($i$0943 * 152 | 0) + 8 >> 2];
   $63 = +HEAPF32[$1 + ($i$0943 * 152 | 0) + 4 >> 2];
   $65 = +HEAPF32[$add$ptr >> 2];
   $66 = +HEAPF32[$1 + ($i$0943 * 152 | 0) + 48 >> 2];
   $68 = +HEAPF32[$1 + ($i$0943 * 152 | 0) + 44 >> 2];
   $69 = +HEAPF32[$1 + ($i$0943 * 152 | 0) + 40 >> 2];
   $71 = +HEAPF32[$1 + ($i$0943 * 152 | 0) + 36 >> 2];
   $75 = +HEAPF32[$1 + ($i$0943 * 152 | 0) + 104 >> 2];
   $76 = +HEAPF32[$1 + ($i$0943 * 152 | 0) + 100 >> 2];
   $sub$i480 = $28 * ($vB$sroa$0$0$load888920933 - $wB$0935 * $60 - $vA$sroa$0$0$load908924931 + $wA$0936 * $63) + $29 * ($vB$sroa$1$4$load898922932 + $wB$0935 * $62 - $vA$sroa$1$4$load918926930 - $wA$0936 * $65) - +HEAPF32[$1 + ($i$0943 * 152 | 0) + 32 >> 2] - ($58 * +HEAPF32[$1 + ($i$0943 * 152 | 0) + 96 >> 2] + $59 * $75);
   $sub4$i483 = $28 * ($vB$sroa$0$0$load888920933 - $wB$0935 * $66 - $vA$sroa$0$0$load908924931 + $wA$0936 * $69) + $29 * ($vB$sroa$1$4$load898922932 + $wB$0935 * $68 - $vA$sroa$1$4$load918926930 - $wA$0936 * $71) - +HEAPF32[$1 + ($i$0943 * 152 | 0) + 68 >> 2] - ($58 * $76 + $59 * +HEAPF32[$1 + ($i$0943 * 152 | 0) + 108 >> 2]);
   $add$i475 = +HEAPF32[$1 + ($i$0943 * 152 | 0) + 80 >> 2] * $sub$i480 + +HEAPF32[$1 + ($i$0943 * 152 | 0) + 88 >> 2] * $sub4$i483;
   $add12$i = $sub$i480 * +HEAPF32[$1 + ($i$0943 * 152 | 0) + 84 >> 2] + $sub4$i483 * +HEAPF32[$1 + ($i$0943 * 152 | 0) + 92 >> 2];
   $sub$i467 = -$add$i475;
   $sub2$i = -$add12$i;
   if (!(!($add$i475 <= -0.0) | !($add12$i <= -0.0))) {
    $sub$i460 = $sub$i467 - $58;
    $sub3$i463 = $sub2$i - $59;
    $mul$i453 = $28 * $sub$i460;
    $mul1$i455 = $29 * $sub$i460;
    $mul$i447 = $28 * $sub3$i463;
    $mul1$i449 = $29 * $sub3$i463;
    $add$i440 = $mul$i453 + $mul$i447;
    $add3$i443 = $mul1$i455 + $mul1$i449;
    HEAPF32[$normalImpulse82 >> 2] = $sub$i467;
    HEAPF32[$normalImpulse83 >> 2] = $sub2$i;
    $vA$sroa$0$0$load908923 = $vA$sroa$0$0$load908924931 - $4 * $add$i440;
    $vA$sroa$1$4$load918925 = $vA$sroa$1$4$load918926930 - $4 * $add3$i443;
    $vB$sroa$0$0$load888919 = $vB$sroa$0$0$load888920933 + $6 * $add$i440;
    $vB$sroa$1$4$load898921 = $vB$sroa$1$4$load898922932 + $6 * $add3$i443;
    $wA$1 = $wA$0936 - $5 * ($65 * $mul1$i455 - $63 * $mul$i453 + ($71 * $mul1$i449 - $69 * $mul$i447));
    $wB$1 = $wB$0935 + $7 * ($62 * $mul1$i455 - $60 * $mul$i453 + ($68 * $mul1$i449 - $66 * $mul$i447));
    break;
   }
   $83 = $sub$i480 * +HEAPF32[$1 + ($i$0943 * 152 | 0) + 24 >> 2];
   $mul148 = -$83;
   if ($83 <= -0.0) if ($sub4$i483 + $76 * $mul148 >= 0.0) {
    $sub$i372 = $mul148 - $58;
    $sub3$i375 = 0.0 - $59;
    $mul$i365 = $28 * $sub$i372;
    $mul1$i367 = $29 * $sub$i372;
    $mul$i359 = $28 * $sub3$i375;
    $mul1$i361 = $29 * $sub3$i375;
    $add$i352 = $mul$i359 + $mul$i365;
    $add3$i355 = $mul1$i361 + $mul1$i367;
    HEAPF32[$normalImpulse82 >> 2] = $mul148;
    HEAPF32[$normalImpulse83 >> 2] = 0.0;
    $vA$sroa$0$0$load908923 = $vA$sroa$0$0$load908924931 - $4 * $add$i352;
    $vA$sroa$1$4$load918925 = $vA$sroa$1$4$load918926930 - $4 * $add3$i355;
    $vB$sroa$0$0$load888919 = $vB$sroa$0$0$load888920933 + $6 * $add$i352;
    $vB$sroa$1$4$load898921 = $vB$sroa$1$4$load898922932 + $6 * $add3$i355;
    $wA$1 = $wA$0936 - $5 * ($mul1$i367 * $65 - $mul$i365 * $63 + ($mul1$i361 * $71 - $mul$i359 * $69));
    $wB$1 = $wB$0935 + $7 * ($mul1$i367 * $62 - $mul$i365 * $60 + ($mul1$i361 * $68 - $mul$i359 * $66));
    break;
   }
   $85 = $sub4$i483 * +HEAPF32[$1 + ($i$0943 * 152 | 0) + 60 >> 2];
   $mul197 = -$85;
   if ($85 <= -0.0) if ($sub$i480 + $75 * $mul197 >= 0.0) {
    $sub$i284 = 0.0 - $58;
    $sub3$i287 = $mul197 - $59;
    $mul$i277 = $28 * $sub$i284;
    $mul1$i279 = $29 * $sub$i284;
    $mul$i271 = $28 * $sub3$i287;
    $mul1$i273 = $29 * $sub3$i287;
    $add$i264 = $mul$i277 + $mul$i271;
    $add3$i267 = $mul1$i279 + $mul1$i273;
    HEAPF32[$normalImpulse82 >> 2] = 0.0;
    HEAPF32[$normalImpulse83 >> 2] = $mul197;
    $vA$sroa$0$0$load908923 = $vA$sroa$0$0$load908924931 - $4 * $add$i264;
    $vA$sroa$1$4$load918925 = $vA$sroa$1$4$load918926930 - $4 * $add3$i267;
    $vB$sroa$0$0$load888919 = $vB$sroa$0$0$load888920933 + $6 * $add$i264;
    $vB$sroa$1$4$load898921 = $vB$sroa$1$4$load898922932 + $6 * $add3$i267;
    $wA$1 = $wA$0936 - $5 * ($mul1$i279 * $65 - $mul$i277 * $63 + ($mul1$i273 * $71 - $mul$i271 * $69));
    $wB$1 = $wB$0935 + $7 * ($mul1$i279 * $62 - $mul$i277 * $60 + ($mul1$i273 * $68 - $mul$i271 * $66));
    break;
   }
   if (!($sub$i480 >= 0.0) | !($sub4$i483 >= 0.0)) {
    $vA$sroa$0$0$load908923 = $vA$sroa$0$0$load908924931;
    $vA$sroa$1$4$load918925 = $vA$sroa$1$4$load918926930;
    $vB$sroa$0$0$load888919 = $vB$sroa$0$0$load888920933;
    $vB$sroa$1$4$load898921 = $vB$sroa$1$4$load898922932;
    $wA$1 = $wA$0936;
    $wB$1 = $wB$0935;
   } else {
    $sub$i197 = 0.0 - $58;
    $sub3$i = 0.0 - $59;
    $mul$i190 = $28 * $sub$i197;
    $mul1$i192 = $29 * $sub$i197;
    $mul$i184 = $28 * $sub3$i;
    $mul1$i186 = $29 * $sub3$i;
    $add$i177 = $mul$i190 + $mul$i184;
    $add3$i180 = $mul1$i192 + $mul1$i186;
    HEAPF32[$normalImpulse82 >> 2] = 0.0;
    HEAPF32[$normalImpulse83 >> 2] = 0.0;
    $vA$sroa$0$0$load908923 = $vA$sroa$0$0$load908924931 - $4 * $add$i177;
    $vA$sroa$1$4$load918925 = $vA$sroa$1$4$load918926930 - $4 * $add3$i180;
    $vB$sroa$0$0$load888919 = $vB$sroa$0$0$load888920933 + $6 * $add$i177;
    $vB$sroa$1$4$load898921 = $vB$sroa$1$4$load898922932 + $6 * $add3$i180;
    $wA$1 = $wA$0936 - $5 * ($mul1$i192 * $65 - $mul$i190 * $63 + ($mul1$i186 * $71 - $mul$i184 * $69));
    $wB$1 = $wB$0935 + $7 * ($mul1$i192 * $62 - $mul$i190 * $60 + ($mul1$i186 * $68 - $mul$i184 * $66));
   }
  } while (0);
  $86 = +$vA$sroa$0$0$load908923;
  $87 = +$vA$sroa$1$4$load918925;
  $88 = $v;
  HEAPF32[$88 >> 2] = $86;
  HEAPF32[$88 + 4 >> 2] = $87;
  $92 = HEAP32[$m_velocities >> 2] | 0;
  HEAPF32[$92 + ($2 * 12 | 0) + 8 >> 2] = $wA$1;
  $93 = +$vB$sroa$0$0$load888919;
  $94 = +$vB$sroa$1$4$load898921;
  $95 = $92 + ($3 * 12 | 0) | 0;
  HEAPF32[$95 >> 2] = $93;
  HEAPF32[$95 + 4 >> 2] = $94;
  $9 = HEAP32[$m_velocities >> 2] | 0;
  HEAPF32[$9 + ($3 * 12 | 0) + 8 >> 2] = $wB$1;
  $i$0943 = $i$0943 + 1 | 0;
  if (($i$0943 | 0) >= (HEAP32[$m_count >> 2] | 0)) {
   label = 22;
   break;
  }
 }
 if ((label | 0) == 5) ___assert_fail(16120, 15952, 318, 16160); else if ((label | 0) == 10) ___assert_fail(16192, 15952, 413, 16160); else if ((label | 0) == 22) {
  STACKTOP = sp;
  return;
 }
}
function __ZN11b2GearJoint23InitVelocityConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $$in = 0.0, $0 = 0, $1 = 0, $100 = 0.0, $101 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0, $116 = 0.0, $118 = 0.0, $119 = 0.0, $120 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0.0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $2 = 0, $23 = 0, $24 = 0, $28 = 0, $3 = 0, $33 = 0, $34 = 0, $38 = 0, $4 = 0, $40 = 0, $43 = 0, $44 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $99 = 0.0, $add$i = 0.0, $add$i185 = 0.0, $add160$pn = 0.0, $call$i$i = 0.0, $call$i$i35 = 0.0, $call$i$i39 = 0.0, $call$i$i43 = 0.0, $call2$i$i = 0.0, $call2$i$i37 = 0.0, $call2$i$i41 = 0.0, $call2$i$i45 = 0.0, $cond = 0.0, $m_impulse212 = 0, $m_indexA = 0, $m_indexB = 0, $m_indexC = 0, $m_indexD = 0, $m_lcA = 0, $m_lcB = 0, $m_lcC = 0, $m_mass = 0, $mul$i131 = 0.0, $mul1$i133 = 0.0, $mul136 = 0.0, $mul140 = 0.0, $mul171 = 0.0, $mul182 = 0.0, $mul193 = 0.0, $mul203 = 0.0, $storemerge34 = 0.0, $sub$i = 0.0, $sub$i150 = 0.0, $sub$i170 = 0.0, $sub$i182 = 0.0, $sub$i196 = 0.0, $sub$i203 = 0.0, $sub$i50 = 0.0, $sub$i68 = 0.0, $sub3$i = 0.0, $sub3$i153 = 0.0, $sub3$i173 = 0.0, $sub3$i71 = 0.0, $v217 = 0, $v225 = 0, $v233 = 0, $v241 = 0, $vA$sroa$0$0$load234242 = 0.0, $vA$sroa$1$4$load235243 = 0.0, $vB$sroa$0$0$load232240 = 0.0, $vB$sroa$1$4$load233241 = 0.0, $vC$sroa$0$0$load230238 = 0.0, $vC$sroa$1$4$load231239 = 0.0, $vD$sroa$0$0$load228236 = 0.0, $vD$sroa$1$4$load229237 = 0.0, $velocities = 0, $w221 = 0, $w229 = 0, $w237 = 0, $w245 = 0, $wA$0 = 0.0, $wB$0 = 0.0, $wC$0 = 0.0, $wD$0 = 0.0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this + 48 >> 2] | 0;
 $1 = HEAP32[$0 + 8 >> 2] | 0;
 $m_indexA = $this + 160 | 0;
 HEAP32[$m_indexA >> 2] = $1;
 $2 = HEAP32[$this + 52 >> 2] | 0;
 $3 = HEAP32[$2 + 8 >> 2] | 0;
 $m_indexB = $this + 164 | 0;
 HEAP32[$m_indexB >> 2] = $3;
 $4 = HEAP32[$this + 84 >> 2] | 0;
 $5 = HEAP32[$4 + 8 >> 2] | 0;
 $m_indexC = $this + 168 | 0;
 HEAP32[$m_indexC >> 2] = $5;
 $6 = HEAP32[$this + 88 >> 2] | 0;
 $7 = HEAP32[$6 + 8 >> 2] | 0;
 $m_indexD = $this + 172 | 0;
 HEAP32[$m_indexD >> 2] = $7;
 $m_lcA = $this + 176 | 0;
 $8 = $0 + 28 | 0;
 $13 = HEAP32[$8 + 4 >> 2] | 0;
 $14 = $m_lcA;
 HEAP32[$14 >> 2] = HEAP32[$8 >> 2];
 HEAP32[$14 + 4 >> 2] = $13;
 $m_lcB = $this + 184 | 0;
 $18 = $2 + 28 | 0;
 $23 = HEAP32[$18 + 4 >> 2] | 0;
 $24 = $m_lcB;
 HEAP32[$24 >> 2] = HEAP32[$18 >> 2];
 HEAP32[$24 + 4 >> 2] = $23;
 $m_lcC = $this + 192 | 0;
 $28 = $4 + 28 | 0;
 $33 = HEAP32[$28 + 4 >> 2] | 0;
 $34 = $m_lcC;
 HEAP32[$34 >> 2] = HEAP32[$28 >> 2];
 HEAP32[$34 + 4 >> 2] = $33;
 $38 = $6 + 28 | 0;
 $40 = HEAP32[$38 >> 2] | 0;
 $43 = HEAP32[$38 + 4 >> 2] | 0;
 $44 = $this + 200 | 0;
 HEAP32[$44 >> 2] = $40;
 HEAP32[$44 + 4 >> 2] = $43;
 $48 = +HEAPF32[$0 + 120 >> 2];
 HEAPF32[$this + 208 >> 2] = $48;
 $49 = +HEAPF32[$2 + 120 >> 2];
 HEAPF32[$this + 212 >> 2] = $49;
 $50 = +HEAPF32[$4 + 120 >> 2];
 HEAPF32[$this + 216 >> 2] = $50;
 $51 = +HEAPF32[$6 + 120 >> 2];
 HEAPF32[$this + 220 >> 2] = $51;
 $52 = +HEAPF32[$0 + 128 >> 2];
 HEAPF32[$this + 224 >> 2] = $52;
 $53 = +HEAPF32[$2 + 128 >> 2];
 HEAPF32[$this + 228 >> 2] = $53;
 $54 = +HEAPF32[$4 + 128 >> 2];
 HEAPF32[$this + 232 >> 2] = $54;
 $55 = +HEAPF32[$6 + 128 >> 2];
 HEAPF32[$this + 236 >> 2] = $55;
 $56 = HEAP32[$data + 24 >> 2] | 0;
 $57 = +HEAPF32[$56 + ($1 * 12 | 0) + 8 >> 2];
 $velocities = $data + 28 | 0;
 $58 = HEAP32[$velocities >> 2] | 0;
 $59 = $58 + ($1 * 12 | 0) | 0;
 $65 = +HEAPF32[$59 >> 2];
 $66 = +HEAPF32[$59 + 4 >> 2];
 $67 = +HEAPF32[$58 + ($1 * 12 | 0) + 8 >> 2];
 $68 = +HEAPF32[$56 + ($3 * 12 | 0) + 8 >> 2];
 $69 = $58 + ($3 * 12 | 0) | 0;
 $75 = +HEAPF32[$69 >> 2];
 $76 = +HEAPF32[$69 + 4 >> 2];
 $77 = +HEAPF32[$58 + ($3 * 12 | 0) + 8 >> 2];
 $78 = +HEAPF32[$56 + ($5 * 12 | 0) + 8 >> 2];
 $79 = $58 + ($5 * 12 | 0) | 0;
 $85 = +HEAPF32[$79 >> 2];
 $86 = +HEAPF32[$79 + 4 >> 2];
 $87 = +HEAPF32[$58 + ($5 * 12 | 0) + 8 >> 2];
 $88 = +HEAPF32[$56 + ($7 * 12 | 0) + 8 >> 2];
 $89 = $58 + ($7 * 12 | 0) | 0;
 $95 = +HEAPF32[$89 >> 2];
 $96 = +HEAPF32[$89 + 4 >> 2];
 $97 = +HEAPF32[$58 + ($7 * 12 | 0) + 8 >> 2];
 $call$i$i = +Math_sin(+$57);
 $call2$i$i = +Math_cos(+$57);
 $call$i$i35 = +Math_sin(+$68);
 $call2$i$i37 = +Math_cos(+$68);
 $call$i$i39 = +Math_sin(+$78);
 $call2$i$i41 = +Math_cos(+$78);
 $call$i$i43 = +Math_sin(+$88);
 $call2$i$i45 = +Math_cos(+$88);
 $m_mass = $this + 272 | 0;
 HEAPF32[$m_mass >> 2] = 0.0;
 $99 = (HEAP32[tempDoublePtr >> 2] = $40, +HEAPF32[tempDoublePtr >> 2]);
 if ((HEAP32[$this + 76 >> 2] | 0) == 1) {
  HEAPF32[$this + 240 >> 2] = 0.0;
  HEAPF32[$this + 244 >> 2] = 0.0;
  HEAPF32[$this + 256 >> 2] = 1.0;
  HEAPF32[$this + 264 >> 2] = 1.0;
  $$in = $52 + $54;
  $137 = 0.0;
  $138 = 0.0;
  $139 = 1.0;
  $143 = 1.0;
 } else {
  $100 = +HEAPF32[$this + 124 >> 2];
  $101 = +HEAPF32[$this + 128 >> 2];
  $sub$i = $call2$i$i41 * $100 - $call$i$i39 * $101;
  $add$i = $call$i$i39 * $100 + $call2$i$i41 * $101;
  $sub$i50 = +HEAPF32[$this + 108 >> 2] - +HEAPF32[$m_lcC >> 2];
  $sub3$i = +HEAPF32[$this + 112 >> 2] - +HEAPF32[$this + 196 >> 2];
  $sub$i68 = +HEAPF32[$this + 92 >> 2] - +HEAPF32[$m_lcA >> 2];
  $sub3$i71 = +HEAPF32[$this + 96 >> 2] - +HEAPF32[$this + 180 >> 2];
  $110 = +$sub$i;
  $111 = +$add$i;
  $112 = $this + 240 | 0;
  HEAPF32[$112 >> 2] = $110;
  HEAPF32[$112 + 4 >> 2] = $111;
  $sub$i203 = $add$i * ($call2$i$i41 * $sub$i50 - $call$i$i39 * $sub3$i) - $sub$i * ($call$i$i39 * $sub$i50 + $call2$i$i41 * $sub3$i);
  HEAPF32[$this + 264 >> 2] = $sub$i203;
  $sub$i196 = $add$i * ($call2$i$i * $sub$i68 - $call$i$i * $sub3$i71) - $sub$i * ($call$i$i * $sub$i68 + $call2$i$i * $sub3$i71);
  HEAPF32[$this + 256 >> 2] = $sub$i196;
  $$in = $50 + $48 + $sub$i203 * $54 * $sub$i203 + $sub$i196 * $52 * $sub$i196;
  $137 = $sub$i;
  $138 = $add$i;
  $139 = $sub$i196;
  $143 = $sub$i203;
 }
 $116 = $$in + 0.0;
 HEAPF32[$m_mass >> 2] = $116;
 if ((HEAP32[$this + 80 >> 2] | 0) == 1) {
  HEAPF32[$this + 248 >> 2] = 0.0;
  HEAPF32[$this + 252 >> 2] = 0.0;
  $118 = +HEAPF32[$this + 152 >> 2];
  HEAPF32[$this + 260 >> 2] = $118;
  HEAPF32[$this + 268 >> 2] = $118;
  $140 = 0.0;
  $141 = 0.0;
  $142 = $118;
  $144 = $118;
  $add160$pn = $118 * $118 * ($53 + $55);
 } else {
  $119 = +HEAPF32[$this + 132 >> 2];
  $120 = +HEAPF32[$this + 136 >> 2];
  $sub$i182 = $call2$i$i45 * $119 - $call$i$i43 * $120;
  $add$i185 = $call$i$i43 * $119 + $call2$i$i45 * $120;
  $sub$i170 = +HEAPF32[$this + 116 >> 2] - $99;
  $sub3$i173 = +HEAPF32[$this + 120 >> 2] - +HEAPF32[$this + 204 >> 2];
  $sub$i150 = +HEAPF32[$this + 100 >> 2] - +HEAPF32[$m_lcB >> 2];
  $sub3$i153 = +HEAPF32[$this + 104 >> 2] - +HEAPF32[$this + 188 >> 2];
  $128 = +HEAPF32[$this + 152 >> 2];
  $mul$i131 = $sub$i182 * $128;
  $mul1$i133 = $add$i185 * $128;
  $129 = +$mul$i131;
  $130 = +$mul1$i133;
  $131 = $this + 248 | 0;
  HEAPF32[$131 >> 2] = $129;
  HEAPF32[$131 + 4 >> 2] = $130;
  $mul136 = ($add$i185 * ($call2$i$i45 * $sub$i170 - $call$i$i43 * $sub3$i173) - $sub$i182 * ($call$i$i43 * $sub$i170 + $call2$i$i45 * $sub3$i173)) * $128;
  HEAPF32[$this + 268 >> 2] = $mul136;
  $mul140 = $128 * ($add$i185 * ($call2$i$i37 * $sub$i150 - $call$i$i35 * $sub3$i153) - $sub$i182 * ($call$i$i35 * $sub$i150 + $call2$i$i37 * $sub3$i153));
  HEAPF32[$this + 260 >> 2] = $mul140;
  $140 = $mul$i131;
  $141 = $mul1$i133;
  $142 = $mul140;
  $144 = $mul136;
  $add160$pn = $128 * $128 * ($51 + $49) + $mul136 * $55 * $mul136 + $mul140 * $mul140 * $53;
 }
 $storemerge34 = $116 + $add160$pn;
 HEAPF32[$m_mass >> 2] = $storemerge34;
 if ($storemerge34 > 0.0) $cond = 1.0 / $storemerge34; else $cond = 0.0;
 HEAPF32[$m_mass >> 2] = $cond;
 $m_impulse212 = $this + 156 | 0;
 if ((HEAP8[$data + 20 >> 0] | 0) == 0) {
  HEAPF32[$m_impulse212 >> 2] = 0.0;
  $vA$sroa$0$0$load234242 = $65;
  $vA$sroa$1$4$load235243 = $66;
  $vB$sroa$0$0$load232240 = $75;
  $vB$sroa$1$4$load233241 = $76;
  $vC$sroa$0$0$load230238 = $85;
  $vC$sroa$1$4$load231239 = $86;
  $vD$sroa$0$0$load228236 = $95;
  $vD$sroa$1$4$load229237 = $96;
  $wA$0 = $67;
  $wB$0 = $77;
  $wC$0 = $87;
  $wD$0 = $97;
  $145 = HEAP32[$m_indexA >> 2] | 0;
  $146 = HEAP32[$velocities >> 2] | 0;
  $v217 = $146 + ($145 * 12 | 0) | 0;
  $147 = +$vA$sroa$0$0$load234242;
  $148 = +$vA$sroa$1$4$load235243;
  $149 = $v217;
  $150 = $149;
  HEAPF32[$150 >> 2] = $147;
  $151 = $149 + 4 | 0;
  $152 = $151;
  HEAPF32[$152 >> 2] = $148;
  $153 = HEAP32[$m_indexA >> 2] | 0;
  $154 = HEAP32[$velocities >> 2] | 0;
  $w221 = $154 + ($153 * 12 | 0) + 8 | 0;
  HEAPF32[$w221 >> 2] = $wA$0;
  $155 = HEAP32[$m_indexB >> 2] | 0;
  $v225 = $154 + ($155 * 12 | 0) | 0;
  $156 = +$vB$sroa$0$0$load232240;
  $157 = +$vB$sroa$1$4$load233241;
  $158 = $v225;
  $159 = $158;
  HEAPF32[$159 >> 2] = $156;
  $160 = $158 + 4 | 0;
  $161 = $160;
  HEAPF32[$161 >> 2] = $157;
  $162 = HEAP32[$m_indexB >> 2] | 0;
  $163 = HEAP32[$velocities >> 2] | 0;
  $w229 = $163 + ($162 * 12 | 0) + 8 | 0;
  HEAPF32[$w229 >> 2] = $wB$0;
  $164 = HEAP32[$m_indexC >> 2] | 0;
  $v233 = $163 + ($164 * 12 | 0) | 0;
  $165 = +$vC$sroa$0$0$load230238;
  $166 = +$vC$sroa$1$4$load231239;
  $167 = $v233;
  $168 = $167;
  HEAPF32[$168 >> 2] = $165;
  $169 = $167 + 4 | 0;
  $170 = $169;
  HEAPF32[$170 >> 2] = $166;
  $171 = HEAP32[$m_indexC >> 2] | 0;
  $172 = HEAP32[$velocities >> 2] | 0;
  $w237 = $172 + ($171 * 12 | 0) + 8 | 0;
  HEAPF32[$w237 >> 2] = $wC$0;
  $173 = HEAP32[$m_indexD >> 2] | 0;
  $v241 = $172 + ($173 * 12 | 0) | 0;
  $174 = +$vD$sroa$0$0$load228236;
  $175 = +$vD$sroa$1$4$load229237;
  $176 = $v241;
  $177 = $176;
  HEAPF32[$177 >> 2] = $174;
  $178 = $176 + 4 | 0;
  $179 = $178;
  HEAPF32[$179 >> 2] = $175;
  $180 = HEAP32[$m_indexD >> 2] | 0;
  $181 = HEAP32[$velocities >> 2] | 0;
  $w245 = $181 + ($180 * 12 | 0) + 8 | 0;
  HEAPF32[$w245 >> 2] = $wD$0;
  STACKTOP = sp;
  return;
 } else {
  $136 = +HEAPF32[$m_impulse212 >> 2];
  $mul171 = $48 * $136;
  $mul182 = $136 * $49;
  $mul193 = $136 * $50;
  $mul203 = $136 * $51;
  $vA$sroa$0$0$load234242 = $65 + $137 * $mul171;
  $vA$sroa$1$4$load235243 = $66 + $mul171 * $138;
  $vB$sroa$0$0$load232240 = $75 + $140 * $mul182;
  $vB$sroa$1$4$load233241 = $76 + $mul182 * $141;
  $vC$sroa$0$0$load230238 = $85 - $137 * $mul193;
  $vC$sroa$1$4$load231239 = $86 - $138 * $mul193;
  $vD$sroa$0$0$load228236 = $95 - $140 * $mul203;
  $vD$sroa$1$4$load229237 = $96 - $141 * $mul203;
  $wA$0 = $67 + $136 * $52 * $139;
  $wB$0 = $77 + $136 * $53 * $142;
  $wC$0 = $87 - $136 * $54 * $143;
  $wD$0 = $97 - $136 * $55 * $144;
  $145 = HEAP32[$m_indexA >> 2] | 0;
  $146 = HEAP32[$velocities >> 2] | 0;
  $v217 = $146 + ($145 * 12 | 0) | 0;
  $147 = +$vA$sroa$0$0$load234242;
  $148 = +$vA$sroa$1$4$load235243;
  $149 = $v217;
  $150 = $149;
  HEAPF32[$150 >> 2] = $147;
  $151 = $149 + 4 | 0;
  $152 = $151;
  HEAPF32[$152 >> 2] = $148;
  $153 = HEAP32[$m_indexA >> 2] | 0;
  $154 = HEAP32[$velocities >> 2] | 0;
  $w221 = $154 + ($153 * 12 | 0) + 8 | 0;
  HEAPF32[$w221 >> 2] = $wA$0;
  $155 = HEAP32[$m_indexB >> 2] | 0;
  $v225 = $154 + ($155 * 12 | 0) | 0;
  $156 = +$vB$sroa$0$0$load232240;
  $157 = +$vB$sroa$1$4$load233241;
  $158 = $v225;
  $159 = $158;
  HEAPF32[$159 >> 2] = $156;
  $160 = $158 + 4 | 0;
  $161 = $160;
  HEAPF32[$161 >> 2] = $157;
  $162 = HEAP32[$m_indexB >> 2] | 0;
  $163 = HEAP32[$velocities >> 2] | 0;
  $w229 = $163 + ($162 * 12 | 0) + 8 | 0;
  HEAPF32[$w229 >> 2] = $wB$0;
  $164 = HEAP32[$m_indexC >> 2] | 0;
  $v233 = $163 + ($164 * 12 | 0) | 0;
  $165 = +$vC$sroa$0$0$load230238;
  $166 = +$vC$sroa$1$4$load231239;
  $167 = $v233;
  $168 = $167;
  HEAPF32[$168 >> 2] = $165;
  $169 = $167 + 4 | 0;
  $170 = $169;
  HEAPF32[$170 >> 2] = $166;
  $171 = HEAP32[$m_indexC >> 2] | 0;
  $172 = HEAP32[$velocities >> 2] | 0;
  $w237 = $172 + ($171 * 12 | 0) + 8 | 0;
  HEAPF32[$w237 >> 2] = $wC$0;
  $173 = HEAP32[$m_indexD >> 2] | 0;
  $v241 = $172 + ($173 * 12 | 0) | 0;
  $174 = +$vD$sroa$0$0$load228236;
  $175 = +$vD$sroa$1$4$load229237;
  $176 = $v241;
  $177 = $176;
  HEAPF32[$177 >> 2] = $174;
  $178 = $176 + 4 | 0;
  $179 = $178;
  HEAPF32[$179 >> 2] = $175;
  $180 = HEAP32[$m_indexD >> 2] | 0;
  $181 = HEAP32[$velocities >> 2] | 0;
  $w245 = $181 + ($180 * 12 | 0) + 8 | 0;
  HEAPF32[$w245 >> 2] = $wD$0;
  STACKTOP = sp;
  return;
 }
}
function __ZNSt3__16__sortIRPFbRK6b2PairS3_EPS1_EEvT0_S8_T_($__first, $__last, $__comp) {
 $__first = $__first | 0;
 $__last = $__last | 0;
 $__comp = $__comp | 0;
 var $__first$addr$0 = 0, $__first$addr$0$ph = 0, $__i$0141 = 0, $__i$021$i = 0, $__i$1 = 0, $__i$2 = 0, $__i$2$ph = 0, $__i$3 = 0, $__i$3$ph = 0, $__i$4 = 0, $__j$0 = 0, $__j$020$i = 0, $__j$020$i$phi = 0, $__j$1$i = 0, $__j$1$i$phi = 0, $__j$1$ph = 0, $__j$2 = 0, $__j$3 = 0, $__j$4$ph = 0, $__j$5 = 0, $__k$0$i = 0, $__last$addr$0$ph = 0, $__m$0$ph = 0, $__m$2 = 0, $__n_swaps$0 = 0, $__n_swaps$3 = 0, $__n_swaps$4$ph = 0, $__n_swaps$5 = 0, $__n_swaps$6 = 0, $__t$i1 = 0, $add$ptr$i = 0, $add$ptr114 = 0, $add$ptr2$i = 0, $add$ptr21 = 0, $call113 = 0, $div = 0, $div22 = 0, $incdec$ptr$i = 0, $incdec$ptr18 = 0, $incdec$ptr37 = 0, $incdec$ptr50 = 0, $incdec$ptr60 = 0, $incdec$ptr80 = 0, $incdec$ptr88 = 0, $incdec$ptr9$i = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast126 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__t$i1 = sp;
 $__first$addr$0$ph = $__first;
 $__last$addr$0$ph = $__last;
 L1 : while (1) {
  $sub$ptr$lhs$cast = $__last$addr$0$ph;
  $incdec$ptr18 = $__last$addr$0$ph + -12 | 0;
  $__first$addr$0 = $__first$addr$0$ph;
  L3 : while (1) {
   $sub$ptr$rhs$cast = $__first$addr$0;
   $sub$ptr$sub = $sub$ptr$lhs$cast - $sub$ptr$rhs$cast | 0;
   switch (($sub$ptr$sub | 0) / 12 | 0 | 0) {
   case 3:
    {
     label = 6;
     break L1;
     break;
    }
   case 4:
    {
     label = 7;
     break L1;
     break;
    }
   case 2:
    {
     label = 4;
     break L1;
     break;
    }
   case 5:
    {
     label = 8;
     break L1;
     break;
    }
   case 1:
   case 0:
    {
     label = 51;
     break L1;
     break;
    }
   default:
    {}
   }
   if (($sub$ptr$sub | 0) < 372) {
    label = 10;
    break L1;
   }
   $div = ($sub$ptr$sub | 0) / 24 | 0;
   $add$ptr21 = $__first$addr$0 + ($div * 12 | 0) | 0;
   if (($sub$ptr$sub | 0) > 11988) {
    $div22 = ($sub$ptr$sub | 0) / 48 | 0;
    $__n_swaps$0 = __ZNSt3__17__sort5IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_S8_S8_T_($__first$addr$0, $__first$addr$0 + ($div22 * 12 | 0) | 0, $add$ptr21, $__first$addr$0 + (($div22 + $div | 0) * 12 | 0) | 0, $incdec$ptr18, $__comp) | 0;
   } else $__n_swaps$0 = __ZNSt3__17__sort3IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_T_($__first$addr$0, $add$ptr21, $incdec$ptr18, $__comp) | 0;
   do if (FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 63]($__first$addr$0, $add$ptr21) | 0) {
    $__j$3 = $incdec$ptr18;
    $__n_swaps$3 = $__n_swaps$0;
   } else {
    $__j$0 = $incdec$ptr18;
    while (1) {
     $__j$0 = $__j$0 + -12 | 0;
     if (($__first$addr$0 | 0) == ($__j$0 | 0)) break;
     if (FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 63]($__j$0, $add$ptr21) | 0) {
      label = 34;
      break;
     }
    }
    if ((label | 0) == 34) {
     label = 0;
     HEAP32[$__t$i1 + 0 >> 2] = HEAP32[$__first$addr$0 + 0 >> 2];
     HEAP32[$__t$i1 + 4 >> 2] = HEAP32[$__first$addr$0 + 4 >> 2];
     HEAP32[$__t$i1 + 8 >> 2] = HEAP32[$__first$addr$0 + 8 >> 2];
     HEAP32[$__first$addr$0 + 0 >> 2] = HEAP32[$__j$0 + 0 >> 2];
     HEAP32[$__first$addr$0 + 4 >> 2] = HEAP32[$__j$0 + 4 >> 2];
     HEAP32[$__first$addr$0 + 8 >> 2] = HEAP32[$__j$0 + 8 >> 2];
     HEAP32[$__j$0 + 0 >> 2] = HEAP32[$__t$i1 + 0 >> 2];
     HEAP32[$__j$0 + 4 >> 2] = HEAP32[$__t$i1 + 4 >> 2];
     HEAP32[$__j$0 + 8 >> 2] = HEAP32[$__t$i1 + 8 >> 2];
     $__j$3 = $__j$0;
     $__n_swaps$3 = $__n_swaps$0 + 1 | 0;
     break;
    }
    $incdec$ptr37 = $__first$addr$0 + 12 | 0;
    if (FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 63]($__first$addr$0, $incdec$ptr18) | 0) $__i$1 = $incdec$ptr37; else {
     if (($incdec$ptr37 | 0) == ($incdec$ptr18 | 0)) {
      label = 51;
      break L1;
     } else $__i$0141 = $incdec$ptr37;
     while (1) {
      $incdec$ptr50 = $__i$0141 + 12 | 0;
      if (FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 63]($__first$addr$0, $__i$0141) | 0) break;
      if (($incdec$ptr50 | 0) == ($incdec$ptr18 | 0)) {
       label = 51;
       break L1;
      } else $__i$0141 = $incdec$ptr50;
     }
     HEAP32[$__t$i1 + 0 >> 2] = HEAP32[$__i$0141 + 0 >> 2];
     HEAP32[$__t$i1 + 4 >> 2] = HEAP32[$__i$0141 + 4 >> 2];
     HEAP32[$__t$i1 + 8 >> 2] = HEAP32[$__i$0141 + 8 >> 2];
     HEAP32[$__i$0141 + 0 >> 2] = HEAP32[$incdec$ptr18 + 0 >> 2];
     HEAP32[$__i$0141 + 4 >> 2] = HEAP32[$incdec$ptr18 + 4 >> 2];
     HEAP32[$__i$0141 + 8 >> 2] = HEAP32[$incdec$ptr18 + 8 >> 2];
     HEAP32[$incdec$ptr18 + 0 >> 2] = HEAP32[$__t$i1 + 0 >> 2];
     HEAP32[$incdec$ptr18 + 4 >> 2] = HEAP32[$__t$i1 + 4 >> 2];
     HEAP32[$incdec$ptr18 + 8 >> 2] = HEAP32[$__t$i1 + 8 >> 2];
     $__i$1 = $incdec$ptr50;
    }
    if (($__i$1 | 0) == ($incdec$ptr18 | 0)) {
     label = 51;
     break L1;
    } else {
     $__i$2$ph = $__i$1;
     $__j$1$ph = $incdec$ptr18;
    }
    while (1) {
     $__i$2 = $__i$2$ph;
     while (1) {
      $incdec$ptr60 = $__i$2 + 12 | 0;
      if (FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 63]($__first$addr$0, $__i$2) | 0) {
       $__j$2 = $__j$1$ph;
       break;
      } else $__i$2 = $incdec$ptr60;
     }
     do $__j$2 = $__j$2 + -12 | 0; while (FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 63]($__first$addr$0, $__j$2) | 0);
     if (!($__i$2 >>> 0 < $__j$2 >>> 0)) {
      $__first$addr$0 = $__i$2;
      continue L3;
     }
     HEAP32[$__t$i1 + 0 >> 2] = HEAP32[$__i$2 + 0 >> 2];
     HEAP32[$__t$i1 + 4 >> 2] = HEAP32[$__i$2 + 4 >> 2];
     HEAP32[$__t$i1 + 8 >> 2] = HEAP32[$__i$2 + 8 >> 2];
     HEAP32[$__i$2 + 0 >> 2] = HEAP32[$__j$2 + 0 >> 2];
     HEAP32[$__i$2 + 4 >> 2] = HEAP32[$__j$2 + 4 >> 2];
     HEAP32[$__i$2 + 8 >> 2] = HEAP32[$__j$2 + 8 >> 2];
     HEAP32[$__j$2 + 0 >> 2] = HEAP32[$__t$i1 + 0 >> 2];
     HEAP32[$__j$2 + 4 >> 2] = HEAP32[$__t$i1 + 4 >> 2];
     HEAP32[$__j$2 + 8 >> 2] = HEAP32[$__t$i1 + 8 >> 2];
     $__i$2$ph = $incdec$ptr60;
     $__j$1$ph = $__j$2;
    }
   } while (0);
   $incdec$ptr80 = $__first$addr$0 + 12 | 0;
   L34 : do if ($incdec$ptr80 >>> 0 < $__j$3 >>> 0) {
    $__i$3$ph = $incdec$ptr80;
    $__j$4$ph = $__j$3;
    $__m$0$ph = $add$ptr21;
    $__n_swaps$4$ph = $__n_swaps$3;
    while (1) {
     $__i$3 = $__i$3$ph;
     while (1) {
      $incdec$ptr88 = $__i$3 + 12 | 0;
      if (FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 63]($__i$3, $__m$0$ph) | 0) $__i$3 = $incdec$ptr88; else {
       $__j$5 = $__j$4$ph;
       break;
      }
     }
     do $__j$5 = $__j$5 + -12 | 0; while (!(FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 63]($__j$5, $__m$0$ph) | 0));
     if ($__i$3 >>> 0 > $__j$5 >>> 0) {
      $__i$4 = $__i$3;
      $__m$2 = $__m$0$ph;
      $__n_swaps$5 = $__n_swaps$4$ph;
      break L34;
     }
     HEAP32[$__t$i1 + 0 >> 2] = HEAP32[$__i$3 + 0 >> 2];
     HEAP32[$__t$i1 + 4 >> 2] = HEAP32[$__i$3 + 4 >> 2];
     HEAP32[$__t$i1 + 8 >> 2] = HEAP32[$__i$3 + 8 >> 2];
     HEAP32[$__i$3 + 0 >> 2] = HEAP32[$__j$5 + 0 >> 2];
     HEAP32[$__i$3 + 4 >> 2] = HEAP32[$__j$5 + 4 >> 2];
     HEAP32[$__i$3 + 8 >> 2] = HEAP32[$__j$5 + 8 >> 2];
     HEAP32[$__j$5 + 0 >> 2] = HEAP32[$__t$i1 + 0 >> 2];
     HEAP32[$__j$5 + 4 >> 2] = HEAP32[$__t$i1 + 4 >> 2];
     HEAP32[$__j$5 + 8 >> 2] = HEAP32[$__t$i1 + 8 >> 2];
     $__i$3$ph = $incdec$ptr88;
     $__j$4$ph = $__j$5;
     $__m$0$ph = ($__m$0$ph | 0) == ($__i$3 | 0) ? $__j$5 : $__m$0$ph;
     $__n_swaps$4$ph = $__n_swaps$4$ph + 1 | 0;
    }
   } else {
    $__i$4 = $incdec$ptr80;
    $__m$2 = $add$ptr21;
    $__n_swaps$5 = $__n_swaps$3;
   } while (0);
   if (($__i$4 | 0) == ($__m$2 | 0)) $__n_swaps$6 = $__n_swaps$5; else if (FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 63]($__m$2, $__i$4) | 0) {
    HEAP32[$__t$i1 + 0 >> 2] = HEAP32[$__i$4 + 0 >> 2];
    HEAP32[$__t$i1 + 4 >> 2] = HEAP32[$__i$4 + 4 >> 2];
    HEAP32[$__t$i1 + 8 >> 2] = HEAP32[$__i$4 + 8 >> 2];
    HEAP32[$__i$4 + 0 >> 2] = HEAP32[$__m$2 + 0 >> 2];
    HEAP32[$__i$4 + 4 >> 2] = HEAP32[$__m$2 + 4 >> 2];
    HEAP32[$__i$4 + 8 >> 2] = HEAP32[$__m$2 + 8 >> 2];
    HEAP32[$__m$2 + 0 >> 2] = HEAP32[$__t$i1 + 0 >> 2];
    HEAP32[$__m$2 + 4 >> 2] = HEAP32[$__t$i1 + 4 >> 2];
    HEAP32[$__m$2 + 8 >> 2] = HEAP32[$__t$i1 + 8 >> 2];
    $__n_swaps$6 = $__n_swaps$5 + 1 | 0;
   } else $__n_swaps$6 = $__n_swaps$5;
   if (($__n_swaps$6 | 0) == 0) {
    $call113 = __ZNSt3__127__insertion_sort_incompleteIRPFbRK6b2PairS3_EPS1_EEbT0_S8_T_($__first$addr$0, $__i$4, $__comp) | 0;
    $add$ptr114 = $__i$4 + 12 | 0;
    if (__ZNSt3__127__insertion_sort_incompleteIRPFbRK6b2PairS3_EPS1_EEbT0_S8_T_($add$ptr114, $__last$addr$0$ph, $__comp) | 0) {
     label = 46;
     break;
    }
    if ($call113) {
     $__first$addr$0 = $add$ptr114;
     continue;
    }
   }
   $sub$ptr$lhs$cast126 = $__i$4;
   if (($sub$ptr$lhs$cast126 - $sub$ptr$rhs$cast | 0) >= ($sub$ptr$lhs$cast - $sub$ptr$lhs$cast126 | 0)) {
    label = 50;
    break;
   }
   __ZNSt3__16__sortIRPFbRK6b2PairS3_EPS1_EEvT0_S8_T_($__first$addr$0, $__i$4, $__comp);
   $__first$addr$0 = $__i$4 + 12 | 0;
  }
  if ((label | 0) == 46) {
   label = 0;
   if ($call113) {
    label = 51;
    break;
   } else {
    $__first$addr$0$ph = $__first$addr$0;
    $__last$addr$0$ph = $__i$4;
    continue;
   }
  } else if ((label | 0) == 50) {
   label = 0;
   __ZNSt3__16__sortIRPFbRK6b2PairS3_EPS1_EEvT0_S8_T_($__i$4 + 12 | 0, $__last$addr$0$ph, $__comp);
   $__first$addr$0$ph = $__first$addr$0;
   $__last$addr$0$ph = $__i$4;
   continue;
  }
 }
 if ((label | 0) == 4) {
  if (!(FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 63]($incdec$ptr18, $__first$addr$0) | 0)) {
   STACKTOP = sp;
   return;
  }
  HEAP32[$__t$i1 + 0 >> 2] = HEAP32[$__first$addr$0 + 0 >> 2];
  HEAP32[$__t$i1 + 4 >> 2] = HEAP32[$__first$addr$0 + 4 >> 2];
  HEAP32[$__t$i1 + 8 >> 2] = HEAP32[$__first$addr$0 + 8 >> 2];
  HEAP32[$__first$addr$0 + 0 >> 2] = HEAP32[$incdec$ptr18 + 0 >> 2];
  HEAP32[$__first$addr$0 + 4 >> 2] = HEAP32[$incdec$ptr18 + 4 >> 2];
  HEAP32[$__first$addr$0 + 8 >> 2] = HEAP32[$incdec$ptr18 + 8 >> 2];
  HEAP32[$incdec$ptr18 + 0 >> 2] = HEAP32[$__t$i1 + 0 >> 2];
  HEAP32[$incdec$ptr18 + 4 >> 2] = HEAP32[$__t$i1 + 4 >> 2];
  HEAP32[$incdec$ptr18 + 8 >> 2] = HEAP32[$__t$i1 + 8 >> 2];
  STACKTOP = sp;
  return;
 } else if ((label | 0) == 6) {
  __ZNSt3__17__sort3IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_T_($__first$addr$0, $__first$addr$0 + 12 | 0, $incdec$ptr18, $__comp) | 0;
  STACKTOP = sp;
  return;
 } else if ((label | 0) == 7) {
  __ZNSt3__17__sort4IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_S8_T_($__first$addr$0, $__first$addr$0 + 12 | 0, $__first$addr$0 + 24 | 0, $incdec$ptr18, $__comp) | 0;
  STACKTOP = sp;
  return;
 } else if ((label | 0) == 8) {
  __ZNSt3__17__sort5IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_S8_S8_T_($__first$addr$0, $__first$addr$0 + 12 | 0, $__first$addr$0 + 24 | 0, $__first$addr$0 + 36 | 0, $incdec$ptr18, $__comp) | 0;
  STACKTOP = sp;
  return;
 } else if ((label | 0) == 10) {
  $add$ptr$i = $__first$addr$0 + 24 | 0;
  __ZNSt3__17__sort3IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_T_($__first$addr$0, $__first$addr$0 + 12 | 0, $add$ptr$i, $__comp) | 0;
  $add$ptr2$i = $__first$addr$0 + 36 | 0;
  if (($add$ptr2$i | 0) == ($__last$addr$0$ph | 0)) {
   STACKTOP = sp;
   return;
  } else {
   $__i$021$i = $add$ptr2$i;
   $__j$020$i = $add$ptr$i;
  }
  while (1) {
   if (FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 63]($__i$021$i, $__j$020$i) | 0) {
    HEAP32[$__t$i1 + 0 >> 2] = HEAP32[$__i$021$i + 0 >> 2];
    HEAP32[$__t$i1 + 4 >> 2] = HEAP32[$__i$021$i + 4 >> 2];
    HEAP32[$__t$i1 + 8 >> 2] = HEAP32[$__i$021$i + 8 >> 2];
    $__j$1$i = $__i$021$i;
    $__k$0$i = $__j$020$i;
    while (1) {
     HEAP32[$__j$1$i + 0 >> 2] = HEAP32[$__k$0$i + 0 >> 2];
     HEAP32[$__j$1$i + 4 >> 2] = HEAP32[$__k$0$i + 4 >> 2];
     HEAP32[$__j$1$i + 8 >> 2] = HEAP32[$__k$0$i + 8 >> 2];
     if (($__k$0$i | 0) == ($__first$addr$0 | 0)) break;
     $incdec$ptr$i = $__k$0$i + -12 | 0;
     if (FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 63]($__t$i1, $incdec$ptr$i) | 0) {
      $__j$1$i$phi = $__k$0$i;
      $__k$0$i = $incdec$ptr$i;
      $__j$1$i = $__j$1$i$phi;
     } else break;
    }
    HEAP32[$__k$0$i + 0 >> 2] = HEAP32[$__t$i1 + 0 >> 2];
    HEAP32[$__k$0$i + 4 >> 2] = HEAP32[$__t$i1 + 4 >> 2];
    HEAP32[$__k$0$i + 8 >> 2] = HEAP32[$__t$i1 + 8 >> 2];
   }
   $incdec$ptr9$i = $__i$021$i + 12 | 0;
   if (($incdec$ptr9$i | 0) == ($__last$addr$0$ph | 0)) break; else {
    $__j$020$i$phi = $__i$021$i;
    $__i$021$i = $incdec$ptr9$i;
    $__j$020$i = $__j$020$i$phi;
   }
  }
  STACKTOP = sp;
  return;
 } else if ((label | 0) == 51) {
  STACKTOP = sp;
  return;
 }
}
function __ZN16b2ContactManager15FindNewContactsEv($this) {
 $this = $this | 0;
 var $$pre = 0, $0 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $54 = 0, $57 = 0, $59 = 0, $62 = 0, $66 = 0, $67 = 0, $69 = 0, $7 = 0, $71 = 0, $73 = 0, $77 = 0, $78 = 0, $79 = 0, $83 = 0, $arraydecay$i$i$i$i = 0, $call$i$i$i$i = 0, $call4$i$i = 0, $child1$i$i$i = 0, $conv$i$i$i = 0, $conv$i71$i$i = 0, $edge$084$i$i = 0, $edge$086$i$i = 0, $i$030$i = 0, $i9$027$i = 0, $i9$1$i = 0, $i9$1$in$i = 0, $m_allocator$i$i = 0, $m_capacity$i$i$i$i = 0, $m_contactCount$i$i = 0, $m_contactFilter$i$i = 0, $m_contactList$i$i = 0, $m_contactList66$i$i = 0, $m_contactList83$i$i = 0, $m_count$i$i$i$i = 0, $m_flags$i$i$i = 0, $m_flags$i70$i$i = 0, $m_moveBuffer$i = 0, $m_moveCount$i = 0, $m_nodeA$i$i = 0, $m_nodeB$i$i = 0, $m_nodeCapacity$i$i = 0, $m_nodeCapacity$i13$i = 0, $m_nodes$i$i = 0, $m_nodes$i17$i = 0, $m_pairBuffer$i$i$i = 0, $m_pairBuffer$i$pre$phiZZ2D = 0, $m_pairCapacity$i$i$i = 0, $m_pairCount$i = 0, $m_queryProxyId$i = 0, $proxyIdA$i = 0, $proxyIdB$i = 0, $retval$0$i$i$i = 0, $stack$i$i = 0, $x$i6$i$i$i = 0, $x1$i$i$i$i = 0, $y$i9$i$i$i = 0, $y2$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040 | 0;
 $stack$i$i = sp;
 $m_pairCount$i = $this + 52 | 0;
 HEAP32[$m_pairCount$i >> 2] = 0;
 $m_moveCount$i = $this + 40 | 0;
 $0 = HEAP32[$m_moveCount$i >> 2] | 0;
 do if (($0 | 0) > 0) {
  $m_moveBuffer$i = $this + 32 | 0;
  $m_queryProxyId$i = $this + 56 | 0;
  $m_nodeCapacity$i$i = $this + 12 | 0;
  $m_nodes$i$i = $this + 4 | 0;
  $arraydecay$i$i$i$i = $stack$i$i + 4 | 0;
  $m_count$i$i$i$i = $stack$i$i + 1028 | 0;
  $m_capacity$i$i$i$i = $stack$i$i + 1032 | 0;
  $m_pairCapacity$i$i$i = $this + 48 | 0;
  $m_pairBuffer$i$i$i = $this + 44 | 0;
  $83 = $0;
  $i$030$i = 0;
  while (1) {
   $2 = HEAP32[(HEAP32[$m_moveBuffer$i >> 2] | 0) + ($i$030$i << 2) >> 2] | 0;
   HEAP32[$m_queryProxyId$i >> 2] = $2;
   if (($2 | 0) == -1) $29 = $83; else {
    if (!(($2 | 0) > -1)) {
     label = 7;
     break;
    }
    if ((HEAP32[$m_nodeCapacity$i$i >> 2] | 0) <= ($2 | 0)) {
     label = 7;
     break;
    }
    $4 = HEAP32[$m_nodes$i$i >> 2] | 0;
    HEAP32[$stack$i$i >> 2] = $arraydecay$i$i$i$i;
    HEAP32[$m_count$i$i$i$i >> 2] = 0;
    HEAP32[$m_capacity$i$i$i$i >> 2] = 256;
    __ZN15b2GrowableStackIiLi256EE4PushERKi($stack$i$i, $this);
    if ((HEAP32[$m_count$i$i$i$i >> 2] | 0) > 0) {
     $x$i6$i$i$i = $4 + ($2 * 36 | 0) | 0;
     $y$i9$i$i$i = $4 + ($2 * 36 | 0) + 4 | 0;
     $x1$i$i$i$i = $4 + ($2 * 36 | 0) + 8 | 0;
     $y2$i$i$i$i = $4 + ($2 * 36 | 0) + 12 | 0;
     do {
      $call4$i$i = __ZN15b2GrowableStackIiLi256EE3PopEv($stack$i$i) | 0;
      do if (!(($call4$i$i | 0) == -1)) {
       $7 = HEAP32[$m_nodes$i$i >> 2] | 0;
       if (!((+HEAPF32[$x$i6$i$i$i >> 2] - +HEAPF32[$7 + ($call4$i$i * 36 | 0) + 8 >> 2] > 0.0 ? 1 : +HEAPF32[$y$i9$i$i$i >> 2] - +HEAPF32[$7 + ($call4$i$i * 36 | 0) + 12 >> 2] > 0.0) | +HEAPF32[$7 + ($call4$i$i * 36 | 0) >> 2] - +HEAPF32[$x1$i$i$i$i >> 2] > 0.0 | +HEAPF32[$7 + ($call4$i$i * 36 | 0) + 4 >> 2] - +HEAPF32[$y2$i$i$i$i >> 2] > 0.0)) {
        $child1$i$i$i = $7 + ($call4$i$i * 36 | 0) + 24 | 0;
        if (!((HEAP32[$child1$i$i$i >> 2] | 0) == -1)) {
         __ZN15b2GrowableStackIiLi256EE4PushERKi($stack$i$i, $child1$i$i$i);
         __ZN15b2GrowableStackIiLi256EE4PushERKi($stack$i$i, $7 + ($call4$i$i * 36 | 0) + 28 | 0);
         break;
        }
        $17 = HEAP32[$m_queryProxyId$i >> 2] | 0;
        if (($17 | 0) != ($call4$i$i | 0)) {
         $18 = HEAP32[$m_pairCount$i >> 2] | 0;
         if (($18 | 0) == (HEAP32[$m_pairCapacity$i$i$i >> 2] | 0)) {
          $20 = HEAP32[$m_pairBuffer$i$i$i >> 2] | 0;
          HEAP32[$m_pairCapacity$i$i$i >> 2] = $18 << 1;
          $call$i$i$i$i = _malloc($18 * 24 | 0) | 0;
          HEAP32[$m_pairBuffer$i$i$i >> 2] = $call$i$i$i$i;
          _memcpy($call$i$i$i$i | 0, $20 | 0, (HEAP32[$m_pairCount$i >> 2] | 0) * 12 | 0) | 0;
          _free($20);
          $22 = HEAP32[$m_queryProxyId$i >> 2] | 0;
          $24 = HEAP32[$m_pairCount$i >> 2] | 0;
         } else {
          $22 = $17;
          $24 = $18;
         }
         $23 = HEAP32[$m_pairBuffer$i$i$i >> 2] | 0;
         HEAP32[$23 + ($24 * 12 | 0) >> 2] = ($22 | 0) > ($call4$i$i | 0) ? $call4$i$i : $22;
         $25 = HEAP32[$m_queryProxyId$i >> 2] | 0;
         HEAP32[$23 + ((HEAP32[$m_pairCount$i >> 2] | 0) * 12 | 0) + 4 >> 2] = ($25 | 0) < ($call4$i$i | 0) ? $call4$i$i : $25;
         HEAP32[$m_pairCount$i >> 2] = (HEAP32[$m_pairCount$i >> 2] | 0) + 1;
        }
       }
      } while (0);
     } while ((HEAP32[$m_count$i$i$i$i >> 2] | 0) > 0);
    }
    $28 = HEAP32[$stack$i$i >> 2] | 0;
    if (($28 | 0) != ($arraydecay$i$i$i$i | 0)) {
     _free($28);
     HEAP32[$stack$i$i >> 2] = 0;
    }
    $29 = HEAP32[$m_moveCount$i >> 2] | 0;
   }
   $i$030$i = $i$030$i + 1 | 0;
   if (($i$030$i | 0) >= ($29 | 0)) {
    label = 23;
    break;
   } else $83 = $29;
  }
  if ((label | 0) == 7) ___assert_fail(14568, 14512, 159, 14632); else if ((label | 0) == 23) {
   $31 = HEAP32[$m_pairCount$i >> 2] | 0;
   $m_pairBuffer$i$pre$phiZZ2D = $m_pairBuffer$i$i$i;
   break;
  }
 } else {
  $31 = 0;
  $m_pairBuffer$i$pre$phiZZ2D = $this + 44 | 0;
 } while (0);
 HEAP32[$m_moveCount$i >> 2] = 0;
 $30 = HEAP32[$m_pairBuffer$i$pre$phiZZ2D >> 2] | 0;
 HEAP32[$stack$i$i >> 2] = 57;
 __ZNSt3__16__sortIRPFbRK6b2PairS3_EPS1_EEvT0_S8_T_($30, $30 + ($31 * 12 | 0) | 0, $stack$i$i);
 if ((HEAP32[$m_pairCount$i >> 2] | 0) <= 0) {
  STACKTOP = sp;
  return;
 }
 $m_nodeCapacity$i13$i = $this + 12 | 0;
 $m_nodes$i17$i = $this + 4 | 0;
 $m_contactFilter$i$i = $this + 68 | 0;
 $m_allocator$i$i = $this + 76 | 0;
 $m_contactList$i$i = $this + 60 | 0;
 $m_contactCount$i$i = $this + 64 | 0;
 $$pre = HEAP32[$m_pairBuffer$i$pre$phiZZ2D >> 2] | 0;
 $33 = $$pre;
 $34 = HEAP32[$$pre >> 2] | 0;
 $i9$027$i = 0;
 L38 : while (1) {
  $proxyIdA$i = $33 + ($i9$027$i * 12 | 0) | 0;
  if (!(($34 | 0) > -1)) {
   label = 28;
   break;
  }
  $35 = HEAP32[$m_nodeCapacity$i13$i >> 2] | 0;
  if (($35 | 0) <= ($34 | 0)) {
   label = 28;
   break;
  }
  $36 = HEAP32[$m_nodes$i17$i >> 2] | 0;
  $proxyIdB$i = $33 + ($i9$027$i * 12 | 0) + 4 | 0;
  $37 = HEAP32[$proxyIdB$i >> 2] | 0;
  if (!(($37 | 0) > -1 & ($35 | 0) > ($37 | 0))) {
   label = 30;
   break;
  }
  $38 = HEAP32[$36 + ($34 * 36 | 0) + 16 >> 2] | 0;
  $39 = HEAP32[$36 + ($37 * 36 | 0) + 16 >> 2] | 0;
  $40 = HEAP32[$38 + 16 >> 2] | 0;
  $41 = HEAP32[$39 + 16 >> 2] | 0;
  $42 = HEAP32[$38 + 20 >> 2] | 0;
  $43 = HEAP32[$39 + 20 >> 2] | 0;
  $44 = HEAP32[$40 + 8 >> 2] | 0;
  $45 = HEAP32[$41 + 8 >> 2] | 0;
  L43 : do if (($44 | 0) != ($45 | 0)) {
   $edge$084$i$i = HEAP32[$45 + 112 >> 2] | 0;
   if (($edge$084$i$i | 0) != 0) {
    $edge$086$i$i = $edge$084$i$i;
    do {
     if ((HEAP32[$edge$086$i$i >> 2] | 0) == ($44 | 0)) {
      $47 = HEAP32[$edge$086$i$i + 4 >> 2] | 0;
      $48 = HEAP32[$47 + 48 >> 2] | 0;
      $49 = HEAP32[$47 + 52 >> 2] | 0;
      $50 = HEAP32[$47 + 56 >> 2] | 0;
      $51 = HEAP32[$47 + 60 >> 2] | 0;
      if (($48 | 0) == ($40 | 0) & ($49 | 0) == ($41 | 0) & ($50 | 0) == ($42 | 0) & ($51 | 0) == ($43 | 0)) break L43;
      if (($48 | 0) == ($41 | 0) & ($49 | 0) == ($40 | 0) & ($50 | 0) == ($43 | 0) & ($51 | 0) == ($42 | 0)) break L43;
     }
     $edge$086$i$i = HEAP32[$edge$086$i$i + 12 >> 2] | 0;
    } while (($edge$086$i$i | 0) != 0);
   }
   if (__ZNK6b2Body13ShouldCollideEPKS_($45, $44) | 0) {
    $52 = HEAP32[$m_contactFilter$i$i >> 2] | 0;
    if (($52 | 0) != 0) if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$52 >> 2] | 0) + 8 >> 2] & 63]($52, $40, $41) | 0)) break;
    $54 = HEAP32[$m_allocator$i$i >> 2] | 0;
    if ((HEAP8[15704] | 0) == 0) {
     HEAP32[3878] = 46;
     HEAP32[3879] = 91;
     HEAP8[15520] = 1;
     HEAP32[3902] = 47;
     HEAP32[3903] = 92;
     HEAP8[15616] = 1;
     HEAP32[3884] = 47;
     HEAP32[3885] = 92;
     HEAP8[15544] = 0;
     HEAP32[3908] = 48;
     HEAP32[3909] = 93;
     HEAP8[15640] = 1;
     HEAP32[3890] = 49;
     HEAP32[3891] = 94;
     HEAP8[15568] = 1;
     HEAP32[3881] = 49;
     HEAP32[3882] = 94;
     HEAP8[15532] = 0;
     HEAP32[3896] = 50;
     HEAP32[3897] = 95;
     HEAP8[15592] = 1;
     HEAP32[3905] = 50;
     HEAP32[3906] = 95;
     HEAP8[15628] = 0;
     HEAP32[3914] = 51;
     HEAP32[3915] = 96;
     HEAP8[15664] = 1;
     HEAP32[3887] = 51;
     HEAP32[3888] = 96;
     HEAP8[15556] = 0;
     HEAP32[3920] = 52;
     HEAP32[3921] = 97;
     HEAP8[15688] = 1;
     HEAP32[3911] = 52;
     HEAP32[3912] = 97;
     HEAP8[15652] = 0;
     HEAP8[15704] = 1;
    }
    $57 = HEAP32[(HEAP32[$40 + 12 >> 2] | 0) + 4 >> 2] | 0;
    $59 = HEAP32[(HEAP32[$41 + 12 >> 2] | 0) + 4 >> 2] | 0;
    if (!($57 >>> 0 < 4)) {
     label = 43;
     break L38;
    }
    if (!($59 >>> 0 < 4)) {
     label = 45;
     break L38;
    }
    $62 = HEAP32[15512 + ($57 * 48 | 0) + ($59 * 12 | 0) >> 2] | 0;
    if (($62 | 0) != 0) {
     if ((HEAP8[15512 + ($57 * 48 | 0) + ($59 * 12 | 0) + 8 >> 0] | 0) == 0) $retval$0$i$i$i = FUNCTION_TABLE_iiiiii[$62 & 63]($41, $43, $40, $42, $54) | 0; else $retval$0$i$i$i = FUNCTION_TABLE_iiiiii[$62 & 63]($40, $42, $41, $43, $54) | 0;
     if (($retval$0$i$i$i | 0) != 0) {
      $66 = HEAP32[(HEAP32[$retval$0$i$i$i + 48 >> 2] | 0) + 8 >> 2] | 0;
      $67 = HEAP32[(HEAP32[$retval$0$i$i$i + 52 >> 2] | 0) + 8 >> 2] | 0;
      HEAP32[$retval$0$i$i$i + 8 >> 2] = 0;
      HEAP32[$retval$0$i$i$i + 12 >> 2] = HEAP32[$m_contactList$i$i >> 2];
      $69 = HEAP32[$m_contactList$i$i >> 2] | 0;
      if (($69 | 0) != 0) HEAP32[$69 + 8 >> 2] = $retval$0$i$i$i;
      HEAP32[$m_contactList$i$i >> 2] = $retval$0$i$i$i;
      $m_nodeA$i$i = $retval$0$i$i$i + 16 | 0;
      HEAP32[$retval$0$i$i$i + 20 >> 2] = $retval$0$i$i$i;
      HEAP32[$m_nodeA$i$i >> 2] = $67;
      HEAP32[$retval$0$i$i$i + 24 >> 2] = 0;
      $m_contactList66$i$i = $66 + 112 | 0;
      HEAP32[$retval$0$i$i$i + 28 >> 2] = HEAP32[$m_contactList66$i$i >> 2];
      $71 = HEAP32[$m_contactList66$i$i >> 2] | 0;
      if (($71 | 0) != 0) HEAP32[$71 + 8 >> 2] = $m_nodeA$i$i;
      HEAP32[$m_contactList66$i$i >> 2] = $m_nodeA$i$i;
      $m_nodeB$i$i = $retval$0$i$i$i + 32 | 0;
      HEAP32[$retval$0$i$i$i + 36 >> 2] = $retval$0$i$i$i;
      HEAP32[$m_nodeB$i$i >> 2] = $66;
      HEAP32[$retval$0$i$i$i + 40 >> 2] = 0;
      $m_contactList83$i$i = $67 + 112 | 0;
      HEAP32[$retval$0$i$i$i + 44 >> 2] = HEAP32[$m_contactList83$i$i >> 2];
      $73 = HEAP32[$m_contactList83$i$i >> 2] | 0;
      if (($73 | 0) != 0) HEAP32[$73 + 8 >> 2] = $m_nodeB$i$i;
      HEAP32[$m_contactList83$i$i >> 2] = $m_nodeB$i$i;
      $m_flags$i70$i$i = $66 + 4 | 0;
      $conv$i71$i$i = HEAPU16[$m_flags$i70$i$i >> 1] | 0;
      if (($conv$i71$i$i & 2 | 0) == 0) {
       HEAP16[$m_flags$i70$i$i >> 1] = $conv$i71$i$i | 2;
       HEAPF32[$66 + 144 >> 2] = 0.0;
      }
      $m_flags$i$i$i = $67 + 4 | 0;
      $conv$i$i$i = HEAPU16[$m_flags$i$i$i >> 1] | 0;
      if (($conv$i$i$i & 2 | 0) == 0) {
       HEAP16[$m_flags$i$i$i >> 1] = $conv$i$i$i | 2;
       HEAPF32[$67 + 144 >> 2] = 0.0;
      }
      HEAP32[$m_contactCount$i$i >> 2] = (HEAP32[$m_contactCount$i$i >> 2] | 0) + 1;
     }
    }
   }
  } while (0);
  $77 = HEAP32[$m_pairCount$i >> 2] | 0;
  $i9$1$in$i = $i9$027$i;
  while (1) {
   $i9$1$i = $i9$1$in$i + 1 | 0;
   if (($i9$1$i | 0) >= ($77 | 0)) {
    label = 66;
    break L38;
   }
   $78 = HEAP32[$m_pairBuffer$i$pre$phiZZ2D >> 2] | 0;
   $79 = HEAP32[$78 + ($i9$1$i * 12 | 0) >> 2] | 0;
   if (($79 | 0) != (HEAP32[$proxyIdA$i >> 2] | 0)) {
    $33 = $78;
    $34 = $79;
    $i9$027$i = $i9$1$i;
    continue L38;
   }
   if ((HEAP32[$78 + ($i9$1$i * 12 | 0) + 4 >> 2] | 0) == (HEAP32[$proxyIdB$i >> 2] | 0)) $i9$1$in$i = $i9$1$i; else {
    $33 = $78;
    $34 = $79;
    $i9$027$i = $i9$1$i;
    continue L38;
   }
  }
 }
 if ((label | 0) == 28) ___assert_fail(14568, 14512, 153, 14616); else if ((label | 0) == 30) ___assert_fail(14568, 14512, 153, 14616); else if ((label | 0) == 43) ___assert_fail(15712, 15760, 80, 18528); else if ((label | 0) == 45) ___assert_fail(15816, 15760, 81, 18528); else if ((label | 0) == 66) {
  STACKTOP = sp;
  return;
 }
}
function __ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_($this, $manifold, $xfA, $xfB) {
 $this = $this | 0;
 $manifold = $manifold | 0;
 $xfA = $xfA | 0;
 $xfB = $xfB | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $33 = 0, $39 = 0.0, $40 = 0.0, $41 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $50 = 0.0, $51 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $61 = 0.0, $62 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $71 = 0, $8 = 0, $9 = 0, $add$$i$i = 0, $add$i = 0.0, $add$i$i157$i = 0.0, $add$i101$i = 0.0, $add$i121$i = 0.0, $add$i158$i = 0, $add$i59$i$i = 0.0, $add$i66$i$i = 0.0, $add$i82$i = 0.0, $add12$$i = 0, $add12$i = 0, $add17$i106$i = 0.0, $add8$i$i$i = 0.0, $call$i = 0.0, $call$i$i$i$i = 0.0, $call2$i = 0.0, $clipPoints1$i = 0, $clipPoints2$i = 0, $cmp9$i$i = 0, $conv$i$i = 0, $div$i$i = 0.0, $edge1$0$i = 0, $edgeA$i = 0, $edgeB$i = 0, $flip$0$i = 0, $i$0233$i = 0, $i$071$i$i = 0, $id$i = 0, $id$i$i = 0, $id32$i$i = 0, $incidentEdge$i = 0, $index$0$lcssa$i$i = 0, $index$073$i$i = 0, $index$1$i$i = 0, $minDot$072$i$i = 0.0, $mul1$i$i = 0.0, $pointCount$i = 0, $pointCount52$0234$i = 0, $pointCount52$1$i = 0, $poly1$0$i = 0, $poly2$0$i = 0, $sub$i$i = 0.0, $sub$i$i$i = 0.0, $sub$i119$i = 0.0, $sub$i147$i = 0.0, $sub$i147223$i = 0.0, $sub3$i$i = 0.0, $sub3$i224$i = 0.0, $sub4$i$i = 0.0, $tobool$i = 0, $xf1$sroa$0$0$copyload$i = 0.0, $xf1$sroa$0$0$copyload205$i = 0.0, $xf1$sroa$0$0$load206229$i = 0.0, $xf1$sroa$1$4$copyload$i = 0.0, $xf1$sroa$1$4$copyload209$i = 0.0, $xf1$sroa$1$4$load210230$i = 0.0, $xf1$sroa$2$8$copyload$i = 0.0, $xf1$sroa$2$8$copyload213$i = 0.0, $xf1$sroa$2$8$load216231$i = 0.0, $xf1$sroa$3$12$copyload$i = 0.0, $xf1$sroa$3$12$copyload219$i = 0.0, $xf1$sroa$3$12$load222232$i = 0.0, $xf2$sroa$0$0$copyload$i = 0.0, $xf2$sroa$0$0$copyload186$i = 0.0, $xf2$sroa$0$0$load188225$i = 0.0, $xf2$sroa$1$4$copyload$i = 0.0, $xf2$sroa$1$4$copyload191$i = 0.0, $xf2$sroa$1$4$load193226$i = 0.0, $xf2$sroa$2$8$copyload$i = 0.0, $xf2$sroa$2$8$copyload196$i = 0.0, $xf2$sroa$2$8$load198227$i = 0.0, $xf2$sroa$3$12$copyload$i = 0.0, $xf2$sroa$3$12$copyload201$i = 0.0, $xf2$sroa$3$12$load203228$i = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $edgeA$i = sp + 80 | 0;
 $edgeB$i = sp + 24 | 0;
 $incidentEdge$i = sp;
 $clipPoints1$i = sp + 32 | 0;
 $clipPoints2$i = sp + 56 | 0;
 $1 = HEAP32[(HEAP32[$this + 48 >> 2] | 0) + 12 >> 2] | 0;
 $3 = HEAP32[(HEAP32[$this + 52 >> 2] | 0) + 12 >> 2] | 0;
 $pointCount$i = $manifold + 60 | 0;
 HEAP32[$pointCount$i >> 2] = 0;
 $add$i = +HEAPF32[$1 + 8 >> 2] + +HEAPF32[$3 + 8 >> 2];
 HEAP32[$edgeA$i >> 2] = 0;
 $call$i = +__ZL19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5_($edgeA$i, $1, $xfA, $3, $xfB);
 if ($call$i > $add$i) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$edgeB$i >> 2] = 0;
 $call2$i = +__ZL19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5_($edgeB$i, $3, $xfB, $1, $xfA);
 if ($call2$i > $add$i) {
  STACKTOP = sp;
  return;
 }
 if ($call2$i > $call$i * .9800000190734863 + .0010000000474974513) {
  $xf1$sroa$0$0$copyload$i = +HEAPF32[$xfB >> 2];
  $xf1$sroa$1$4$copyload$i = +HEAPF32[$xfB + 4 >> 2];
  $xf1$sroa$2$8$copyload$i = +HEAPF32[$xfB + 8 >> 2];
  $xf1$sroa$3$12$copyload$i = +HEAPF32[$xfB + 12 >> 2];
  $xf2$sroa$0$0$copyload$i = +HEAPF32[$xfA >> 2];
  $xf2$sroa$1$4$copyload$i = +HEAPF32[$xfA + 4 >> 2];
  $xf2$sroa$2$8$copyload$i = +HEAPF32[$xfA + 8 >> 2];
  $xf2$sroa$3$12$copyload$i = +HEAPF32[$xfA + 12 >> 2];
  $8 = HEAP32[$edgeB$i >> 2] | 0;
  HEAP32[$manifold + 56 >> 2] = 2;
  $edge1$0$i = $8;
  $flip$0$i = 1;
  $poly1$0$i = $3;
  $poly2$0$i = $1;
  $xf1$sroa$0$0$load206229$i = $xf1$sroa$0$0$copyload$i;
  $xf1$sroa$1$4$load210230$i = $xf1$sroa$1$4$copyload$i;
  $xf1$sroa$2$8$load216231$i = $xf1$sroa$2$8$copyload$i;
  $xf1$sroa$3$12$load222232$i = $xf1$sroa$3$12$copyload$i;
  $xf2$sroa$0$0$load188225$i = $xf2$sroa$0$0$copyload$i;
  $xf2$sroa$1$4$load193226$i = $xf2$sroa$1$4$copyload$i;
  $xf2$sroa$2$8$load198227$i = $xf2$sroa$2$8$copyload$i;
  $xf2$sroa$3$12$load203228$i = $xf2$sroa$3$12$copyload$i;
 } else {
  $xf1$sroa$0$0$copyload205$i = +HEAPF32[$xfA >> 2];
  $xf1$sroa$1$4$copyload209$i = +HEAPF32[$xfA + 4 >> 2];
  $xf1$sroa$2$8$copyload213$i = +HEAPF32[$xfA + 8 >> 2];
  $xf1$sroa$3$12$copyload219$i = +HEAPF32[$xfA + 12 >> 2];
  $xf2$sroa$0$0$copyload186$i = +HEAPF32[$xfB >> 2];
  $xf2$sroa$1$4$copyload191$i = +HEAPF32[$xfB + 4 >> 2];
  $xf2$sroa$2$8$copyload196$i = +HEAPF32[$xfB + 8 >> 2];
  $xf2$sroa$3$12$copyload201$i = +HEAPF32[$xfB + 12 >> 2];
  $9 = HEAP32[$edgeA$i >> 2] | 0;
  HEAP32[$manifold + 56 >> 2] = 1;
  $edge1$0$i = $9;
  $flip$0$i = 0;
  $poly1$0$i = $1;
  $poly2$0$i = $3;
  $xf1$sroa$0$0$load206229$i = $xf1$sroa$0$0$copyload205$i;
  $xf1$sroa$1$4$load210230$i = $xf1$sroa$1$4$copyload209$i;
  $xf1$sroa$2$8$load216231$i = $xf1$sroa$2$8$copyload213$i;
  $xf1$sroa$3$12$load222232$i = $xf1$sroa$3$12$copyload219$i;
  $xf2$sroa$0$0$load188225$i = $xf2$sroa$0$0$copyload186$i;
  $xf2$sroa$1$4$load193226$i = $xf2$sroa$1$4$copyload191$i;
  $xf2$sroa$2$8$load198227$i = $xf2$sroa$2$8$copyload196$i;
  $xf2$sroa$3$12$load203228$i = $xf2$sroa$3$12$copyload201$i;
 }
 $10 = HEAP32[$poly2$0$i + 148 >> 2] | 0;
 if (!(($edge1$0$i | 0) > -1)) ___assert_fail(5264, 5312, 151, 5368);
 $11 = HEAP32[$poly1$0$i + 148 >> 2] | 0;
 if (($11 | 0) <= ($edge1$0$i | 0)) ___assert_fail(5264, 5312, 151, 5368);
 $12 = +HEAPF32[$poly1$0$i + ($edge1$0$i << 3) + 84 >> 2];
 $13 = +HEAPF32[$poly1$0$i + ($edge1$0$i << 3) + 88 >> 2];
 $sub$i$i$i = $xf1$sroa$3$12$load222232$i * $12 - $xf1$sroa$2$8$load216231$i * $13;
 $add$i$i157$i = $xf1$sroa$2$8$load216231$i * $12 + $xf1$sroa$3$12$load222232$i * $13;
 $add$i66$i$i = $xf2$sroa$3$12$load203228$i * $sub$i$i$i + $xf2$sroa$2$8$load198227$i * $add$i$i157$i;
 $add8$i$i$i = $xf2$sroa$3$12$load203228$i * $add$i$i157$i - $xf2$sroa$2$8$load198227$i * $sub$i$i$i;
 if (($10 | 0) > 0) {
  $i$071$i$i = 0;
  $index$073$i$i = 0;
  $minDot$072$i$i = 3.4028234663852886e+38;
  while (1) {
   $add$i59$i$i = $add$i66$i$i * +HEAPF32[$poly2$0$i + ($i$071$i$i << 3) + 84 >> 2] + $add8$i$i$i * +HEAPF32[$poly2$0$i + ($i$071$i$i << 3) + 88 >> 2];
   $cmp9$i$i = $add$i59$i$i < $minDot$072$i$i;
   $index$1$i$i = $cmp9$i$i ? $i$071$i$i : $index$073$i$i;
   $i$071$i$i = $i$071$i$i + 1 | 0;
   if (($i$071$i$i | 0) == ($10 | 0)) {
    $index$0$lcssa$i$i = $index$1$i$i;
    break;
   } else {
    $index$073$i$i = $index$1$i$i;
    $minDot$072$i$i = $cmp9$i$i ? $add$i59$i$i : $minDot$072$i$i;
   }
  }
 } else $index$0$lcssa$i$i = 0;
 $add$i158$i = $index$0$lcssa$i$i + 1 | 0;
 $add$$i$i = ($add$i158$i | 0) < ($10 | 0) ? $add$i158$i : 0;
 $17 = +HEAPF32[$poly2$0$i + ($index$0$lcssa$i$i << 3) + 20 >> 2];
 $18 = +HEAPF32[$poly2$0$i + ($index$0$lcssa$i$i << 3) + 24 >> 2];
 $19 = +($xf2$sroa$0$0$load188225$i + ($xf2$sroa$3$12$load203228$i * $17 - $xf2$sroa$2$8$load198227$i * $18));
 $20 = +($xf2$sroa$1$4$load193226$i + ($xf2$sroa$2$8$load198227$i * $17 + $xf2$sroa$3$12$load203228$i * $18));
 $21 = $incidentEdge$i;
 HEAPF32[$21 >> 2] = $19;
 HEAPF32[$21 + 4 >> 2] = $20;
 $conv$i$i = $edge1$0$i & 255;
 $id$i$i = $incidentEdge$i + 8 | 0;
 HEAP8[$id$i$i >> 0] = $conv$i$i;
 HEAP8[$id$i$i + 1 >> 0] = $index$0$lcssa$i$i;
 HEAP8[$id$i$i + 2 >> 0] = 1;
 HEAP8[$id$i$i + 3 >> 0] = 0;
 $25 = +HEAPF32[$poly2$0$i + ($add$$i$i << 3) + 20 >> 2];
 $26 = +HEAPF32[$poly2$0$i + ($add$$i$i << 3) + 24 >> 2];
 $27 = +($xf2$sroa$0$0$load188225$i + ($xf2$sroa$3$12$load203228$i * $25 - $xf2$sroa$2$8$load198227$i * $26));
 $28 = +($xf2$sroa$1$4$load193226$i + ($xf2$sroa$2$8$load198227$i * $25 + $xf2$sroa$3$12$load203228$i * $26));
 $29 = $incidentEdge$i + 12 | 0;
 HEAPF32[$29 >> 2] = $27;
 HEAPF32[$29 + 4 >> 2] = $28;
 $id32$i$i = $incidentEdge$i + 20 | 0;
 HEAP8[$id32$i$i >> 0] = $conv$i$i;
 HEAP8[$id32$i$i + 1 >> 0] = $add$$i$i;
 HEAP8[$id32$i$i + 2 >> 0] = 1;
 HEAP8[$id32$i$i + 3 >> 0] = 0;
 $add12$i = $edge1$0$i + 1 | 0;
 $add12$$i = ($add12$i | 0) < ($11 | 0) ? $add12$i : 0;
 $33 = $poly1$0$i + ($edge1$0$i << 3) + 20 | 0;
 $39 = +HEAPF32[$33 >> 2];
 $40 = +HEAPF32[$33 + 4 >> 2];
 $41 = $poly1$0$i + ($add12$$i << 3) + 20 | 0;
 $47 = +HEAPF32[$41 >> 2];
 $48 = +HEAPF32[$41 + 4 >> 2];
 $sub$i147$i = $47 - $39;
 $sub3$i$i = $48 - $40;
 $call$i$i$i$i = +Math_sqrt(+($sub$i147$i * $sub$i147$i + $sub3$i$i * $sub3$i$i));
 if ($call$i$i$i$i < 1.1920928955078125e-7) {
  $sub$i147223$i = $sub$i147$i;
  $sub3$i224$i = $sub3$i$i;
 } else {
  $div$i$i = 1.0 / $call$i$i$i$i;
  $sub$i147223$i = $sub$i147$i * $div$i$i;
  $sub3$i224$i = $sub3$i$i * $div$i$i;
 }
 $sub$i119$i = $xf1$sroa$3$12$load222232$i * $sub$i147223$i - $xf1$sroa$2$8$load216231$i * $sub3$i224$i;
 $add$i121$i = $xf1$sroa$3$12$load222232$i * $sub3$i224$i + $xf1$sroa$2$8$load216231$i * $sub$i147223$i;
 $mul1$i$i = -$sub$i119$i;
 $add$i101$i = $xf1$sroa$0$0$load206229$i + ($xf1$sroa$3$12$load222232$i * $39 - $xf1$sroa$2$8$load216231$i * $40);
 $add17$i106$i = $xf1$sroa$1$4$load210230$i + ($xf1$sroa$2$8$load216231$i * $39 + $xf1$sroa$3$12$load222232$i * $40);
 $add$i82$i = $add$i101$i * $add$i121$i + $add17$i106$i * $mul1$i$i;
 if ((__Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi($clipPoints1$i, $incidentEdge$i, $mul1$i$i, -$add$i121$i, $add$i - ($add$i101$i * $sub$i119$i + $add17$i106$i * $add$i121$i), $edge1$0$i) | 0) < 2) {
  STACKTOP = sp;
  return;
 }
 if ((__Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi($clipPoints2$i, $clipPoints1$i, $sub$i119$i, $add$i121$i, $add$i + (($xf1$sroa$0$0$load206229$i + ($xf1$sroa$3$12$load222232$i * $47 - $xf1$sroa$2$8$load216231$i * $48)) * $sub$i119$i + ($xf1$sroa$1$4$load210230$i + ($xf1$sroa$2$8$load216231$i * $47 + $xf1$sroa$3$12$load222232$i * $48)) * $add$i121$i), $add12$$i) | 0) < 2) {
  STACKTOP = sp;
  return;
 }
 $49 = +$sub3$i224$i;
 $50 = +-$sub$i147223$i;
 $51 = $manifold + 40 | 0;
 HEAPF32[$51 >> 2] = $49;
 HEAPF32[$51 + 4 >> 2] = $50;
 $55 = +(($39 + $47) * .5);
 $56 = +(($40 + $48) * .5);
 $57 = $manifold + 48 | 0;
 HEAPF32[$57 >> 2] = $55;
 HEAPF32[$57 + 4 >> 2] = $56;
 $tobool$i = $flip$0$i << 24 >> 24 == 0;
 $i$0233$i = 0;
 $pointCount52$0234$i = 0;
 while (1) {
  $61 = +HEAPF32[$clipPoints2$i + ($i$0233$i * 12 | 0) >> 2];
  $62 = +HEAPF32[$clipPoints2$i + ($i$0233$i * 12 | 0) + 4 >> 2];
  if (!($add$i121$i * $61 + $62 * $mul1$i$i - $add$i82$i <= $add$i)) $pointCount52$1$i = $pointCount52$0234$i; else {
   $sub$i$i = $61 - $xf2$sroa$0$0$load188225$i;
   $sub4$i$i = $62 - $xf2$sroa$1$4$load193226$i;
   $64 = +($xf2$sroa$3$12$load203228$i * $sub$i$i + $xf2$sroa$2$8$load198227$i * $sub4$i$i);
   $65 = +($xf2$sroa$3$12$load203228$i * $sub4$i$i - $xf2$sroa$2$8$load198227$i * $sub$i$i);
   $66 = $manifold + ($pointCount52$0234$i * 20 | 0) | 0;
   HEAPF32[$66 >> 2] = $64;
   HEAPF32[$66 + 4 >> 2] = $65;
   $id$i = $manifold + ($pointCount52$0234$i * 20 | 0) + 16 | 0;
   $71 = HEAP32[$clipPoints2$i + ($i$0233$i * 12 | 0) + 8 >> 2] | 0;
   HEAP32[$id$i >> 2] = $71;
   if (!$tobool$i) {
    HEAP8[$id$i >> 0] = $71 >>> 8;
    HEAP8[$id$i + 1 >> 0] = $71;
    HEAP8[$id$i + 2 >> 0] = $71 >>> 24;
    HEAP8[$id$i + 3 >> 0] = $71 >>> 16;
   }
   $pointCount52$1$i = $pointCount52$0234$i + 1 | 0;
  }
  $i$0233$i = $i$0233$i + 1 | 0;
  if (($i$0233$i | 0) == 2) break; else $pointCount52$0234$i = $pointCount52$1$i;
 }
 HEAP32[$pointCount$i >> 2] = $pointCount52$1$i;
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2World_DrawDebugData_0($self) {
 $self = $self | 0;
 var $0 = 0, $1 = 0, $11 = 0, $12 = 0, $16 = 0, $2 = 0, $21 = 0, $22 = 0, $28 = 0, $29 = 0, $3 = 0, $31 = 0, $36 = 0, $37 = 0, $41 = 0, $46 = 0, $47 = 0, $51 = 0, $53 = 0, $55 = 0, $57 = 0, $59 = 0, $6 = 0, $61 = 0, $66 = 0, $68 = 0, $69 = 0, $72 = 0, $77 = 0, $78 = 0, $82 = 0, $aabb$sroa$0$0$copyload$i = 0.0, $aabb$sroa$1$4$copyload$i = 0.0, $aabb$sroa$2$8$copyload$i = 0.0, $aabb$sroa$3$12$copyload$i = 0.0, $b$095$i = 0, $b$097$i = 0, $b111$078$i = 0, $b111$080$i = 0, $b4$i$i$i = 0, $b4$i$i$i$i = 0, $b4$i$i64$i = 0, $b4$i$i67$i = 0, $b4$i$i71$i = 0, $b4$i$i77$i = 0, $b64$086$i = 0, $b64$088$i = 0, $c$0$i = 0, $c$0$in$i = 0, $color$i$i = 0, $color62$i = 0, $f$092$i = 0, $f$094$i = 0, $f74$083$i = 0, $f74$085$i = 0, $g3$i$i$i = 0, $g3$i$i$i$i = 0, $g3$i$i63$i = 0, $g3$i$i66$i = 0, $g3$i$i70$i = 0, $g3$i$i76$i = 0, $i$082$i = 0, $j$089$i = 0, $j$091$i = 0, $m_debugDraw$i = 0, $m_flags$i$i = 0, $m_nodeCapacity$i$i$i = 0, $m_nodes$i$i$i = 0, $m_proxies$i = 0, $m_proxyCount$i = 0, $m_xf$i$i = 0, $m_xf$i39$i = 0, $m_xf$i8$i$i = 0, $p1$i$i = 0, $p2$i$i = 0, $ref$tmp$i = 0, $ref$tmp16$i = 0, $ref$tmp21$i = 0, $ref$tmp27$i = 0, $ref$tmp29$i = 0, $s1$i$i = 0, $s2$i$i = 0, $vs$i = 0, $x$i$i = 0, $x$i42$i = 0, $x$i44$i = 0, $x1$i$i = 0, $x2$i$i = 0, $xf116$i = 0, $y$i$i = 0, $y$i43$i = 0, $y$i45$i = 0, $y$i47$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 $x1$i$i = sp;
 $x2$i$i = sp + 40 | 0;
 $p1$i$i = sp + 160 | 0;
 $p2$i$i = sp + 168 | 0;
 $color$i$i = sp + 176 | 0;
 $s1$i$i = sp + 16 | 0;
 $s2$i$i = sp + 8 | 0;
 $ref$tmp$i = sp + 132 | 0;
 $ref$tmp16$i = sp + 144 | 0;
 $ref$tmp21$i = sp + 108 | 0;
 $ref$tmp27$i = sp + 120 | 0;
 $ref$tmp29$i = sp + 96 | 0;
 $color62$i = sp + 48 | 0;
 $vs$i = sp + 64 | 0;
 $xf116$i = sp + 24 | 0;
 $m_debugDraw$i = $self + 102984 | 0;
 $0 = HEAP32[$m_debugDraw$i >> 2] | 0;
 if (($0 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 $1 = HEAP32[$0 + 4 >> 2] | 0;
 if (($1 & 1 | 0) != 0) {
  $b$095$i = HEAP32[$self + 102952 >> 2] | 0;
  if (($b$095$i | 0) != 0) {
   $g3$i$i$i = $ref$tmp$i + 4 | 0;
   $b4$i$i$i = $ref$tmp$i + 8 | 0;
   $g3$i$i70$i = $ref$tmp27$i + 4 | 0;
   $b4$i$i71$i = $ref$tmp27$i + 8 | 0;
   $g3$i$i66$i = $ref$tmp29$i + 4 | 0;
   $b4$i$i67$i = $ref$tmp29$i + 8 | 0;
   $g3$i$i63$i = $ref$tmp16$i + 4 | 0;
   $b4$i$i64$i = $ref$tmp16$i + 8 | 0;
   $g3$i$i76$i = $ref$tmp21$i + 4 | 0;
   $b4$i$i77$i = $ref$tmp21$i + 8 | 0;
   $b$097$i = $b$095$i;
   do {
    $m_xf$i$i = $b$097$i + 12 | 0;
    $f$092$i = HEAP32[$b$097$i + 100 >> 2] | 0;
    if (($f$092$i | 0) != 0) {
     $m_flags$i$i = $b$097$i + 4 | 0;
     $f$094$i = $f$092$i;
     do {
      $2 = HEAP16[$m_flags$i$i >> 1] | 0;
      do if (($2 & 32) == 0) {
       HEAPF32[$ref$tmp$i >> 2] = .5;
       HEAPF32[$g3$i$i$i >> 2] = .5;
       HEAPF32[$b4$i$i$i >> 2] = .30000001192092896;
       __ZN7b2World9DrawShapeEP9b2FixtureRK11b2TransformRK7b2Color($self, HEAP32[$f$094$i + 12 >> 2] | 0, $m_xf$i$i, $ref$tmp$i);
      } else {
       $3 = HEAP32[$b$097$i >> 2] | 0;
       if (($3 | 0) == 0) {
        HEAPF32[$ref$tmp16$i >> 2] = .5;
        HEAPF32[$g3$i$i63$i >> 2] = .8999999761581421;
        HEAPF32[$b4$i$i64$i >> 2] = .5;
        __ZN7b2World9DrawShapeEP9b2FixtureRK11b2TransformRK7b2Color($self, HEAP32[$f$094$i + 12 >> 2] | 0, $m_xf$i$i, $ref$tmp16$i);
        break;
       } else if (($3 | 0) == 1) {
        HEAPF32[$ref$tmp21$i >> 2] = .5;
        HEAPF32[$g3$i$i76$i >> 2] = .5;
        HEAPF32[$b4$i$i77$i >> 2] = .8999999761581421;
        __ZN7b2World9DrawShapeEP9b2FixtureRK11b2TransformRK7b2Color($self, HEAP32[$f$094$i + 12 >> 2] | 0, $m_xf$i$i, $ref$tmp21$i);
        break;
       } else if (($2 & 2) == 0) {
        HEAPF32[$ref$tmp27$i >> 2] = .6000000238418579;
        HEAPF32[$g3$i$i70$i >> 2] = .6000000238418579;
        HEAPF32[$b4$i$i71$i >> 2] = .6000000238418579;
        __ZN7b2World9DrawShapeEP9b2FixtureRK11b2TransformRK7b2Color($self, HEAP32[$f$094$i + 12 >> 2] | 0, $m_xf$i$i, $ref$tmp27$i);
        break;
       } else {
        HEAPF32[$ref$tmp29$i >> 2] = .8999999761581421;
        HEAPF32[$g3$i$i66$i >> 2] = .699999988079071;
        HEAPF32[$b4$i$i67$i >> 2] = .699999988079071;
        __ZN7b2World9DrawShapeEP9b2FixtureRK11b2TransformRK7b2Color($self, HEAP32[$f$094$i + 12 >> 2] | 0, $m_xf$i$i, $ref$tmp29$i);
        break;
       }
      } while (0);
      $f$094$i = HEAP32[$f$094$i + 4 >> 2] | 0;
     } while (($f$094$i | 0) != 0);
    }
    $b$097$i = HEAP32[$b$097$i + 96 >> 2] | 0;
   } while (($b$097$i | 0) != 0);
  }
 }
 if (($1 & 2 | 0) != 0) {
  $j$089$i = HEAP32[$self + 102956 >> 2] | 0;
  if (($j$089$i | 0) != 0) {
   $g3$i$i$i$i = $color$i$i + 4 | 0;
   $b4$i$i$i$i = $color$i$i + 8 | 0;
   $j$091$i = $j$089$i;
   do {
    $m_xf$i8$i$i = (HEAP32[$j$091$i + 52 >> 2] | 0) + 12 | 0;
    $6 = (HEAP32[$j$091$i + 48 >> 2] | 0) + 12 | 0;
    $11 = HEAP32[$6 + 4 >> 2] | 0;
    $12 = $x1$i$i;
    HEAP32[$12 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$12 + 4 >> 2] = $11;
    $16 = $m_xf$i8$i$i;
    $21 = HEAP32[$16 + 4 >> 2] | 0;
    $22 = $x2$i$i;
    HEAP32[$22 >> 2] = HEAP32[$16 >> 2];
    HEAP32[$22 + 4 >> 2] = $21;
    FUNCTION_TABLE_vii[HEAP32[HEAP32[$j$091$i >> 2] >> 2] & 127]($p1$i$i, $j$091$i);
    FUNCTION_TABLE_vii[HEAP32[(HEAP32[$j$091$i >> 2] | 0) + 4 >> 2] & 127]($p2$i$i, $j$091$i);
    HEAPF32[$color$i$i >> 2] = .5;
    HEAPF32[$g3$i$i$i$i >> 2] = .800000011920929;
    HEAPF32[$b4$i$i$i$i >> 2] = .800000011920929;
    $28 = HEAP32[$j$091$i + 4 >> 2] | 0;
    if (($28 | 0) == 3) {
     $29 = HEAP32[$m_debugDraw$i >> 2] | 0;
     FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$29 >> 2] | 0) + 24 >> 2] & 63]($29, $p1$i$i, $p2$i$i, $color$i$i);
    } else if (($28 | 0) == 4) {
     $31 = $j$091$i + 68 | 0;
     $36 = HEAP32[$31 + 4 >> 2] | 0;
     $37 = $s1$i$i;
     HEAP32[$37 >> 2] = HEAP32[$31 >> 2];
     HEAP32[$37 + 4 >> 2] = $36;
     $41 = $j$091$i + 76 | 0;
     $46 = HEAP32[$41 + 4 >> 2] | 0;
     $47 = $s2$i$i;
     HEAP32[$47 >> 2] = HEAP32[$41 >> 2];
     HEAP32[$47 + 4 >> 2] = $46;
     $51 = HEAP32[$m_debugDraw$i >> 2] | 0;
     FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$51 >> 2] | 0) + 24 >> 2] & 63]($51, $s1$i$i, $p1$i$i, $color$i$i);
     $53 = HEAP32[$m_debugDraw$i >> 2] | 0;
     FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$53 >> 2] | 0) + 24 >> 2] & 63]($53, $s2$i$i, $p2$i$i, $color$i$i);
     $55 = HEAP32[$m_debugDraw$i >> 2] | 0;
     FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$55 >> 2] | 0) + 24 >> 2] & 63]($55, $s1$i$i, $s2$i$i, $color$i$i);
    } else if (($28 | 0) != 5) {
     $57 = HEAP32[$m_debugDraw$i >> 2] | 0;
     FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$57 >> 2] | 0) + 24 >> 2] & 63]($57, $x1$i$i, $p1$i$i, $color$i$i);
     $59 = HEAP32[$m_debugDraw$i >> 2] | 0;
     FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$59 >> 2] | 0) + 24 >> 2] & 63]($59, $p1$i$i, $p2$i$i, $color$i$i);
     $61 = HEAP32[$m_debugDraw$i >> 2] | 0;
     FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$61 >> 2] | 0) + 24 >> 2] & 63]($61, $x2$i$i, $p2$i$i, $color$i$i);
    }
    $j$091$i = HEAP32[$j$091$i + 12 >> 2] | 0;
   } while (($j$091$i | 0) != 0);
  }
 }
 if (($1 & 8 | 0) != 0) {
  $c$0$in$i = $self + 102932 | 0;
  while (1) {
   $c$0$i = HEAP32[$c$0$in$i >> 2] | 0;
   if (($c$0$i | 0) == 0) break; else $c$0$in$i = $c$0$i + 12 | 0;
  }
 }
 L42 : do if (($1 & 4 | 0) != 0) {
  HEAPF32[$color62$i >> 2] = .8999999761581421;
  HEAPF32[$color62$i + 4 >> 2] = .30000001192092896;
  HEAPF32[$color62$i + 8 >> 2] = .8999999761581421;
  $b64$086$i = HEAP32[$self + 102952 >> 2] | 0;
  if (($b64$086$i | 0) != 0) {
   $m_nodeCapacity$i$i$i = $self + 102884 | 0;
   $m_nodes$i$i$i = $self + 102876 | 0;
   $y$i47$i = $vs$i + 4 | 0;
   $x$i44$i = $vs$i + 8 | 0;
   $y$i45$i = $vs$i + 12 | 0;
   $x$i42$i = $vs$i + 16 | 0;
   $y$i43$i = $vs$i + 20 | 0;
   $x$i$i = $vs$i + 24 | 0;
   $y$i$i = $vs$i + 28 | 0;
   $b64$088$i = $b64$086$i;
   L45 : while (1) {
    if (!((HEAP16[$b64$088$i + 4 >> 1] & 32) == 0)) {
     $f74$083$i = HEAP32[$b64$088$i + 100 >> 2] | 0;
     if (($f74$083$i | 0) != 0) {
      $f74$085$i = $f74$083$i;
      do {
       $m_proxyCount$i = $f74$085$i + 28 | 0;
       if ((HEAP32[$m_proxyCount$i >> 2] | 0) > 0) {
        $m_proxies$i = $f74$085$i + 24 | 0;
        $i$082$i = 0;
        do {
         $66 = HEAP32[(HEAP32[$m_proxies$i >> 2] | 0) + ($i$082$i * 28 | 0) + 24 >> 2] | 0;
         if (!(($66 | 0) > -1)) {
          label = 37;
          break L45;
         }
         if ((HEAP32[$m_nodeCapacity$i$i$i >> 2] | 0) <= ($66 | 0)) {
          label = 37;
          break L45;
         }
         $68 = HEAP32[$m_nodes$i$i$i >> 2] | 0;
         $aabb$sroa$0$0$copyload$i = +HEAPF32[$68 + ($66 * 36 | 0) >> 2];
         $aabb$sroa$1$4$copyload$i = +HEAPF32[$68 + ($66 * 36 | 0) + 4 >> 2];
         $aabb$sroa$2$8$copyload$i = +HEAPF32[$68 + ($66 * 36 | 0) + 8 >> 2];
         $aabb$sroa$3$12$copyload$i = +HEAPF32[$68 + ($66 * 36 | 0) + 12 >> 2];
         HEAPF32[$vs$i >> 2] = $aabb$sroa$0$0$copyload$i;
         HEAPF32[$y$i47$i >> 2] = $aabb$sroa$1$4$copyload$i;
         HEAPF32[$x$i44$i >> 2] = $aabb$sroa$2$8$copyload$i;
         HEAPF32[$y$i45$i >> 2] = $aabb$sroa$1$4$copyload$i;
         HEAPF32[$x$i42$i >> 2] = $aabb$sroa$2$8$copyload$i;
         HEAPF32[$y$i43$i >> 2] = $aabb$sroa$3$12$copyload$i;
         HEAPF32[$x$i$i >> 2] = $aabb$sroa$0$0$copyload$i;
         HEAPF32[$y$i$i >> 2] = $aabb$sroa$3$12$copyload$i;
         $69 = HEAP32[$m_debugDraw$i >> 2] | 0;
         FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$69 >> 2] | 0) + 8 >> 2] & 63]($69, $vs$i, 4, $color62$i);
         $i$082$i = $i$082$i + 1 | 0;
        } while (($i$082$i | 0) < (HEAP32[$m_proxyCount$i >> 2] | 0));
       }
       $f74$085$i = HEAP32[$f74$085$i + 4 >> 2] | 0;
      } while (($f74$085$i | 0) != 0);
     }
    }
    $b64$088$i = HEAP32[$b64$088$i + 96 >> 2] | 0;
    if (($b64$088$i | 0) == 0) break L42;
   }
   if ((label | 0) == 37) ___assert_fail(14568, 14512, 159, 14632);
  }
 } while (0);
 if (($1 & 16 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 $b111$078$i = HEAP32[$self + 102952 >> 2] | 0;
 if (($b111$078$i | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 $b111$080$i = $b111$078$i;
 do {
  $m_xf$i39$i = $b111$080$i + 12 | 0;
  HEAP32[$xf116$i + 0 >> 2] = HEAP32[$m_xf$i39$i + 0 >> 2];
  HEAP32[$xf116$i + 4 >> 2] = HEAP32[$m_xf$i39$i + 4 >> 2];
  HEAP32[$xf116$i + 8 >> 2] = HEAP32[$m_xf$i39$i + 8 >> 2];
  HEAP32[$xf116$i + 12 >> 2] = HEAP32[$m_xf$i39$i + 12 >> 2];
  $72 = $b111$080$i + 44 | 0;
  $77 = HEAP32[$72 + 4 >> 2] | 0;
  $78 = $xf116$i;
  HEAP32[$78 >> 2] = HEAP32[$72 >> 2];
  HEAP32[$78 + 4 >> 2] = $77;
  $82 = HEAP32[$m_debugDraw$i >> 2] | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$82 >> 2] | 0) + 28 >> 2] & 127]($82, $xf116$i);
  $b111$080$i = HEAP32[$b111$080$i + 96 >> 2] | 0;
 } while (($b111$080$i | 0) != 0);
 STACKTOP = sp;
 return;
}
function __ZN15b2RevoluteJoint24SolveVelocityConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $30 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $48 = 0.0, $51 = 0.0, $52 = 0.0, $58 = 0.0, $61 = 0.0, $62 = 0.0, $78 = 0.0, $8 = 0.0, $80 = 0.0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0, $Cdot42 = 0, $add149$pn = 0.0, $add156$pn = 0.0, $add20 = 0.0, $add53 = 0.0, $add99 = 0.0, $cmp = 0, $cond$i$i = 0.0, $cond$i2$i = 0.0, $impulse169 = 0, $m_impulse51 = 0, $m_impulse96 = 0, $m_indexA = 0, $m_indexB = 0, $m_limitState31 = 0, $m_mass = 0, $m_motorImpulse = 0, $mul$i110$pn = 0.0, $mul$i129$pn = 0.0, $mul1$i112$pn = 0.0, $mul1$i131$pn = 0.0, $mul150$pn = 0.0, $mul157$pn = 0.0, $mul18 = 0.0, $reduced = 0, $reduced116 = 0, $sub$i203 = 0.0, $sub$i203286 = 0.0, $sub$i203286$pn = 0.0, $sub$i214 = 0.0, $sub124 = 0.0, $sub2$i205 = 0.0, $sub2$i205287 = 0.0, $sub2$i205287$pn = 0.0, $sub21 = 0.0, $sub24 = 0.0, $sub3$i207 = 0.0, $sub3$i207288 = 0.0, $sub3$i217 = 0.0, $sub75 = 0.0, $tmp = 0, $v194 = 0, $v202 = 0, $vA$sroa$0$0$load281291 = 0.0, $vA$sroa$1$4$load285292 = 0.0, $vB$sroa$0$0$load273289 = 0.0, $vB$sroa$1$4$load277290 = 0.0, $velocities = 0, $w198 = 0, $w206 = 0, $wA$0 = 0.0, $wA$1 = 0.0, $wB$0 = 0.0, $wB$1 = 0.0, $x$i222 = 0, $x$i244 = 0, $x$i71 = 0, $x$i92 = 0, $x174 = 0, $x2$i194 = 0, $y$i220 = 0, $y$i242 = 0, $y$i69 = 0, $y$i90 = 0, $y132 = 0, $y178 = 0, $y3$i138 = 0, $y3$i166 = 0, $y3$i197 = 0, $y83 = 0, $z = 0, $z5$i200 = 0, $z97 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $Cdot42 = sp + 40 | 0;
 $tmp = sp;
 $reduced = sp + 16 | 0;
 $reduced116 = sp + 24 | 0;
 $impulse169 = sp + 32 | 0;
 $m_indexA = $this + 128 | 0;
 $0 = HEAP32[$m_indexA >> 2] | 0;
 $velocities = $data + 28 | 0;
 $1 = HEAP32[$velocities >> 2] | 0;
 $2 = $1 + ($0 * 12 | 0) | 0;
 $8 = +HEAPF32[$2 >> 2];
 $9 = +HEAPF32[$2 + 4 >> 2];
 $10 = +HEAPF32[$1 + ($0 * 12 | 0) + 8 >> 2];
 $m_indexB = $this + 132 | 0;
 $11 = HEAP32[$m_indexB >> 2] | 0;
 $12 = $1 + ($11 * 12 | 0) | 0;
 $18 = +HEAPF32[$12 >> 2];
 $19 = +HEAPF32[$12 + 4 >> 2];
 $20 = +HEAPF32[$1 + ($11 * 12 | 0) + 8 >> 2];
 $21 = +HEAPF32[$this + 168 >> 2];
 $22 = +HEAPF32[$this + 172 >> 2];
 $23 = +HEAPF32[$this + 176 >> 2];
 $24 = +HEAPF32[$this + 180 >> 2];
 $cmp = $23 + $24 == 0.0;
 if ((HEAP8[$this + 100 >> 0] | 0) == 0) {
  $wA$0 = $10;
  $wB$0 = $20;
 } else if ((HEAP32[$this + 224 >> 2] | 0) == 3 | $cmp) {
  $wA$0 = $10;
  $wB$0 = $20;
 } else {
  $m_motorImpulse = $this + 96 | 0;
  $30 = +HEAPF32[$m_motorImpulse >> 2];
  $mul18 = +HEAPF32[$data >> 2] * +HEAPF32[$this + 104 >> 2];
  $add20 = $30 - +HEAPF32[$this + 220 >> 2] * ($20 - $10 - +HEAPF32[$this + 108 >> 2]);
  $sub21 = -$mul18;
  $cond$i$i = $add20 < $mul18 ? $add20 : $mul18;
  $cond$i2$i = $cond$i$i < $sub21 ? $sub21 : $cond$i$i;
  HEAPF32[$m_motorImpulse >> 2] = $cond$i2$i;
  $sub24 = $cond$i2$i - $30;
  $wA$0 = $10 - $23 * $sub24;
  $wB$0 = $20 + $24 * $sub24;
 }
 if ((HEAP8[$this + 112 >> 0] | 0) != 0) {
  $m_limitState31 = $this + 224 | 0;
  if (!((HEAP32[$m_limitState31 >> 2] | 0) == 0 | $cmp)) {
   $y$i242 = $this + 148 | 0;
   $x$i244 = $this + 144 | 0;
   $y$i220 = $this + 140 | 0;
   $x$i222 = $this + 136 | 0;
   $sub$i214 = $18 - $wB$0 * +HEAPF32[$y$i242 >> 2] - $8 + $wA$0 * +HEAPF32[$y$i220 >> 2];
   $sub3$i217 = $19 + $wB$0 * +HEAPF32[$x$i244 >> 2] - $9 - $wA$0 * +HEAPF32[$x$i222 >> 2];
   HEAPF32[$Cdot42 >> 2] = $sub$i214;
   HEAPF32[$Cdot42 + 4 >> 2] = $sub3$i217;
   HEAPF32[$Cdot42 + 8 >> 2] = $wB$0 - $wA$0;
   $m_mass = $this + 184 | 0;
   __ZNK7b2Mat337Solve33ERK6b2Vec3($tmp, $m_mass, $Cdot42);
   $41 = +HEAPF32[$tmp >> 2];
   $sub$i203 = -$41;
   $42 = +HEAPF32[$tmp + 4 >> 2];
   $sub2$i205 = -$42;
   $43 = +HEAPF32[$tmp + 8 >> 2];
   $sub3$i207 = -$43;
   $44 = HEAP32[$m_limitState31 >> 2] | 0;
   do if (($44 | 0) == 1) {
    $m_impulse51 = $this + 84 | 0;
    $z = $this + 92 | 0;
    $48 = +HEAPF32[$z >> 2];
    $add53 = $48 - $43;
    if ($add53 < 0.0) {
     __ZNK7b2Mat337Solve22ERK6b2Vec2($reduced, $m_mass, $48 * +HEAPF32[$this + 208 >> 2] - $sub$i214, $48 * +HEAPF32[$this + 212 >> 2] - $sub3$i217);
     $51 = +HEAPF32[$reduced >> 2];
     $52 = +HEAPF32[$reduced + 4 >> 2];
     $sub75 = -+HEAPF32[$z >> 2];
     HEAPF32[$m_impulse51 >> 2] = $51 + +HEAPF32[$m_impulse51 >> 2];
     $y83 = $this + 88 | 0;
     HEAPF32[$y83 >> 2] = $52 + +HEAPF32[$y83 >> 2];
     HEAPF32[$z >> 2] = 0.0;
     $sub$i203286 = $51;
     $sub2$i205287 = $52;
     $sub3$i207288 = $sub75;
     break;
    } else {
     HEAPF32[$m_impulse51 >> 2] = +HEAPF32[$m_impulse51 >> 2] - $41;
     $y3$i166 = $this + 88 | 0;
     HEAPF32[$y3$i166 >> 2] = +HEAPF32[$y3$i166 >> 2] - $42;
     HEAPF32[$z >> 2] = $add53;
     $sub$i203286 = $sub$i203;
     $sub2$i205287 = $sub2$i205;
     $sub3$i207288 = $sub3$i207;
     break;
    }
   } else if (($44 | 0) == 3) {
    $x2$i194 = $this + 84 | 0;
    HEAPF32[$x2$i194 >> 2] = +HEAPF32[$x2$i194 >> 2] - $41;
    $y3$i197 = $this + 88 | 0;
    HEAPF32[$y3$i197 >> 2] = +HEAPF32[$y3$i197 >> 2] - $42;
    $z5$i200 = $this + 92 | 0;
    HEAPF32[$z5$i200 >> 2] = +HEAPF32[$z5$i200 >> 2] - $43;
    $sub$i203286 = $sub$i203;
    $sub2$i205287 = $sub2$i205;
    $sub3$i207288 = $sub3$i207;
   } else if (($44 | 0) == 2) {
    $m_impulse96 = $this + 84 | 0;
    $z97 = $this + 92 | 0;
    $58 = +HEAPF32[$z97 >> 2];
    $add99 = $58 - $43;
    if ($add99 > 0.0) {
     __ZNK7b2Mat337Solve22ERK6b2Vec2($reduced116, $m_mass, $58 * +HEAPF32[$this + 208 >> 2] - $sub$i214, $58 * +HEAPF32[$this + 212 >> 2] - $sub3$i217);
     $61 = +HEAPF32[$reduced116 >> 2];
     $62 = +HEAPF32[$reduced116 + 4 >> 2];
     $sub124 = -+HEAPF32[$z97 >> 2];
     HEAPF32[$m_impulse96 >> 2] = $61 + +HEAPF32[$m_impulse96 >> 2];
     $y132 = $this + 88 | 0;
     HEAPF32[$y132 >> 2] = $62 + +HEAPF32[$y132 >> 2];
     HEAPF32[$z97 >> 2] = 0.0;
     $sub$i203286 = $61;
     $sub2$i205287 = $62;
     $sub3$i207288 = $sub124;
     break;
    } else {
     HEAPF32[$m_impulse96 >> 2] = +HEAPF32[$m_impulse96 >> 2] - $41;
     $y3$i138 = $this + 88 | 0;
     HEAPF32[$y3$i138 >> 2] = +HEAPF32[$y3$i138 >> 2] - $42;
     HEAPF32[$z97 >> 2] = $add99;
     $sub$i203286 = $sub$i203;
     $sub2$i205287 = $sub2$i205;
     $sub3$i207288 = $sub3$i207;
     break;
    }
   } else {
    $sub$i203286 = $sub$i203;
    $sub2$i205287 = $sub2$i205;
    $sub3$i207288 = $sub3$i207;
   } while (0);
   $add149$pn = $sub3$i207288 + ($sub2$i205287 * +HEAPF32[$x$i222 >> 2] - $sub$i203286 * +HEAPF32[$y$i220 >> 2]);
   $add156$pn = $sub3$i207288 + ($sub2$i205287 * +HEAPF32[$x$i244 >> 2] - $sub$i203286 * +HEAPF32[$y$i242 >> 2]);
   $sub$i203286$pn = $sub$i203286;
   $sub2$i205287$pn = $sub2$i205287;
   $mul$i110$pn = $22 * $sub$i203286$pn;
   $mul1$i112$pn = $22 * $sub2$i205287$pn;
   $mul$i129$pn = $21 * $sub$i203286$pn;
   $mul1$i131$pn = $21 * $sub2$i205287$pn;
   $vB$sroa$0$0$load273289 = $18 + $mul$i110$pn;
   $vB$sroa$1$4$load277290 = $19 + $mul1$i112$pn;
   $vA$sroa$0$0$load281291 = $8 - $mul$i129$pn;
   $vA$sroa$1$4$load285292 = $9 - $mul1$i131$pn;
   $mul150$pn = $23 * $add149$pn;
   $mul157$pn = $24 * $add156$pn;
   $wA$1 = $wA$0 - $mul150$pn;
   $wB$1 = $wB$0 + $mul157$pn;
   $86 = HEAP32[$m_indexA >> 2] | 0;
   $87 = HEAP32[$velocities >> 2] | 0;
   $v194 = $87 + ($86 * 12 | 0) | 0;
   $88 = +$vA$sroa$0$0$load281291;
   $89 = +$vA$sroa$1$4$load285292;
   $90 = $v194;
   $91 = $90;
   HEAPF32[$91 >> 2] = $88;
   $92 = $90 + 4 | 0;
   $93 = $92;
   HEAPF32[$93 >> 2] = $89;
   $94 = HEAP32[$m_indexA >> 2] | 0;
   $95 = HEAP32[$velocities >> 2] | 0;
   $w198 = $95 + ($94 * 12 | 0) + 8 | 0;
   HEAPF32[$w198 >> 2] = $wA$1;
   $96 = HEAP32[$m_indexB >> 2] | 0;
   $v202 = $95 + ($96 * 12 | 0) | 0;
   $97 = +$vB$sroa$0$0$load273289;
   $98 = +$vB$sroa$1$4$load277290;
   $99 = $v202;
   $100 = $99;
   HEAPF32[$100 >> 2] = $97;
   $101 = $99 + 4 | 0;
   $102 = $101;
   HEAPF32[$102 >> 2] = $98;
   $103 = HEAP32[$m_indexB >> 2] | 0;
   $104 = HEAP32[$velocities >> 2] | 0;
   $w206 = $104 + ($103 * 12 | 0) + 8 | 0;
   HEAPF32[$w206 >> 2] = $wB$1;
   STACKTOP = sp;
   return;
  }
 }
 $y$i90 = $this + 148 | 0;
 $x$i92 = $this + 144 | 0;
 $y$i69 = $this + 140 | 0;
 $x$i71 = $this + 136 | 0;
 __ZNK7b2Mat337Solve22ERK6b2Vec2($impulse169, $this + 184 | 0, -($18 - $wB$0 * +HEAPF32[$y$i90 >> 2] - $8 + $wA$0 * +HEAPF32[$y$i69 >> 2]), -($19 + $wB$0 * +HEAPF32[$x$i92 >> 2] - $9 - $wA$0 * +HEAPF32[$x$i71 >> 2]));
 $78 = +HEAPF32[$impulse169 >> 2];
 $x174 = $this + 84 | 0;
 HEAPF32[$x174 >> 2] = $78 + +HEAPF32[$x174 >> 2];
 $80 = +HEAPF32[$impulse169 + 4 >> 2];
 $y178 = $this + 88 | 0;
 HEAPF32[$y178 >> 2] = $80 + +HEAPF32[$y178 >> 2];
 $add149$pn = $80 * +HEAPF32[$x$i71 >> 2] - $78 * +HEAPF32[$y$i69 >> 2];
 $add156$pn = $80 * +HEAPF32[$x$i92 >> 2] - $78 * +HEAPF32[$y$i90 >> 2];
 $sub$i203286$pn = $78;
 $sub2$i205287$pn = $80;
 $mul$i110$pn = $22 * $sub$i203286$pn;
 $mul1$i112$pn = $22 * $sub2$i205287$pn;
 $mul$i129$pn = $21 * $sub$i203286$pn;
 $mul1$i131$pn = $21 * $sub2$i205287$pn;
 $vB$sroa$0$0$load273289 = $18 + $mul$i110$pn;
 $vB$sroa$1$4$load277290 = $19 + $mul1$i112$pn;
 $vA$sroa$0$0$load281291 = $8 - $mul$i129$pn;
 $vA$sroa$1$4$load285292 = $9 - $mul1$i131$pn;
 $mul150$pn = $23 * $add149$pn;
 $mul157$pn = $24 * $add156$pn;
 $wA$1 = $wA$0 - $mul150$pn;
 $wB$1 = $wB$0 + $mul157$pn;
 $86 = HEAP32[$m_indexA >> 2] | 0;
 $87 = HEAP32[$velocities >> 2] | 0;
 $v194 = $87 + ($86 * 12 | 0) | 0;
 $88 = +$vA$sroa$0$0$load281291;
 $89 = +$vA$sroa$1$4$load285292;
 $90 = $v194;
 $91 = $90;
 HEAPF32[$91 >> 2] = $88;
 $92 = $90 + 4 | 0;
 $93 = $92;
 HEAPF32[$93 >> 2] = $89;
 $94 = HEAP32[$m_indexA >> 2] | 0;
 $95 = HEAP32[$velocities >> 2] | 0;
 $w198 = $95 + ($94 * 12 | 0) + 8 | 0;
 HEAPF32[$w198 >> 2] = $wA$1;
 $96 = HEAP32[$m_indexB >> 2] | 0;
 $v202 = $95 + ($96 * 12 | 0) | 0;
 $97 = +$vB$sroa$0$0$load273289;
 $98 = +$vB$sroa$1$4$load277290;
 $99 = $v202;
 $100 = $99;
 HEAPF32[$100 >> 2] = $97;
 $101 = $99 + 4 | 0;
 $102 = $101;
 HEAPF32[$102 >> 2] = $98;
 $103 = HEAP32[$m_indexB >> 2] | 0;
 $104 = HEAP32[$velocities >> 2] | 0;
 $w206 = $104 + ($103 * 12 | 0) + 8 | 0;
 HEAPF32[$w206 >> 2] = $wB$1;
 STACKTOP = sp;
 return;
}
function __ZN16b2PrismaticJoint23InitVelocityConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $0 = 0, $1 = 0, $10 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $6 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $96 = 0.0, $add = 0.0, $add$i = 0.0, $add$i116 = 0.0, $add$i156 = 0.0, $add$i175 = 0.0, $add$i190 = 0.0, $add$i226 = 0.0, $add$i88 = 0.0, $add103 = 0.0, $add173 = 0.0, $add3$i = 0.0, $add3$i178 = 0.0, $add60 = 0.0, $add85 = 0.0, $add94 = 0.0, $add95 = 0.0, $call$i$i = 0.0, $call$i$i47 = 0.0, $call2$i$i = 0.0, $call2$i$i49 = 0.0, $cond$i = 0.0, $dtRatio = 0, $m_impulse160 = 0, $m_indexA = 0, $m_indexB = 0, $m_invMassA = 0, $m_limitState126 = 0, $m_limitState135 = 0, $m_motorImpulse164 = 0, $mul = 0.0, $mul$i106 = 0.0, $mul165 = 0.0, $mul2$i = 0.0, $mul3$i = 0.0, $mul57 = 0.0, $mul72 = 0.0, $mul77 = 0.0, $storemerge = 0.0, $sub = 0.0, $sub$i = 0.0, $sub$i131 = 0.0, $sub$i138 = 0.0, $sub$i153 = 0.0, $sub$i165 = 0.0, $sub$i172 = 0.0, $sub$i187 = 0.0, $sub$i195 = 0.0, $sub$i223 = 0.0, $sub$i53 = 0.0, $sub$i58 = 0.0, $sub3$i = 0.0, $sub3$i198 = 0.0, $sub3$i61 = 0.0, $v215 = 0, $v223 = 0, $vA$sroa$0$0$load249253 = 0.0, $vA$sroa$1$4$load250254 = 0.0, $vB$sroa$0$0$load247251 = 0.0, $vB$sroa$1$4$load248252 = 0.0, $velocities = 0, $w219 = 0, $w227 = 0, $wA$0 = 0.0, $wB$0 = 0.0, $y$i107 = 0, $z$i108 = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this + 48 >> 2] | 0;
 $1 = HEAP32[$0 + 8 >> 2] | 0;
 $m_indexA = $this + 144 | 0;
 HEAP32[$m_indexA >> 2] = $1;
 $2 = HEAP32[$this + 52 >> 2] | 0;
 $3 = HEAP32[$2 + 8 >> 2] | 0;
 $m_indexB = $this + 148 | 0;
 HEAP32[$m_indexB >> 2] = $3;
 $4 = $0 + 28 | 0;
 $6 = HEAP32[$4 >> 2] | 0;
 $9 = HEAP32[$4 + 4 >> 2] | 0;
 $10 = $this + 152 | 0;
 HEAP32[$10 >> 2] = $6;
 HEAP32[$10 + 4 >> 2] = $9;
 $14 = $2 + 28 | 0;
 $16 = HEAP32[$14 >> 2] | 0;
 $19 = HEAP32[$14 + 4 >> 2] | 0;
 $20 = $this + 160 | 0;
 HEAP32[$20 >> 2] = $16;
 HEAP32[$20 + 4 >> 2] = $19;
 $m_invMassA = $this + 168 | 0;
 HEAPF32[$m_invMassA >> 2] = +HEAPF32[$0 + 120 >> 2];
 $25 = +HEAPF32[$2 + 120 >> 2];
 HEAPF32[$this + 172 >> 2] = $25;
 $26 = +HEAPF32[$0 + 128 >> 2];
 HEAPF32[$this + 176 >> 2] = $26;
 $27 = +HEAPF32[$2 + 128 >> 2];
 HEAPF32[$this + 180 >> 2] = $27;
 $28 = HEAP32[$data + 24 >> 2] | 0;
 $29 = $28 + ($1 * 12 | 0) | 0;
 $35 = +HEAPF32[$29 >> 2];
 $36 = +HEAPF32[$29 + 4 >> 2];
 $37 = +HEAPF32[$28 + ($1 * 12 | 0) + 8 >> 2];
 $velocities = $data + 28 | 0;
 $38 = HEAP32[$velocities >> 2] | 0;
 $39 = $38 + ($1 * 12 | 0) | 0;
 $45 = +HEAPF32[$39 >> 2];
 $46 = +HEAPF32[$39 + 4 >> 2];
 $47 = +HEAPF32[$38 + ($1 * 12 | 0) + 8 >> 2];
 $48 = $28 + ($3 * 12 | 0) | 0;
 $54 = +HEAPF32[$48 >> 2];
 $55 = +HEAPF32[$48 + 4 >> 2];
 $56 = +HEAPF32[$28 + ($3 * 12 | 0) + 8 >> 2];
 $57 = $38 + ($3 * 12 | 0) | 0;
 $63 = +HEAPF32[$57 >> 2];
 $64 = +HEAPF32[$57 + 4 >> 2];
 $65 = +HEAPF32[$38 + ($3 * 12 | 0) + 8 >> 2];
 $call$i$i = +Math_sin(+$37);
 $call2$i$i = +Math_cos(+$37);
 $call$i$i47 = +Math_sin(+$56);
 $call2$i$i49 = +Math_cos(+$56);
 $sub$i = +HEAPF32[$this + 68 >> 2] - (HEAP32[tempDoublePtr >> 2] = $6, +HEAPF32[tempDoublePtr >> 2]);
 $sub3$i = +HEAPF32[$this + 72 >> 2] - (HEAP32[tempDoublePtr >> 2] = $9, +HEAPF32[tempDoublePtr >> 2]);
 $sub$i53 = $call2$i$i * $sub$i - $call$i$i * $sub3$i;
 $add$i = $call$i$i * $sub$i + $call2$i$i * $sub3$i;
 $sub$i58 = +HEAPF32[$this + 76 >> 2] - (HEAP32[tempDoublePtr >> 2] = $16, +HEAPF32[tempDoublePtr >> 2]);
 $sub3$i61 = +HEAPF32[$this + 80 >> 2] - (HEAP32[tempDoublePtr >> 2] = $19, +HEAPF32[tempDoublePtr >> 2]);
 $sub$i223 = $call2$i$i49 * $sub$i58 - $call$i$i47 * $sub3$i61;
 $add$i226 = $call$i$i47 * $sub$i58 + $call2$i$i49 * $sub3$i61;
 $sub$i195 = $54 - $35 + $sub$i223 - $sub$i53;
 $sub3$i198 = $55 - $36 + $add$i226 - $add$i;
 $72 = +HEAPF32[$m_invMassA >> 2];
 $73 = +HEAPF32[$this + 84 >> 2];
 $74 = +HEAPF32[$this + 88 >> 2];
 $sub$i187 = $call2$i$i * $73 - $call$i$i * $74;
 $add$i190 = $call$i$i * $73 + $call2$i$i * $74;
 $75 = +$sub$i187;
 $76 = +$add$i190;
 $77 = $this + 184 | 0;
 HEAPF32[$77 >> 2] = $75;
 HEAPF32[$77 + 4 >> 2] = $76;
 $add$i175 = $sub$i53 + $sub$i195;
 $add3$i178 = $add$i + $sub3$i198;
 $sub$i172 = $add$i175 * $add$i190 - $add3$i178 * $sub$i187;
 HEAPF32[$this + 208 >> 2] = $sub$i172;
 $sub$i165 = $sub$i223 * $add$i190 - $add$i226 * $sub$i187;
 HEAPF32[$this + 212 >> 2] = $sub$i165;
 $add = $72 + $25;
 $mul = $26 * $sub$i172;
 $mul57 = $27 * $sub$i165;
 $add60 = $add + $sub$i172 * $mul + $sub$i165 * $mul57;
 if ($add60 > 0.0) $storemerge = 1.0 / $add60; else $storemerge = $add60;
 HEAPF32[$this + 252 >> 2] = $storemerge;
 $81 = +HEAPF32[$this + 92 >> 2];
 $82 = +HEAPF32[$this + 96 >> 2];
 $sub$i153 = $call2$i$i * $81 - $call$i$i * $82;
 $add$i156 = $call$i$i * $81 + $call2$i$i * $82;
 $83 = +$sub$i153;
 $84 = +$add$i156;
 $85 = $this + 192 | 0;
 HEAPF32[$85 >> 2] = $83;
 HEAPF32[$85 + 4 >> 2] = $84;
 $sub$i138 = $add$i175 * $add$i156 - $add3$i178 * $sub$i153;
 HEAPF32[$this + 200 >> 2] = $sub$i138;
 $sub$i131 = $sub$i223 * $add$i156 - $add$i226 * $sub$i153;
 HEAPF32[$this + 204 >> 2] = $sub$i131;
 $mul72 = $26 * $sub$i138;
 $mul77 = $27 * $sub$i131;
 $add85 = $mul72 + $mul77;
 $add94 = $mul72 * $sub$i172 + $mul77 * $sub$i165;
 $add95 = $27 + $26;
 $add103 = $mul + $mul57;
 HEAPF32[$this + 216 >> 2] = $add + $sub$i138 * $mul72 + $sub$i131 * $mul77;
 HEAPF32[$this + 220 >> 2] = $add85;
 HEAPF32[$this + 224 >> 2] = $add94;
 HEAPF32[$this + 228 >> 2] = $add85;
 HEAPF32[$this + 232 >> 2] = $add95 == 0.0 ? 1.0 : $add95;
 HEAPF32[$this + 236 >> 2] = $add103;
 HEAPF32[$this + 240 >> 2] = $add94;
 HEAPF32[$this + 244 >> 2] = $add103;
 HEAPF32[$this + 248 >> 2] = $add60;
 do if ((HEAP8[$this + 136 >> 0] | 0) == 0) {
  HEAP32[$this + 140 >> 2] = 0;
  HEAPF32[$this + 112 >> 2] = 0.0;
 } else {
  $add$i116 = $sub$i195 * $sub$i187 + $sub3$i198 * $add$i190;
  $90 = +HEAPF32[$this + 124 >> 2];
  $91 = +HEAPF32[$this + 120 >> 2];
  $sub = $90 - $91;
  if ($sub > 0.0) $cond$i = $sub; else $cond$i = -$sub;
  if ($cond$i < .009999999776482582) {
   HEAP32[$this + 140 >> 2] = 3;
   break;
  }
  if ($add$i116 <= $91) {
   $m_limitState126 = $this + 140 | 0;
   if ((HEAP32[$m_limitState126 >> 2] | 0) == 1) break;
   HEAP32[$m_limitState126 >> 2] = 1;
   HEAPF32[$this + 112 >> 2] = 0.0;
   break;
  }
  $m_limitState135 = $this + 140 | 0;
  if (!($add$i116 >= $90)) {
   HEAP32[$m_limitState135 >> 2] = 0;
   HEAPF32[$this + 112 >> 2] = 0.0;
   break;
  }
  if ((HEAP32[$m_limitState135 >> 2] | 0) != 2) {
   HEAP32[$m_limitState135 >> 2] = 2;
   HEAPF32[$this + 112 >> 2] = 0.0;
  }
 } while (0);
 if ((HEAP8[$this + 137 >> 0] | 0) == 0) HEAPF32[$this + 116 >> 2] = 0.0;
 $m_impulse160 = $this + 104 | 0;
 if ((HEAP8[$data + 20 >> 0] | 0) == 0) {
  HEAP32[$m_impulse160 + 0 >> 2] = 0;
  HEAP32[$m_impulse160 + 4 >> 2] = 0;
  HEAP32[$m_impulse160 + 8 >> 2] = 0;
  HEAP32[$m_impulse160 + 12 >> 2] = 0;
  $vA$sroa$0$0$load249253 = $45;
  $vA$sroa$1$4$load250254 = $46;
  $vB$sroa$0$0$load247251 = $63;
  $vB$sroa$1$4$load248252 = $64;
  $wA$0 = $47;
  $wB$0 = $65;
  $102 = HEAP32[$m_indexA >> 2] | 0;
  $103 = HEAP32[$velocities >> 2] | 0;
  $v215 = $103 + ($102 * 12 | 0) | 0;
  $104 = +$vA$sroa$0$0$load249253;
  $105 = +$vA$sroa$1$4$load250254;
  $106 = $v215;
  $107 = $106;
  HEAPF32[$107 >> 2] = $104;
  $108 = $106 + 4 | 0;
  $109 = $108;
  HEAPF32[$109 >> 2] = $105;
  $110 = HEAP32[$m_indexA >> 2] | 0;
  $111 = HEAP32[$velocities >> 2] | 0;
  $w219 = $111 + ($110 * 12 | 0) + 8 | 0;
  HEAPF32[$w219 >> 2] = $wA$0;
  $112 = HEAP32[$m_indexB >> 2] | 0;
  $v223 = $111 + ($112 * 12 | 0) | 0;
  $113 = +$vB$sroa$0$0$load247251;
  $114 = +$vB$sroa$1$4$load248252;
  $115 = $v223;
  $116 = $115;
  HEAPF32[$116 >> 2] = $113;
  $117 = $115 + 4 | 0;
  $118 = $117;
  HEAPF32[$118 >> 2] = $114;
  $119 = HEAP32[$m_indexB >> 2] | 0;
  $120 = HEAP32[$velocities >> 2] | 0;
  $w227 = $120 + ($119 * 12 | 0) + 8 | 0;
  HEAPF32[$w227 >> 2] = $wB$0;
  STACKTOP = sp;
  return;
 } else {
  $dtRatio = $data + 8 | 0;
  $96 = +HEAPF32[$dtRatio >> 2];
  $mul$i106 = $96 * +HEAPF32[$m_impulse160 >> 2];
  HEAPF32[$m_impulse160 >> 2] = $mul$i106;
  $y$i107 = $this + 108 | 0;
  $mul2$i = $96 * +HEAPF32[$y$i107 >> 2];
  HEAPF32[$y$i107 >> 2] = $mul2$i;
  $z$i108 = $this + 112 | 0;
  $mul3$i = $96 * +HEAPF32[$z$i108 >> 2];
  HEAPF32[$z$i108 >> 2] = $mul3$i;
  $m_motorImpulse164 = $this + 116 | 0;
  $mul165 = +HEAPF32[$dtRatio >> 2] * +HEAPF32[$m_motorImpulse164 >> 2];
  HEAPF32[$m_motorImpulse164 >> 2] = $mul165;
  $add173 = $mul165 + $mul3$i;
  $add$i88 = $mul$i106 * $sub$i153 + $sub$i187 * $add173;
  $add3$i = $mul$i106 * $add$i156 + $add173 * $add$i190;
  $vA$sroa$0$0$load249253 = $45 - $72 * $add$i88;
  $vA$sroa$1$4$load250254 = $46 - $72 * $add3$i;
  $vB$sroa$0$0$load247251 = $63 + $25 * $add$i88;
  $vB$sroa$1$4$load248252 = $64 + $25 * $add3$i;
  $wA$0 = $47 - $26 * ($mul$i106 * $sub$i138 + $mul2$i + $add173 * $sub$i172);
  $wB$0 = $65 + $27 * ($mul2$i + $mul$i106 * $sub$i131 + $add173 * $sub$i165);
  $102 = HEAP32[$m_indexA >> 2] | 0;
  $103 = HEAP32[$velocities >> 2] | 0;
  $v215 = $103 + ($102 * 12 | 0) | 0;
  $104 = +$vA$sroa$0$0$load249253;
  $105 = +$vA$sroa$1$4$load250254;
  $106 = $v215;
  $107 = $106;
  HEAPF32[$107 >> 2] = $104;
  $108 = $106 + 4 | 0;
  $109 = $108;
  HEAPF32[$109 >> 2] = $105;
  $110 = HEAP32[$m_indexA >> 2] | 0;
  $111 = HEAP32[$velocities >> 2] | 0;
  $w219 = $111 + ($110 * 12 | 0) + 8 | 0;
  HEAPF32[$w219 >> 2] = $wA$0;
  $112 = HEAP32[$m_indexB >> 2] | 0;
  $v223 = $111 + ($112 * 12 | 0) | 0;
  $113 = +$vB$sroa$0$0$load247251;
  $114 = +$vB$sroa$1$4$load248252;
  $115 = $v223;
  $116 = $115;
  HEAPF32[$116 >> 2] = $113;
  $117 = $115 + 4 | 0;
  $118 = $117;
  HEAPF32[$118 >> 2] = $114;
  $119 = HEAP32[$m_indexB >> 2] | 0;
  $120 = HEAP32[$velocities >> 2] | 0;
  $w227 = $120 + ($119 * 12 | 0) + 8 | 0;
  HEAPF32[$w227 >> 2] = $wB$0;
  STACKTOP = sp;
  return;
 }
}
function __ZN16b2PrismaticJoint24SolveVelocityConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $33 = 0.0, $52 = 0, $53 = 0.0, $67 = 0.0, $69 = 0.0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $add$i148 = 0.0, $add$i68 = 0.0, $add155$sink = 0.0, $add161$sink = 0.0, $add167 = 0.0, $add17 = 0.0, $add3$i151 = 0.0, $add4$i = 0.0, $add6$i = 0.0, $cond$i$i = 0.0, $cond$i177 = 0.0, $cond$i179 = 0.0, $cond$i2$i = 0.0, $df = 0, $df136 = 0, $f1$sroa$0$0$copyload = 0.0, $f1$sroa$0$0$idx = 0, $f1$sroa$1$4$copyload = 0.0, $f1$sroa$1$4$idx271 = 0, $f1$sroa$2$8$copyload = 0.0, $f1$sroa$2$8$idx273 = 0, $m_K = 0, $m_a152 = 0, $m_a249 = 0, $m_indexA = 0, $m_indexB = 0, $m_limitState43 = 0, $m_motorImpulse = 0, $m_s1 = 0, $m_s2 = 0, $mul$i252 = 0.0, $mul$i71 = 0.0, $mul$i81$sink = 0.0, $mul$i87$pn = 0.0, $mul1$i = 0.0, $mul1$i254 = 0.0, $mul1$i83$sink = 0.0, $mul1$i89$pn = 0.0, $mul15 = 0.0, $mul163 = 0.0, $mul166 = 0.0, $ref$tmp58 = 0, $ref$tmp89 = 0, $sub$i140 = 0.0, $sub$i188 = 0.0, $sub$i221 = 0.0, $sub$i77 = 0.0, $sub164 = 0.0, $sub18 = 0.0, $sub2$i190 = 0.0, $sub22 = 0.0, $sub3$i143 = 0.0, $sub3$i192 = 0.0, $sub3$i224 = 0.0, $sub39 = 0.0, $sub4$i = 0.0, $sub40 = 0.0, $sub5$i = 0.0, $sub82 = 0.0, $v195 = 0, $v203 = 0, $vA$sroa$0$0$load304317 = 0.0, $vA$sroa$1$4$load311319 = 0.0, $vB$sroa$0$0$load290313 = 0.0, $vB$sroa$1$4$load297315 = 0.0, $velocities = 0, $w199 = 0, $w207 = 0, $wA$0 = 0.0, $wB$0 = 0.0, $x$i197 = 0, $x$i212 = 0, $x141 = 0, $y$i183 = 0, $y$i200 = 0, $y$i215 = 0, $y145 = 0, $z$i186 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $df = sp + 32 | 0;
 $ref$tmp58 = sp;
 $ref$tmp89 = sp + 16 | 0;
 $df136 = sp + 24 | 0;
 $m_indexA = $this + 144 | 0;
 $0 = HEAP32[$m_indexA >> 2] | 0;
 $velocities = $data + 28 | 0;
 $1 = HEAP32[$velocities >> 2] | 0;
 $2 = $1 + ($0 * 12 | 0) | 0;
 $8 = +HEAPF32[$2 >> 2];
 $9 = +HEAPF32[$2 + 4 >> 2];
 $10 = +HEAPF32[$1 + ($0 * 12 | 0) + 8 >> 2];
 $m_indexB = $this + 148 | 0;
 $11 = HEAP32[$m_indexB >> 2] | 0;
 $12 = $1 + ($11 * 12 | 0) | 0;
 $18 = +HEAPF32[$12 >> 2];
 $19 = +HEAPF32[$12 + 4 >> 2];
 $20 = +HEAPF32[$1 + ($11 * 12 | 0) + 8 >> 2];
 $21 = +HEAPF32[$this + 168 >> 2];
 $22 = +HEAPF32[$this + 172 >> 2];
 $23 = +HEAPF32[$this + 176 >> 2];
 $24 = +HEAPF32[$this + 180 >> 2];
 if ((HEAP8[$this + 137 >> 0] | 0) == 0) {
  $vA$sroa$0$0$load304317 = $8;
  $vA$sroa$1$4$load311319 = $9;
  $vB$sroa$0$0$load290313 = $18;
  $vB$sroa$1$4$load297315 = $19;
  $wA$0 = $10;
  $wB$0 = $20;
 } else if ((HEAP32[$this + 140 >> 2] | 0) == 3) {
  $vA$sroa$0$0$load304317 = $8;
  $vA$sroa$1$4$load311319 = $9;
  $vB$sroa$0$0$load290313 = $18;
  $vB$sroa$1$4$load297315 = $19;
  $wA$0 = $10;
  $wB$0 = $20;
 } else {
  $27 = +HEAPF32[$this + 184 >> 2];
  $28 = +HEAPF32[$this + 188 >> 2];
  $29 = +HEAPF32[$this + 212 >> 2];
  $30 = +HEAPF32[$this + 208 >> 2];
  $m_motorImpulse = $this + 116 | 0;
  $33 = +HEAPF32[$m_motorImpulse >> 2];
  $mul15 = +HEAPF32[$data >> 2] * +HEAPF32[$this + 128 >> 2];
  $add17 = $33 + +HEAPF32[$this + 252 >> 2] * (+HEAPF32[$this + 132 >> 2] - (($18 - $8) * $27 + ($19 - $9) * $28 + $20 * $29 - $10 * $30));
  $sub18 = -$mul15;
  $cond$i$i = $add17 < $mul15 ? $add17 : $mul15;
  $cond$i2$i = $cond$i$i < $sub18 ? $sub18 : $cond$i$i;
  HEAPF32[$m_motorImpulse >> 2] = $cond$i2$i;
  $sub22 = $cond$i2$i - $33;
  $mul$i252 = $27 * $sub22;
  $mul1$i254 = $28 * $sub22;
  $vA$sroa$0$0$load304317 = $8 - $21 * $mul$i252;
  $vA$sroa$1$4$load311319 = $9 - $21 * $mul1$i254;
  $vB$sroa$0$0$load290313 = $18 + $22 * $mul$i252;
  $vB$sroa$1$4$load297315 = $19 + $22 * $mul1$i254;
  $wA$0 = $10 - $23 * $30 * $sub22;
  $wB$0 = $20 + $24 * $29 * $sub22;
 }
 $sub$i221 = $vB$sroa$0$0$load290313 - $vA$sroa$0$0$load304317;
 $sub3$i224 = $vB$sroa$1$4$load297315 - $vA$sroa$1$4$load311319;
 $x$i212 = $this + 192 | 0;
 $y$i215 = $this + 196 | 0;
 $m_s2 = $this + 204 | 0;
 $m_s1 = $this + 200 | 0;
 $sub39 = $sub$i221 * +HEAPF32[$x$i212 >> 2] + $sub3$i224 * +HEAPF32[$y$i215 >> 2] + $wB$0 * +HEAPF32[$m_s2 >> 2] - $wA$0 * +HEAPF32[$m_s1 >> 2];
 $sub40 = $wB$0 - $wA$0;
 if ((HEAP8[$this + 136 >> 0] | 0) != 0) {
  $m_limitState43 = $this + 140 | 0;
  if ((HEAP32[$m_limitState43 >> 2] | 0) != 0) {
   $x$i197 = $this + 184 | 0;
   $y$i200 = $this + 188 | 0;
   $m_a249 = $this + 212 | 0;
   $m_a152 = $this + 208 | 0;
   $f1$sroa$0$0$idx = $this + 104 | 0;
   $f1$sroa$0$0$copyload = +HEAPF32[$f1$sroa$0$0$idx >> 2];
   $f1$sroa$1$4$idx271 = $this + 108 | 0;
   $f1$sroa$1$4$copyload = +HEAPF32[$f1$sroa$1$4$idx271 >> 2];
   $f1$sroa$2$8$idx273 = $this + 112 | 0;
   $f1$sroa$2$8$copyload = +HEAPF32[$f1$sroa$2$8$idx273 >> 2];
   $m_K = $this + 216 | 0;
   $sub$i188 = -$sub39;
   $sub2$i190 = -$sub40;
   $sub3$i192 = -($sub$i221 * +HEAPF32[$x$i197 >> 2] + $sub3$i224 * +HEAPF32[$y$i200 >> 2] + $wB$0 * +HEAPF32[$m_a249 >> 2] - $wA$0 * +HEAPF32[$m_a152 >> 2]);
   HEAPF32[$ref$tmp58 >> 2] = $sub$i188;
   HEAPF32[$ref$tmp58 + 4 >> 2] = $sub2$i190;
   HEAPF32[$ref$tmp58 + 8 >> 2] = $sub3$i192;
   __ZNK7b2Mat337Solve33ERK6b2Vec3($df, $m_K, $ref$tmp58);
   HEAPF32[$f1$sroa$0$0$idx >> 2] = +HEAPF32[$df >> 2] + +HEAPF32[$f1$sroa$0$0$idx >> 2];
   $y$i183 = $df + 4 | 0;
   HEAPF32[$f1$sroa$1$4$idx271 >> 2] = +HEAPF32[$y$i183 >> 2] + +HEAPF32[$f1$sroa$1$4$idx271 >> 2];
   $z$i186 = $df + 8 | 0;
   $add6$i = +HEAPF32[$z$i186 >> 2] + +HEAPF32[$f1$sroa$2$8$idx273 >> 2];
   HEAPF32[$f1$sroa$2$8$idx273 >> 2] = $add6$i;
   $52 = HEAP32[$m_limitState43 >> 2] | 0;
   if (($52 | 0) == 1) {
    $cond$i179 = $add6$i > 0.0 ? $add6$i : 0.0;
    HEAPF32[$f1$sroa$2$8$idx273 >> 2] = $cond$i179;
    $53 = $cond$i179;
   } else if (($52 | 0) == 2) {
    $cond$i177 = $add6$i < 0.0 ? $add6$i : 0.0;
    HEAPF32[$f1$sroa$2$8$idx273 >> 2] = $cond$i177;
    $53 = $cond$i177;
   } else $53 = $add6$i;
   $sub82 = $53 - $f1$sroa$2$8$copyload;
   __ZNK7b2Mat337Solve22ERK6b2Vec2($ref$tmp89, $m_K, $sub$i188 - +HEAPF32[$this + 240 >> 2] * $sub82, $sub2$i190 - $sub82 * +HEAPF32[$this + 244 >> 2]);
   $add$i148 = $f1$sroa$0$0$copyload + +HEAPF32[$ref$tmp89 >> 2];
   $add3$i151 = $f1$sroa$1$4$copyload + +HEAPF32[$ref$tmp89 + 4 >> 2];
   HEAPF32[$f1$sroa$0$0$idx >> 2] = $add$i148;
   HEAPF32[$f1$sroa$1$4$idx271 >> 2] = $add3$i151;
   $sub$i140 = $add$i148 - $f1$sroa$0$0$copyload;
   $sub3$i143 = $add3$i151 - $f1$sroa$1$4$copyload;
   $sub5$i = +HEAPF32[$f1$sroa$2$8$idx273 >> 2] - $f1$sroa$2$8$copyload;
   HEAPF32[$df >> 2] = $sub$i140;
   HEAPF32[$y$i183 >> 2] = $sub3$i143;
   HEAPF32[$z$i186 >> 2] = $sub5$i;
   $add155$sink = $sub$i140 * +HEAPF32[$m_s1 >> 2] + $sub3$i143 + $sub5$i * +HEAPF32[$m_a152 >> 2];
   $add161$sink = $sub3$i143 + $sub$i140 * +HEAPF32[$m_s2 >> 2] + $sub5$i * +HEAPF32[$m_a249 >> 2];
   $mul$i87$pn = $sub$i140 * +HEAPF32[$x$i212 >> 2] + $sub5$i * +HEAPF32[$x$i197 >> 2];
   $mul1$i89$pn = $sub$i140 * +HEAPF32[$y$i215 >> 2] + $sub5$i * +HEAPF32[$y$i200 >> 2];
   $mul1$i83$sink = $21 * $mul1$i89$pn;
   $mul$i81$sink = $21 * $mul$i87$pn;
   $sub$i77 = $vA$sroa$0$0$load304317 - $mul$i81$sink;
   $sub4$i = $vA$sroa$1$4$load311319 - $mul1$i83$sink;
   $mul163 = $23 * $add155$sink;
   $sub164 = $wA$0 - $mul163;
   $mul$i71 = $22 * $mul$i87$pn;
   $mul1$i = $22 * $mul1$i89$pn;
   $add$i68 = $vB$sroa$0$0$load290313 + $mul$i71;
   $add4$i = $vB$sroa$1$4$load297315 + $mul1$i;
   $mul166 = $24 * $add161$sink;
   $add167 = $wB$0 + $mul166;
   $75 = HEAP32[$m_indexA >> 2] | 0;
   $76 = HEAP32[$velocities >> 2] | 0;
   $v195 = $76 + ($75 * 12 | 0) | 0;
   $77 = +$sub$i77;
   $78 = +$sub4$i;
   $79 = $v195;
   $80 = $79;
   HEAPF32[$80 >> 2] = $77;
   $81 = $79 + 4 | 0;
   $82 = $81;
   HEAPF32[$82 >> 2] = $78;
   $83 = HEAP32[$m_indexA >> 2] | 0;
   $84 = HEAP32[$velocities >> 2] | 0;
   $w199 = $84 + ($83 * 12 | 0) + 8 | 0;
   HEAPF32[$w199 >> 2] = $sub164;
   $85 = HEAP32[$m_indexB >> 2] | 0;
   $v203 = $84 + ($85 * 12 | 0) | 0;
   $86 = +$add$i68;
   $87 = +$add4$i;
   $88 = $v203;
   $89 = $88;
   HEAPF32[$89 >> 2] = $86;
   $90 = $88 + 4 | 0;
   $91 = $90;
   HEAPF32[$91 >> 2] = $87;
   $92 = HEAP32[$m_indexB >> 2] | 0;
   $93 = HEAP32[$velocities >> 2] | 0;
   $w207 = $93 + ($92 * 12 | 0) + 8 | 0;
   HEAPF32[$w207 >> 2] = $add167;
   STACKTOP = sp;
   return;
  }
 }
 __ZNK7b2Mat337Solve22ERK6b2Vec2($df136, $this + 216 | 0, -$sub39, -$sub40);
 $67 = +HEAPF32[$df136 >> 2];
 $x141 = $this + 104 | 0;
 HEAPF32[$x141 >> 2] = $67 + +HEAPF32[$x141 >> 2];
 $69 = +HEAPF32[$df136 + 4 >> 2];
 $y145 = $this + 108 | 0;
 HEAPF32[$y145 >> 2] = $69 + +HEAPF32[$y145 >> 2];
 $add155$sink = $67 * +HEAPF32[$m_s1 >> 2] + $69;
 $add161$sink = $69 + $67 * +HEAPF32[$m_s2 >> 2];
 $mul$i87$pn = $67 * +HEAPF32[$x$i212 >> 2];
 $mul1$i89$pn = $67 * +HEAPF32[$y$i215 >> 2];
 $mul1$i83$sink = $21 * $mul1$i89$pn;
 $mul$i81$sink = $21 * $mul$i87$pn;
 $sub$i77 = $vA$sroa$0$0$load304317 - $mul$i81$sink;
 $sub4$i = $vA$sroa$1$4$load311319 - $mul1$i83$sink;
 $mul163 = $23 * $add155$sink;
 $sub164 = $wA$0 - $mul163;
 $mul$i71 = $22 * $mul$i87$pn;
 $mul1$i = $22 * $mul1$i89$pn;
 $add$i68 = $vB$sroa$0$0$load290313 + $mul$i71;
 $add4$i = $vB$sroa$1$4$load297315 + $mul1$i;
 $mul166 = $24 * $add161$sink;
 $add167 = $wB$0 + $mul166;
 $75 = HEAP32[$m_indexA >> 2] | 0;
 $76 = HEAP32[$velocities >> 2] | 0;
 $v195 = $76 + ($75 * 12 | 0) | 0;
 $77 = +$sub$i77;
 $78 = +$sub4$i;
 $79 = $v195;
 $80 = $79;
 HEAPF32[$80 >> 2] = $77;
 $81 = $79 + 4 | 0;
 $82 = $81;
 HEAPF32[$82 >> 2] = $78;
 $83 = HEAP32[$m_indexA >> 2] | 0;
 $84 = HEAP32[$velocities >> 2] | 0;
 $w199 = $84 + ($83 * 12 | 0) + 8 | 0;
 HEAPF32[$w199 >> 2] = $sub164;
 $85 = HEAP32[$m_indexB >> 2] | 0;
 $v203 = $84 + ($85 * 12 | 0) | 0;
 $86 = +$add$i68;
 $87 = +$add4$i;
 $88 = $v203;
 $89 = $88;
 HEAPF32[$89 >> 2] = $86;
 $90 = $88 + 4 | 0;
 $91 = $90;
 HEAPF32[$91 >> 2] = $87;
 $92 = HEAP32[$m_indexB >> 2] | 0;
 $93 = HEAP32[$velocities >> 2] | 0;
 $w207 = $93 + ($92 * 12 | 0) + 8 | 0;
 HEAPF32[$w207 >> 2] = $add167;
 STACKTOP = sp;
 return;
}
function __ZN12b2WheelJoint23InitVelocityConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $0 = 0, $1 = 0, $10 = 0, $103 = 0.0, $105 = 0.0, $107 = 0, $108 = 0, $109 = 0.0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0.0, $119 = 0.0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $6 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $9 = 0, $90 = 0.0, $add = 0.0, $add$i = 0.0, $add$i130 = 0.0, $add$i149 = 0.0, $add$i164 = 0.0, $add$i200 = 0.0, $add$i77 = 0.0, $add116 = 0.0, $add128 = 0.0, $add3$i = 0.0, $add3$i152 = 0.0, $add60 = 0.0, $add82 = 0.0, $call$i$i = 0.0, $call$i$i38 = 0.0, $call2$i$i = 0.0, $call2$i$i40 = 0.0, $div85 = 0.0, $dtRatio = 0, $m_bias = 0, $m_gamma = 0, $m_impulse = 0, $m_indexA = 0, $m_indexB = 0, $m_invIA = 0, $m_invIB = 0, $m_invMassA = 0, $m_invMassB = 0, $m_motorImpulse150 = 0, $m_motorMass = 0, $m_springImpulse146 = 0, $m_springMass = 0, $mul101 = 0.0, $mul143 = 0.0, $mul147 = 0.0, $mul151 = 0.0, $mul90 = 0.0, $mul98 = 0.0, $storemerge = 0.0, $storemerge37 = 0.0, $sub$i = 0.0, $sub$i105 = 0.0, $sub$i112 = 0.0, $sub$i127 = 0.0, $sub$i139 = 0.0, $sub$i146 = 0.0, $sub$i161 = 0.0, $sub$i169 = 0.0, $sub$i197 = 0.0, $sub$i44 = 0.0, $sub$i49 = 0.0, $sub3$i = 0.0, $sub3$i172 = 0.0, $sub3$i52 = 0.0, $v193 = 0, $v201 = 0, $vA$sroa$0$0$load223227 = 0.0, $vA$sroa$1$4$load224228 = 0.0, $vB$sroa$0$0$load221225 = 0.0, $vB$sroa$1$4$load222226 = 0.0, $velocities = 0, $w197 = 0, $w205 = 0, $wA$0 = 0.0, $wB$0 = 0.0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this + 48 >> 2] | 0;
 $1 = HEAP32[$0 + 8 >> 2] | 0;
 $m_indexA = $this + 132 | 0;
 HEAP32[$m_indexA >> 2] = $1;
 $2 = HEAP32[$this + 52 >> 2] | 0;
 $3 = HEAP32[$2 + 8 >> 2] | 0;
 $m_indexB = $this + 136 | 0;
 HEAP32[$m_indexB >> 2] = $3;
 $4 = $0 + 28 | 0;
 $6 = HEAP32[$4 >> 2] | 0;
 $9 = HEAP32[$4 + 4 >> 2] | 0;
 $10 = $this + 140 | 0;
 HEAP32[$10 >> 2] = $6;
 HEAP32[$10 + 4 >> 2] = $9;
 $14 = $2 + 28 | 0;
 $16 = HEAP32[$14 >> 2] | 0;
 $19 = HEAP32[$14 + 4 >> 2] | 0;
 $20 = $this + 148 | 0;
 HEAP32[$20 >> 2] = $16;
 HEAP32[$20 + 4 >> 2] = $19;
 $24 = +HEAPF32[$0 + 120 >> 2];
 $m_invMassA = $this + 156 | 0;
 HEAPF32[$m_invMassA >> 2] = $24;
 $25 = +HEAPF32[$2 + 120 >> 2];
 $m_invMassB = $this + 160 | 0;
 HEAPF32[$m_invMassB >> 2] = $25;
 $26 = +HEAPF32[$0 + 128 >> 2];
 $m_invIA = $this + 164 | 0;
 HEAPF32[$m_invIA >> 2] = $26;
 $27 = +HEAPF32[$2 + 128 >> 2];
 $m_invIB = $this + 168 | 0;
 HEAPF32[$m_invIB >> 2] = $27;
 $28 = HEAP32[$data + 24 >> 2] | 0;
 $29 = $28 + ($1 * 12 | 0) | 0;
 $35 = +HEAPF32[$29 >> 2];
 $36 = +HEAPF32[$29 + 4 >> 2];
 $37 = +HEAPF32[$28 + ($1 * 12 | 0) + 8 >> 2];
 $velocities = $data + 28 | 0;
 $38 = HEAP32[$velocities >> 2] | 0;
 $39 = $38 + ($1 * 12 | 0) | 0;
 $45 = +HEAPF32[$39 >> 2];
 $46 = +HEAPF32[$39 + 4 >> 2];
 $47 = +HEAPF32[$38 + ($1 * 12 | 0) + 8 >> 2];
 $48 = $28 + ($3 * 12 | 0) | 0;
 $54 = +HEAPF32[$48 >> 2];
 $55 = +HEAPF32[$48 + 4 >> 2];
 $56 = +HEAPF32[$28 + ($3 * 12 | 0) + 8 >> 2];
 $57 = $38 + ($3 * 12 | 0) | 0;
 $63 = +HEAPF32[$57 >> 2];
 $64 = +HEAPF32[$57 + 4 >> 2];
 $65 = +HEAPF32[$38 + ($3 * 12 | 0) + 8 >> 2];
 $call$i$i = +Math_sin(+$37);
 $call2$i$i = +Math_cos(+$37);
 $call$i$i38 = +Math_sin(+$56);
 $call2$i$i40 = +Math_cos(+$56);
 $sub$i = +HEAPF32[$this + 76 >> 2] - (HEAP32[tempDoublePtr >> 2] = $6, +HEAPF32[tempDoublePtr >> 2]);
 $sub3$i = +HEAPF32[$this + 80 >> 2] - (HEAP32[tempDoublePtr >> 2] = $9, +HEAPF32[tempDoublePtr >> 2]);
 $sub$i44 = $call2$i$i * $sub$i - $call$i$i * $sub3$i;
 $add$i = $call$i$i * $sub$i + $call2$i$i * $sub3$i;
 $sub$i49 = +HEAPF32[$this + 84 >> 2] - (HEAP32[tempDoublePtr >> 2] = $16, +HEAPF32[tempDoublePtr >> 2]);
 $sub3$i52 = +HEAPF32[$this + 88 >> 2] - (HEAP32[tempDoublePtr >> 2] = $19, +HEAPF32[tempDoublePtr >> 2]);
 $sub$i197 = $call2$i$i40 * $sub$i49 - $call$i$i38 * $sub3$i52;
 $add$i200 = $call$i$i38 * $sub$i49 + $call2$i$i40 * $sub3$i52;
 $sub$i169 = $54 + $sub$i197 - $35 - $sub$i44;
 $sub3$i172 = $55 + $add$i200 - $36 - $add$i;
 $72 = +HEAPF32[$this + 100 >> 2];
 $73 = +HEAPF32[$this + 104 >> 2];
 $sub$i161 = $call2$i$i * $72 - $call$i$i * $73;
 $add$i164 = $call$i$i * $72 + $call2$i$i * $73;
 $74 = +$sub$i161;
 $75 = +$add$i164;
 $76 = $this + 180 | 0;
 HEAPF32[$76 >> 2] = $74;
 HEAPF32[$76 + 4 >> 2] = $75;
 $add$i149 = $sub$i44 + $sub$i169;
 $add3$i152 = $add$i + $sub3$i172;
 $sub$i146 = $add$i164 * $add$i149 - $sub$i161 * $add3$i152;
 HEAPF32[$this + 196 >> 2] = $sub$i146;
 $sub$i139 = $sub$i197 * $add$i164 - $add$i200 * $sub$i161;
 HEAPF32[$this + 200 >> 2] = $sub$i139;
 $add = $24 + $25;
 $add60 = $add + $sub$i146 * $26 * $sub$i146 + $sub$i139 * $27 * $sub$i139;
 if ($add60 > 0.0) $storemerge37 = 1.0 / $add60; else $storemerge37 = $add60;
 HEAPF32[$this + 204 >> 2] = $storemerge37;
 $m_springMass = $this + 212 | 0;
 HEAPF32[$m_springMass >> 2] = 0.0;
 $m_bias = $this + 216 | 0;
 HEAPF32[$m_bias >> 2] = 0.0;
 $m_gamma = $this + 220 | 0;
 HEAPF32[$m_gamma >> 2] = 0.0;
 $80 = +HEAPF32[$this + 68 >> 2];
 if ($80 > 0.0) {
  $81 = +HEAPF32[$this + 92 >> 2];
  $82 = +HEAPF32[$this + 96 >> 2];
  $sub$i127 = $call2$i$i * $81 - $call$i$i * $82;
  $add$i130 = $call$i$i * $81 + $call2$i$i * $82;
  $83 = +$sub$i127;
  $84 = +$add$i130;
  $85 = $this + 172 | 0;
  HEAPF32[$85 >> 2] = $83;
  HEAPF32[$85 + 4 >> 2] = $84;
  $sub$i112 = $add$i149 * $add$i130 - $add3$i152 * $sub$i127;
  HEAPF32[$this + 188 >> 2] = $sub$i112;
  $sub$i105 = $sub$i197 * $add$i130 - $add$i200 * $sub$i127;
  HEAPF32[$this + 192 >> 2] = $sub$i105;
  $add82 = $add + $sub$i112 * $26 * $sub$i112 + $sub$i105 * $27 * $sub$i105;
  if ($add82 > 0.0) {
   $div85 = 1.0 / $add82;
   HEAPF32[$m_springMass >> 2] = $div85;
   $mul90 = $80 * 6.2831854820251465;
   $mul98 = $mul90 * $div85 * $mul90;
   $90 = +HEAPF32[$data >> 2];
   $mul101 = $90 * ($mul90 * $div85 * 2.0 * +HEAPF32[$this + 72 >> 2] + $90 * $mul98);
   if ($mul101 > 0.0) $storemerge = 1.0 / $mul101; else $storemerge = $mul101;
   HEAPF32[$m_gamma >> 2] = $storemerge;
   HEAPF32[$m_bias >> 2] = ($sub$i169 * $sub$i127 + $sub3$i172 * $add$i130) * $90 * $mul98 * $storemerge;
   $add116 = $add82 + $storemerge;
   HEAPF32[$m_springMass >> 2] = $add116;
   if ($add116 > 0.0) HEAPF32[$m_springMass >> 2] = 1.0 / $add116;
  }
 } else HEAPF32[$this + 116 >> 2] = 0.0;
 if ((HEAP8[$this + 128 >> 0] | 0) == 0) {
  HEAPF32[$this + 208 >> 2] = 0.0;
  HEAPF32[$this + 112 >> 2] = 0.0;
 } else {
  $add128 = $27 + $26;
  $m_motorMass = $this + 208 | 0;
  HEAPF32[$m_motorMass >> 2] = $add128;
  if ($add128 > 0.0) HEAPF32[$m_motorMass >> 2] = 1.0 / $add128;
 }
 if ((HEAP8[$data + 20 >> 0] | 0) == 0) {
  HEAPF32[$this + 108 >> 2] = 0.0;
  HEAPF32[$this + 116 >> 2] = 0.0;
  HEAPF32[$this + 112 >> 2] = 0.0;
  $vA$sroa$0$0$load223227 = $45;
  $vA$sroa$1$4$load224228 = $46;
  $vB$sroa$0$0$load221225 = $63;
  $vB$sroa$1$4$load222226 = $64;
  $wA$0 = $47;
  $wB$0 = $65;
  $107 = HEAP32[$m_indexA >> 2] | 0;
  $108 = HEAP32[$velocities >> 2] | 0;
  $v193 = $108 + ($107 * 12 | 0) | 0;
  $109 = +$vA$sroa$0$0$load223227;
  $110 = +$vA$sroa$1$4$load224228;
  $111 = $v193;
  $112 = $111;
  HEAPF32[$112 >> 2] = $109;
  $113 = $111 + 4 | 0;
  $114 = $113;
  HEAPF32[$114 >> 2] = $110;
  $115 = HEAP32[$m_indexA >> 2] | 0;
  $116 = HEAP32[$velocities >> 2] | 0;
  $w197 = $116 + ($115 * 12 | 0) + 8 | 0;
  HEAPF32[$w197 >> 2] = $wA$0;
  $117 = HEAP32[$m_indexB >> 2] | 0;
  $v201 = $116 + ($117 * 12 | 0) | 0;
  $118 = +$vB$sroa$0$0$load221225;
  $119 = +$vB$sroa$1$4$load222226;
  $120 = $v201;
  $121 = $120;
  HEAPF32[$121 >> 2] = $118;
  $122 = $120 + 4 | 0;
  $123 = $122;
  HEAPF32[$123 >> 2] = $119;
  $124 = HEAP32[$m_indexB >> 2] | 0;
  $125 = HEAP32[$velocities >> 2] | 0;
  $w205 = $125 + ($124 * 12 | 0) + 8 | 0;
  HEAPF32[$w205 >> 2] = $wB$0;
  STACKTOP = sp;
  return;
 } else {
  $dtRatio = $data + 8 | 0;
  $m_impulse = $this + 108 | 0;
  $mul143 = +HEAPF32[$dtRatio >> 2] * +HEAPF32[$m_impulse >> 2];
  HEAPF32[$m_impulse >> 2] = $mul143;
  $m_springImpulse146 = $this + 116 | 0;
  $mul147 = +HEAPF32[$dtRatio >> 2] * +HEAPF32[$m_springImpulse146 >> 2];
  HEAPF32[$m_springImpulse146 >> 2] = $mul147;
  $m_motorImpulse150 = $this + 112 | 0;
  $mul151 = +HEAPF32[$dtRatio >> 2] * +HEAPF32[$m_motorImpulse150 >> 2];
  HEAPF32[$m_motorImpulse150 >> 2] = $mul151;
  $add$i77 = $mul143 * $sub$i161 + $mul147 * +HEAPF32[$this + 172 >> 2];
  $add3$i = $mul143 * $add$i164 + $mul147 * +HEAPF32[$this + 176 >> 2];
  $103 = +HEAPF32[$m_invMassA >> 2];
  $105 = +HEAPF32[$m_invMassB >> 2];
  $vA$sroa$0$0$load223227 = $45 - $add$i77 * $103;
  $vA$sroa$1$4$load224228 = $46 - $add3$i * $103;
  $vB$sroa$0$0$load221225 = $63 + $add$i77 * $105;
  $vB$sroa$1$4$load222226 = $64 + $add3$i * $105;
  $wA$0 = $47 - ($mul151 + ($mul143 * $sub$i146 + $mul147 * +HEAPF32[$this + 188 >> 2])) * +HEAPF32[$m_invIA >> 2];
  $wB$0 = $65 + ($mul151 + ($mul143 * $sub$i139 + $mul147 * +HEAPF32[$this + 192 >> 2])) * +HEAPF32[$m_invIB >> 2];
  $107 = HEAP32[$m_indexA >> 2] | 0;
  $108 = HEAP32[$velocities >> 2] | 0;
  $v193 = $108 + ($107 * 12 | 0) | 0;
  $109 = +$vA$sroa$0$0$load223227;
  $110 = +$vA$sroa$1$4$load224228;
  $111 = $v193;
  $112 = $111;
  HEAPF32[$112 >> 2] = $109;
  $113 = $111 + 4 | 0;
  $114 = $113;
  HEAPF32[$114 >> 2] = $110;
  $115 = HEAP32[$m_indexA >> 2] | 0;
  $116 = HEAP32[$velocities >> 2] | 0;
  $w197 = $116 + ($115 * 12 | 0) + 8 | 0;
  HEAPF32[$w197 >> 2] = $wA$0;
  $117 = HEAP32[$m_indexB >> 2] | 0;
  $v201 = $116 + ($117 * 12 | 0) | 0;
  $118 = +$vB$sroa$0$0$load221225;
  $119 = +$vB$sroa$1$4$load222226;
  $120 = $v201;
  $121 = $120;
  HEAPF32[$121 >> 2] = $118;
  $122 = $120 + 4 | 0;
  $123 = $122;
  HEAPF32[$123 >> 2] = $119;
  $124 = HEAP32[$m_indexB >> 2] | 0;
  $125 = HEAP32[$velocities >> 2] | 0;
  $w205 = $125 + ($124 * 12 | 0) + 8 | 0;
  HEAPF32[$w205 >> 2] = $wB$0;
  STACKTOP = sp;
  return;
 }
}
function _emscripten_bind_b2World_RayCast_3($self, $arg0, $arg1, $arg2) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 $arg1 = $arg1 | 0;
 $arg2 = $arg2 | 0;
 var $0 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $30 = 0, $34 = 0, $39 = 0, $40 = 0, $42 = 0, $45 = 0.0, $5 = 0, $57 = 0, $6 = 0, $65 = 0, $66 = 0, $8 = 0, $add$i$i$i = 0.0, $add$i137$i$i = 0.0, $add$i54$i$i = 0.0, $add$i95$i$i = 0.0, $add3$i$i$i = 0.0, $add3$i$i3$i$i = 0.0, $add3$i140$i$i = 0.0, $arraydecay$i$i153$i$i = 0, $call$i$i$i$i$i = 0.0, $call$i$i11 = 0, $call$i$i26 = 0, $child1$i$i$i = 0, $child2$i$i = 0, $cond$i$i$i = 0.0, $cond$i$i$i$i = 0.0, $cond$i5$i$i$i = 0.0, $dec$i = 0, $div$i$i$i = 0.0, $fraction4$i$i$i = 0, $inc$i = 0, $inc$i18 = 0, $inc$i33 = 0, $m_capacity$i$i$i$i = 0, $m_count$i$i$i$i = 0, $m_nodeCapacity$i$i$i$i$i = 0, $m_nodes$i$i = 0, $maxFraction$0$ph219$i$i = 0.0, $maxFraction43$i$i = 0, $mul$i25$i$i = 0.0, $output$i$i$i = 0, $p241$i$i = 0, $point$i$i$i = 0, $r$sroa$0$0$load180209$i$i = 0.0, $r$sroa$1$4$load182210$i$i = 0.0, $retval$0$i$i$i = 0.0, $segmentAABB$sroa$0$sroa$0$0$load207$ph216$i$i = 0.0, $segmentAABB$sroa$0$sroa$1$4$load208$ph215$i$i = 0.0, $segmentAABB$sroa$1$sroa$0$0$load205$ph218$i$i = 0.0, $segmentAABB$sroa$1$sroa$1$4$load206$ph217$i$i = 0.0, $stack$i$i = 0, $sub$i$i$i = 0.0, $sub$i1$i$i = 0.0, $sub3$i$i$i = 0.0, $subInput$i$i = 0, $x$i12$i$i$i = 0, $y$i$i$i$i = 0, $y$i14$i$i$i = 0, $y3$i$i$i11$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1088 | 0;
 $output$i$i$i = sp + 1064 | 0;
 $point$i$i$i = sp + 1056 | 0;
 $stack$i$i = sp + 20 | 0;
 $subInput$i$i = sp;
 $0 = $arg1;
 $2 = HEAP32[$0 >> 2] | 0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $arg2;
 $8 = HEAP32[$6 >> 2] | 0;
 $11 = HEAP32[$6 + 4 >> 2] | 0;
 $12 = (HEAP32[tempDoublePtr >> 2] = $2, +HEAPF32[tempDoublePtr >> 2]);
 $13 = (HEAP32[tempDoublePtr >> 2] = $5, +HEAPF32[tempDoublePtr >> 2]);
 $14 = (HEAP32[tempDoublePtr >> 2] = $8, +HEAPF32[tempDoublePtr >> 2]);
 $sub$i$i$i = $14 - $12;
 $sub3$i$i$i = (HEAP32[tempDoublePtr >> 2] = $11, +HEAPF32[tempDoublePtr >> 2]) - $13;
 $add$i$i$i = $sub$i$i$i * $sub$i$i$i + $sub3$i$i$i * $sub3$i$i$i;
 if (!($add$i$i$i > 0.0)) ___assert_fail(14480, 14512, 204, 14560);
 $call$i$i$i$i$i = +Math_sqrt(+$add$i$i$i);
 if ($call$i$i$i$i$i < 1.1920928955078125e-7) {
  $r$sroa$0$0$load180209$i$i = $sub$i$i$i;
  $r$sroa$1$4$load182210$i$i = $sub3$i$i$i;
 } else {
  $div$i$i$i = 1.0 / $call$i$i$i$i$i;
  $r$sroa$0$0$load180209$i$i = $sub$i$i$i * $div$i$i$i;
  $r$sroa$1$4$load182210$i$i = $sub3$i$i$i * $div$i$i$i;
 }
 $mul$i25$i$i = -$r$sroa$1$4$load182210$i$i;
 $cond$i$i$i$i = $r$sroa$1$4$load182210$i$i < -0.0 ? $mul$i25$i$i : $r$sroa$1$4$load182210$i$i;
 if ($r$sroa$0$0$load180209$i$i > 0.0) $cond$i5$i$i$i = $r$sroa$0$0$load180209$i$i; else $cond$i5$i$i$i = -$r$sroa$0$0$load180209$i$i;
 $add$i137$i$i = $12 + $sub$i$i$i;
 $add3$i140$i$i = $13 + $sub3$i$i$i;
 $arraydecay$i$i153$i$i = $stack$i$i + 4 | 0;
 HEAP32[$stack$i$i >> 2] = $arraydecay$i$i153$i$i;
 $m_count$i$i$i$i = $stack$i$i + 1028 | 0;
 HEAP32[$m_count$i$i$i$i >> 2] = 0;
 $m_capacity$i$i$i$i = $stack$i$i + 1032 | 0;
 HEAP32[$m_capacity$i$i$i$i >> 2] = 256;
 HEAP32[(HEAP32[$stack$i$i >> 2] | 0) + (HEAP32[$m_count$i$i$i$i >> 2] << 2) >> 2] = HEAP32[$self + 102872 >> 2];
 $19 = HEAP32[$m_count$i$i$i$i >> 2] | 0;
 $inc$i = $19 + 1 | 0;
 HEAP32[$m_count$i$i$i$i >> 2] = $inc$i;
 L10 : do if (($19 | 0) > -1) {
  $m_nodes$i$i = $self + 102876 | 0;
  $p241$i$i = $subInput$i$i + 8 | 0;
  $maxFraction43$i$i = $subInput$i$i + 16 | 0;
  $m_nodeCapacity$i$i$i$i$i = $self + 102884 | 0;
  $fraction4$i$i$i = $output$i$i$i + 8 | 0;
  $y$i$i$i$i = $subInput$i$i + 4 | 0;
  $x$i12$i$i$i = $subInput$i$i + 8 | 0;
  $y$i14$i$i$i = $subInput$i$i + 12 | 0;
  $y3$i$i$i11$i$i$i = $point$i$i$i + 4 | 0;
  $66 = $inc$i;
  $maxFraction$0$ph219$i$i = 1.0;
  $segmentAABB$sroa$0$sroa$0$0$load207$ph216$i$i = $12 < $add$i137$i$i ? $12 : $add$i137$i$i;
  $segmentAABB$sroa$0$sroa$1$4$load208$ph215$i$i = $13 < $add3$i140$i$i ? $13 : $add3$i140$i$i;
  $segmentAABB$sroa$1$sroa$0$0$load205$ph218$i$i = $12 > $add$i137$i$i ? $12 : $add$i137$i$i;
  $segmentAABB$sroa$1$sroa$1$4$load206$ph217$i$i = $13 > $add3$i140$i$i ? $13 : $add3$i140$i$i;
  L12 : while (1) {
   $20 = $66;
   L14 : while (1) {
    if (($20 | 0) <= 0) {
     label = 11;
     break L12;
    }
    $dec$i = $20 + -1 | 0;
    HEAP32[$m_count$i$i$i$i >> 2] = $dec$i;
    $21 = HEAP32[$stack$i$i >> 2] | 0;
    $22 = HEAP32[$21 + ($dec$i << 2) >> 2] | 0;
    do if (($22 | 0) == -1) $23 = $dec$i; else {
     $24 = HEAP32[$m_nodes$i$i >> 2] | 0;
     $25 = +HEAPF32[$24 + ($22 * 36 | 0) + 8 >> 2];
     $26 = +HEAPF32[$24 + ($22 * 36 | 0) + 12 >> 2];
     $27 = +HEAPF32[$24 + ($22 * 36 | 0) >> 2];
     $28 = +HEAPF32[$24 + ($22 * 36 | 0) + 4 >> 2];
     if ($segmentAABB$sroa$0$sroa$0$0$load207$ph216$i$i - $25 > 0.0 | $segmentAABB$sroa$0$sroa$1$4$load208$ph215$i$i - $26 > 0.0 | $27 - $segmentAABB$sroa$1$sroa$0$0$load205$ph218$i$i > 0.0 | $28 - $segmentAABB$sroa$1$sroa$1$4$load206$ph217$i$i > 0.0) $23 = $dec$i; else {
      $add$i95$i$i = ($12 - ($25 + $27) * .5) * $mul$i25$i$i + $r$sroa$0$0$load180209$i$i * ($13 - ($26 + $28) * .5);
      if ($add$i95$i$i > 0.0) $cond$i$i$i = $add$i95$i$i; else $cond$i$i$i = -$add$i95$i$i;
      if ($cond$i$i$i - ($cond$i$i$i$i * ($25 - $27) * .5 + $cond$i5$i$i$i * ($26 - $28) * .5) > 0.0) $23 = $dec$i; else {
       $child1$i$i$i = $24 + ($22 * 36 | 0) + 24 | 0;
       if (!((HEAP32[$child1$i$i$i >> 2] | 0) == -1)) {
        if (($dec$i | 0) == (HEAP32[$m_capacity$i$i$i$i >> 2] | 0)) {
         HEAP32[$m_capacity$i$i$i$i >> 2] = $dec$i << 1;
         $call$i$i11 = _malloc($dec$i << 3) | 0;
         HEAP32[$stack$i$i >> 2] = $call$i$i11;
         _memcpy($call$i$i11 | 0, $21 | 0, HEAP32[$m_count$i$i$i$i >> 2] << 2 | 0) | 0;
         if (($21 | 0) != ($arraydecay$i$i153$i$i | 0)) _free($21);
        }
        $57 = HEAP32[$stack$i$i >> 2] | 0;
        HEAP32[$57 + (HEAP32[$m_count$i$i$i$i >> 2] << 2) >> 2] = HEAP32[$child1$i$i$i >> 2];
        $inc$i18 = (HEAP32[$m_count$i$i$i$i >> 2] | 0) + 1 | 0;
        HEAP32[$m_count$i$i$i$i >> 2] = $inc$i18;
        $child2$i$i = $24 + ($22 * 36 | 0) + 28 | 0;
        if (($inc$i18 | 0) == (HEAP32[$m_capacity$i$i$i$i >> 2] | 0)) {
         HEAP32[$m_capacity$i$i$i$i >> 2] = $inc$i18 << 1;
         $call$i$i26 = _malloc($inc$i18 << 3) | 0;
         HEAP32[$stack$i$i >> 2] = $call$i$i26;
         _memcpy($call$i$i26 | 0, $57 | 0, HEAP32[$m_count$i$i$i$i >> 2] << 2 | 0) | 0;
         if (($57 | 0) != ($arraydecay$i$i153$i$i | 0)) _free($57);
        }
        HEAP32[(HEAP32[$stack$i$i >> 2] | 0) + (HEAP32[$m_count$i$i$i$i >> 2] << 2) >> 2] = HEAP32[$child2$i$i >> 2];
        $inc$i33 = (HEAP32[$m_count$i$i$i$i >> 2] | 0) + 1 | 0;
        HEAP32[$m_count$i$i$i$i >> 2] = $inc$i33;
        $23 = $inc$i33;
        break;
       }
       $30 = $subInput$i$i;
       HEAP32[$30 >> 2] = $2;
       HEAP32[$30 + 4 >> 2] = $5;
       $34 = $p241$i$i;
       HEAP32[$34 >> 2] = $8;
       HEAP32[$34 + 4 >> 2] = $11;
       HEAPF32[$maxFraction43$i$i >> 2] = $maxFraction$0$ph219$i$i;
       if (!(($22 | 0) > -1)) {
        label = 21;
        break L12;
       }
       if ((HEAP32[$m_nodeCapacity$i$i$i$i$i >> 2] | 0) <= ($22 | 0)) {
        label = 21;
        break L12;
       }
       $39 = HEAP32[$24 + ($22 * 36 | 0) + 16 >> 2] | 0;
       $40 = HEAP32[$39 + 16 >> 2] | 0;
       $42 = HEAP32[$40 + 12 >> 2] | 0;
       if (FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[$42 >> 2] | 0) + 20 >> 2] & 63]($42, $output$i$i$i, $subInput$i$i, (HEAP32[$40 + 8 >> 2] | 0) + 12 | 0, HEAP32[$39 + 20 >> 2] | 0) | 0) {
        $45 = +HEAPF32[$fraction4$i$i$i >> 2];
        $sub$i1$i$i = 1.0 - $45;
        $add3$i$i3$i$i = $sub$i1$i$i * +HEAPF32[$y$i$i$i$i >> 2] + $45 * +HEAPF32[$y$i14$i$i$i >> 2];
        HEAPF32[$point$i$i$i >> 2] = +HEAPF32[$subInput$i$i >> 2] * $sub$i1$i$i + $45 * +HEAPF32[$x$i12$i$i$i >> 2];
        HEAPF32[$y3$i$i$i11$i$i$i >> 2] = $add3$i$i3$i$i;
        $retval$0$i$i$i = +FUNCTION_TABLE_diiiid[HEAP32[(HEAP32[$arg0 >> 2] | 0) + 8 >> 2] & 63]($arg0, $40, $point$i$i$i, $output$i$i$i, $45);
       } else $retval$0$i$i$i = +HEAPF32[$maxFraction43$i$i >> 2];
       if ($retval$0$i$i$i == 0.0) break L10;
       if ($retval$0$i$i$i > 0.0) break L14;
       $23 = HEAP32[$m_count$i$i$i$i >> 2] | 0;
      }
     }
    } while (0);
    if (($23 | 0) > 0) $20 = $23; else break L10;
   }
   $add$i54$i$i = $12 + $sub$i$i$i * $retval$0$i$i$i;
   $add3$i$i$i = $13 + $sub3$i$i$i * $retval$0$i$i$i;
   $66 = HEAP32[$m_count$i$i$i$i >> 2] | 0;
   if (($66 | 0) <= 0) break L10; else {
    $maxFraction$0$ph219$i$i = $retval$0$i$i$i;
    $segmentAABB$sroa$0$sroa$0$0$load207$ph216$i$i = $12 < $add$i54$i$i ? $12 : $add$i54$i$i;
    $segmentAABB$sroa$0$sroa$1$4$load208$ph215$i$i = $13 < $add3$i$i$i ? $13 : $add3$i$i$i;
    $segmentAABB$sroa$1$sroa$0$0$load205$ph218$i$i = $12 > $add$i54$i$i ? $12 : $add$i54$i$i;
    $segmentAABB$sroa$1$sroa$1$4$load206$ph217$i$i = $13 > $add3$i$i$i ? $13 : $add3$i$i$i;
   }
  }
  if ((label | 0) == 11) ___assert_fail(12448, 12464, 67, 12512); else if ((label | 0) == 21) ___assert_fail(14568, 14512, 153, 14616);
 } while (0);
 $65 = HEAP32[$stack$i$i >> 2] | 0;
 if (($65 | 0) == ($arraydecay$i$i153$i$i | 0)) {
  STACKTOP = sp;
  return;
 }
 _free($65);
 HEAP32[$stack$i$i >> 2] = 0;
 STACKTOP = sp;
 return;
}
function __ZN9b2Fixture4DumpEi($this, $bodyIndex) {
 $this = $this | 0;
 $bodyIndex = $bodyIndex | 0;
 var $$lcssa = 0, $$lcssa36 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $31 = 0, $32 = 0, $35 = 0, $7 = 0, $8 = 0, $conv14 = 0.0, $conv24 = 0.0, $conv29 = 0.0, $conv34 = 0.0, $conv39 = 0.0, $conv48 = 0.0, $conv52 = 0.0, $conv65 = 0.0, $conv69 = 0.0, $conv78 = 0.0, $conv83 = 0.0, $i$035 = 0, $i57$038 = 0, $m_nextVertex = 0, $m_prevVertex = 0, $m_vertex0 = 0, $m_vertex2 = 0, $m_vertices = 0, $m_vertices62 = 0, $vararg_buffer103 = 0, $vararg_ptr29 = 0, $vararg_ptr38 = 0, $vararg_ptr42 = 0, $vararg_ptr46 = 0, $vararg_ptr50 = 0, $vararg_ptr65 = 0, $vararg_ptr66 = 0, $vararg_ptr78 = 0, $vararg_ptr79 = 0, $vararg_ptr86 = 0, $vararg_ptr90 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer103 = sp;
 __Z5b2LogPKcz(12640, $vararg_buffer103);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 16 >> 2];
 HEAP32[$vararg_buffer103 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer103 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(12664, $vararg_buffer103);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 20 >> 2];
 HEAP32[$vararg_buffer103 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer103 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(12696, $vararg_buffer103);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this >> 2];
 HEAP32[$vararg_buffer103 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer103 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(12728, $vararg_buffer103);
 HEAP32[$vararg_buffer103 >> 2] = HEAPU8[$this + 38 >> 0];
 __Z5b2LogPKcz(12760, $vararg_buffer103);
 HEAP32[$vararg_buffer103 >> 2] = HEAPU16[$this + 32 >> 1];
 __Z5b2LogPKcz(12792, $vararg_buffer103);
 HEAP32[$vararg_buffer103 >> 2] = HEAPU16[$this + 34 >> 1];
 __Z5b2LogPKcz(12840, $vararg_buffer103);
 HEAP32[$vararg_buffer103 >> 2] = HEAP16[$this + 36 >> 1];
 __Z5b2LogPKcz(12880, $vararg_buffer103);
 $7 = HEAP32[$this + 12 >> 2] | 0;
 $8 = HEAP32[$7 + 4 >> 2] | 0;
 if (($8 | 0) == 1) {
  __Z5b2LogPKcz(13024, $vararg_buffer103);
  HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$7 + 8 >> 2];
  HEAP32[$vararg_buffer103 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$vararg_buffer103 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  __Z5b2LogPKcz(12952, $vararg_buffer103);
  $m_vertex0 = $7 + 28 | 0;
  $conv24 = +HEAPF32[$m_vertex0 + 4 >> 2];
  HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$m_vertex0 >> 2];
  HEAP32[$vararg_buffer103 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$vararg_buffer103 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  $vararg_ptr38 = $vararg_buffer103 + 8 | 0;
  HEAPF64[tempDoublePtr >> 3] = $conv24;
  HEAP32[$vararg_ptr38 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$vararg_ptr38 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  __Z5b2LogPKcz(13048, $vararg_buffer103);
  $conv29 = +HEAPF32[$7 + 16 >> 2];
  HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$7 + 12 >> 2];
  HEAP32[$vararg_buffer103 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$vararg_buffer103 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  $vararg_ptr42 = $vararg_buffer103 + 8 | 0;
  HEAPF64[tempDoublePtr >> 3] = $conv29;
  HEAP32[$vararg_ptr42 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$vararg_ptr42 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  __Z5b2LogPKcz(13096, $vararg_buffer103);
  $m_vertex2 = $7 + 20 | 0;
  $conv34 = +HEAPF32[$m_vertex2 + 4 >> 2];
  HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$m_vertex2 >> 2];
  HEAP32[$vararg_buffer103 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$vararg_buffer103 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  $vararg_ptr46 = $vararg_buffer103 + 8 | 0;
  HEAPF64[tempDoublePtr >> 3] = $conv34;
  HEAP32[$vararg_ptr46 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$vararg_ptr46 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  __Z5b2LogPKcz(13144, $vararg_buffer103);
  $conv39 = +HEAPF32[$7 + 40 >> 2];
  HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$7 + 36 >> 2];
  HEAP32[$vararg_buffer103 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$vararg_buffer103 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  $vararg_ptr50 = $vararg_buffer103 + 8 | 0;
  HEAPF64[tempDoublePtr >> 3] = $conv39;
  HEAP32[$vararg_ptr50 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$vararg_ptr50 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  __Z5b2LogPKcz(13192, $vararg_buffer103);
  HEAP32[$vararg_buffer103 >> 2] = HEAPU8[$7 + 44 >> 0];
  __Z5b2LogPKcz(13240, $vararg_buffer103);
  HEAP32[$vararg_buffer103 >> 2] = HEAPU8[$7 + 45 >> 0];
  __Z5b2LogPKcz(13280, $vararg_buffer103);
 } else if (($8 | 0) == 3) {
  __Z5b2LogPKcz(13440, $vararg_buffer103);
  $29 = $7 + 16 | 0;
  HEAP32[$vararg_buffer103 >> 2] = HEAP32[$29 >> 2];
  __Z5b2LogPKcz(13352, $vararg_buffer103);
  $31 = HEAP32[$29 >> 2] | 0;
  if (($31 | 0) > 0) {
   $m_vertices62 = $7 + 12 | 0;
   $i57$038 = 0;
   do {
    $32 = HEAP32[$m_vertices62 >> 2] | 0;
    $conv65 = +HEAPF32[$32 + ($i57$038 << 3) >> 2];
    $conv69 = +HEAPF32[$32 + ($i57$038 << 3) + 4 >> 2];
    HEAP32[$vararg_buffer103 >> 2] = $i57$038;
    $vararg_ptr78 = $vararg_buffer103 + 4 | 0;
    HEAPF64[tempDoublePtr >> 3] = $conv65;
    HEAP32[$vararg_ptr78 >> 2] = HEAP32[tempDoublePtr >> 2];
    HEAP32[$vararg_ptr78 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    $vararg_ptr79 = $vararg_buffer103 + 12 | 0;
    HEAPF64[tempDoublePtr >> 3] = $conv69;
    HEAP32[$vararg_ptr79 >> 2] = HEAP32[tempDoublePtr >> 2];
    HEAP32[$vararg_ptr79 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    __Z5b2LogPKcz(13376, $vararg_buffer103);
    $i57$038 = $i57$038 + 1 | 0;
    $35 = HEAP32[$29 >> 2] | 0;
   } while (($i57$038 | 0) < ($35 | 0));
   $$lcssa36 = $35;
  } else $$lcssa36 = $31;
  HEAP32[$vararg_buffer103 >> 2] = $$lcssa36;
  __Z5b2LogPKcz(13472, $vararg_buffer103);
  $m_prevVertex = $7 + 20 | 0;
  $conv78 = +HEAPF32[$m_prevVertex + 4 >> 2];
  HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$m_prevVertex >> 2];
  HEAP32[$vararg_buffer103 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$vararg_buffer103 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  $vararg_ptr86 = $vararg_buffer103 + 8 | 0;
  HEAPF64[tempDoublePtr >> 3] = $conv78;
  HEAP32[$vararg_ptr86 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$vararg_ptr86 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  __Z5b2LogPKcz(13504, $vararg_buffer103);
  $m_nextVertex = $7 + 28 | 0;
  $conv83 = +HEAPF32[$m_nextVertex + 4 >> 2];
  HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$m_nextVertex >> 2];
  HEAP32[$vararg_buffer103 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$vararg_buffer103 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  $vararg_ptr90 = $vararg_buffer103 + 8 | 0;
  HEAPF64[tempDoublePtr >> 3] = $conv83;
  HEAP32[$vararg_ptr90 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$vararg_ptr90 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  __Z5b2LogPKcz(13552, $vararg_buffer103);
  HEAP32[$vararg_buffer103 >> 2] = HEAPU8[$7 + 36 >> 0];
  __Z5b2LogPKcz(13600, $vararg_buffer103);
  HEAP32[$vararg_buffer103 >> 2] = HEAPU8[$7 + 37 >> 0];
  __Z5b2LogPKcz(13640, $vararg_buffer103);
 } else if (($8 | 0) == 0) {
  __Z5b2LogPKcz(12920, $vararg_buffer103);
  HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$7 + 8 >> 2];
  HEAP32[$vararg_buffer103 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$vararg_buffer103 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  __Z5b2LogPKcz(12952, $vararg_buffer103);
  $conv14 = +HEAPF32[$7 + 16 >> 2];
  HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$7 + 12 >> 2];
  HEAP32[$vararg_buffer103 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$vararg_buffer103 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  $vararg_ptr29 = $vararg_buffer103 + 8 | 0;
  HEAPF64[tempDoublePtr >> 3] = $conv14;
  HEAP32[$vararg_ptr29 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$vararg_ptr29 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  __Z5b2LogPKcz(12984, $vararg_buffer103);
 } else if (($8 | 0) == 2) {
  __Z5b2LogPKcz(13320, $vararg_buffer103);
  HEAP32[$vararg_buffer103 >> 2] = 8;
  __Z5b2LogPKcz(13352, $vararg_buffer103);
  $24 = $7 + 148 | 0;
  $25 = HEAP32[$24 >> 2] | 0;
  if (($25 | 0) > 0) {
   $m_vertices = $7 + 20 | 0;
   $i$035 = 0;
   do {
    $conv48 = +HEAPF32[$m_vertices + ($i$035 << 3) >> 2];
    $conv52 = +HEAPF32[$m_vertices + ($i$035 << 3) + 4 >> 2];
    HEAP32[$vararg_buffer103 >> 2] = $i$035;
    $vararg_ptr65 = $vararg_buffer103 + 4 | 0;
    HEAPF64[tempDoublePtr >> 3] = $conv48;
    HEAP32[$vararg_ptr65 >> 2] = HEAP32[tempDoublePtr >> 2];
    HEAP32[$vararg_ptr65 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    $vararg_ptr66 = $vararg_buffer103 + 12 | 0;
    HEAPF64[tempDoublePtr >> 3] = $conv52;
    HEAP32[$vararg_ptr66 >> 2] = HEAP32[tempDoublePtr >> 2];
    HEAP32[$vararg_ptr66 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    __Z5b2LogPKcz(13376, $vararg_buffer103);
    $i$035 = $i$035 + 1 | 0;
    $28 = HEAP32[$24 >> 2] | 0;
   } while (($i$035 | 0) < ($28 | 0));
   $$lcssa = $28;
  } else $$lcssa = $25;
  HEAP32[$vararg_buffer103 >> 2] = $$lcssa;
  __Z5b2LogPKcz(13416, $vararg_buffer103);
 } else {
  STACKTOP = sp;
  return;
 }
 __Z5b2LogPKcz(16472, $vararg_buffer103);
 __Z5b2LogPKcz(13680, $vararg_buffer103);
 __Z5b2LogPKcz(16472, $vararg_buffer103);
 HEAP32[$vararg_buffer103 >> 2] = $bodyIndex;
 __Z5b2LogPKcz(13704, $vararg_buffer103);
 STACKTOP = sp;
 return;
}
function __ZN11b2WeldJoint23InitVelocityConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $6 = 0, $62 = 0.0, $63 = 0.0, $64 = 0, $71 = 0.0, $75 = 0.0, $77 = 0.0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, $K = 0, $add = 0.0, $add$i = 0.0, $add$i115 = 0.0, $add100 = 0.0, $add109 = 0.0, $add119 = 0.0, $add150 = 0.0, $add58 = 0.0, $call$i$i = 0.0, $call$i$i50 = 0.0, $call2$i$i = 0.0, $call2$i$i52 = 0.0, $cond = 0.0, $cond143 = 0.0, $cond156 = 0.0, $det$0$i = 0.0, $m_gamma = 0, $m_impulse = 0, $m_indexA = 0, $m_indexB = 0, $m_mass = 0, $m_rA = 0, $m_rB = 0, $mul$i102 = 0.0, $mul11$i = 0.0, $mul127 = 0.0, $mul132 = 0.0, $mul135 = 0.0, $mul2$i = 0.0, $mul3$i105 = 0.0, $sub$i = 0.0, $sub$i112 = 0.0, $sub$i4 = 0.0, $sub$i56 = 0.0, $sub$i61 = 0.0, $sub125 = 0.0, $sub3$i = 0.0, $sub3$i64 = 0.0, $sub71 = 0.0, $sub80 = 0.0, $v191 = 0, $v199 = 0, $vA$sroa$0$0$load126130 = 0.0, $vA$sroa$1$4$load127131 = 0.0, $vB$sroa$0$0$load124128 = 0.0, $vB$sroa$1$4$load125129 = 0.0, $velocities = 0, $w195 = 0, $w203 = 0, $wA$0 = 0.0, $wB$0 = 0.0, $y = 0, $y$i103 = 0, $y53 = 0, $z$i104 = 0, $z23$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $K = sp;
 $0 = HEAP32[$this + 48 >> 2] | 0;
 $1 = HEAP32[$0 + 8 >> 2] | 0;
 $m_indexA = $this + 116 | 0;
 HEAP32[$m_indexA >> 2] = $1;
 $2 = HEAP32[$this + 52 >> 2] | 0;
 $3 = HEAP32[$2 + 8 >> 2] | 0;
 $m_indexB = $this + 120 | 0;
 HEAP32[$m_indexB >> 2] = $3;
 $4 = $0 + 28 | 0;
 $6 = HEAP32[$4 >> 2] | 0;
 $9 = HEAP32[$4 + 4 >> 2] | 0;
 $10 = $this + 140 | 0;
 HEAP32[$10 >> 2] = $6;
 HEAP32[$10 + 4 >> 2] = $9;
 $14 = $2 + 28 | 0;
 $16 = HEAP32[$14 >> 2] | 0;
 $19 = HEAP32[$14 + 4 >> 2] | 0;
 $20 = $this + 148 | 0;
 HEAP32[$20 >> 2] = $16;
 HEAP32[$20 + 4 >> 2] = $19;
 $24 = +HEAPF32[$0 + 120 >> 2];
 HEAPF32[$this + 156 >> 2] = $24;
 $25 = +HEAPF32[$2 + 120 >> 2];
 HEAPF32[$this + 160 >> 2] = $25;
 $26 = +HEAPF32[$0 + 128 >> 2];
 HEAPF32[$this + 164 >> 2] = $26;
 $27 = +HEAPF32[$2 + 128 >> 2];
 HEAPF32[$this + 168 >> 2] = $27;
 $28 = HEAP32[$data + 24 >> 2] | 0;
 $29 = +HEAPF32[$28 + ($1 * 12 | 0) + 8 >> 2];
 $velocities = $data + 28 | 0;
 $30 = HEAP32[$velocities >> 2] | 0;
 $31 = $30 + ($1 * 12 | 0) | 0;
 $37 = +HEAPF32[$31 >> 2];
 $38 = +HEAPF32[$31 + 4 >> 2];
 $39 = +HEAPF32[$30 + ($1 * 12 | 0) + 8 >> 2];
 $40 = +HEAPF32[$28 + ($3 * 12 | 0) + 8 >> 2];
 $41 = $30 + ($3 * 12 | 0) | 0;
 $47 = +HEAPF32[$41 >> 2];
 $48 = +HEAPF32[$41 + 4 >> 2];
 $49 = +HEAPF32[$30 + ($3 * 12 | 0) + 8 >> 2];
 $call$i$i = +Math_sin(+$29);
 $call2$i$i = +Math_cos(+$29);
 $call$i$i50 = +Math_sin(+$40);
 $call2$i$i52 = +Math_cos(+$40);
 $m_rA = $this + 124 | 0;
 $sub$i = +HEAPF32[$this + 80 >> 2] - (HEAP32[tempDoublePtr >> 2] = $6, +HEAPF32[tempDoublePtr >> 2]);
 $sub3$i = +HEAPF32[$this + 84 >> 2] - (HEAP32[tempDoublePtr >> 2] = $9, +HEAPF32[tempDoublePtr >> 2]);
 $sub$i56 = $call2$i$i * $sub$i - $call$i$i * $sub3$i;
 $add$i = $call$i$i * $sub$i + $call2$i$i * $sub3$i;
 $53 = +$sub$i56;
 $54 = +$add$i;
 $55 = $m_rA;
 HEAPF32[$55 >> 2] = $53;
 HEAPF32[$55 + 4 >> 2] = $54;
 $m_rB = $this + 132 | 0;
 $sub$i61 = +HEAPF32[$this + 88 >> 2] - (HEAP32[tempDoublePtr >> 2] = $16, +HEAPF32[tempDoublePtr >> 2]);
 $sub3$i64 = +HEAPF32[$this + 92 >> 2] - (HEAP32[tempDoublePtr >> 2] = $19, +HEAPF32[tempDoublePtr >> 2]);
 $sub$i112 = $call2$i$i52 * $sub$i61 - $call$i$i50 * $sub3$i64;
 $add$i115 = $call$i$i50 * $sub$i61 + $call2$i$i52 * $sub3$i64;
 $62 = +$sub$i112;
 $63 = +$add$i115;
 $64 = $m_rB;
 HEAPF32[$64 >> 2] = $62;
 HEAPF32[$64 + 4 >> 2] = $63;
 $add = $24 + $25;
 $y = $this + 128 | 0;
 $y53 = $this + 136 | 0;
 $add58 = $add + $26 * $add$i * $add$i + $27 * $add$i115 * $add$i115;
 HEAPF32[$K >> 2] = $add58;
 $sub71 = -($26 * $add$i * $sub$i56) - $27 * $add$i115 * $sub$i112;
 HEAPF32[$K + 12 >> 2] = $sub71;
 $sub80 = -($26 * $add$i) - $27 * $add$i115;
 HEAPF32[$K + 24 >> 2] = $sub80;
 HEAPF32[$K + 4 >> 2] = $sub71;
 $add100 = $add + $26 * $sub$i56 * $sub$i56 + $27 * $sub$i112 * $sub$i112;
 HEAPF32[$K + 16 >> 2] = $add100;
 $add109 = $26 * $sub$i56 + $27 * $sub$i112;
 HEAPF32[$K + 28 >> 2] = $add109;
 HEAPF32[$K + 8 >> 2] = $sub80;
 HEAPF32[$K + 20 >> 2] = $add109;
 $add119 = $26 + $27;
 HEAPF32[$K + 32 >> 2] = $add119;
 $71 = +HEAPF32[$this + 68 >> 2];
 $m_mass = $this + 172 | 0;
 if ($71 > 0.0) {
  $sub$i4 = $add58 * $add100 - $sub71 * $sub71;
  if ($sub$i4 != 0.0) $det$0$i = 1.0 / $sub$i4; else $det$0$i = $sub$i4;
  HEAPF32[$m_mass >> 2] = $add100 * $det$0$i;
  $mul11$i = -($det$0$i * $sub71);
  HEAPF32[$this + 184 >> 2] = $mul11$i;
  HEAPF32[$this + 180 >> 2] = 0.0;
  HEAPF32[$this + 176 >> 2] = $mul11$i;
  HEAPF32[$this + 188 >> 2] = $add58 * $det$0$i;
  $z23$i = $this + 192 | 0;
  HEAP32[$z23$i + 0 >> 2] = 0;
  HEAP32[$z23$i + 4 >> 2] = 0;
  HEAP32[$z23$i + 8 >> 2] = 0;
  HEAP32[$z23$i + 12 >> 2] = 0;
  if ($add119 > 0.0) $cond = 1.0 / $add119; else $cond = 0.0;
  $sub125 = $40 - $29 - +HEAPF32[$this + 96 >> 2];
  $mul127 = $71 * 6.2831854820251465;
  $mul132 = $mul127 * $cond * $mul127;
  $75 = +HEAPF32[$data >> 2];
  $mul135 = $75 * ($mul127 * $cond * 2.0 * +HEAPF32[$this + 72 >> 2] + $75 * $mul132);
  $m_gamma = $this + 100 | 0;
  HEAPF32[$m_gamma >> 2] = $mul135;
  if ($mul135 != 0.0) $cond143 = 1.0 / $mul135; else $cond143 = 0.0;
  HEAPF32[$m_gamma >> 2] = $cond143;
  HEAPF32[$this + 76 >> 2] = $sub125 * $75 * $mul132 * $cond143;
  $add150 = $add119 + $cond143;
  if ($add150 != 0.0) $cond156 = 1.0 / $add150; else $cond156 = 0.0;
  HEAPF32[$this + 204 >> 2] = $cond156;
 } else {
  __ZNK7b2Mat3315GetSymInverse33EPS_($K, $m_mass);
  HEAPF32[$this + 100 >> 2] = 0.0;
  HEAPF32[$this + 76 >> 2] = 0.0;
 }
 $m_impulse = $this + 104 | 0;
 if ((HEAP8[$data + 20 >> 0] | 0) == 0) {
  HEAPF32[$m_impulse >> 2] = 0.0;
  HEAPF32[$this + 108 >> 2] = 0.0;
  HEAPF32[$this + 112 >> 2] = 0.0;
  $vA$sroa$0$0$load126130 = $37;
  $vA$sroa$1$4$load127131 = $38;
  $vB$sroa$0$0$load124128 = $47;
  $vB$sroa$1$4$load125129 = $48;
  $wA$0 = $39;
  $wB$0 = $49;
  $85 = HEAP32[$m_indexA >> 2] | 0;
  $86 = HEAP32[$velocities >> 2] | 0;
  $v191 = $86 + ($85 * 12 | 0) | 0;
  $87 = +$vA$sroa$0$0$load126130;
  $88 = +$vA$sroa$1$4$load127131;
  $89 = $v191;
  $90 = $89;
  HEAPF32[$90 >> 2] = $87;
  $91 = $89 + 4 | 0;
  $92 = $91;
  HEAPF32[$92 >> 2] = $88;
  $93 = HEAP32[$m_indexA >> 2] | 0;
  $94 = HEAP32[$velocities >> 2] | 0;
  $w195 = $94 + ($93 * 12 | 0) + 8 | 0;
  HEAPF32[$w195 >> 2] = $wA$0;
  $95 = HEAP32[$m_indexB >> 2] | 0;
  $v199 = $94 + ($95 * 12 | 0) | 0;
  $96 = +$vB$sroa$0$0$load124128;
  $97 = +$vB$sroa$1$4$load125129;
  $98 = $v199;
  $99 = $98;
  HEAPF32[$99 >> 2] = $96;
  $100 = $98 + 4 | 0;
  $101 = $100;
  HEAPF32[$101 >> 2] = $97;
  $102 = HEAP32[$m_indexB >> 2] | 0;
  $103 = HEAP32[$velocities >> 2] | 0;
  $w203 = $103 + ($102 * 12 | 0) + 8 | 0;
  HEAPF32[$w203 >> 2] = $wB$0;
  STACKTOP = sp;
  return;
 } else {
  $77 = +HEAPF32[$data + 8 >> 2];
  $mul$i102 = $77 * +HEAPF32[$m_impulse >> 2];
  HEAPF32[$m_impulse >> 2] = $mul$i102;
  $y$i103 = $this + 108 | 0;
  $mul2$i = $77 * +HEAPF32[$y$i103 >> 2];
  HEAPF32[$y$i103 >> 2] = $mul2$i;
  $z$i104 = $this + 112 | 0;
  $mul3$i105 = $77 * +HEAPF32[$z$i104 >> 2];
  HEAPF32[$z$i104 >> 2] = $mul3$i105;
  $vA$sroa$0$0$load126130 = $37 - $24 * $mul$i102;
  $vA$sroa$1$4$load127131 = $38 - $24 * $mul2$i;
  $vB$sroa$0$0$load124128 = $47 + $25 * $mul$i102;
  $vB$sroa$1$4$load125129 = $48 + $25 * $mul2$i;
  $wA$0 = $39 - $26 * ($mul3$i105 + ($mul2$i * +HEAPF32[$m_rA >> 2] - $mul$i102 * +HEAPF32[$y >> 2]));
  $wB$0 = $49 + $27 * ($mul3$i105 + ($mul2$i * +HEAPF32[$m_rB >> 2] - $mul$i102 * +HEAPF32[$y53 >> 2]));
  $85 = HEAP32[$m_indexA >> 2] | 0;
  $86 = HEAP32[$velocities >> 2] | 0;
  $v191 = $86 + ($85 * 12 | 0) | 0;
  $87 = +$vA$sroa$0$0$load126130;
  $88 = +$vA$sroa$1$4$load127131;
  $89 = $v191;
  $90 = $89;
  HEAPF32[$90 >> 2] = $87;
  $91 = $89 + 4 | 0;
  $92 = $91;
  HEAPF32[$92 >> 2] = $88;
  $93 = HEAP32[$m_indexA >> 2] | 0;
  $94 = HEAP32[$velocities >> 2] | 0;
  $w195 = $94 + ($93 * 12 | 0) + 8 | 0;
  HEAPF32[$w195 >> 2] = $wA$0;
  $95 = HEAP32[$m_indexB >> 2] | 0;
  $v199 = $94 + ($95 * 12 | 0) | 0;
  $96 = +$vB$sroa$0$0$load124128;
  $97 = +$vB$sroa$1$4$load125129;
  $98 = $v199;
  $99 = $98;
  HEAPF32[$99 >> 2] = $96;
  $100 = $98 + 4 | 0;
  $101 = $100;
  HEAPF32[$101 >> 2] = $97;
  $102 = HEAP32[$m_indexB >> 2] | 0;
  $103 = HEAP32[$velocities >> 2] | 0;
  $w203 = $103 + ($102 * 12 | 0) + 8 | 0;
  HEAPF32[$w203 >> 2] = $wB$0;
  STACKTOP = sp;
  return;
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $17 = 0, $18 = 0, $7 = 0, $__flags34 = 0, $add$ptr = 0, $add$ptr64 = 0, $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0, $does_dst_type_point_to_our_static_type$0$off078 = 0, $does_dst_type_point_to_our_static_type$1$off0 = 0, $dst_ptr_not_leading_to_static_ptr = 0, $found_any_static_type = 0, $found_our_static_ptr = 0, $incdec$ptr69 = 0, $is_dst_type_derived_from_static_type = 0, $is_dst_type_derived_from_static_type13$0$off080 = 0, $is_dst_type_derived_from_static_type13$1$off0 = 0, $is_dst_type_derived_from_static_type13$2$off0 = 0, $is_dst_type_derived_from_static_type13$2$off086 = 0, $is_dst_type_derived_from_static_type13$2$off087 = 0, $number_to_dst_ptr = 0, $number_to_static_ptr76 = 0, $p$079 = 0, $p65$0 = 0, $p65$1 = 0, $p65$2 = 0, $path_dst_ptr_to_static_ptr = 0, $path_dst_ptr_to_static_ptr99 = 0, $path_dynamic_ptr_to_static_ptr$i = 0, $search_done = 0, $search_done110 = 0, $search_done79 = 0, $search_done92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) {
  if ((HEAP32[$info + 4 >> 2] | 0) != ($current_ptr | 0)) {
   STACKTOP = sp;
   return;
  }
  $path_dynamic_ptr_to_static_ptr$i = $info + 28 | 0;
  if ((HEAP32[$path_dynamic_ptr_to_static_ptr$i >> 2] | 0) == 1) {
   STACKTOP = sp;
   return;
  }
  HEAP32[$path_dynamic_ptr_to_static_ptr$i >> 2] = $path_below;
  STACKTOP = sp;
  return;
 }
 if (($this | 0) != (HEAP32[$info >> 2] | 0)) {
  $17 = HEAP32[$this + 12 >> 2] | 0;
  $add$ptr64 = $this + ($17 << 3) + 16 | 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this + 16 | 0, $info, $current_ptr, $path_below, $use_strcmp);
  $incdec$ptr69 = $this + 24 | 0;
  if (($17 | 0) <= 1) {
   STACKTOP = sp;
   return;
  }
  $18 = HEAP32[$this + 8 >> 2] | 0;
  if (($18 & 2 | 0) == 0) {
   $number_to_static_ptr76 = $info + 36 | 0;
   if ((HEAP32[$number_to_static_ptr76 >> 2] | 0) != 1) {
    if (($18 & 1 | 0) == 0) {
     $search_done110 = $info + 54 | 0;
     $p65$2 = $incdec$ptr69;
     while (1) {
      if ((HEAP8[$search_done110 >> 0] | 0) != 0) {
       label = 43;
       break;
      }
      if ((HEAP32[$number_to_static_ptr76 >> 2] | 0) == 1) {
       label = 43;
       break;
      }
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p65$2, $info, $current_ptr, $path_below, $use_strcmp);
      $p65$2 = $p65$2 + 8 | 0;
      if (!($p65$2 >>> 0 < $add$ptr64 >>> 0)) {
       label = 43;
       break;
      }
     }
     if ((label | 0) == 43) {
      STACKTOP = sp;
      return;
     }
    }
    $path_dst_ptr_to_static_ptr99 = $info + 24 | 0;
    $search_done92 = $info + 54 | 0;
    $p65$1 = $incdec$ptr69;
    while (1) {
     if ((HEAP8[$search_done92 >> 0] | 0) != 0) {
      label = 43;
      break;
     }
     if ((HEAP32[$number_to_static_ptr76 >> 2] | 0) == 1) if ((HEAP32[$path_dst_ptr_to_static_ptr99 >> 2] | 0) == 1) {
      label = 43;
      break;
     }
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p65$1, $info, $current_ptr, $path_below, $use_strcmp);
     $p65$1 = $p65$1 + 8 | 0;
     if (!($p65$1 >>> 0 < $add$ptr64 >>> 0)) {
      label = 43;
      break;
     }
    }
    if ((label | 0) == 43) {
     STACKTOP = sp;
     return;
    }
   }
  }
  $search_done79 = $info + 54 | 0;
  $p65$0 = $incdec$ptr69;
  while (1) {
   if ((HEAP8[$search_done79 >> 0] | 0) != 0) {
    label = 43;
    break;
   }
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p65$0, $info, $current_ptr, $path_below, $use_strcmp);
   $p65$0 = $p65$0 + 8 | 0;
   if (!($p65$0 >>> 0 < $add$ptr64 >>> 0)) {
    label = 43;
    break;
   }
  }
  if ((label | 0) == 43) {
   STACKTOP = sp;
   return;
  }
 }
 if ((HEAP32[$info + 16 >> 2] | 0) != ($current_ptr | 0)) {
  $dst_ptr_not_leading_to_static_ptr = $info + 20 | 0;
  if ((HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] | 0) != ($current_ptr | 0)) {
   HEAP32[$info + 32 >> 2] = $path_below;
   $is_dst_type_derived_from_static_type = $info + 44 | 0;
   if ((HEAP32[$is_dst_type_derived_from_static_type >> 2] | 0) == 4) {
    STACKTOP = sp;
    return;
   }
   $7 = HEAP32[$this + 12 >> 2] | 0;
   $add$ptr = $this + ($7 << 3) + 16 | 0;
   L54 : do if (($7 | 0) > 0) {
    $found_our_static_ptr = $info + 52 | 0;
    $found_any_static_type = $info + 53 | 0;
    $search_done = $info + 54 | 0;
    $__flags34 = $this + 8 | 0;
    $path_dst_ptr_to_static_ptr = $info + 24 | 0;
    $does_dst_type_point_to_our_static_type$0$off078 = 0;
    $is_dst_type_derived_from_static_type13$0$off080 = 0;
    $p$079 = $this + 16 | 0;
    L56 : while (1) {
     HEAP8[$found_our_static_ptr >> 0] = 0;
     HEAP8[$found_any_static_type >> 0] = 0;
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$079, $info, $current_ptr, $current_ptr, 1, $use_strcmp);
     if ((HEAP8[$search_done >> 0] | 0) != 0) {
      $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off078;
      $is_dst_type_derived_from_static_type13$2$off0 = $is_dst_type_derived_from_static_type13$0$off080;
      break;
     }
     do if ((HEAP8[$found_any_static_type >> 0] | 0) == 0) {
      $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off078;
      $is_dst_type_derived_from_static_type13$1$off0 = $is_dst_type_derived_from_static_type13$0$off080;
     } else {
      if ((HEAP8[$found_our_static_ptr >> 0] | 0) == 0) if ((HEAP32[$__flags34 >> 2] & 1 | 0) == 0) {
       $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off078;
       $is_dst_type_derived_from_static_type13$2$off0 = 1;
       break L56;
      } else {
       $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off078;
       $is_dst_type_derived_from_static_type13$1$off0 = 1;
       break;
      }
      if ((HEAP32[$path_dst_ptr_to_static_ptr >> 2] | 0) == 1) {
       label = 25;
       break L54;
      }
      if ((HEAP32[$__flags34 >> 2] & 2 | 0) == 0) {
       label = 25;
       break L54;
      } else {
       $does_dst_type_point_to_our_static_type$1$off0 = 1;
       $is_dst_type_derived_from_static_type13$1$off0 = 1;
      }
     } while (0);
     $p$079 = $p$079 + 8 | 0;
     if (!($p$079 >>> 0 < $add$ptr >>> 0)) {
      $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$1$off0;
      $is_dst_type_derived_from_static_type13$2$off0 = $is_dst_type_derived_from_static_type13$1$off0;
      break;
     } else {
      $does_dst_type_point_to_our_static_type$0$off078 = $does_dst_type_point_to_our_static_type$1$off0;
      $is_dst_type_derived_from_static_type13$0$off080 = $is_dst_type_derived_from_static_type13$1$off0;
     }
    }
    if ($does_dst_type_point_to_our_static_type$0$off0$lcssa) {
     $is_dst_type_derived_from_static_type13$2$off087 = $is_dst_type_derived_from_static_type13$2$off0;
     label = 24;
    } else {
     $is_dst_type_derived_from_static_type13$2$off086 = $is_dst_type_derived_from_static_type13$2$off0;
     label = 21;
    }
   } else {
    $is_dst_type_derived_from_static_type13$2$off086 = 0;
    label = 21;
   } while (0);
   if ((label | 0) == 21) {
    HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] = $current_ptr;
    $number_to_dst_ptr = $info + 40 | 0;
    HEAP32[$number_to_dst_ptr >> 2] = (HEAP32[$number_to_dst_ptr >> 2] | 0) + 1;
    if ((HEAP32[$info + 36 >> 2] | 0) == 1) if ((HEAP32[$info + 24 >> 2] | 0) == 2) {
     HEAP8[$info + 54 >> 0] = 1;
     if ($is_dst_type_derived_from_static_type13$2$off086) label = 25; else label = 26;
    } else {
     $is_dst_type_derived_from_static_type13$2$off087 = $is_dst_type_derived_from_static_type13$2$off086;
     label = 24;
    } else {
     $is_dst_type_derived_from_static_type13$2$off087 = $is_dst_type_derived_from_static_type13$2$off086;
     label = 24;
    }
   }
   if ((label | 0) == 24) if ($is_dst_type_derived_from_static_type13$2$off087) label = 25; else label = 26;
   if ((label | 0) == 25) {
    HEAP32[$is_dst_type_derived_from_static_type >> 2] = 3;
    STACKTOP = sp;
    return;
   } else if ((label | 0) == 26) {
    HEAP32[$is_dst_type_derived_from_static_type >> 2] = 4;
    STACKTOP = sp;
    return;
   }
  }
 }
 if (($path_below | 0) != 1) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$info + 32 >> 2] = 1;
 STACKTOP = sp;
 return;
}
function __ZN13b2PulleyJoint23InitVelocityConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0.0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $28 = 0, $29 = 0, $3 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $6 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $69 = 0.0, $70 = 0.0, $71 = 0, $78 = 0.0, $79 = 0.0, $80 = 0, $86 = 0.0, $87 = 0.0, $88 = 0, $9 = 0, $94 = 0.0, $95 = 0.0, $96 = 0, $add$i = 0.0, $add$i129 = 0.0, $add78 = 0.0, $call$i$i = 0.0, $call$i$i119 = 0.0, $call$i$i137 = 0.0, $call$i$i27 = 0.0, $call2$i$i = 0.0, $call2$i$i29 = 0.0, $div = 0.0, $div57 = 0.0, $m_impulse = 0, $m_indexA = 0, $m_indexB = 0, $m_invIA = 0, $m_invIB = 0, $m_invMassA = 0, $m_invMassB = 0, $m_uA = 0, $m_uB = 0, $mul$i106 = 0.0, $mul$i111 = 0.0, $mul$i78 = 0.0, $mul$i84 = 0.0, $mul1$i80 = 0.0, $mul1$i86 = 0.0, $mul88 = 0.0, $mul94 = 0.0, $storemerge = 0.0, $sub = 0.0, $sub$i = 0.0, $sub$i102 = 0.0, $sub$i126 = 0.0, $sub$i147 = 0.0, $sub$i163 = 0.0, $sub$i33 = 0.0, $sub$i38 = 0.0, $sub$i95 = 0.0, $sub3$i = 0.0, $sub3$i150 = 0.0, $sub3$i166 = 0.0, $sub3$i41 = 0.0, $v116 = 0, $v124 = 0, $vA$sroa$0$0$load175179 = 0.0, $vA$sroa$1$4$load176180 = 0.0, $vB$sroa$0$0$load173177 = 0.0, $vB$sroa$1$4$load174178 = 0.0, $velocities = 0, $w120 = 0, $w128 = 0, $wA$0 = 0.0, $wB$0 = 0.0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this + 48 >> 2] | 0;
 $1 = HEAP32[$0 + 8 >> 2] | 0;
 $m_indexA = $this + 120 | 0;
 HEAP32[$m_indexA >> 2] = $1;
 $2 = HEAP32[$this + 52 >> 2] | 0;
 $3 = HEAP32[$2 + 8 >> 2] | 0;
 $m_indexB = $this + 124 | 0;
 HEAP32[$m_indexB >> 2] = $3;
 $4 = $0 + 28 | 0;
 $6 = HEAP32[$4 >> 2] | 0;
 $9 = HEAP32[$4 + 4 >> 2] | 0;
 $10 = $this + 160 | 0;
 HEAP32[$10 >> 2] = $6;
 HEAP32[$10 + 4 >> 2] = $9;
 $14 = $2 + 28 | 0;
 $16 = HEAP32[$14 >> 2] | 0;
 $19 = HEAP32[$14 + 4 >> 2] | 0;
 $20 = $this + 168 | 0;
 HEAP32[$20 >> 2] = $16;
 HEAP32[$20 + 4 >> 2] = $19;
 $m_invMassA = $this + 176 | 0;
 HEAPF32[$m_invMassA >> 2] = +HEAPF32[$0 + 120 >> 2];
 $m_invMassB = $this + 180 | 0;
 HEAPF32[$m_invMassB >> 2] = +HEAPF32[$2 + 120 >> 2];
 $m_invIA = $this + 184 | 0;
 HEAPF32[$m_invIA >> 2] = +HEAPF32[$0 + 128 >> 2];
 $m_invIB = $this + 188 | 0;
 HEAPF32[$m_invIB >> 2] = +HEAPF32[$2 + 128 >> 2];
 $28 = HEAP32[$data + 24 >> 2] | 0;
 $29 = $28 + ($1 * 12 | 0) | 0;
 $35 = +HEAPF32[$29 >> 2];
 $36 = +HEAPF32[$29 + 4 >> 2];
 $37 = +HEAPF32[$28 + ($1 * 12 | 0) + 8 >> 2];
 $velocities = $data + 28 | 0;
 $38 = HEAP32[$velocities >> 2] | 0;
 $39 = $38 + ($1 * 12 | 0) | 0;
 $45 = +HEAPF32[$39 >> 2];
 $46 = +HEAPF32[$39 + 4 >> 2];
 $47 = +HEAPF32[$38 + ($1 * 12 | 0) + 8 >> 2];
 $48 = $28 + ($3 * 12 | 0) | 0;
 $54 = +HEAPF32[$48 >> 2];
 $55 = +HEAPF32[$48 + 4 >> 2];
 $56 = +HEAPF32[$28 + ($3 * 12 | 0) + 8 >> 2];
 $57 = $38 + ($3 * 12 | 0) | 0;
 $63 = +HEAPF32[$57 >> 2];
 $64 = +HEAPF32[$57 + 4 >> 2];
 $65 = +HEAPF32[$38 + ($3 * 12 | 0) + 8 >> 2];
 $call$i$i = +Math_sin(+$37);
 $call2$i$i = +Math_cos(+$37);
 $call$i$i27 = +Math_sin(+$56);
 $call2$i$i29 = +Math_cos(+$56);
 $sub$i = +HEAPF32[$this + 92 >> 2] - (HEAP32[tempDoublePtr >> 2] = $6, +HEAPF32[tempDoublePtr >> 2]);
 $sub3$i = +HEAPF32[$this + 96 >> 2] - (HEAP32[tempDoublePtr >> 2] = $9, +HEAPF32[tempDoublePtr >> 2]);
 $sub$i33 = $call2$i$i * $sub$i - $call$i$i * $sub3$i;
 $add$i = $call$i$i * $sub$i + $call2$i$i * $sub3$i;
 $69 = +$sub$i33;
 $70 = +$add$i;
 $71 = $this + 144 | 0;
 HEAPF32[$71 >> 2] = $69;
 HEAPF32[$71 + 4 >> 2] = $70;
 $sub$i38 = +HEAPF32[$this + 100 >> 2] - (HEAP32[tempDoublePtr >> 2] = $16, +HEAPF32[tempDoublePtr >> 2]);
 $sub3$i41 = +HEAPF32[$this + 104 >> 2] - +HEAPF32[$this + 172 >> 2];
 $sub$i126 = $call2$i$i29 * $sub$i38 - $call$i$i27 * $sub3$i41;
 $add$i129 = $call$i$i27 * $sub$i38 + $call2$i$i29 * $sub3$i41;
 $78 = +$sub$i126;
 $79 = +$add$i129;
 $80 = $this + 152 | 0;
 HEAPF32[$80 >> 2] = $78;
 HEAPF32[$80 + 4 >> 2] = $79;
 $m_uA = $this + 128 | 0;
 $sub$i163 = $35 + $sub$i33 - +HEAPF32[$this + 68 >> 2];
 $sub3$i166 = $36 + $add$i - +HEAPF32[$this + 72 >> 2];
 $86 = +$sub$i163;
 $87 = +$sub3$i166;
 $88 = $m_uA;
 HEAPF32[$88 >> 2] = $86;
 HEAPF32[$88 + 4 >> 2] = $87;
 $m_uB = $this + 136 | 0;
 $sub$i147 = $54 + $sub$i126 - +HEAPF32[$this + 76 >> 2];
 $sub3$i150 = $55 + $add$i129 - +HEAPF32[$this + 80 >> 2];
 $94 = +$sub$i147;
 $95 = +$sub3$i150;
 $96 = $m_uB;
 HEAPF32[$96 >> 2] = $94;
 HEAPF32[$96 + 4 >> 2] = $95;
 $call$i$i137 = +Math_sqrt(+($sub$i163 * $sub$i163 + $sub3$i166 * $sub3$i166));
 $call$i$i119 = +Math_sqrt(+($sub$i147 * $sub$i147 + $sub3$i150 * $sub3$i150));
 if ($call$i$i137 > .04999999701976776) {
  $div = 1.0 / $call$i$i137;
  $mul$i111 = $sub$i163 * $div;
  HEAPF32[$m_uA >> 2] = $mul$i111;
  $100 = $div * $sub3$i166;
  $102 = $mul$i111;
 } else {
  HEAPF32[$m_uA >> 2] = 0.0;
  $100 = 0.0;
  $102 = 0.0;
 }
 HEAPF32[$this + 132 >> 2] = $100;
 if ($call$i$i119 > .04999999701976776) {
  $div57 = 1.0 / $call$i$i119;
  $mul$i106 = $div57 * $sub$i147;
  HEAPF32[$m_uB >> 2] = $mul$i106;
  $101 = $div57 * $sub3$i150;
  $103 = $mul$i106;
 } else {
  HEAPF32[$m_uB >> 2] = 0.0;
  $101 = 0.0;
  $103 = 0.0;
 }
 HEAPF32[$this + 140 >> 2] = $101;
 $sub$i102 = $sub$i33 * $100 - $add$i * $102;
 $sub$i95 = $sub$i126 * $101 - $add$i129 * $103;
 $104 = +HEAPF32[$m_invMassA >> 2];
 $105 = +HEAPF32[$m_invIA >> 2];
 $106 = +HEAPF32[$m_invMassB >> 2];
 $107 = +HEAPF32[$m_invIB >> 2];
 $108 = +HEAPF32[$this + 112 >> 2];
 $add78 = $104 + $sub$i102 * $sub$i102 * $105 + $108 * $108 * ($106 + $sub$i95 * $sub$i95 * $107);
 if ($add78 > 0.0) $storemerge = 1.0 / $add78; else $storemerge = $add78;
 HEAPF32[$this + 192 >> 2] = $storemerge;
 if ((HEAP8[$data + 20 >> 0] | 0) == 0) {
  HEAPF32[$this + 116 >> 2] = 0.0;
  $vA$sroa$0$0$load175179 = $45;
  $vA$sroa$1$4$load176180 = $46;
  $vB$sroa$0$0$load173177 = $63;
  $vB$sroa$1$4$load174178 = $64;
  $wA$0 = $47;
  $wB$0 = $65;
  $113 = HEAP32[$m_indexA >> 2] | 0;
  $114 = HEAP32[$velocities >> 2] | 0;
  $v116 = $114 + ($113 * 12 | 0) | 0;
  $115 = +$vA$sroa$0$0$load175179;
  $116 = +$vA$sroa$1$4$load176180;
  $117 = $v116;
  $118 = $117;
  HEAPF32[$118 >> 2] = $115;
  $119 = $117 + 4 | 0;
  $120 = $119;
  HEAPF32[$120 >> 2] = $116;
  $121 = HEAP32[$m_indexA >> 2] | 0;
  $122 = HEAP32[$velocities >> 2] | 0;
  $w120 = $122 + ($121 * 12 | 0) + 8 | 0;
  HEAPF32[$w120 >> 2] = $wA$0;
  $123 = HEAP32[$m_indexB >> 2] | 0;
  $v124 = $122 + ($123 * 12 | 0) | 0;
  $124 = +$vB$sroa$0$0$load173177;
  $125 = +$vB$sroa$1$4$load174178;
  $126 = $v124;
  $127 = $126;
  HEAPF32[$127 >> 2] = $124;
  $128 = $126 + 4 | 0;
  $129 = $128;
  HEAPF32[$129 >> 2] = $125;
  $130 = HEAP32[$m_indexB >> 2] | 0;
  $131 = HEAP32[$velocities >> 2] | 0;
  $w128 = $131 + ($130 * 12 | 0) + 8 | 0;
  HEAPF32[$w128 >> 2] = $wB$0;
  STACKTOP = sp;
  return;
 } else {
  $m_impulse = $this + 116 | 0;
  $mul88 = +HEAPF32[$data + 8 >> 2] * +HEAPF32[$m_impulse >> 2];
  HEAPF32[$m_impulse >> 2] = $mul88;
  $sub = -$mul88;
  $mul$i84 = $102 * $sub;
  $mul1$i86 = $100 * $sub;
  $mul94 = -($mul88 * $108);
  $mul$i78 = $103 * $mul94;
  $mul1$i80 = $101 * $mul94;
  $vA$sroa$0$0$load175179 = $45 + $mul$i84 * $104;
  $vA$sroa$1$4$load176180 = $46 + $mul1$i86 * $104;
  $vB$sroa$0$0$load173177 = $63 + $mul$i78 * $106;
  $vB$sroa$1$4$load174178 = $64 + $mul1$i80 * $106;
  $wA$0 = $47 + $105 * ($mul1$i86 * $sub$i33 - $mul$i84 * $add$i);
  $wB$0 = $65 + $107 * ($mul1$i80 * $sub$i126 - $mul$i78 * $add$i129);
  $113 = HEAP32[$m_indexA >> 2] | 0;
  $114 = HEAP32[$velocities >> 2] | 0;
  $v116 = $114 + ($113 * 12 | 0) | 0;
  $115 = +$vA$sroa$0$0$load175179;
  $116 = +$vA$sroa$1$4$load176180;
  $117 = $v116;
  $118 = $117;
  HEAPF32[$118 >> 2] = $115;
  $119 = $117 + 4 | 0;
  $120 = $119;
  HEAPF32[$120 >> 2] = $116;
  $121 = HEAP32[$m_indexA >> 2] | 0;
  $122 = HEAP32[$velocities >> 2] | 0;
  $w120 = $122 + ($121 * 12 | 0) + 8 | 0;
  HEAPF32[$w120 >> 2] = $wA$0;
  $123 = HEAP32[$m_indexB >> 2] | 0;
  $v124 = $122 + ($123 * 12 | 0) | 0;
  $124 = +$vB$sroa$0$0$load173177;
  $125 = +$vB$sroa$1$4$load174178;
  $126 = $v124;
  $127 = $126;
  HEAPF32[$127 >> 2] = $124;
  $128 = $126 + 4 | 0;
  $129 = $128;
  HEAPF32[$129 >> 2] = $125;
  $130 = HEAP32[$m_indexB >> 2] | 0;
  $131 = HEAP32[$velocities >> 2] | 0;
  $w128 = $131 + ($130 * 12 | 0) + 8 | 0;
  HEAPF32[$w128 >> 2] = $wB$0;
  STACKTOP = sp;
  return;
 }
}
function __ZN15b2RevoluteJoint23InitVelocityConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $6 = 0, $62 = 0.0, $63 = 0.0, $64 = 0, $74 = 0.0, $75 = 0.0, $79 = 0.0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, $add = 0.0, $add$i = 0.0, $add$i111 = 0.0, $add115 = 0.0, $add47 = 0.0, $call$i$i = 0.0, $call$i$i45 = 0.0, $call2$i$i = 0.0, $call2$i$i47 = 0.0, $cmp = 0, $cond$i = 0.0, $dtRatio = 0, $m_impulse185 = 0, $m_indexA = 0, $m_indexB = 0, $m_limitState156 = 0, $m_limitState166 = 0, $m_motorImpulse189 = 0, $mul$i97 = 0.0, $mul190 = 0.0, $mul2$i = 0.0, $mul3$i100 = 0.0, $storemerge = 0.0, $sub$i = 0.0, $sub$i108 = 0.0, $sub$i51 = 0.0, $sub$i56 = 0.0, $sub149 = 0.0, $sub150 = 0.0, $sub3$i = 0.0, $sub3$i59 = 0.0, $sub72 = 0.0, $sub82 = 0.0, $v222 = 0, $v230 = 0, $vA$sroa$0$0$load122126 = 0.0, $vA$sroa$1$4$load123127 = 0.0, $vB$sroa$0$0$load120124 = 0.0, $vB$sroa$1$4$load121125 = 0.0, $velocities = 0, $w226 = 0, $w234 = 0, $wA$0 = 0.0, $wB$0 = 0.0, $y$i98 = 0, $z$i99 = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this + 48 >> 2] | 0;
 $1 = HEAP32[$0 + 8 >> 2] | 0;
 $m_indexA = $this + 128 | 0;
 HEAP32[$m_indexA >> 2] = $1;
 $2 = HEAP32[$this + 52 >> 2] | 0;
 $3 = HEAP32[$2 + 8 >> 2] | 0;
 $m_indexB = $this + 132 | 0;
 HEAP32[$m_indexB >> 2] = $3;
 $4 = $0 + 28 | 0;
 $6 = HEAP32[$4 >> 2] | 0;
 $9 = HEAP32[$4 + 4 >> 2] | 0;
 $10 = $this + 152 | 0;
 HEAP32[$10 >> 2] = $6;
 HEAP32[$10 + 4 >> 2] = $9;
 $14 = $2 + 28 | 0;
 $16 = HEAP32[$14 >> 2] | 0;
 $19 = HEAP32[$14 + 4 >> 2] | 0;
 $20 = $this + 160 | 0;
 HEAP32[$20 >> 2] = $16;
 HEAP32[$20 + 4 >> 2] = $19;
 $24 = +HEAPF32[$0 + 120 >> 2];
 HEAPF32[$this + 168 >> 2] = $24;
 $25 = +HEAPF32[$2 + 120 >> 2];
 HEAPF32[$this + 172 >> 2] = $25;
 $26 = +HEAPF32[$0 + 128 >> 2];
 HEAPF32[$this + 176 >> 2] = $26;
 $27 = +HEAPF32[$2 + 128 >> 2];
 HEAPF32[$this + 180 >> 2] = $27;
 $28 = HEAP32[$data + 24 >> 2] | 0;
 $29 = +HEAPF32[$28 + ($1 * 12 | 0) + 8 >> 2];
 $velocities = $data + 28 | 0;
 $30 = HEAP32[$velocities >> 2] | 0;
 $31 = $30 + ($1 * 12 | 0) | 0;
 $37 = +HEAPF32[$31 >> 2];
 $38 = +HEAPF32[$31 + 4 >> 2];
 $39 = +HEAPF32[$30 + ($1 * 12 | 0) + 8 >> 2];
 $40 = +HEAPF32[$28 + ($3 * 12 | 0) + 8 >> 2];
 $41 = $30 + ($3 * 12 | 0) | 0;
 $47 = +HEAPF32[$41 >> 2];
 $48 = +HEAPF32[$41 + 4 >> 2];
 $49 = +HEAPF32[$30 + ($3 * 12 | 0) + 8 >> 2];
 $call$i$i = +Math_sin(+$29);
 $call2$i$i = +Math_cos(+$29);
 $call$i$i45 = +Math_sin(+$40);
 $call2$i$i47 = +Math_cos(+$40);
 $sub$i = +HEAPF32[$this + 68 >> 2] - (HEAP32[tempDoublePtr >> 2] = $6, +HEAPF32[tempDoublePtr >> 2]);
 $sub3$i = +HEAPF32[$this + 72 >> 2] - (HEAP32[tempDoublePtr >> 2] = $9, +HEAPF32[tempDoublePtr >> 2]);
 $sub$i51 = $call2$i$i * $sub$i - $call$i$i * $sub3$i;
 $add$i = $call$i$i * $sub$i + $call2$i$i * $sub3$i;
 $53 = +$sub$i51;
 $54 = +$add$i;
 $55 = $this + 136 | 0;
 HEAPF32[$55 >> 2] = $53;
 HEAPF32[$55 + 4 >> 2] = $54;
 $sub$i56 = +HEAPF32[$this + 76 >> 2] - (HEAP32[tempDoublePtr >> 2] = $16, +HEAPF32[tempDoublePtr >> 2]);
 $sub3$i59 = +HEAPF32[$this + 80 >> 2] - (HEAP32[tempDoublePtr >> 2] = $19, +HEAPF32[tempDoublePtr >> 2]);
 $sub$i108 = $call2$i$i47 * $sub$i56 - $call$i$i45 * $sub3$i59;
 $add$i111 = $call$i$i45 * $sub$i56 + $call2$i$i47 * $sub3$i59;
 $62 = +$sub$i108;
 $63 = +$add$i111;
 $64 = $this + 144 | 0;
 HEAPF32[$64 >> 2] = $62;
 HEAPF32[$64 + 4 >> 2] = $63;
 $add = $26 + $27;
 $cmp = $add == 0.0;
 $add47 = $24 + $25;
 HEAPF32[$this + 184 >> 2] = $add47 + $26 * $add$i * $add$i + $27 * $add$i111 * $add$i111;
 $sub72 = -($26 * $add$i * $sub$i51) - $27 * $add$i111 * $sub$i108;
 HEAPF32[$this + 196 >> 2] = $sub72;
 $sub82 = -($26 * $add$i) - $27 * $add$i111;
 HEAPF32[$this + 208 >> 2] = $sub82;
 HEAPF32[$this + 188 >> 2] = $sub72;
 HEAPF32[$this + 200 >> 2] = $add47 + $26 * $sub$i51 * $sub$i51 + $27 * $sub$i108 * $sub$i108;
 $add115 = $26 * $sub$i51 + $27 * $sub$i108;
 HEAPF32[$this + 212 >> 2] = $add115;
 HEAPF32[$this + 192 >> 2] = $sub82;
 HEAPF32[$this + 204 >> 2] = $add115;
 HEAPF32[$this + 216 >> 2] = $add;
 if ($add > 0.0) $storemerge = 1.0 / $add; else $storemerge = $add;
 HEAPF32[$this + 220 >> 2] = $storemerge;
 if ((HEAP8[$this + 100 >> 0] | 0) == 0 | $cmp) HEAPF32[$this + 96 >> 2] = 0.0;
 do if ((HEAP8[$this + 112 >> 0] | 0) == 0 | $cmp) HEAP32[$this + 224 >> 2] = 0; else {
  $sub149 = $40 - $29 - +HEAPF32[$this + 116 >> 2];
  $74 = +HEAPF32[$this + 124 >> 2];
  $75 = +HEAPF32[$this + 120 >> 2];
  $sub150 = $74 - $75;
  if ($sub150 > 0.0) $cond$i = $sub150; else $cond$i = -$sub150;
  if ($cond$i < .06981317698955536) {
   HEAP32[$this + 224 >> 2] = 3;
   break;
  }
  if ($sub149 <= $75) {
   $m_limitState156 = $this + 224 | 0;
   if ((HEAP32[$m_limitState156 >> 2] | 0) != 1) HEAPF32[$this + 92 >> 2] = 0.0;
   HEAP32[$m_limitState156 >> 2] = 1;
   break;
  }
  $m_limitState166 = $this + 224 | 0;
  if (!($sub149 >= $74)) {
   HEAP32[$m_limitState166 >> 2] = 0;
   HEAPF32[$this + 92 >> 2] = 0.0;
   break;
  }
  if ((HEAP32[$m_limitState166 >> 2] | 0) != 2) HEAPF32[$this + 92 >> 2] = 0.0;
  HEAP32[$m_limitState166 >> 2] = 2;
 } while (0);
 $m_impulse185 = $this + 84 | 0;
 if ((HEAP8[$data + 20 >> 0] | 0) == 0) {
  HEAP32[$m_impulse185 + 0 >> 2] = 0;
  HEAP32[$m_impulse185 + 4 >> 2] = 0;
  HEAP32[$m_impulse185 + 8 >> 2] = 0;
  HEAP32[$m_impulse185 + 12 >> 2] = 0;
  $vA$sroa$0$0$load122126 = $37;
  $vA$sroa$1$4$load123127 = $38;
  $vB$sroa$0$0$load120124 = $47;
  $vB$sroa$1$4$load121125 = $48;
  $wA$0 = $39;
  $wB$0 = $49;
  $85 = HEAP32[$m_indexA >> 2] | 0;
  $86 = HEAP32[$velocities >> 2] | 0;
  $v222 = $86 + ($85 * 12 | 0) | 0;
  $87 = +$vA$sroa$0$0$load122126;
  $88 = +$vA$sroa$1$4$load123127;
  $89 = $v222;
  $90 = $89;
  HEAPF32[$90 >> 2] = $87;
  $91 = $89 + 4 | 0;
  $92 = $91;
  HEAPF32[$92 >> 2] = $88;
  $93 = HEAP32[$m_indexA >> 2] | 0;
  $94 = HEAP32[$velocities >> 2] | 0;
  $w226 = $94 + ($93 * 12 | 0) + 8 | 0;
  HEAPF32[$w226 >> 2] = $wA$0;
  $95 = HEAP32[$m_indexB >> 2] | 0;
  $v230 = $94 + ($95 * 12 | 0) | 0;
  $96 = +$vB$sroa$0$0$load120124;
  $97 = +$vB$sroa$1$4$load121125;
  $98 = $v230;
  $99 = $98;
  HEAPF32[$99 >> 2] = $96;
  $100 = $98 + 4 | 0;
  $101 = $100;
  HEAPF32[$101 >> 2] = $97;
  $102 = HEAP32[$m_indexB >> 2] | 0;
  $103 = HEAP32[$velocities >> 2] | 0;
  $w234 = $103 + ($102 * 12 | 0) + 8 | 0;
  HEAPF32[$w234 >> 2] = $wB$0;
  STACKTOP = sp;
  return;
 } else {
  $dtRatio = $data + 8 | 0;
  $79 = +HEAPF32[$dtRatio >> 2];
  $mul$i97 = $79 * +HEAPF32[$m_impulse185 >> 2];
  HEAPF32[$m_impulse185 >> 2] = $mul$i97;
  $y$i98 = $this + 88 | 0;
  $mul2$i = $79 * +HEAPF32[$y$i98 >> 2];
  HEAPF32[$y$i98 >> 2] = $mul2$i;
  $z$i99 = $this + 92 | 0;
  $mul3$i100 = $79 * +HEAPF32[$z$i99 >> 2];
  HEAPF32[$z$i99 >> 2] = $mul3$i100;
  $m_motorImpulse189 = $this + 96 | 0;
  $mul190 = +HEAPF32[$dtRatio >> 2] * +HEAPF32[$m_motorImpulse189 >> 2];
  HEAPF32[$m_motorImpulse189 >> 2] = $mul190;
  $vA$sroa$0$0$load122126 = $37 - $24 * $mul$i97;
  $vA$sroa$1$4$load123127 = $38 - $24 * $mul2$i;
  $vB$sroa$0$0$load120124 = $47 + $25 * $mul$i97;
  $vB$sroa$1$4$load121125 = $48 + $25 * $mul2$i;
  $wA$0 = $39 - $26 * ($mul3$i100 + ($mul190 + ($mul2$i * $sub$i51 - $mul$i97 * $add$i)));
  $wB$0 = $49 + $27 * ($mul3$i100 + ($mul190 + ($mul2$i * $sub$i108 - $mul$i97 * $add$i111)));
  $85 = HEAP32[$m_indexA >> 2] | 0;
  $86 = HEAP32[$velocities >> 2] | 0;
  $v222 = $86 + ($85 * 12 | 0) | 0;
  $87 = +$vA$sroa$0$0$load122126;
  $88 = +$vA$sroa$1$4$load123127;
  $89 = $v222;
  $90 = $89;
  HEAPF32[$90 >> 2] = $87;
  $91 = $89 + 4 | 0;
  $92 = $91;
  HEAPF32[$92 >> 2] = $88;
  $93 = HEAP32[$m_indexA >> 2] | 0;
  $94 = HEAP32[$velocities >> 2] | 0;
  $w226 = $94 + ($93 * 12 | 0) + 8 | 0;
  HEAPF32[$w226 >> 2] = $wA$0;
  $95 = HEAP32[$m_indexB >> 2] | 0;
  $v230 = $94 + ($95 * 12 | 0) | 0;
  $96 = +$vB$sroa$0$0$load120124;
  $97 = +$vB$sroa$1$4$load121125;
  $98 = $v230;
  $99 = $98;
  HEAPF32[$99 >> 2] = $96;
  $100 = $98 + 4 | 0;
  $101 = $100;
  HEAPF32[$101 >> 2] = $97;
  $102 = HEAP32[$m_indexB >> 2] | 0;
  $103 = HEAP32[$velocities >> 2] | 0;
  $w234 = $103 + ($102 * 12 | 0) + 8 | 0;
  HEAPF32[$w234 >> 2] = $wB$0;
  STACKTOP = sp;
  return;
 }
}
function __ZN15b2DistanceJoint23InitVelocityConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $0 = 0, $1 = 0, $10 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0.0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $28 = 0, $29 = 0, $3 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $6 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $69 = 0.0, $70 = 0.0, $71 = 0, $78 = 0.0, $79 = 0.0, $80 = 0, $84 = 0.0, $85 = 0.0, $86 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $99 = 0.0, $add$i = 0.0, $add$i125 = 0.0, $add65 = 0.0, $add96 = 0.0, $call$i$i = 0.0, $call$i$i115 = 0.0, $call$i$i36 = 0.0, $call2$i$i = 0.0, $call2$i$i38 = 0.0, $cond = 0.0, $cond102 = 0.0, $cond89 = 0.0, $div = 0.0, $m_gamma = 0, $m_impulse = 0, $m_indexA = 0, $m_indexB = 0, $m_invIA = 0, $m_invIB = 0, $m_invMassA = 0, $m_invMassB = 0, $m_mass = 0, $m_u = 0, $mul$i108 = 0.0, $mul$i86 = 0.0, $mul1$i88 = 0.0, $mul111 = 0.0, $mul71 = 0.0, $mul78 = 0.0, $mul81 = 0.0, $sub = 0.0, $sub$i = 0.0, $sub$i104 = 0.0, $sub$i122 = 0.0, $sub$i130 = 0.0, $sub$i42 = 0.0, $sub$i47 = 0.0, $sub$i97 = 0.0, $sub3$i = 0.0, $sub3$i133 = 0.0, $sub3$i50 = 0.0, $v134 = 0, $v142 = 0, $vA$sroa$0$0$load159163 = 0.0, $vA$sroa$1$4$load160164 = 0.0, $vB$sroa$0$0$load157161 = 0.0, $vB$sroa$1$4$load158162 = 0.0, $velocities = 0, $w138 = 0, $w146 = 0, $wA$0 = 0.0, $wB$0 = 0.0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this + 48 >> 2] | 0;
 $1 = HEAP32[$0 + 8 >> 2] | 0;
 $m_indexA = $this + 108 | 0;
 HEAP32[$m_indexA >> 2] = $1;
 $2 = HEAP32[$this + 52 >> 2] | 0;
 $3 = HEAP32[$2 + 8 >> 2] | 0;
 $m_indexB = $this + 112 | 0;
 HEAP32[$m_indexB >> 2] = $3;
 $4 = $0 + 28 | 0;
 $6 = HEAP32[$4 >> 2] | 0;
 $9 = HEAP32[$4 + 4 >> 2] | 0;
 $10 = $this + 140 | 0;
 HEAP32[$10 >> 2] = $6;
 HEAP32[$10 + 4 >> 2] = $9;
 $14 = $2 + 28 | 0;
 $16 = HEAP32[$14 >> 2] | 0;
 $19 = HEAP32[$14 + 4 >> 2] | 0;
 $20 = $this + 148 | 0;
 HEAP32[$20 >> 2] = $16;
 HEAP32[$20 + 4 >> 2] = $19;
 $m_invMassA = $this + 156 | 0;
 HEAPF32[$m_invMassA >> 2] = +HEAPF32[$0 + 120 >> 2];
 $m_invMassB = $this + 160 | 0;
 HEAPF32[$m_invMassB >> 2] = +HEAPF32[$2 + 120 >> 2];
 $m_invIA = $this + 164 | 0;
 HEAPF32[$m_invIA >> 2] = +HEAPF32[$0 + 128 >> 2];
 $m_invIB = $this + 168 | 0;
 HEAPF32[$m_invIB >> 2] = +HEAPF32[$2 + 128 >> 2];
 $28 = HEAP32[$data + 24 >> 2] | 0;
 $29 = $28 + ($1 * 12 | 0) | 0;
 $35 = +HEAPF32[$29 >> 2];
 $36 = +HEAPF32[$29 + 4 >> 2];
 $37 = +HEAPF32[$28 + ($1 * 12 | 0) + 8 >> 2];
 $velocities = $data + 28 | 0;
 $38 = HEAP32[$velocities >> 2] | 0;
 $39 = $38 + ($1 * 12 | 0) | 0;
 $45 = +HEAPF32[$39 >> 2];
 $46 = +HEAPF32[$39 + 4 >> 2];
 $47 = +HEAPF32[$38 + ($1 * 12 | 0) + 8 >> 2];
 $48 = $28 + ($3 * 12 | 0) | 0;
 $54 = +HEAPF32[$48 >> 2];
 $55 = +HEAPF32[$48 + 4 >> 2];
 $56 = +HEAPF32[$28 + ($3 * 12 | 0) + 8 >> 2];
 $57 = $38 + ($3 * 12 | 0) | 0;
 $63 = +HEAPF32[$57 >> 2];
 $64 = +HEAPF32[$57 + 4 >> 2];
 $65 = +HEAPF32[$38 + ($3 * 12 | 0) + 8 >> 2];
 $call$i$i = +Math_sin(+$37);
 $call2$i$i = +Math_cos(+$37);
 $call$i$i36 = +Math_sin(+$56);
 $call2$i$i38 = +Math_cos(+$56);
 $sub$i = +HEAPF32[$this + 80 >> 2] - (HEAP32[tempDoublePtr >> 2] = $6, +HEAPF32[tempDoublePtr >> 2]);
 $sub3$i = +HEAPF32[$this + 84 >> 2] - (HEAP32[tempDoublePtr >> 2] = $9, +HEAPF32[tempDoublePtr >> 2]);
 $sub$i42 = $call2$i$i * $sub$i - $call$i$i * $sub3$i;
 $add$i = $call$i$i * $sub$i + $call2$i$i * $sub3$i;
 $69 = +$sub$i42;
 $70 = +$add$i;
 $71 = $this + 124 | 0;
 HEAPF32[$71 >> 2] = $69;
 HEAPF32[$71 + 4 >> 2] = $70;
 $sub$i47 = +HEAPF32[$this + 88 >> 2] - (HEAP32[tempDoublePtr >> 2] = $16, +HEAPF32[tempDoublePtr >> 2]);
 $sub3$i50 = +HEAPF32[$this + 92 >> 2] - +HEAPF32[$this + 152 >> 2];
 $sub$i122 = $call2$i$i38 * $sub$i47 - $call$i$i36 * $sub3$i50;
 $add$i125 = $call$i$i36 * $sub$i47 + $call2$i$i38 * $sub3$i50;
 $78 = +$sub$i122;
 $79 = +$add$i125;
 $80 = $this + 132 | 0;
 HEAPF32[$80 >> 2] = $78;
 HEAPF32[$80 + 4 >> 2] = $79;
 $m_u = $this + 116 | 0;
 $sub$i130 = $54 + $sub$i122 - $35 - $sub$i42;
 $sub3$i133 = $55 + $add$i125 - $36 - $add$i;
 $84 = +$sub$i130;
 $85 = +$sub3$i133;
 $86 = $m_u;
 HEAPF32[$86 >> 2] = $84;
 HEAPF32[$86 + 4 >> 2] = $85;
 $call$i$i115 = +Math_sqrt(+($sub$i130 * $sub$i130 + $sub3$i133 * $sub3$i133));
 if ($call$i$i115 > .004999999888241291) {
  $div = 1.0 / $call$i$i115;
  $mul$i108 = $sub$i130 * $div;
  HEAPF32[$m_u >> 2] = $mul$i108;
  $90 = $div * $sub3$i133;
  $91 = $mul$i108;
 } else {
  HEAPF32[$m_u >> 2] = 0.0;
  $90 = 0.0;
  $91 = 0.0;
 }
 HEAPF32[$this + 120 >> 2] = $90;
 $sub$i104 = $90 * $sub$i42 - $add$i * $91;
 $sub$i97 = $90 * $sub$i122 - $91 * $add$i125;
 $92 = +HEAPF32[$m_invMassA >> 2];
 $93 = +HEAPF32[$m_invIA >> 2];
 $94 = +HEAPF32[$m_invMassB >> 2];
 $95 = +HEAPF32[$m_invIB >> 2];
 $add65 = $94 + ($92 + $sub$i104 * $sub$i104 * $93) + $sub$i97 * $sub$i97 * $95;
 if ($add65 != 0.0) $cond = 1.0 / $add65; else $cond = 0.0;
 $m_mass = $this + 172 | 0;
 HEAPF32[$m_mass >> 2] = $cond;
 $96 = +HEAPF32[$this + 68 >> 2];
 if ($96 > 0.0) {
  $sub = $call$i$i115 - +HEAPF32[$this + 104 >> 2];
  $mul71 = $96 * 6.2831854820251465;
  $mul78 = $mul71 * $cond * $mul71;
  $99 = +HEAPF32[$data >> 2];
  $mul81 = $99 * ($mul71 * $cond * 2.0 * +HEAPF32[$this + 72 >> 2] + $mul78 * $99);
  $m_gamma = $this + 96 | 0;
  HEAPF32[$m_gamma >> 2] = $mul81;
  if ($mul81 != 0.0) $cond89 = 1.0 / $mul81; else $cond89 = 0.0;
  HEAPF32[$m_gamma >> 2] = $cond89;
  HEAPF32[$this + 76 >> 2] = $mul78 * $sub * $99 * $cond89;
  $add96 = $add65 + $cond89;
  if ($add96 != 0.0) $cond102 = 1.0 / $add96; else $cond102 = 0.0;
  HEAPF32[$m_mass >> 2] = $cond102;
 } else {
  HEAPF32[$this + 96 >> 2] = 0.0;
  HEAPF32[$this + 76 >> 2] = 0.0;
 }
 if ((HEAP8[$data + 20 >> 0] | 0) == 0) {
  HEAPF32[$this + 100 >> 2] = 0.0;
  $vA$sroa$0$0$load159163 = $45;
  $vA$sroa$1$4$load160164 = $46;
  $vB$sroa$0$0$load157161 = $63;
  $vB$sroa$1$4$load158162 = $64;
  $wA$0 = $47;
  $wB$0 = $65;
  $103 = HEAP32[$m_indexA >> 2] | 0;
  $104 = HEAP32[$velocities >> 2] | 0;
  $v134 = $104 + ($103 * 12 | 0) | 0;
  $105 = +$vA$sroa$0$0$load159163;
  $106 = +$vA$sroa$1$4$load160164;
  $107 = $v134;
  $108 = $107;
  HEAPF32[$108 >> 2] = $105;
  $109 = $107 + 4 | 0;
  $110 = $109;
  HEAPF32[$110 >> 2] = $106;
  $111 = HEAP32[$m_indexA >> 2] | 0;
  $112 = HEAP32[$velocities >> 2] | 0;
  $w138 = $112 + ($111 * 12 | 0) + 8 | 0;
  HEAPF32[$w138 >> 2] = $wA$0;
  $113 = HEAP32[$m_indexB >> 2] | 0;
  $v142 = $112 + ($113 * 12 | 0) | 0;
  $114 = +$vB$sroa$0$0$load157161;
  $115 = +$vB$sroa$1$4$load158162;
  $116 = $v142;
  $117 = $116;
  HEAPF32[$117 >> 2] = $114;
  $118 = $116 + 4 | 0;
  $119 = $118;
  HEAPF32[$119 >> 2] = $115;
  $120 = HEAP32[$m_indexB >> 2] | 0;
  $121 = HEAP32[$velocities >> 2] | 0;
  $w146 = $121 + ($120 * 12 | 0) + 8 | 0;
  HEAPF32[$w146 >> 2] = $wB$0;
  STACKTOP = sp;
  return;
 } else {
  $m_impulse = $this + 100 | 0;
  $mul111 = +HEAPF32[$data + 8 >> 2] * +HEAPF32[$m_impulse >> 2];
  HEAPF32[$m_impulse >> 2] = $mul111;
  $mul$i86 = $91 * $mul111;
  $mul1$i88 = $mul111 * $90;
  $vA$sroa$0$0$load159163 = $45 - $mul$i86 * $92;
  $vA$sroa$1$4$load160164 = $46 - $mul1$i88 * $92;
  $vB$sroa$0$0$load157161 = $63 + $mul$i86 * $94;
  $vB$sroa$1$4$load158162 = $64 + $mul1$i88 * $94;
  $wA$0 = $47 - $93 * ($mul1$i88 * $sub$i42 - $mul$i86 * $add$i);
  $wB$0 = $65 + $95 * ($mul1$i88 * $sub$i122 - $mul$i86 * $add$i125);
  $103 = HEAP32[$m_indexA >> 2] | 0;
  $104 = HEAP32[$velocities >> 2] | 0;
  $v134 = $104 + ($103 * 12 | 0) | 0;
  $105 = +$vA$sroa$0$0$load159163;
  $106 = +$vA$sroa$1$4$load160164;
  $107 = $v134;
  $108 = $107;
  HEAPF32[$108 >> 2] = $105;
  $109 = $107 + 4 | 0;
  $110 = $109;
  HEAPF32[$110 >> 2] = $106;
  $111 = HEAP32[$m_indexA >> 2] | 0;
  $112 = HEAP32[$velocities >> 2] | 0;
  $w138 = $112 + ($111 * 12 | 0) + 8 | 0;
  HEAPF32[$w138 >> 2] = $wA$0;
  $113 = HEAP32[$m_indexB >> 2] | 0;
  $v142 = $112 + ($113 * 12 | 0) | 0;
  $114 = +$vB$sroa$0$0$load157161;
  $115 = +$vB$sroa$1$4$load158162;
  $116 = $v142;
  $117 = $116;
  HEAPF32[$117 >> 2] = $114;
  $118 = $116 + 4 | 0;
  $119 = $118;
  HEAPF32[$119 >> 2] = $115;
  $120 = HEAP32[$m_indexB >> 2] | 0;
  $121 = HEAP32[$velocities >> 2] | 0;
  $w146 = $121 + ($120 * 12 | 0) + 8 | 0;
  HEAPF32[$w146 >> 2] = $wB$0;
  STACKTOP = sp;
  return;
 }
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0, $q_sroa_1_1198$looptemp = 0;
 $n_sroa_0_0_extract_trunc = $a$0;
 $n_sroa_1_4_extract_shift$0 = $a$1;
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
 $d_sroa_0_0_extract_trunc = $b$0;
 $d_sroa_1_4_extract_shift$0 = $b$1;
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
 if (($n_sroa_1_4_extract_trunc | 0) == 0) {
  $4 = ($rem | 0) != 0;
  if (($d_sroa_1_4_extract_trunc | 0) == 0) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  } else {
   if (!$4) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 | 0;
   HEAP32[$rem + 4 >> 2] = $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
 do if (($d_sroa_0_0_extract_trunc | 0) == 0) {
  if ($17) {
   if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  if (($n_sroa_0_0_extract_trunc | 0) == 0) {
   if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0;
    HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
  if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
   if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = $a$0 | 0;
    HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
   }
   $_0$1 = 0;
   $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  $51 = (_llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0) - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
  if ($51 >>> 0 <= 30) {
   $57 = $51 + 1 | 0;
   $58 = 31 - $51 | 0;
   $sr_1_ph = $57;
   $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
   $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
   $q_sroa_0_1_ph = 0;
   $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
   break;
  }
  if (($rem | 0) == 0) {
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  HEAP32[$rem >> 2] = $a$0 | 0;
  HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
  $_0$1 = 0;
  $_0$0 = 0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
 } else {
  if (!$17) {
   $119 = (_llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0) - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   if ($119 >>> 0 <= 31) {
    $125 = $119 + 1 | 0;
    $126 = 31 - $119 | 0;
    $130 = $119 - 31 >> 31;
    $sr_1_ph = $125;
    $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
    $q_sroa_0_1_ph = 0;
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
    break;
   }
   if (($rem | 0) == 0) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 | 0;
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
  if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
   $88 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   $89 = 64 - $88 | 0;
   $91 = 32 - $88 | 0;
   $92 = $91 >> 31;
   $95 = $88 - 32 | 0;
   $105 = $95 >> 31;
   $sr_1_ph = $88;
   $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
   $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
   $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
   $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
   break;
  }
  if (($rem | 0) != 0) {
   HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
   HEAP32[$rem + 4 >> 2] = 0;
  }
  if (($d_sroa_0_0_extract_trunc | 0) == 1) {
   $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$0 = $a$0 | 0 | 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  } else {
   $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
   $_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0;
   $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
 } while (0);
 if (($sr_1_ph | 0) == 0) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = 0;
 } else {
  $d_sroa_0_0_insert_insert99$0 = $b$0 | 0 | 0;
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
  $137$1 = tempRet0;
  $q_sroa_1_1198 = $q_sroa_1_1_ph;
  $q_sroa_0_1199 = $q_sroa_0_1_ph;
  $r_sroa_1_1200 = $r_sroa_1_1_ph;
  $r_sroa_0_1201 = $r_sroa_0_1_ph;
  $sr_1202 = $sr_1_ph;
  $carry_0203 = 0;
  do {
   $q_sroa_1_1198$looptemp = $q_sroa_1_1198;
   $q_sroa_1_1198 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
   $q_sroa_0_1199 = $carry_0203 | $q_sroa_0_1199 << 1;
   $r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198$looptemp >>> 31 | 0;
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
   _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
   $150$1 = tempRet0;
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
   $carry_0203 = $151$0 & 1;
   $r_sroa_0_1201 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
   $r_sroa_1_1200 = tempRet0;
   $sr_1202 = $sr_1202 - 1 | 0;
  } while (($sr_1202 | 0) != 0);
  $q_sroa_1_1_lcssa = $q_sroa_1_1198;
  $q_sroa_0_1_lcssa = $q_sroa_0_1199;
  $r_sroa_1_1_lcssa = $r_sroa_1_1200;
  $r_sroa_0_1_lcssa = $r_sroa_0_1201;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = $carry_0203;
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
 $q_sroa_0_0_insert_ext75$1 = 0;
 if (($rem | 0) != 0) {
  HEAP32[$rem >> 2] = $r_sroa_0_1_lcssa;
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa;
 }
 $_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
 return (tempRet0 = $_0$1, $_0$0) | 0;
}
function __ZN16b2PrismaticJoint24SolvePositionConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $39 = 0.0, $40 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $50 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $60 = 0, $8 = 0.0, $9 = 0.0, $C2$0 = 0.0, $K = 0, $active$0$off0 = 0, $add = 0.0, $add$i = 0.0, $add$i106 = 0.0, $add$i177 = 0.0, $add$i194 = 0.0, $add$i225 = 0.0, $add$i244 = 0.0, $add$i259 = 0.0, $add$i295 = 0.0, $add106 = 0.0, $add3$i = 0.0, $add3$i247 = 0.0, $add58 = 0.0, $add63 = 0.0, $add66 = 0.0, $add71 = 0.0, $add72 = 0.0, $add78 = 0.0, $call$i$i = 0.0, $call$i$i67 = 0.0, $call2$i$i = 0.0, $call2$i$i69 = 0.0, $cond$i$i = 0.0, $cond$i$i155 = 0.0, $cond$i$i164 = 0.0, $cond$i162 = 0.0, $cond$i170 = 0.0, $cond$i181 = 0.0, $cond$i186 = 0.0, $det$0$i = 0.0, $impulse$sroa$0$0$load304346 = 0.0, $impulse$sroa$1$4$load347 = 0.0, $impulse$sroa$2$8$load307348 = 0.0, $k22105$0 = 0.0, $linearError$0 = 0.0, $m_indexA = 0, $m_indexB = 0, $mul = 0.0, $mul61 = 0.0, $mul76 = 0.0, $mul77 = 0.0, $positions = 0, $ref$tmp90 = 0, $ref$tmp91 = 0, $sub$i = 0.0, $sub$i127 = 0.0, $sub$i129 = 0.0, $sub$i200 = 0.0, $sub$i207 = 0.0, $sub$i222 = 0.0, $sub$i234 = 0.0, $sub$i241 = 0.0, $sub$i256 = 0.0, $sub$i264 = 0.0, $sub$i292 = 0.0, $sub$i73 = 0.0, $sub$i78 = 0.0, $sub2$i = 0.0, $sub21 = 0.0, $sub27 = 0.0, $sub3$i = 0.0, $sub3$i267 = 0.0, $sub3$i81 = 0.0, $sub40 = 0.0, $sub47 = 0.0, $sub48 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $K = sp + 24 | 0;
 $ref$tmp90 = sp;
 $ref$tmp91 = sp + 12 | 0;
 $m_indexA = $this + 144 | 0;
 $0 = HEAP32[$m_indexA >> 2] | 0;
 $positions = $data + 24 | 0;
 $1 = HEAP32[$positions >> 2] | 0;
 $2 = $1 + ($0 * 12 | 0) | 0;
 $8 = +HEAPF32[$2 >> 2];
 $9 = +HEAPF32[$2 + 4 >> 2];
 $10 = +HEAPF32[$1 + ($0 * 12 | 0) + 8 >> 2];
 $m_indexB = $this + 148 | 0;
 $11 = HEAP32[$m_indexB >> 2] | 0;
 $12 = $1 + ($11 * 12 | 0) | 0;
 $18 = +HEAPF32[$12 >> 2];
 $19 = +HEAPF32[$12 + 4 >> 2];
 $20 = +HEAPF32[$1 + ($11 * 12 | 0) + 8 >> 2];
 $call$i$i = +Math_sin(+$10);
 $call2$i$i = +Math_cos(+$10);
 $call$i$i67 = +Math_sin(+$20);
 $call2$i$i69 = +Math_cos(+$20);
 $21 = +HEAPF32[$this + 168 >> 2];
 $22 = +HEAPF32[$this + 172 >> 2];
 $23 = +HEAPF32[$this + 176 >> 2];
 $24 = +HEAPF32[$this + 180 >> 2];
 $sub$i = +HEAPF32[$this + 68 >> 2] - +HEAPF32[$this + 152 >> 2];
 $sub3$i = +HEAPF32[$this + 72 >> 2] - +HEAPF32[$this + 156 >> 2];
 $sub$i73 = $call2$i$i * $sub$i - $call$i$i * $sub3$i;
 $add$i = $call$i$i * $sub$i + $call2$i$i * $sub3$i;
 $sub$i78 = +HEAPF32[$this + 76 >> 2] - +HEAPF32[$this + 160 >> 2];
 $sub3$i81 = +HEAPF32[$this + 80 >> 2] - +HEAPF32[$this + 164 >> 2];
 $sub$i292 = $call2$i$i69 * $sub$i78 - $call$i$i67 * $sub3$i81;
 $add$i295 = $call$i$i67 * $sub$i78 + $call2$i$i69 * $sub3$i81;
 $sub$i264 = $18 + $sub$i292 - $8 - $sub$i73;
 $sub3$i267 = $19 + $add$i295 - $9 - $add$i;
 $33 = +HEAPF32[$this + 84 >> 2];
 $34 = +HEAPF32[$this + 88 >> 2];
 $sub$i256 = $call2$i$i * $33 - $call$i$i * $34;
 $add$i259 = $call$i$i * $33 + $call2$i$i * $34;
 $add$i244 = $sub$i73 + $sub$i264;
 $add3$i247 = $add$i + $sub3$i267;
 $sub$i241 = $add$i259 * $add$i244 - $sub$i256 * $add3$i247;
 $sub$i234 = $sub$i292 * $add$i259 - $add$i295 * $sub$i256;
 $35 = +HEAPF32[$this + 92 >> 2];
 $36 = +HEAPF32[$this + 96 >> 2];
 $sub$i222 = $call2$i$i * $35 - $call$i$i * $36;
 $add$i225 = $call$i$i * $35 + $call2$i$i * $36;
 $sub$i207 = $add$i225 * $add$i244 - $sub$i222 * $add3$i247;
 $sub$i200 = $sub$i292 * $add$i225 - $add$i295 * $sub$i222;
 $add$i194 = $sub$i222 * $sub$i264 + $add$i225 * $sub3$i267;
 $sub21 = $20 - $10 - +HEAPF32[$this + 100 >> 2];
 if ($add$i194 > 0.0) $cond$i186 = $add$i194; else $cond$i186 = -$add$i194;
 if ($sub21 > 0.0) $cond$i181 = $sub21; else $cond$i181 = -$sub21;
 do if ((HEAP8[$this + 136 >> 0] | 0) == 0) {
  $C2$0 = 0.0;
  $active$0$off0 = 0;
  $linearError$0 = $cond$i186;
 } else {
  $add$i177 = $sub$i256 * $sub$i264 + $add$i259 * $sub3$i267;
  $39 = +HEAPF32[$this + 124 >> 2];
  $40 = +HEAPF32[$this + 120 >> 2];
  $sub27 = $39 - $40;
  if ($sub27 > 0.0) $cond$i170 = $sub27; else $cond$i170 = -$sub27;
  if ($cond$i170 < .009999999776482582) {
   $cond$i$i164 = $add$i177 < .20000000298023224 ? $add$i177 : .20000000298023224;
   if ($add$i177 > 0.0) $cond$i162 = $add$i177; else $cond$i162 = -$add$i177;
   $C2$0 = $cond$i$i164 < -.20000000298023224 ? -.20000000298023224 : $cond$i$i164;
   $active$0$off0 = 1;
   $linearError$0 = $cond$i186 > $cond$i162 ? $cond$i186 : $cond$i162;
   break;
  }
  if ($add$i177 <= $40) {
   $add = $add$i177 - $40 + .004999999888241291;
   $cond$i$i155 = $add < 0.0 ? $add : 0.0;
   $sub40 = $40 - $add$i177;
   $C2$0 = $cond$i$i155 < -.20000000298023224 ? -.20000000298023224 : $cond$i$i155;
   $active$0$off0 = 1;
   $linearError$0 = $cond$i186 > $sub40 ? $cond$i186 : $sub40;
   break;
  }
  if (!($add$i177 >= $39)) {
   $C2$0 = 0.0;
   $active$0$off0 = 0;
   $linearError$0 = $cond$i186;
  } else {
   $sub47 = $add$i177 - $39;
   $sub48 = $sub47 + -.004999999888241291;
   $cond$i$i = $sub48 < .20000000298023224 ? $sub48 : .20000000298023224;
   $C2$0 = $cond$i$i < 0.0 ? 0.0 : $cond$i$i;
   $active$0$off0 = 1;
   $linearError$0 = $cond$i186 > $sub47 ? $cond$i186 : $sub47;
  }
 } while (0);
 $add58 = $21 + $22;
 $mul = $23 * $sub$i207;
 $mul61 = $24 * $sub$i200;
 $add63 = $sub$i200 * $mul61 + ($add58 + $sub$i207 * $mul);
 $add66 = $mul61 + $mul;
 if ($active$0$off0) {
  $add71 = $sub$i234 * $mul61 + $sub$i241 * $mul;
  $add72 = $23 + $24;
  $mul76 = $23 * $sub$i241;
  $mul77 = $24 * $sub$i234;
  $add78 = $mul77 + $mul76;
  HEAPF32[$K >> 2] = $add63;
  HEAPF32[$K + 4 >> 2] = $add66;
  HEAPF32[$K + 8 >> 2] = $add71;
  HEAPF32[$K + 12 >> 2] = $add66;
  HEAPF32[$K + 16 >> 2] = $add72 == 0.0 ? 1.0 : $add72;
  HEAPF32[$K + 20 >> 2] = $add78;
  HEAPF32[$K + 24 >> 2] = $add71;
  HEAPF32[$K + 28 >> 2] = $add78;
  HEAPF32[$K + 32 >> 2] = $sub$i234 * $mul77 + ($add58 + $sub$i241 * $mul76);
  HEAPF32[$ref$tmp91 >> 2] = -$add$i194;
  HEAPF32[$ref$tmp91 + 4 >> 2] = -$sub21;
  HEAPF32[$ref$tmp91 + 8 >> 2] = -$C2$0;
  __ZNK7b2Mat337Solve33ERK6b2Vec3($ref$tmp90, $K, $ref$tmp91);
  $impulse$sroa$0$0$load304346 = +HEAPF32[$ref$tmp90 >> 2];
  $impulse$sroa$1$4$load347 = +HEAPF32[$ref$tmp90 + 4 >> 2];
  $impulse$sroa$2$8$load307348 = +HEAPF32[$ref$tmp90 + 8 >> 2];
 } else {
  $add106 = $23 + $24;
  $k22105$0 = $add106 == 0.0 ? 1.0 : $add106;
  $sub$i129 = -$add$i194;
  $sub2$i = -$sub21;
  $sub$i127 = $k22105$0 * $add63 - $add66 * $add66;
  if ($sub$i127 != 0.0) $det$0$i = 1.0 / $sub$i127; else $det$0$i = $sub$i127;
  $impulse$sroa$0$0$load304346 = ($k22105$0 * $sub$i129 - $add66 * $sub2$i) * $det$0$i;
  $impulse$sroa$1$4$load347 = ($add63 * $sub2$i - $add66 * $sub$i129) * $det$0$i;
  $impulse$sroa$2$8$load307348 = 0.0;
 }
 $add$i106 = $sub$i256 * $impulse$sroa$2$8$load307348 + $sub$i222 * $impulse$sroa$0$0$load304346;
 $add3$i = $add$i259 * $impulse$sroa$2$8$load307348 + $add$i225 * $impulse$sroa$0$0$load304346;
 $43 = +($8 - $21 * $add$i106);
 $44 = +($9 - $21 * $add3$i);
 $45 = (HEAP32[$positions >> 2] | 0) + ((HEAP32[$m_indexA >> 2] | 0) * 12 | 0) | 0;
 HEAPF32[$45 >> 2] = $43;
 HEAPF32[$45 + 4 >> 2] = $44;
 $50 = HEAP32[$positions >> 2] | 0;
 HEAPF32[$50 + ((HEAP32[$m_indexA >> 2] | 0) * 12 | 0) + 8 >> 2] = $10 - $23 * ($sub$i241 * $impulse$sroa$2$8$load307348 + ($impulse$sroa$1$4$load347 + $sub$i207 * $impulse$sroa$0$0$load304346));
 $52 = +($18 + $22 * $add$i106);
 $53 = +($19 + $22 * $add3$i);
 $54 = $50 + ((HEAP32[$m_indexB >> 2] | 0) * 12 | 0) | 0;
 HEAPF32[$54 >> 2] = $52;
 HEAPF32[$54 + 4 >> 2] = $53;
 HEAPF32[(HEAP32[$positions >> 2] | 0) + ((HEAP32[$m_indexB >> 2] | 0) * 12 | 0) + 8 >> 2] = $20 + $24 * ($sub$i234 * $impulse$sroa$2$8$load307348 + ($impulse$sroa$1$4$load347 + $sub$i200 * $impulse$sroa$0$0$load304346));
 if (!($linearError$0 <= .004999999888241291)) {
  $60 = 0;
  STACKTOP = sp;
  return $60 | 0;
 }
 $60 = $cond$i181 <= .03490658849477768;
 STACKTOP = sp;
 return $60 | 0;
}
function __ZN11b2GearJoint24SolvePositionConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $102 = 0, $104 = 0.0, $105 = 0.0, $106 = 0, $11 = 0, $111 = 0, $113 = 0.0, $114 = 0.0, $115 = 0, $12 = 0, $120 = 0, $122 = 0.0, $123 = 0.0, $124 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0, $32 = 0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $42 = 0.0, $43 = 0.0, $45 = 0.0, $46 = 0.0, $57 = 0.0, $58 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $65 = 0.0, $66 = 0.0, $75 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $81 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $92 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0, $JwA$0 = 0.0, $JwB$0 = 0.0, $JwC$0 = 0.0, $JwD$0 = 0.0, $add$i = 0.0, $add$i144 = 0.0, $add$i193 = 0.0, $add$i233 = 0.0, $add$i266 = 0.0, $add$i311 = 0.0, $add3$i = 0.0, $add3$i269 = 0.0, $c = 0, $call$i$i = 0.0, $call$i$i55 = 0.0, $call$i$i59 = 0.0, $call$i$i63 = 0.0, $call2$i$i = 0.0, $call2$i$i57 = 0.0, $call2$i$i61 = 0.0, $call2$i$i65 = 0.0, $coordinateA$0 = 0.0, $coordinateB$0 = 0.0, $impulse$0 = 0.0, $m_indexA = 0, $m_indexB = 0, $m_indexC = 0, $m_indexD = 0, $mass$0$in = 0.0, $mass$1 = 0.0, $mul101 = 0.0, $mul108 = 0.0, $mul115 = 0.0, $mul122 = 0.0, $mul53$pn = 0.0, $mul65 = 0.0, $mul68 = 0.0, $positions = 0, $sub$i = 0.0, $sub$i190 = 0.0, $sub$i198 = 0.0, $sub$i218 = 0.0, $sub$i230 = 0.0, $sub$i294 = 0.0, $sub$i301 = 0.0, $sub$i308 = 0.0, $sub$i316 = 0.0, $sub$i70 = 0.0, $sub3$i = 0.0, $sub3$i201 = 0.0, $sub3$i221 = 0.0, $sub3$i319 = 0.0, sp = 0;
 sp = STACKTOP;
 $m_indexA = $this + 160 | 0;
 $0 = HEAP32[$m_indexA >> 2] | 0;
 $positions = $data + 24 | 0;
 $1 = HEAP32[$positions >> 2] | 0;
 $c = $1 + ($0 * 12 | 0) | 0;
 $2 = $c;
 $8 = +HEAPF32[$2 >> 2];
 $9 = +HEAPF32[$2 + 4 >> 2];
 $10 = +HEAPF32[$1 + ($0 * 12 | 0) + 8 >> 2];
 $m_indexB = $this + 164 | 0;
 $11 = HEAP32[$m_indexB >> 2] | 0;
 $12 = $1 + ($11 * 12 | 0) | 0;
 $18 = +HEAPF32[$12 >> 2];
 $19 = +HEAPF32[$12 + 4 >> 2];
 $20 = +HEAPF32[$1 + ($11 * 12 | 0) + 8 >> 2];
 $m_indexC = $this + 168 | 0;
 $21 = HEAP32[$m_indexC >> 2] | 0;
 $22 = $1 + ($21 * 12 | 0) | 0;
 $28 = +HEAPF32[$22 >> 2];
 $29 = +HEAPF32[$22 + 4 >> 2];
 $30 = +HEAPF32[$1 + ($21 * 12 | 0) + 8 >> 2];
 $m_indexD = $this + 172 | 0;
 $31 = HEAP32[$m_indexD >> 2] | 0;
 $32 = $1 + ($31 * 12 | 0) | 0;
 $38 = +HEAPF32[$32 >> 2];
 $39 = +HEAPF32[$32 + 4 >> 2];
 $40 = +HEAPF32[$1 + ($31 * 12 | 0) + 8 >> 2];
 $call$i$i = +Math_sin(+$10);
 $call2$i$i = +Math_cos(+$10);
 $call$i$i55 = +Math_sin(+$20);
 $call2$i$i57 = +Math_cos(+$20);
 $call$i$i59 = +Math_sin(+$30);
 $call2$i$i61 = +Math_cos(+$30);
 $call$i$i63 = +Math_sin(+$40);
 $call2$i$i65 = +Math_cos(+$40);
 if ((HEAP32[$this + 76 >> 2] | 0) == 1) {
  $42 = +HEAPF32[$this + 224 >> 2];
  $43 = +HEAPF32[$this + 232 >> 2];
  $84 = 0.0;
  $85 = 0.0;
  $86 = $42;
  $92 = $43;
  $JwA$0 = 1.0;
  $JwC$0 = 1.0;
  $coordinateA$0 = $10 - $30 - +HEAPF32[$this + 140 >> 2];
  $mass$0$in = $42 + $43;
 } else {
  $45 = +HEAPF32[$this + 124 >> 2];
  $46 = +HEAPF32[$this + 128 >> 2];
  $sub$i = $call2$i$i61 * $45 - $call$i$i59 * $46;
  $add$i = $call$i$i59 * $45 + $call2$i$i61 * $46;
  $sub$i70 = +HEAPF32[$this + 108 >> 2] - +HEAPF32[$this + 192 >> 2];
  $sub3$i = +HEAPF32[$this + 112 >> 2] - +HEAPF32[$this + 196 >> 2];
  $sub$i316 = +HEAPF32[$this + 92 >> 2] - +HEAPF32[$this + 176 >> 2];
  $sub3$i319 = +HEAPF32[$this + 96 >> 2] - +HEAPF32[$this + 180 >> 2];
  $sub$i308 = $call2$i$i * $sub$i316 - $call$i$i * $sub3$i319;
  $add$i311 = $call$i$i * $sub$i316 + $call2$i$i * $sub3$i319;
  $sub$i301 = $add$i * ($call2$i$i61 * $sub$i70 - $call$i$i59 * $sub3$i) - $sub$i * ($call$i$i59 * $sub$i70 + $call2$i$i61 * $sub3$i);
  $sub$i294 = $add$i * $sub$i308 - $sub$i * $add$i311;
  $57 = +HEAPF32[$this + 232 >> 2];
  $58 = +HEAPF32[$this + 224 >> 2];
  $add$i266 = $8 - $28 + $sub$i308;
  $add3$i269 = $9 - $29 + $add$i311;
  $84 = $sub$i;
  $85 = $add$i;
  $86 = $58;
  $92 = $57;
  $JwA$0 = $sub$i294;
  $JwC$0 = $sub$i301;
  $coordinateA$0 = $45 * ($call2$i$i61 * $add$i266 + $call$i$i59 * $add3$i269 - $sub$i70) + $46 * ($call2$i$i61 * $add3$i269 - $call$i$i59 * $add$i266 - $sub3$i);
  $mass$0$in = +HEAPF32[$this + 216 >> 2] + +HEAPF32[$this + 208 >> 2] + $sub$i301 * $sub$i301 * $57 + $sub$i294 * $58 * $sub$i294;
 }
 if ((HEAP32[$this + 80 >> 2] | 0) == 1) {
  $61 = +HEAPF32[$this + 152 >> 2];
  $62 = +HEAPF32[$this + 228 >> 2];
  $63 = +HEAPF32[$this + 236 >> 2];
  $81 = $61;
  $88 = 0.0;
  $89 = 0.0;
  $90 = $62;
  $94 = $63;
  $JwB$0 = $61;
  $JwD$0 = $61;
  $coordinateB$0 = $20 - $40 - +HEAPF32[$this + 144 >> 2];
  $mul53$pn = $61 * $61 * ($62 + $63);
 } else {
  $65 = +HEAPF32[$this + 132 >> 2];
  $66 = +HEAPF32[$this + 136 >> 2];
  $sub$i230 = $call2$i$i65 * $65 - $call$i$i63 * $66;
  $add$i233 = $call$i$i63 * $65 + $call2$i$i65 * $66;
  $sub$i218 = +HEAPF32[$this + 116 >> 2] - +HEAPF32[$this + 200 >> 2];
  $sub3$i221 = +HEAPF32[$this + 120 >> 2] - +HEAPF32[$this + 204 >> 2];
  $sub$i198 = +HEAPF32[$this + 100 >> 2] - +HEAPF32[$this + 184 >> 2];
  $sub3$i201 = +HEAPF32[$this + 104 >> 2] - +HEAPF32[$this + 188 >> 2];
  $sub$i190 = $call2$i$i57 * $sub$i198 - $call$i$i55 * $sub3$i201;
  $add$i193 = $call$i$i55 * $sub$i198 + $call2$i$i57 * $sub3$i201;
  $75 = +HEAPF32[$this + 152 >> 2];
  $mul65 = $75 * ($add$i233 * ($call2$i$i65 * $sub$i218 - $call$i$i63 * $sub3$i221) - $sub$i230 * ($call$i$i63 * $sub$i218 + $call2$i$i65 * $sub3$i221));
  $mul68 = $75 * ($add$i233 * $sub$i190 - $sub$i230 * $add$i193);
  $78 = +HEAPF32[$this + 236 >> 2];
  $79 = +HEAPF32[$this + 228 >> 2];
  $add$i144 = $18 - $38 + $sub$i190;
  $add3$i = $19 - $39 + $add$i193;
  $81 = $75;
  $88 = $sub$i230 * $75;
  $89 = $add$i233 * $75;
  $90 = $79;
  $94 = $78;
  $JwB$0 = $mul68;
  $JwD$0 = $mul65;
  $coordinateB$0 = $65 * ($call2$i$i65 * $add$i144 + $call$i$i63 * $add3$i - $sub$i218) + $66 * ($call2$i$i65 * $add3$i - $call$i$i63 * $add$i144 - $sub3$i221);
  $mul53$pn = $75 * $75 * (+HEAPF32[$this + 220 >> 2] + +HEAPF32[$this + 212 >> 2]) + $mul65 * $mul65 * $78 + $mul68 * $79 * $mul68;
 }
 $mass$1 = $mass$0$in + 0.0 + $mul53$pn;
 if ($mass$1 > 0.0) $impulse$0 = -($coordinateA$0 + $coordinateB$0 * $81 - +HEAPF32[$this + 148 >> 2]) / $mass$1; else $impulse$0 = 0.0;
 $mul101 = $impulse$0 * +HEAPF32[$this + 208 >> 2];
 $mul108 = $impulse$0 * +HEAPF32[$this + 212 >> 2];
 $mul115 = $impulse$0 * +HEAPF32[$this + 216 >> 2];
 $mul122 = $impulse$0 * +HEAPF32[$this + 220 >> 2];
 $95 = +($8 + $84 * $mul101);
 $96 = +($9 + $85 * $mul101);
 $97 = $c;
 HEAPF32[$97 >> 2] = $95;
 HEAPF32[$97 + 4 >> 2] = $96;
 $102 = HEAP32[$positions >> 2] | 0;
 HEAPF32[$102 + ((HEAP32[$m_indexA >> 2] | 0) * 12 | 0) + 8 >> 2] = $10 + $JwA$0 * $impulse$0 * $86;
 $104 = +($18 + $88 * $mul108);
 $105 = +($19 + $89 * $mul108);
 $106 = $102 + ((HEAP32[$m_indexB >> 2] | 0) * 12 | 0) | 0;
 HEAPF32[$106 >> 2] = $104;
 HEAPF32[$106 + 4 >> 2] = $105;
 $111 = HEAP32[$positions >> 2] | 0;
 HEAPF32[$111 + ((HEAP32[$m_indexB >> 2] | 0) * 12 | 0) + 8 >> 2] = $20 + $JwB$0 * $impulse$0 * $90;
 $113 = +($28 - $84 * $mul115);
 $114 = +($29 - $85 * $mul115);
 $115 = $111 + ((HEAP32[$m_indexC >> 2] | 0) * 12 | 0) | 0;
 HEAPF32[$115 >> 2] = $113;
 HEAPF32[$115 + 4 >> 2] = $114;
 $120 = HEAP32[$positions >> 2] | 0;
 HEAPF32[$120 + ((HEAP32[$m_indexC >> 2] | 0) * 12 | 0) + 8 >> 2] = $30 - $JwC$0 * $impulse$0 * $92;
 $122 = +($38 - $88 * $mul122);
 $123 = +($39 - $89 * $mul122);
 $124 = $120 + ((HEAP32[$m_indexD >> 2] | 0) * 12 | 0) | 0;
 HEAPF32[$124 >> 2] = $122;
 HEAPF32[$124 + 4 >> 2] = $123;
 HEAPF32[(HEAP32[$positions >> 2] | 0) + ((HEAP32[$m_indexD >> 2] | 0) * 12 | 0) + 8 >> 2] = $40 - $JwD$0 * $impulse$0 * $94;
 STACKTOP = sp;
 return 1;
}
function __ZN13b2DynamicTree10InsertLeafEi($this, $leaf) {
 $this = $this | 0;
 $leaf = $leaf | 0;
 var $$ = 0, $1 = 0, $10 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $4 = 0, $41 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $call148 = 0, $call33$pn = 0.0, $call54$pn = 0.0, $call82 = 0, $child1104 = 0, $cond$i$i$i138 = 0.0, $cond$i$i$i214 = 0.0, $cond$i$i7$i151 = 0.0, $cond$i$i7$i227 = 0.0, $cond$i4$i$i142 = 0.0, $cond$i4$i$i218 = 0.0, $cond$i4$i11$i155 = 0.0, $cond$i4$i11$i231 = 0.0, $cost1$0 = 0.0, $cost2$0 = 0.0, $index$0$lcssa = 0, $index$0278 = 0, $index$1273 = 0, $index$1275 = 0, $leafAABB$sroa$0$0$copyload = 0.0, $leafAABB$sroa$1$4$copyload = 0.0, $leafAABB$sroa$2$8$copyload = 0.0, $leafAABB$sroa$3$12$copyload = 0.0, $m_insertionCount = 0, $m_nodes4 = 0, $mul = 0.0, $mul$i245 = 0.0, $mul24 = 0.0, $parent139 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $m_insertionCount = $this + 24 | 0;
 HEAP32[$m_insertionCount >> 2] = (HEAP32[$m_insertionCount >> 2] | 0) + 1;
 $1 = HEAP32[$this >> 2] | 0;
 if (($1 | 0) == -1) {
  HEAP32[$this >> 2] = $leaf;
  HEAP32[(HEAP32[$this + 4 >> 2] | 0) + ($leaf * 36 | 0) + 20 >> 2] = -1;
  STACKTOP = sp;
  return;
 }
 $m_nodes4 = $this + 4 | 0;
 $3 = HEAP32[$m_nodes4 >> 2] | 0;
 $leafAABB$sroa$0$0$copyload = +HEAPF32[$3 + ($leaf * 36 | 0) >> 2];
 $leafAABB$sroa$1$4$copyload = +HEAPF32[$3 + ($leaf * 36 | 0) + 4 >> 2];
 $leafAABB$sroa$2$8$copyload = +HEAPF32[$3 + ($leaf * 36 | 0) + 8 >> 2];
 $leafAABB$sroa$3$12$copyload = +HEAPF32[$3 + ($leaf * 36 | 0) + 12 >> 2];
 $4 = HEAP32[$3 + ($1 * 36 | 0) + 24 >> 2] | 0;
 L5 : do if (($4 | 0) == -1) $index$0$lcssa = $1; else {
  $10 = $4;
  $index$0278 = $1;
  while (1) {
   $5 = HEAP32[$3 + ($index$0278 * 36 | 0) + 28 >> 2] | 0;
   $6 = +HEAPF32[$3 + ($index$0278 * 36 | 0) + 8 >> 2];
   $7 = +HEAPF32[$3 + ($index$0278 * 36 | 0) >> 2];
   $8 = +HEAPF32[$3 + ($index$0278 * 36 | 0) + 12 >> 2];
   $9 = +HEAPF32[$3 + ($index$0278 * 36 | 0) + 4 >> 2];
   $mul$i245 = (($6 > $leafAABB$sroa$2$8$copyload ? $6 : $leafAABB$sroa$2$8$copyload) - ($7 < $leafAABB$sroa$0$0$copyload ? $7 : $leafAABB$sroa$0$0$copyload) + (($8 > $leafAABB$sroa$3$12$copyload ? $8 : $leafAABB$sroa$3$12$copyload) - ($9 < $leafAABB$sroa$1$4$copyload ? $9 : $leafAABB$sroa$1$4$copyload))) * 2.0;
   $mul = $mul$i245 * 2.0;
   $mul24 = ($mul$i245 - ($6 - $7 + ($8 - $9)) * 2.0) * 2.0;
   $12 = +HEAPF32[$3 + ($10 * 36 | 0) >> 2];
   $cond$i$i$i214 = $leafAABB$sroa$0$0$copyload < $12 ? $leafAABB$sroa$0$0$copyload : $12;
   $13 = +HEAPF32[$3 + ($10 * 36 | 0) + 4 >> 2];
   $cond$i4$i$i218 = $leafAABB$sroa$1$4$copyload < $13 ? $leafAABB$sroa$1$4$copyload : $13;
   $14 = +HEAPF32[$3 + ($10 * 36 | 0) + 8 >> 2];
   $cond$i$i7$i227 = $leafAABB$sroa$2$8$copyload > $14 ? $leafAABB$sroa$2$8$copyload : $14;
   $15 = +HEAPF32[$3 + ($10 * 36 | 0) + 12 >> 2];
   $cond$i4$i11$i231 = $leafAABB$sroa$3$12$copyload > $15 ? $leafAABB$sroa$3$12$copyload : $15;
   if ((HEAP32[$3 + ($10 * 36 | 0) + 24 >> 2] | 0) == -1) $call33$pn = ($cond$i$i7$i227 - $cond$i$i$i214 + ($cond$i4$i11$i231 - $cond$i4$i$i218)) * 2.0; else $call33$pn = ($cond$i$i7$i227 - $cond$i$i$i214 + ($cond$i4$i11$i231 - $cond$i4$i$i218)) * 2.0 - ($14 - $12 + ($15 - $13)) * 2.0;
   $cost1$0 = $mul24 + $call33$pn;
   $17 = +HEAPF32[$3 + ($5 * 36 | 0) >> 2];
   $cond$i$i$i138 = $leafAABB$sroa$0$0$copyload < $17 ? $leafAABB$sroa$0$0$copyload : $17;
   $18 = +HEAPF32[$3 + ($5 * 36 | 0) + 4 >> 2];
   $cond$i4$i$i142 = $leafAABB$sroa$1$4$copyload < $18 ? $leafAABB$sroa$1$4$copyload : $18;
   $19 = +HEAPF32[$3 + ($5 * 36 | 0) + 8 >> 2];
   $cond$i$i7$i151 = $leafAABB$sroa$2$8$copyload > $19 ? $leafAABB$sroa$2$8$copyload : $19;
   $20 = +HEAPF32[$3 + ($5 * 36 | 0) + 12 >> 2];
   $cond$i4$i11$i155 = $leafAABB$sroa$3$12$copyload > $20 ? $leafAABB$sroa$3$12$copyload : $20;
   if ((HEAP32[$3 + ($5 * 36 | 0) + 24 >> 2] | 0) == -1) $call54$pn = ($cond$i$i7$i151 - $cond$i$i$i138 + ($cond$i4$i11$i155 - $cond$i4$i$i142)) * 2.0; else $call54$pn = ($cond$i$i7$i151 - $cond$i$i$i138 + ($cond$i4$i11$i155 - $cond$i4$i$i142)) * 2.0 - ($19 - $17 + ($20 - $18)) * 2.0;
   $cost2$0 = $mul24 + $call54$pn;
   if ($mul < $cost1$0 & $mul < $cost2$0) {
    $index$0$lcssa = $index$0278;
    break L5;
   }
   $$ = $cost1$0 < $cost2$0 ? $10 : $5;
   $10 = HEAP32[$3 + ($$ * 36 | 0) + 24 >> 2] | 0;
   if (($10 | 0) == -1) {
    $index$0$lcssa = $$;
    break;
   } else $index$0278 = $$;
  }
 } while (0);
 $22 = HEAP32[$3 + ($index$0$lcssa * 36 | 0) + 20 >> 2] | 0;
 $call82 = __ZN13b2DynamicTree12AllocateNodeEv($this) | 0;
 $23 = HEAP32[$m_nodes4 >> 2] | 0;
 HEAP32[$23 + ($call82 * 36 | 0) + 20 >> 2] = $22;
 HEAP32[$23 + ($call82 * 36 | 0) + 16 >> 2] = 0;
 $24 = HEAP32[$m_nodes4 >> 2] | 0;
 $25 = +HEAPF32[$24 + ($index$0$lcssa * 36 | 0) >> 2];
 $26 = +HEAPF32[$24 + ($index$0$lcssa * 36 | 0) + 4 >> 2];
 $27 = +($leafAABB$sroa$0$0$copyload < $25 ? $leafAABB$sroa$0$0$copyload : $25);
 $28 = +($leafAABB$sroa$1$4$copyload < $26 ? $leafAABB$sroa$1$4$copyload : $26);
 $29 = $24 + ($call82 * 36 | 0) | 0;
 HEAPF32[$29 >> 2] = $27;
 HEAPF32[$29 + 4 >> 2] = $28;
 $33 = +HEAPF32[$24 + ($index$0$lcssa * 36 | 0) + 8 >> 2];
 $34 = +HEAPF32[$24 + ($index$0$lcssa * 36 | 0) + 12 >> 2];
 $35 = +($leafAABB$sroa$2$8$copyload > $33 ? $leafAABB$sroa$2$8$copyload : $33);
 $36 = +($leafAABB$sroa$3$12$copyload > $34 ? $leafAABB$sroa$3$12$copyload : $34);
 $37 = $24 + ($call82 * 36 | 0) + 8 | 0;
 HEAPF32[$37 >> 2] = $35;
 HEAPF32[$37 + 4 >> 2] = $36;
 $41 = HEAP32[$m_nodes4 >> 2] | 0;
 HEAP32[$41 + ($call82 * 36 | 0) + 32 >> 2] = (HEAP32[$41 + ($index$0$lcssa * 36 | 0) + 32 >> 2] | 0) + 1;
 if (($22 | 0) == -1) {
  HEAP32[$41 + ($call82 * 36 | 0) + 24 >> 2] = $index$0$lcssa;
  HEAP32[$41 + ($call82 * 36 | 0) + 28 >> 2] = $leaf;
  HEAP32[$41 + ($index$0$lcssa * 36 | 0) + 20 >> 2] = $call82;
  $parent139 = $41 + ($leaf * 36 | 0) + 20 | 0;
  HEAP32[$parent139 >> 2] = $call82;
  HEAP32[$this >> 2] = $call82;
  $index$1273 = HEAP32[$parent139 >> 2] | 0;
 } else {
  $child1104 = $41 + ($22 * 36 | 0) + 24 | 0;
  if ((HEAP32[$child1104 >> 2] | 0) == ($index$0$lcssa | 0)) HEAP32[$child1104 >> 2] = $call82; else HEAP32[$41 + ($22 * 36 | 0) + 28 >> 2] = $call82;
  HEAP32[$41 + ($call82 * 36 | 0) + 24 >> 2] = $index$0$lcssa;
  HEAP32[$41 + ($call82 * 36 | 0) + 28 >> 2] = $leaf;
  HEAP32[$41 + ($index$0$lcssa * 36 | 0) + 20 >> 2] = $call82;
  HEAP32[$41 + ($leaf * 36 | 0) + 20 >> 2] = $call82;
  $index$1273 = $call82;
 }
 if (($index$1273 | 0) == -1) {
  STACKTOP = sp;
  return;
 } else $index$1275 = $index$1273;
 while (1) {
  $call148 = __ZN13b2DynamicTree7BalanceEi($this, $index$1275) | 0;
  $44 = HEAP32[$m_nodes4 >> 2] | 0;
  $45 = HEAP32[$44 + ($call148 * 36 | 0) + 24 >> 2] | 0;
  $46 = HEAP32[$44 + ($call148 * 36 | 0) + 28 >> 2] | 0;
  if (($45 | 0) == -1) {
   label = 20;
   break;
  }
  if (($46 | 0) == -1) {
   label = 22;
   break;
  }
  $47 = HEAP32[$44 + ($45 * 36 | 0) + 32 >> 2] | 0;
  $48 = HEAP32[$44 + ($46 * 36 | 0) + 32 >> 2] | 0;
  HEAP32[$44 + ($call148 * 36 | 0) + 32 >> 2] = (($47 | 0) > ($48 | 0) ? $47 : $48) + 1;
  __ZN6b2AABB7CombineERKS_S1_($44 + ($call148 * 36 | 0) | 0, $44 + ($45 * 36 | 0) | 0, $44 + ($46 * 36 | 0) | 0);
  $index$1275 = HEAP32[(HEAP32[$m_nodes4 >> 2] | 0) + ($call148 * 36 | 0) + 20 >> 2] | 0;
  if (($index$1275 | 0) == -1) {
   label = 24;
   break;
  }
 }
 if ((label | 0) == 20) ___assert_fail(5896, 5696, 307, 5912); else if ((label | 0) == 22) ___assert_fail(5928, 5696, 308, 5912); else if ((label | 0) == 24) {
  STACKTOP = sp;
  return;
 }
}
function __ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_($this, $manifold, $xfA, $xfB) {
 $this = $this | 0;
 $manifold = $manifold | 0;
 $xfA = $xfA | 0;
 $xfB = $xfB | 0;
 var $1 = 0, $102 = 0, $103 = 0, $109 = 0, $114 = 0, $115 = 0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0, $125 = 0, $13 = 0.0, $130 = 0, $131 = 0, $20 = 0, $25 = 0, $27 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $35 = 0, $38 = 0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0, $46 = 0, $47 = 0, $5 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $57 = 0, $6 = 0.0, $62 = 0, $63 = 0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0.0, $73 = 0, $77 = 0, $82 = 0, $83 = 0, $87 = 0.0, $88 = 0.0, $89 = 0, $93 = 0, $97 = 0, $add$i = 0.0, $add$i$i109$i = 0.0, $add$i$i147$i = 0.0, $add$i214$i = 0.0, $add$i95$i = 0.0, $add16$i$i = 0.0, $add8$i = 0, $arrayidx78$i = 0, $call$i$i$i$i = 0.0, $call$i$i$i115$i = 0.0, $cmp5$i = 0, $div$i$i = 0.0, $div$i117$i = 0.0, $i$0262$i = 0, $localNormal39$i = 0, $localNormal61$i = 0, $m_p$i = 0, $mul$i76$i = 0.0, $mul1$i$i = 0.0, $normalIndex$0$lcssa$i = 0, $normalIndex$0264$i = 0, $pointCount$i = 0, $separation$0$lcssa$i = 0, $separation$0263$i = 0.0, $sub$i165$i = 0.0, $sub$i188$i = 0.0, $sub$i90$i = 0.0, $sub3$i168$i = 0.0, $sub3$i191$i = 0.0, $sub4$i$i = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[(HEAP32[$this + 48 >> 2] | 0) + 12 >> 2] | 0;
 $3 = HEAP32[(HEAP32[$this + 52 >> 2] | 0) + 12 >> 2] | 0;
 $pointCount$i = $manifold + 60 | 0;
 HEAP32[$pointCount$i >> 2] = 0;
 $m_p$i = $3 + 12 | 0;
 $4 = +HEAPF32[$xfB + 12 >> 2];
 $5 = +HEAPF32[$m_p$i >> 2];
 $6 = +HEAPF32[$xfB + 8 >> 2];
 $7 = +HEAPF32[$3 + 16 >> 2];
 $sub$i90$i = +HEAPF32[$xfB >> 2] + ($4 * $5 - $6 * $7) - +HEAPF32[$xfA >> 2];
 $sub4$i$i = $5 * $6 + $4 * $7 + +HEAPF32[$xfB + 4 >> 2] - +HEAPF32[$xfA + 4 >> 2];
 $12 = +HEAPF32[$xfA + 12 >> 2];
 $13 = +HEAPF32[$xfA + 8 >> 2];
 $add$i95$i = $sub$i90$i * $12 + $sub4$i$i * $13;
 $add16$i$i = $12 * $sub4$i$i - $sub$i90$i * $13;
 $add$i = +HEAPF32[$1 + 8 >> 2] + +HEAPF32[$3 + 8 >> 2];
 $20 = HEAP32[$1 + 148 >> 2] | 0;
 do if (($20 | 0) > 0) {
  $i$0262$i = 0;
  $normalIndex$0264$i = 0;
  $separation$0263$i = -3.4028234663852886e+38;
  while (1) {
   $add$i214$i = ($add$i95$i - +HEAPF32[$1 + ($i$0262$i << 3) + 20 >> 2]) * +HEAPF32[$1 + ($i$0262$i << 3) + 84 >> 2] + ($add16$i$i - +HEAPF32[$1 + ($i$0262$i << 3) + 24 >> 2]) * +HEAPF32[$1 + ($i$0262$i << 3) + 88 >> 2];
   if ($add$i214$i > $add$i) {
    label = 19;
    break;
   }
   $cmp5$i = $add$i214$i > $separation$0263$i;
   $separation$0263$i = $cmp5$i ? $add$i214$i : $separation$0263$i;
   $normalIndex$0264$i = $cmp5$i ? $i$0262$i : $normalIndex$0264$i;
   $i$0262$i = $i$0262$i + 1 | 0;
   if (($i$0262$i | 0) >= ($20 | 0)) {
    label = 4;
    break;
   }
  }
  if ((label | 0) == 4) {
   $normalIndex$0$lcssa$i = $normalIndex$0264$i;
   $separation$0$lcssa$i = $separation$0263$i < 1.1920928955078125e-7;
   break;
  } else if ((label | 0) == 19) {
   STACKTOP = sp;
   return;
  }
 } else {
  $normalIndex$0$lcssa$i = 0;
  $separation$0$lcssa$i = 1;
 } while (0);
 $add8$i = $normalIndex$0$lcssa$i + 1 | 0;
 $25 = $1 + ($normalIndex$0$lcssa$i << 3) + 20 | 0;
 $27 = HEAP32[$25 >> 2] | 0;
 $30 = HEAP32[$25 + 4 >> 2] | 0;
 $31 = (HEAP32[tempDoublePtr >> 2] = $27, +HEAPF32[tempDoublePtr >> 2]);
 $32 = (HEAP32[tempDoublePtr >> 2] = $30, +HEAPF32[tempDoublePtr >> 2]);
 $33 = $1 + ((($add8$i | 0) < ($20 | 0) ? $add8$i : 0) << 3) + 20 | 0;
 $35 = HEAP32[$33 >> 2] | 0;
 $38 = HEAP32[$33 + 4 >> 2] | 0;
 $39 = (HEAP32[tempDoublePtr >> 2] = $35, +HEAPF32[tempDoublePtr >> 2]);
 $40 = (HEAP32[tempDoublePtr >> 2] = $38, +HEAPF32[tempDoublePtr >> 2]);
 if ($separation$0$lcssa$i) {
  HEAP32[$pointCount$i >> 2] = 1;
  HEAP32[$manifold + 56 >> 2] = 1;
  $41 = $1 + ($normalIndex$0$lcssa$i << 3) + 84 | 0;
  $46 = HEAP32[$41 + 4 >> 2] | 0;
  $47 = $manifold + 40 | 0;
  HEAP32[$47 >> 2] = HEAP32[$41 >> 2];
  HEAP32[$47 + 4 >> 2] = $46;
  $51 = +(($31 + $39) * .5);
  $52 = +(($32 + $40) * .5);
  $53 = $manifold + 48 | 0;
  HEAPF32[$53 >> 2] = $51;
  HEAPF32[$53 + 4 >> 2] = $52;
  $57 = $m_p$i;
  $62 = HEAP32[$57 + 4 >> 2] | 0;
  $63 = $manifold;
  HEAP32[$63 >> 2] = HEAP32[$57 >> 2];
  HEAP32[$63 + 4 >> 2] = $62;
  HEAP32[$manifold + 16 >> 2] = 0;
  STACKTOP = sp;
  return;
 }
 $sub$i188$i = $add$i95$i - $31;
 $sub3$i191$i = $add16$i$i - $32;
 $sub$i165$i = $add$i95$i - $39;
 $sub3$i168$i = $add16$i$i - $40;
 if ($sub$i188$i * ($39 - $31) + $sub3$i191$i * ($40 - $32) <= 0.0) {
  $add$i$i147$i = $sub$i188$i * $sub$i188$i + $sub3$i191$i * $sub3$i191$i;
  if ($add$i$i147$i > $add$i * $add$i) {
   STACKTOP = sp;
   return;
  }
  HEAP32[$pointCount$i >> 2] = 1;
  HEAP32[$manifold + 56 >> 2] = 1;
  $localNormal39$i = $manifold + 40 | 0;
  $67 = +$sub$i188$i;
  $68 = +$sub3$i191$i;
  $69 = $localNormal39$i;
  HEAPF32[$69 >> 2] = $67;
  HEAPF32[$69 + 4 >> 2] = $68;
  $call$i$i$i115$i = +Math_sqrt(+$add$i$i147$i);
  if (!($call$i$i$i115$i < 1.1920928955078125e-7)) {
   $div$i117$i = 1.0 / $call$i$i$i115$i;
   HEAPF32[$localNormal39$i >> 2] = $sub$i188$i * $div$i117$i;
   HEAPF32[$manifold + 44 >> 2] = $sub3$i191$i * $div$i117$i;
  }
  $73 = $manifold + 48 | 0;
  HEAP32[$73 >> 2] = $27;
  HEAP32[$73 + 4 >> 2] = $30;
  $77 = $m_p$i;
  $82 = HEAP32[$77 + 4 >> 2] | 0;
  $83 = $manifold;
  HEAP32[$83 >> 2] = HEAP32[$77 >> 2];
  HEAP32[$83 + 4 >> 2] = $82;
  HEAP32[$manifold + 16 >> 2] = 0;
  STACKTOP = sp;
  return;
 }
 if (!($sub$i165$i * ($31 - $39) + $sub3$i168$i * ($32 - $40) <= 0.0)) {
  $mul$i76$i = ($31 + $39) * .5;
  $mul1$i$i = ($32 + $40) * .5;
  $arrayidx78$i = $1 + ($normalIndex$0$lcssa$i << 3) + 84 | 0;
  if (($add$i95$i - $mul$i76$i) * +HEAPF32[$arrayidx78$i >> 2] + ($add16$i$i - $mul1$i$i) * +HEAPF32[$1 + ($normalIndex$0$lcssa$i << 3) + 88 >> 2] > $add$i) {
   STACKTOP = sp;
   return;
  }
  HEAP32[$pointCount$i >> 2] = 1;
  HEAP32[$manifold + 56 >> 2] = 1;
  $109 = $arrayidx78$i;
  $114 = HEAP32[$109 + 4 >> 2] | 0;
  $115 = $manifold + 40 | 0;
  HEAP32[$115 >> 2] = HEAP32[$109 >> 2];
  HEAP32[$115 + 4 >> 2] = $114;
  $119 = +$mul$i76$i;
  $120 = +$mul1$i$i;
  $121 = $manifold + 48 | 0;
  HEAPF32[$121 >> 2] = $119;
  HEAPF32[$121 + 4 >> 2] = $120;
  $125 = $m_p$i;
  $130 = HEAP32[$125 + 4 >> 2] | 0;
  $131 = $manifold;
  HEAP32[$131 >> 2] = HEAP32[$125 >> 2];
  HEAP32[$131 + 4 >> 2] = $130;
  HEAP32[$manifold + 16 >> 2] = 0;
  STACKTOP = sp;
  return;
 }
 $add$i$i109$i = $sub$i165$i * $sub$i165$i + $sub3$i168$i * $sub3$i168$i;
 if ($add$i$i109$i > $add$i * $add$i) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$pointCount$i >> 2] = 1;
 HEAP32[$manifold + 56 >> 2] = 1;
 $localNormal61$i = $manifold + 40 | 0;
 $87 = +$sub$i165$i;
 $88 = +$sub3$i168$i;
 $89 = $localNormal61$i;
 HEAPF32[$89 >> 2] = $87;
 HEAPF32[$89 + 4 >> 2] = $88;
 $call$i$i$i$i = +Math_sqrt(+$add$i$i109$i);
 if (!($call$i$i$i$i < 1.1920928955078125e-7)) {
  $div$i$i = 1.0 / $call$i$i$i$i;
  HEAPF32[$localNormal61$i >> 2] = $sub$i165$i * $div$i$i;
  HEAPF32[$manifold + 44 >> 2] = $sub3$i168$i * $div$i$i;
 }
 $93 = $manifold + 48 | 0;
 HEAP32[$93 >> 2] = $35;
 HEAP32[$93 + 4 >> 2] = $38;
 $97 = $m_p$i;
 $102 = HEAP32[$97 + 4 >> 2] | 0;
 $103 = $manifold;
 HEAP32[$103 >> 2] = HEAP32[$97 >> 2];
 HEAP32[$103 + 4 >> 2] = $102;
 HEAP32[$manifold + 16 >> 2] = 0;
 STACKTOP = sp;
 return;
}
function __ZN15b2FrictionJoint23InitVelocityConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $0 = 0, $1 = 0, $10 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $6 = 0, $62 = 0.0, $63 = 0.0, $64 = 0, $68 = 0.0, $72 = 0.0, $77 = 0, $78 = 0, $79 = 0.0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $add = 0.0, $add$i = 0.0, $add$i99 = 0.0, $add51 = 0.0, $add84 = 0.0, $add88 = 0.0, $call$i$i = 0.0, $call$i$i30 = 0.0, $call2$i$i = 0.0, $call2$i$i32 = 0.0, $det$0$i = 0.0, $dtRatio = 0, $m_angularImpulse = 0, $m_indexA = 0, $m_indexB = 0, $m_linearImpulse = 0, $mul$i82 = 0.0, $mul11$i = 0.0, $mul2$i = 0.0, $mul60 = 0.0, $mul96 = 0.0, $storemerge = 0.0, $sub$i = 0.0, $sub$i36 = 0.0, $sub$i41 = 0.0, $sub$i88 = 0.0, $sub$i96 = 0.0, $sub3$i = 0.0, $sub3$i44 = 0.0, $sub64 = 0.0, $v120 = 0, $v128 = 0, $vA$sroa$0$0$load113117 = 0.0, $vA$sroa$1$4$load114118 = 0.0, $vB$sroa$0$0$load111115 = 0.0, $vB$sroa$1$4$load112116 = 0.0, $velocities = 0, $w124 = 0, $w132 = 0, $wA$0 = 0.0, $wB$0 = 0.0, $y$i83 = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this + 48 >> 2] | 0;
 $1 = HEAP32[$0 + 8 >> 2] | 0;
 $m_indexA = $this + 104 | 0;
 HEAP32[$m_indexA >> 2] = $1;
 $2 = HEAP32[$this + 52 >> 2] | 0;
 $3 = HEAP32[$2 + 8 >> 2] | 0;
 $m_indexB = $this + 108 | 0;
 HEAP32[$m_indexB >> 2] = $3;
 $4 = $0 + 28 | 0;
 $6 = HEAP32[$4 >> 2] | 0;
 $9 = HEAP32[$4 + 4 >> 2] | 0;
 $10 = $this + 128 | 0;
 HEAP32[$10 >> 2] = $6;
 HEAP32[$10 + 4 >> 2] = $9;
 $14 = $2 + 28 | 0;
 $16 = HEAP32[$14 >> 2] | 0;
 $19 = HEAP32[$14 + 4 >> 2] | 0;
 $20 = $this + 136 | 0;
 HEAP32[$20 >> 2] = $16;
 HEAP32[$20 + 4 >> 2] = $19;
 $24 = +HEAPF32[$0 + 120 >> 2];
 HEAPF32[$this + 144 >> 2] = $24;
 $25 = +HEAPF32[$2 + 120 >> 2];
 HEAPF32[$this + 148 >> 2] = $25;
 $26 = +HEAPF32[$0 + 128 >> 2];
 HEAPF32[$this + 152 >> 2] = $26;
 $27 = +HEAPF32[$2 + 128 >> 2];
 HEAPF32[$this + 156 >> 2] = $27;
 $28 = HEAP32[$data + 24 >> 2] | 0;
 $29 = +HEAPF32[$28 + ($1 * 12 | 0) + 8 >> 2];
 $velocities = $data + 28 | 0;
 $30 = HEAP32[$velocities >> 2] | 0;
 $31 = $30 + ($1 * 12 | 0) | 0;
 $37 = +HEAPF32[$31 >> 2];
 $38 = +HEAPF32[$31 + 4 >> 2];
 $39 = +HEAPF32[$30 + ($1 * 12 | 0) + 8 >> 2];
 $40 = +HEAPF32[$28 + ($3 * 12 | 0) + 8 >> 2];
 $41 = $30 + ($3 * 12 | 0) | 0;
 $47 = +HEAPF32[$41 >> 2];
 $48 = +HEAPF32[$41 + 4 >> 2];
 $49 = +HEAPF32[$30 + ($3 * 12 | 0) + 8 >> 2];
 $call$i$i = +Math_sin(+$29);
 $call2$i$i = +Math_cos(+$29);
 $call$i$i30 = +Math_sin(+$40);
 $call2$i$i32 = +Math_cos(+$40);
 $sub$i = +HEAPF32[$this + 68 >> 2] - (HEAP32[tempDoublePtr >> 2] = $6, +HEAPF32[tempDoublePtr >> 2]);
 $sub3$i = +HEAPF32[$this + 72 >> 2] - (HEAP32[tempDoublePtr >> 2] = $9, +HEAPF32[tempDoublePtr >> 2]);
 $sub$i36 = $call2$i$i * $sub$i - $call$i$i * $sub3$i;
 $add$i = $call$i$i * $sub$i + $call2$i$i * $sub3$i;
 $53 = +$sub$i36;
 $54 = +$add$i;
 $55 = $this + 112 | 0;
 HEAPF32[$55 >> 2] = $53;
 HEAPF32[$55 + 4 >> 2] = $54;
 $sub$i41 = +HEAPF32[$this + 76 >> 2] - (HEAP32[tempDoublePtr >> 2] = $16, +HEAPF32[tempDoublePtr >> 2]);
 $sub3$i44 = +HEAPF32[$this + 80 >> 2] - (HEAP32[tempDoublePtr >> 2] = $19, +HEAPF32[tempDoublePtr >> 2]);
 $sub$i96 = $call2$i$i32 * $sub$i41 - $call$i$i30 * $sub3$i44;
 $add$i99 = $call$i$i30 * $sub$i41 + $call2$i$i32 * $sub3$i44;
 $62 = +$sub$i96;
 $63 = +$add$i99;
 $64 = $this + 120 | 0;
 HEAPF32[$64 >> 2] = $62;
 HEAPF32[$64 + 4 >> 2] = $63;
 $add = $24 + $25;
 $add51 = $add + $add$i * $26 * $add$i + $add$i99 * $27 * $add$i99;
 $68 = $26 * $sub$i36;
 $mul60 = $27 * $sub$i96;
 $sub64 = -($add$i * $68) - $add$i99 * $mul60;
 $add84 = $add + $sub$i36 * $68 + $sub$i96 * $mul60;
 $sub$i88 = $add51 * $add84 - $sub64 * $sub64;
 if ($sub$i88 != 0.0) $det$0$i = 1.0 / $sub$i88; else $det$0$i = $sub$i88;
 $mul11$i = -($sub64 * $det$0$i);
 HEAPF32[$this + 160 >> 2] = $add84 * $det$0$i;
 HEAPF32[$this + 164 >> 2] = $mul11$i;
 HEAPF32[$this + 168 >> 2] = $mul11$i;
 HEAPF32[$this + 172 >> 2] = $add51 * $det$0$i;
 $add88 = $26 + $27;
 if ($add88 > 0.0) $storemerge = 1.0 / $add88; else $storemerge = $add88;
 HEAPF32[$this + 176 >> 2] = $storemerge;
 $m_linearImpulse = $this + 84 | 0;
 if ((HEAP8[$data + 20 >> 0] | 0) == 0) {
  HEAPF32[$m_linearImpulse >> 2] = 0.0;
  HEAPF32[$this + 88 >> 2] = 0.0;
  HEAPF32[$this + 92 >> 2] = 0.0;
  $vA$sroa$0$0$load113117 = $37;
  $vA$sroa$1$4$load114118 = $38;
  $vB$sroa$0$0$load111115 = $47;
  $vB$sroa$1$4$load112116 = $48;
  $wA$0 = $39;
  $wB$0 = $49;
  $77 = HEAP32[$m_indexA >> 2] | 0;
  $78 = HEAP32[$velocities >> 2] | 0;
  $v120 = $78 + ($77 * 12 | 0) | 0;
  $79 = +$vA$sroa$0$0$load113117;
  $80 = +$vA$sroa$1$4$load114118;
  $81 = $v120;
  $82 = $81;
  HEAPF32[$82 >> 2] = $79;
  $83 = $81 + 4 | 0;
  $84 = $83;
  HEAPF32[$84 >> 2] = $80;
  $85 = HEAP32[$m_indexA >> 2] | 0;
  $86 = HEAP32[$velocities >> 2] | 0;
  $w124 = $86 + ($85 * 12 | 0) + 8 | 0;
  HEAPF32[$w124 >> 2] = $wA$0;
  $87 = HEAP32[$m_indexB >> 2] | 0;
  $v128 = $86 + ($87 * 12 | 0) | 0;
  $88 = +$vB$sroa$0$0$load111115;
  $89 = +$vB$sroa$1$4$load112116;
  $90 = $v128;
  $91 = $90;
  HEAPF32[$91 >> 2] = $88;
  $92 = $90 + 4 | 0;
  $93 = $92;
  HEAPF32[$93 >> 2] = $89;
  $94 = HEAP32[$m_indexB >> 2] | 0;
  $95 = HEAP32[$velocities >> 2] | 0;
  $w132 = $95 + ($94 * 12 | 0) + 8 | 0;
  HEAPF32[$w132 >> 2] = $wB$0;
  STACKTOP = sp;
  return;
 } else {
  $dtRatio = $data + 8 | 0;
  $72 = +HEAPF32[$dtRatio >> 2];
  $mul$i82 = $72 * +HEAPF32[$m_linearImpulse >> 2];
  HEAPF32[$m_linearImpulse >> 2] = $mul$i82;
  $y$i83 = $this + 88 | 0;
  $mul2$i = $72 * +HEAPF32[$y$i83 >> 2];
  HEAPF32[$y$i83 >> 2] = $mul2$i;
  $m_angularImpulse = $this + 92 | 0;
  $mul96 = +HEAPF32[$dtRatio >> 2] * +HEAPF32[$m_angularImpulse >> 2];
  HEAPF32[$m_angularImpulse >> 2] = $mul96;
  $vA$sroa$0$0$load113117 = $37 - $24 * $mul$i82;
  $vA$sroa$1$4$load114118 = $38 - $24 * $mul2$i;
  $vB$sroa$0$0$load111115 = $47 + $25 * $mul$i82;
  $vB$sroa$1$4$load112116 = $48 + $25 * $mul2$i;
  $wA$0 = $39 - $26 * ($mul96 + ($mul2$i * $sub$i36 - $mul$i82 * $add$i));
  $wB$0 = $49 + $27 * ($mul96 + ($mul2$i * $sub$i96 - $mul$i82 * $add$i99));
  $77 = HEAP32[$m_indexA >> 2] | 0;
  $78 = HEAP32[$velocities >> 2] | 0;
  $v120 = $78 + ($77 * 12 | 0) | 0;
  $79 = +$vA$sroa$0$0$load113117;
  $80 = +$vA$sroa$1$4$load114118;
  $81 = $v120;
  $82 = $81;
  HEAPF32[$82 >> 2] = $79;
  $83 = $81 + 4 | 0;
  $84 = $83;
  HEAPF32[$84 >> 2] = $80;
  $85 = HEAP32[$m_indexA >> 2] | 0;
  $86 = HEAP32[$velocities >> 2] | 0;
  $w124 = $86 + ($85 * 12 | 0) + 8 | 0;
  HEAPF32[$w124 >> 2] = $wA$0;
  $87 = HEAP32[$m_indexB >> 2] | 0;
  $v128 = $86 + ($87 * 12 | 0) | 0;
  $88 = +$vB$sroa$0$0$load111115;
  $89 = +$vB$sroa$1$4$load112116;
  $90 = $v128;
  $91 = $90;
  HEAPF32[$91 >> 2] = $88;
  $92 = $90 + 4 | 0;
  $93 = $92;
  HEAPF32[$93 >> 2] = $89;
  $94 = HEAP32[$m_indexB >> 2] | 0;
  $95 = HEAP32[$velocities >> 2] | 0;
  $w132 = $95 + ($94 * 12 | 0) + 8 | 0;
  HEAPF32[$w132 >> 2] = $wB$0;
  STACKTOP = sp;
  return;
 }
}
function __ZN15b2ContactSolver11SolveHelperEii($this, $startIndex, $count) {
 $this = $this | 0;
 $startIndex = $startIndex | 0;
 $count = $count | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $49 = 0.0, $50 = 0.0, $51 = 0, $55 = 0, $61 = 0.0, $62 = 0.0, $63 = 0, $69 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0, $79 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $9 = 0.0, $aA$0$lcssa = 0.0, $aA$0179 = 0.0, $aB$0$lcssa = 0.0, $aB$0178 = 0.0, $add = 0, $add$ptr = 0, $add32 = 0.0, $add38 = 0.0, $c$i135 = 0, $c$i139 = 0, $cA$sroa$0$0$load164170$lcssa = 0.0, $cA$sroa$0$0$load164170174 = 0.0, $cA$sroa$1$4$load167171$lcssa = 0.0, $cA$sroa$1$4$load167171173 = 0.0, $cB$sroa$0$0$load158168$lcssa = 0.0, $cB$sroa$0$0$load158168176 = 0.0, $cB$sroa$1$4$load161169$lcssa = 0.0, $cB$sroa$1$4$load161169175 = 0.0, $call$i = 0.0, $call$i136 = 0.0, $call2$i = 0.0, $call2$i138 = 0.0, $cond = 0.0, $cond$i$i = 0.0, $i$0188 = 0, $j$0177 = 0, $m_positionConstraints = 0, $m_positions = 0, $minSeparation$0$lcssa = 0.0, $minSeparation$0189 = 0.0, $minSeparation$1$lcssa = 0.0, $minSeparation$1180 = 0.0, $mul = 0.0, $mul$i66 = 0.0, $mul1$i68 = 0.0, $point26 = 0, $psm = 0, $s$i134 = 0, $s$i137 = 0, $separation27 = 0, $sub$i77 = 0.0, $sub$i84 = 0.0, $sub$i86 = 0.0, $sub$i92 = 0.0, $sub3$i = 0.0, $sub3$i95 = 0.0, $xfA = 0, $xfB = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $xfA = sp + 40 | 0;
 $xfB = sp;
 $psm = sp + 16 | 0;
 $add = $count + $startIndex | 0;
 if (($count | 0) <= 0) {
  $minSeparation$0$lcssa = 0.0;
  STACKTOP = sp;
  return +$minSeparation$0$lcssa;
 }
 $m_positionConstraints = $this + 36 | 0;
 $m_positions = $this + 24 | 0;
 $s$i137 = $xfA + 8 | 0;
 $c$i139 = $xfA + 12 | 0;
 $s$i134 = $xfB + 8 | 0;
 $c$i135 = $xfB + 12 | 0;
 $point26 = $psm + 8 | 0;
 $separation27 = $psm + 16 | 0;
 $24 = HEAP32[$m_positions >> 2] | 0;
 $i$0188 = $startIndex;
 $minSeparation$0189 = 0.0;
 while (1) {
  $0 = HEAP32[$m_positionConstraints >> 2] | 0;
  $add$ptr = $0 + ($i$0188 * 88 | 0) | 0;
  $1 = HEAP32[$0 + ($i$0188 * 88 | 0) + 32 >> 2] | 0;
  $2 = HEAP32[$0 + ($i$0188 * 88 | 0) + 36 >> 2] | 0;
  $3 = $0 + ($i$0188 * 88 | 0) + 48 | 0;
  $9 = +HEAPF32[$3 >> 2];
  $10 = +HEAPF32[$3 + 4 >> 2];
  $11 = +HEAPF32[$0 + ($i$0188 * 88 | 0) + 40 >> 2];
  $12 = +HEAPF32[$0 + ($i$0188 * 88 | 0) + 64 >> 2];
  $13 = $0 + ($i$0188 * 88 | 0) + 56 | 0;
  $19 = +HEAPF32[$13 >> 2];
  $20 = +HEAPF32[$13 + 4 >> 2];
  $21 = +HEAPF32[$0 + ($i$0188 * 88 | 0) + 44 >> 2];
  $22 = +HEAPF32[$0 + ($i$0188 * 88 | 0) + 68 >> 2];
  $23 = HEAP32[$0 + ($i$0188 * 88 | 0) + 84 >> 2] | 0;
  $25 = $24 + ($1 * 12 | 0) | 0;
  $31 = +HEAPF32[$25 >> 2];
  $32 = +HEAPF32[$25 + 4 >> 2];
  $33 = +HEAPF32[$24 + ($1 * 12 | 0) + 8 >> 2];
  $34 = $24 + ($2 * 12 | 0) | 0;
  $40 = +HEAPF32[$34 >> 2];
  $41 = +HEAPF32[$34 + 4 >> 2];
  $42 = +HEAPF32[$24 + ($2 * 12 | 0) + 8 >> 2];
  if (($23 | 0) > 0) {
   $add32 = $11 + $21;
   $aA$0179 = $33;
   $aB$0178 = $42;
   $cA$sroa$0$0$load164170174 = $31;
   $cA$sroa$1$4$load167171173 = $32;
   $cB$sroa$0$0$load158168176 = $40;
   $cB$sroa$1$4$load161169175 = $41;
   $j$0177 = 0;
   $minSeparation$1180 = $minSeparation$0189;
   do {
    $call$i136 = +Math_sin(+$aA$0179);
    HEAPF32[$s$i137 >> 2] = $call$i136;
    $call2$i138 = +Math_cos(+$aA$0179);
    HEAPF32[$c$i139 >> 2] = $call2$i138;
    $call$i = +Math_sin(+$aB$0178);
    HEAPF32[$s$i134 >> 2] = $call$i;
    $call2$i = +Math_cos(+$aB$0178);
    HEAPF32[$c$i135 >> 2] = $call2$i;
    $43 = +($cA$sroa$0$0$load164170174 - ($9 * $call2$i138 - $10 * $call$i136));
    $44 = +($cA$sroa$1$4$load167171173 - ($10 * $call2$i138 + $9 * $call$i136));
    $45 = $xfA;
    HEAPF32[$45 >> 2] = $43;
    HEAPF32[$45 + 4 >> 2] = $44;
    $49 = +($cB$sroa$0$0$load158168176 - ($19 * $call2$i - $20 * $call$i));
    $50 = +($cB$sroa$1$4$load161169175 - ($20 * $call2$i + $19 * $call$i));
    $51 = $xfB;
    HEAPF32[$51 >> 2] = $49;
    HEAPF32[$51 + 4 >> 2] = $50;
    __ZN24b2PositionSolverManifold10InitializeEP27b2ContactPositionConstraintRK11b2TransformS4_i($psm, $add$ptr, $xfA, $xfB, $j$0177);
    $55 = $psm;
    $61 = +HEAPF32[$55 >> 2];
    $62 = +HEAPF32[$55 + 4 >> 2];
    $63 = $point26;
    $69 = +HEAPF32[$63 >> 2];
    $70 = +HEAPF32[$63 + 4 >> 2];
    $71 = +HEAPF32[$separation27 >> 2];
    $sub$i92 = $69 - $cA$sroa$0$0$load164170174;
    $sub3$i95 = $70 - $cA$sroa$1$4$load167171173;
    $sub$i86 = $69 - $cB$sroa$0$0$load158168176;
    $sub3$i = $70 - $cB$sroa$1$4$load161169175;
    $minSeparation$1180 = $minSeparation$1180 < $71 ? $minSeparation$1180 : $71;
    $mul = ($71 + .004999999888241291) * .20000000298023224;
    $cond$i$i = $mul < 0.0 ? $mul : 0.0;
    $sub$i84 = $62 * $sub$i92 - $61 * $sub3$i95;
    $sub$i77 = $62 * $sub$i86 - $61 * $sub3$i;
    $add38 = $sub$i77 * $22 * $sub$i77 + ($add32 + $sub$i84 * $12 * $sub$i84);
    if ($add38 > 0.0) $cond = -($cond$i$i < -.20000000298023224 ? -.20000000298023224 : $cond$i$i) / $add38; else $cond = 0.0;
    $mul$i66 = $61 * $cond;
    $mul1$i68 = $62 * $cond;
    $cA$sroa$0$0$load164170174 = $cA$sroa$0$0$load164170174 - $11 * $mul$i66;
    $cA$sroa$1$4$load167171173 = $cA$sroa$1$4$load167171173 - $11 * $mul1$i68;
    $aA$0179 = $aA$0179 - $12 * ($sub$i92 * $mul1$i68 - $sub3$i95 * $mul$i66);
    $cB$sroa$0$0$load158168176 = $cB$sroa$0$0$load158168176 + $21 * $mul$i66;
    $cB$sroa$1$4$load161169175 = $cB$sroa$1$4$load161169175 + $21 * $mul1$i68;
    $aB$0178 = $aB$0178 + $22 * ($sub$i86 * $mul1$i68 - $sub3$i * $mul$i66);
    $j$0177 = $j$0177 + 1 | 0;
   } while (($j$0177 | 0) != ($23 | 0));
   $72 = HEAP32[$m_positions >> 2] | 0;
   $aA$0$lcssa = $aA$0179;
   $aB$0$lcssa = $aB$0178;
   $cA$sroa$0$0$load164170$lcssa = $cA$sroa$0$0$load164170174;
   $cA$sroa$1$4$load167171$lcssa = $cA$sroa$1$4$load167171173;
   $cB$sroa$0$0$load158168$lcssa = $cB$sroa$0$0$load158168176;
   $cB$sroa$1$4$load161169$lcssa = $cB$sroa$1$4$load161169175;
   $minSeparation$1$lcssa = $minSeparation$1180;
  } else {
   $72 = $24;
   $aA$0$lcssa = $33;
   $aB$0$lcssa = $42;
   $cA$sroa$0$0$load164170$lcssa = $31;
   $cA$sroa$1$4$load167171$lcssa = $32;
   $cB$sroa$0$0$load158168$lcssa = $40;
   $cB$sroa$1$4$load161169$lcssa = $41;
   $minSeparation$1$lcssa = $minSeparation$0189;
  }
  $73 = +$cA$sroa$0$0$load164170$lcssa;
  $74 = +$cA$sroa$1$4$load167171$lcssa;
  $75 = $72 + ($1 * 12 | 0) | 0;
  HEAPF32[$75 >> 2] = $73;
  HEAPF32[$75 + 4 >> 2] = $74;
  $79 = HEAP32[$m_positions >> 2] | 0;
  HEAPF32[$79 + ($1 * 12 | 0) + 8 >> 2] = $aA$0$lcssa;
  $80 = +$cB$sroa$0$0$load158168$lcssa;
  $81 = +$cB$sroa$1$4$load161169$lcssa;
  $82 = $79 + ($2 * 12 | 0) | 0;
  HEAPF32[$82 >> 2] = $80;
  HEAPF32[$82 + 4 >> 2] = $81;
  $24 = HEAP32[$m_positions >> 2] | 0;
  HEAPF32[$24 + ($2 * 12 | 0) + 8 >> 2] = $aB$0$lcssa;
  $i$0188 = $i$0188 + 1 | 0;
  if (($i$0188 | 0) >= ($add | 0)) {
   $minSeparation$0$lcssa = $minSeparation$1$lcssa;
   break;
  } else $minSeparation$0189 = $minSeparation$1$lcssa;
 }
 STACKTOP = sp;
 return +$minSeparation$0$lcssa;
}
function __ZN13b2DynamicTree7BalanceEi($this, $iA) {
 $this = $this | 0;
 $iA = $iA | 0;
 var $0 = 0, $1 = 0, $10 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $7 = 0, $8 = 0, $add = 0, $add$ptr = 0, $add$ptr116 = 0, $add$ptr118 = 0, $add$ptr14 = 0, $add$ptr16 = 0, $add$ptr24 = 0, $add$ptr26 = 0, $add102 = 0, $add180 = 0, $add200 = 0, $child1$i = 0, $child1113 = 0, $child1141 = 0, $child121 = 0, $child147 = 0, $child2 = 0, $child2114 = 0, $child2152 = 0, $child222 = 0, $child257 = 0, $height = 0, $height164 = 0, $height165 = 0, $height17 = 0, $height18 = 0, $height68 = 0, $height69 = 0, $parent = 0, $parent132 = 0, $parent133 = 0, $parent40 = 0, $retval$0 = 0, $storemerge$in = 0, $storemerge130$in = 0, $sub = 0, sp = 0;
 sp = STACKTOP;
 if (($iA | 0) == -1) ___assert_fail(5944, 5696, 382, 5960);
 $0 = HEAP32[$this + 4 >> 2] | 0;
 $add$ptr = $0 + ($iA * 36 | 0) | 0;
 $child1$i = $0 + ($iA * 36 | 0) + 24 | 0;
 $1 = HEAP32[$child1$i >> 2] | 0;
 if (($1 | 0) == -1) {
  $retval$0 = $iA;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $height = $0 + ($iA * 36 | 0) + 32 | 0;
 if ((HEAP32[$height >> 2] | 0) < 2) {
  $retval$0 = $iA;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $child2 = $0 + ($iA * 36 | 0) + 28 | 0;
 $3 = HEAP32[$child2 >> 2] | 0;
 if (!(($1 | 0) > -1)) ___assert_fail(5968, 5696, 392, 5960);
 $4 = HEAP32[$this + 12 >> 2] | 0;
 if (($1 | 0) >= ($4 | 0)) ___assert_fail(5968, 5696, 392, 5960);
 if (!(($3 | 0) > -1 & ($3 | 0) < ($4 | 0))) ___assert_fail(6e3, 5696, 393, 5960);
 $add$ptr14 = $0 + ($1 * 36 | 0) | 0;
 $add$ptr16 = $0 + ($3 * 36 | 0) | 0;
 $height17 = $0 + ($3 * 36 | 0) + 32 | 0;
 $height18 = $0 + ($1 * 36 | 0) + 32 | 0;
 $sub = (HEAP32[$height17 >> 2] | 0) - (HEAP32[$height18 >> 2] | 0) | 0;
 if (($sub | 0) > 1) {
  $child121 = $0 + ($3 * 36 | 0) + 24 | 0;
  $7 = HEAP32[$child121 >> 2] | 0;
  $child222 = $0 + ($3 * 36 | 0) + 28 | 0;
  $8 = HEAP32[$child222 >> 2] | 0;
  $add$ptr24 = $0 + ($7 * 36 | 0) | 0;
  $add$ptr26 = $0 + ($8 * 36 | 0) | 0;
  if (!(($7 | 0) > -1 & ($7 | 0) < ($4 | 0))) ___assert_fail(6032, 5696, 407, 5960);
  if (!(($8 | 0) > -1 & ($8 | 0) < ($4 | 0))) ___assert_fail(6064, 5696, 408, 5960);
  HEAP32[$child121 >> 2] = $iA;
  $parent = $0 + ($iA * 36 | 0) + 20 | 0;
  $parent40 = $0 + ($3 * 36 | 0) + 20 | 0;
  HEAP32[$parent40 >> 2] = HEAP32[$parent >> 2];
  HEAP32[$parent >> 2] = $3;
  $10 = HEAP32[$parent40 >> 2] | 0;
  do if (($10 | 0) == -1) HEAP32[$this >> 2] = $3; else {
   $child147 = $0 + ($10 * 36 | 0) + 24 | 0;
   if ((HEAP32[$child147 >> 2] | 0) == ($iA | 0)) {
    HEAP32[$child147 >> 2] = $3;
    break;
   }
   $child257 = $0 + ($10 * 36 | 0) + 28 | 0;
   if ((HEAP32[$child257 >> 2] | 0) == ($iA | 0)) {
    HEAP32[$child257 >> 2] = $3;
    break;
   } else ___assert_fail(6096, 5696, 424, 5960);
  } while (0);
  $height68 = $0 + ($7 * 36 | 0) + 32 | 0;
  $height69 = $0 + ($8 * 36 | 0) + 32 | 0;
  if ((HEAP32[$height68 >> 2] | 0) > (HEAP32[$height69 >> 2] | 0)) {
   HEAP32[$child222 >> 2] = $7;
   HEAP32[$child2 >> 2] = $8;
   HEAP32[$0 + ($8 * 36 | 0) + 20 >> 2] = $iA;
   __ZN6b2AABB7CombineERKS_S1_($add$ptr, $add$ptr14, $add$ptr26);
   __ZN6b2AABB7CombineERKS_S1_($add$ptr16, $add$ptr, $add$ptr24);
   $15 = HEAP32[$height18 >> 2] | 0;
   $16 = HEAP32[$height69 >> 2] | 0;
   $add = (($15 | 0) > ($16 | 0) ? $15 : $16) + 1 | 0;
   HEAP32[$height >> 2] = $add;
   $17 = HEAP32[$height68 >> 2] | 0;
   $storemerge130$in = ($add | 0) > ($17 | 0) ? $add : $17;
  } else {
   HEAP32[$child222 >> 2] = $8;
   HEAP32[$child2 >> 2] = $7;
   HEAP32[$0 + ($7 * 36 | 0) + 20 >> 2] = $iA;
   __ZN6b2AABB7CombineERKS_S1_($add$ptr, $add$ptr14, $add$ptr24);
   __ZN6b2AABB7CombineERKS_S1_($add$ptr16, $add$ptr, $add$ptr26);
   $18 = HEAP32[$height18 >> 2] | 0;
   $19 = HEAP32[$height68 >> 2] | 0;
   $add102 = (($18 | 0) > ($19 | 0) ? $18 : $19) + 1 | 0;
   HEAP32[$height >> 2] = $add102;
   $20 = HEAP32[$height69 >> 2] | 0;
   $storemerge130$in = ($add102 | 0) > ($20 | 0) ? $add102 : $20;
  }
  HEAP32[$height17 >> 2] = $storemerge130$in + 1;
  $retval$0 = $3;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 if (!(($sub | 0) < -1)) {
  $retval$0 = $iA;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $child1113 = $0 + ($1 * 36 | 0) + 24 | 0;
 $21 = HEAP32[$child1113 >> 2] | 0;
 $child2114 = $0 + ($1 * 36 | 0) + 28 | 0;
 $22 = HEAP32[$child2114 >> 2] | 0;
 $add$ptr116 = $0 + ($21 * 36 | 0) | 0;
 $add$ptr118 = $0 + ($22 * 36 | 0) | 0;
 if (!(($21 | 0) > -1 & ($21 | 0) < ($4 | 0))) ___assert_fail(6128, 5696, 467, 5960);
 if (!(($22 | 0) > -1 & ($22 | 0) < ($4 | 0))) ___assert_fail(6160, 5696, 468, 5960);
 HEAP32[$child1113 >> 2] = $iA;
 $parent132 = $0 + ($iA * 36 | 0) + 20 | 0;
 $parent133 = $0 + ($1 * 36 | 0) + 20 | 0;
 HEAP32[$parent133 >> 2] = HEAP32[$parent132 >> 2];
 HEAP32[$parent132 >> 2] = $1;
 $24 = HEAP32[$parent133 >> 2] | 0;
 do if (($24 | 0) == -1) HEAP32[$this >> 2] = $1; else {
  $child1141 = $0 + ($24 * 36 | 0) + 24 | 0;
  if ((HEAP32[$child1141 >> 2] | 0) == ($iA | 0)) {
   HEAP32[$child1141 >> 2] = $1;
   break;
  }
  $child2152 = $0 + ($24 * 36 | 0) + 28 | 0;
  if ((HEAP32[$child2152 >> 2] | 0) == ($iA | 0)) {
   HEAP32[$child2152 >> 2] = $1;
   break;
  } else ___assert_fail(6192, 5696, 484, 5960);
 } while (0);
 $height164 = $0 + ($21 * 36 | 0) + 32 | 0;
 $height165 = $0 + ($22 * 36 | 0) + 32 | 0;
 if ((HEAP32[$height164 >> 2] | 0) > (HEAP32[$height165 >> 2] | 0)) {
  HEAP32[$child2114 >> 2] = $21;
  HEAP32[$child1$i >> 2] = $22;
  HEAP32[$0 + ($22 * 36 | 0) + 20 >> 2] = $iA;
  __ZN6b2AABB7CombineERKS_S1_($add$ptr, $add$ptr16, $add$ptr118);
  __ZN6b2AABB7CombineERKS_S1_($add$ptr14, $add$ptr, $add$ptr116);
  $29 = HEAP32[$height17 >> 2] | 0;
  $30 = HEAP32[$height165 >> 2] | 0;
  $add180 = (($29 | 0) > ($30 | 0) ? $29 : $30) + 1 | 0;
  HEAP32[$height >> 2] = $add180;
  $31 = HEAP32[$height164 >> 2] | 0;
  $storemerge$in = ($add180 | 0) > ($31 | 0) ? $add180 : $31;
 } else {
  HEAP32[$child2114 >> 2] = $22;
  HEAP32[$child1$i >> 2] = $21;
  HEAP32[$0 + ($21 * 36 | 0) + 20 >> 2] = $iA;
  __ZN6b2AABB7CombineERKS_S1_($add$ptr, $add$ptr16, $add$ptr116);
  __ZN6b2AABB7CombineERKS_S1_($add$ptr14, $add$ptr, $add$ptr118);
  $32 = HEAP32[$height17 >> 2] | 0;
  $33 = HEAP32[$height164 >> 2] | 0;
  $add200 = (($32 | 0) > ($33 | 0) ? $32 : $33) + 1 | 0;
  HEAP32[$height >> 2] = $add200;
  $34 = HEAP32[$height165 >> 2] | 0;
  $storemerge$in = ($add200 | 0) > ($34 | 0) ? $add200 : $34;
 }
 HEAP32[$height18 >> 2] = $storemerge$in + 1;
 $retval$0 = $1;
 STACKTOP = sp;
 return $retval$0 | 0;
}
function __ZN11b2RopeJoint23InitVelocityConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $107 = 0, $109 = 0.0, $110 = 0.0, $111 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $28 = 0, $29 = 0, $3 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $6 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $69 = 0.0, $70 = 0.0, $71 = 0, $78 = 0.0, $79 = 0.0, $80 = 0, $84 = 0.0, $85 = 0.0, $86 = 0, $9 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $add$i = 0.0, $add$i114 = 0.0, $add73 = 0.0, $call$i$i = 0.0, $call$i$i104 = 0.0, $call$i$i25 = 0.0, $call2$i$i = 0.0, $call2$i$i27 = 0.0, $cond = 0.0, $div = 0.0, $m_impulse79 = 0, $m_indexA = 0, $m_indexB = 0, $m_invIA = 0, $m_invIB = 0, $m_invMassA = 0, $m_invMassB = 0, $m_u = 0, $mul$i75 = 0.0, $mul$i97 = 0.0, $mul1$i77 = 0.0, $mul2$i = 0.0, $mul80 = 0.0, $sub$i = 0.0, $sub$i111 = 0.0, $sub$i119 = 0.0, $sub$i31 = 0.0, $sub$i36 = 0.0, $sub$i88 = 0.0, $sub$i95 = 0.0, $sub3$i = 0.0, $sub3$i122 = 0.0, $sub3$i39 = 0.0, $vA$sroa$0$0$load148152 = 0.0, $vA$sroa$1$4$load149153 = 0.0, $vB$sroa$0$0$load146150 = 0.0, $vB$sroa$1$4$load147151 = 0.0, $velocities = 0, $wA$0 = 0.0, $wB$0 = 0.0, $y$i101 = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this + 48 >> 2] | 0;
 $1 = HEAP32[$0 + 8 >> 2] | 0;
 $m_indexA = $this + 96 | 0;
 HEAP32[$m_indexA >> 2] = $1;
 $2 = HEAP32[$this + 52 >> 2] | 0;
 $3 = HEAP32[$2 + 8 >> 2] | 0;
 $m_indexB = $this + 100 | 0;
 HEAP32[$m_indexB >> 2] = $3;
 $4 = $0 + 28 | 0;
 $6 = HEAP32[$4 >> 2] | 0;
 $9 = HEAP32[$4 + 4 >> 2] | 0;
 $10 = $this + 128 | 0;
 HEAP32[$10 >> 2] = $6;
 HEAP32[$10 + 4 >> 2] = $9;
 $14 = $2 + 28 | 0;
 $16 = HEAP32[$14 >> 2] | 0;
 $19 = HEAP32[$14 + 4 >> 2] | 0;
 $20 = $this + 136 | 0;
 HEAP32[$20 >> 2] = $16;
 HEAP32[$20 + 4 >> 2] = $19;
 $m_invMassA = $this + 144 | 0;
 HEAPF32[$m_invMassA >> 2] = +HEAPF32[$0 + 120 >> 2];
 $m_invMassB = $this + 148 | 0;
 HEAPF32[$m_invMassB >> 2] = +HEAPF32[$2 + 120 >> 2];
 $m_invIA = $this + 152 | 0;
 HEAPF32[$m_invIA >> 2] = +HEAPF32[$0 + 128 >> 2];
 $m_invIB = $this + 156 | 0;
 HEAPF32[$m_invIB >> 2] = +HEAPF32[$2 + 128 >> 2];
 $28 = HEAP32[$data + 24 >> 2] | 0;
 $29 = $28 + ($1 * 12 | 0) | 0;
 $35 = +HEAPF32[$29 >> 2];
 $36 = +HEAPF32[$29 + 4 >> 2];
 $37 = +HEAPF32[$28 + ($1 * 12 | 0) + 8 >> 2];
 $velocities = $data + 28 | 0;
 $38 = HEAP32[$velocities >> 2] | 0;
 $39 = $38 + ($1 * 12 | 0) | 0;
 $45 = +HEAPF32[$39 >> 2];
 $46 = +HEAPF32[$39 + 4 >> 2];
 $47 = +HEAPF32[$38 + ($1 * 12 | 0) + 8 >> 2];
 $48 = $28 + ($3 * 12 | 0) | 0;
 $54 = +HEAPF32[$48 >> 2];
 $55 = +HEAPF32[$48 + 4 >> 2];
 $56 = +HEAPF32[$28 + ($3 * 12 | 0) + 8 >> 2];
 $57 = $38 + ($3 * 12 | 0) | 0;
 $63 = +HEAPF32[$57 >> 2];
 $64 = +HEAPF32[$57 + 4 >> 2];
 $65 = +HEAPF32[$38 + ($3 * 12 | 0) + 8 >> 2];
 $call$i$i = +Math_sin(+$37);
 $call2$i$i = +Math_cos(+$37);
 $call$i$i25 = +Math_sin(+$56);
 $call2$i$i27 = +Math_cos(+$56);
 $sub$i = +HEAPF32[$this + 68 >> 2] - (HEAP32[tempDoublePtr >> 2] = $6, +HEAPF32[tempDoublePtr >> 2]);
 $sub3$i = +HEAPF32[$this + 72 >> 2] - (HEAP32[tempDoublePtr >> 2] = $9, +HEAPF32[tempDoublePtr >> 2]);
 $sub$i31 = $call2$i$i * $sub$i - $call$i$i * $sub3$i;
 $add$i = $call$i$i * $sub$i + $call2$i$i * $sub3$i;
 $69 = +$sub$i31;
 $70 = +$add$i;
 $71 = $this + 112 | 0;
 HEAPF32[$71 >> 2] = $69;
 HEAPF32[$71 + 4 >> 2] = $70;
 $sub$i36 = +HEAPF32[$this + 76 >> 2] - (HEAP32[tempDoublePtr >> 2] = $16, +HEAPF32[tempDoublePtr >> 2]);
 $sub3$i39 = +HEAPF32[$this + 80 >> 2] - +HEAPF32[$this + 140 >> 2];
 $sub$i111 = $call2$i$i27 * $sub$i36 - $call$i$i25 * $sub3$i39;
 $add$i114 = $call$i$i25 * $sub$i36 + $call2$i$i27 * $sub3$i39;
 $78 = +$sub$i111;
 $79 = +$add$i114;
 $80 = $this + 120 | 0;
 HEAPF32[$80 >> 2] = $78;
 HEAPF32[$80 + 4 >> 2] = $79;
 $m_u = $this + 104 | 0;
 $sub$i119 = $54 + $sub$i111 - $35 - $sub$i31;
 $sub3$i122 = $55 + $add$i114 - $36 - $add$i;
 $84 = +$sub$i119;
 $85 = +$sub3$i122;
 $86 = $m_u;
 HEAPF32[$86 >> 2] = $84;
 HEAPF32[$86 + 4 >> 2] = $85;
 $y$i101 = $this + 108 | 0;
 $call$i$i104 = +Math_sqrt(+($sub$i119 * $sub$i119 + $sub3$i122 * $sub3$i122));
 HEAPF32[$this + 88 >> 2] = $call$i$i104;
 HEAP32[$this + 164 >> 2] = $call$i$i104 - +HEAPF32[$this + 84 >> 2] > 0.0 ? 2 : 0;
 if (!($call$i$i104 > .004999999888241291)) {
  HEAPF32[$m_u >> 2] = 0.0;
  HEAPF32[$y$i101 >> 2] = 0.0;
  HEAPF32[$this + 160 >> 2] = 0.0;
  HEAPF32[$this + 92 >> 2] = 0.0;
  STACKTOP = sp;
  return;
 }
 $div = 1.0 / $call$i$i104;
 $mul$i97 = $div * $sub$i119;
 HEAPF32[$m_u >> 2] = $mul$i97;
 $mul2$i = $div * $sub3$i122;
 HEAPF32[$y$i101 >> 2] = $mul2$i;
 $sub$i95 = $sub$i31 * $mul2$i - $add$i * $mul$i97;
 $sub$i88 = $mul2$i * $sub$i111 - $mul$i97 * $add$i114;
 $91 = +HEAPF32[$m_invMassA >> 2];
 $92 = +HEAPF32[$m_invIA >> 2];
 $93 = +HEAPF32[$m_invMassB >> 2];
 $94 = +HEAPF32[$m_invIB >> 2];
 $add73 = $93 + ($91 + $sub$i95 * $sub$i95 * $92) + $sub$i88 * $sub$i88 * $94;
 if ($add73 != 0.0) $cond = 1.0 / $add73; else $cond = 0.0;
 HEAPF32[$this + 160 >> 2] = $cond;
 if ((HEAP8[$data + 20 >> 0] | 0) == 0) {
  HEAPF32[$this + 92 >> 2] = 0.0;
  $vA$sroa$0$0$load148152 = $45;
  $vA$sroa$1$4$load149153 = $46;
  $vB$sroa$0$0$load146150 = $63;
  $vB$sroa$1$4$load147151 = $64;
  $wA$0 = $47;
  $wB$0 = $65;
 } else {
  $m_impulse79 = $this + 92 | 0;
  $mul80 = +HEAPF32[$data + 8 >> 2] * +HEAPF32[$m_impulse79 >> 2];
  HEAPF32[$m_impulse79 >> 2] = $mul80;
  $mul$i75 = $mul$i97 * $mul80;
  $mul1$i77 = $mul80 * $mul2$i;
  $vA$sroa$0$0$load148152 = $45 - $mul$i75 * $91;
  $vA$sroa$1$4$load149153 = $46 - $mul1$i77 * $91;
  $vB$sroa$0$0$load146150 = $63 + $mul$i75 * $93;
  $vB$sroa$1$4$load147151 = $64 + $mul1$i77 * $93;
  $wA$0 = $47 - $92 * ($mul1$i77 * $sub$i31 - $mul$i75 * $add$i);
  $wB$0 = $65 + $94 * ($mul1$i77 * $sub$i111 - $mul$i75 * $add$i114);
 }
 $100 = +$vA$sroa$0$0$load148152;
 $101 = +$vA$sroa$1$4$load149153;
 $102 = (HEAP32[$velocities >> 2] | 0) + ((HEAP32[$m_indexA >> 2] | 0) * 12 | 0) | 0;
 HEAPF32[$102 >> 2] = $100;
 HEAPF32[$102 + 4 >> 2] = $101;
 $107 = HEAP32[$velocities >> 2] | 0;
 HEAPF32[$107 + ((HEAP32[$m_indexA >> 2] | 0) * 12 | 0) + 8 >> 2] = $wA$0;
 $109 = +$vB$sroa$0$0$load146150;
 $110 = +$vB$sroa$1$4$load147151;
 $111 = $107 + ((HEAP32[$m_indexB >> 2] | 0) * 12 | 0) | 0;
 HEAPF32[$111 >> 2] = $109;
 HEAPF32[$111 + 4 >> 2] = $110;
 HEAPF32[(HEAP32[$velocities >> 2] | 0) + ((HEAP32[$m_indexB >> 2] | 0) * 12 | 0) + 8 >> 2] = $wB$0;
 STACKTOP = sp;
 return;
}
function __ZN11b2WeldJoint24SolveVelocityConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $33 = 0.0, $34 = 0.0, $36 = 0.0, $43 = 0.0, $45 = 0.0, $46 = 0.0, $48 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0.0, $9 = 0.0, $add$i$i = 0.0, $add$i163 = 0.0, $add12$i = 0.0, $add22 = 0.0, $add3$i$i = 0.0, $add5$i$i = 0.0, $m_indexA = 0, $m_indexB = 0, $mul$i127$pn = 0.0, $mul$i146$pn = 0.0, $mul1$i129$pn = 0.0, $mul1$i148$pn = 0.0, $mul15 = 0.0, $sub$i152 = 0.0, $sub$i152$pn = 0.0, $sub$i168 = 0.0, $sub$i69 = 0.0, $sub$i81 = 0.0, $sub2$i = 0.0, $sub2$i154 = 0.0, $sub2$i154$pn = 0.0, $sub20 = 0.0, $sub3$i171 = 0.0, $sub3$i83 = 0.0, $sub53 = 0.0, $v = 0, $v90 = 0, $vA$sroa$0$0$load225232 = 0.0, $vA$sroa$1$4$load229233 = 0.0, $vB$sroa$0$0$load217230 = 0.0, $vB$sroa$1$4$load221231 = 0.0, $velocities = 0, $w86 = 0, $w94 = 0, $wA$0 = 0.0, $wB$0 = 0.0, $x2$i63 = 0, $x28 = 0, $y3$i66 = 0, $y31 = 0, $z13 = 0, $z5$i = 0, sp = 0;
 sp = STACKTOP;
 $m_indexA = $this + 116 | 0;
 $0 = HEAP32[$m_indexA >> 2] | 0;
 $velocities = $data + 28 | 0;
 $1 = HEAP32[$velocities >> 2] | 0;
 $v = $1 + ($0 * 12 | 0) | 0;
 $2 = $v;
 $8 = +HEAPF32[$2 >> 2];
 $9 = +HEAPF32[$2 + 4 >> 2];
 $10 = +HEAPF32[$1 + ($0 * 12 | 0) + 8 >> 2];
 $m_indexB = $this + 120 | 0;
 $11 = HEAP32[$m_indexB >> 2] | 0;
 $12 = $1 + ($11 * 12 | 0) | 0;
 $18 = +HEAPF32[$12 >> 2];
 $19 = +HEAPF32[$12 + 4 >> 2];
 $20 = +HEAPF32[$1 + ($11 * 12 | 0) + 8 >> 2];
 $21 = +HEAPF32[$this + 156 >> 2];
 $22 = +HEAPF32[$this + 160 >> 2];
 $23 = +HEAPF32[$this + 164 >> 2];
 $24 = +HEAPF32[$this + 168 >> 2];
 if (+HEAPF32[$this + 68 >> 2] > 0.0) {
  $z13 = $this + 112 | 0;
  $29 = +HEAPF32[$z13 >> 2];
  $30 = +HEAPF32[$this + 204 >> 2] * ($20 - $10 + +HEAPF32[$this + 76 >> 2] + +HEAPF32[$this + 100 >> 2] * $29);
  $mul15 = -$30;
  HEAPF32[$z13 >> 2] = $29 - $30;
  $sub20 = $10 - $23 * $mul15;
  $add22 = $20 + $24 * $mul15;
  $31 = +HEAPF32[$this + 136 >> 2];
  $33 = +HEAPF32[$this + 132 >> 2];
  $34 = +HEAPF32[$this + 128 >> 2];
  $36 = +HEAPF32[$this + 124 >> 2];
  $sub$i168 = $34 * $sub20 + ($18 - $31 * $add22 - $8);
  $sub3$i171 = $19 + $33 * $add22 - $9 - $36 * $sub20;
  $add$i163 = +HEAPF32[$this + 172 >> 2] * $sub$i168 + +HEAPF32[$this + 184 >> 2] * $sub3$i171;
  $add12$i = +HEAPF32[$this + 176 >> 2] * $sub$i168 + +HEAPF32[$this + 188 >> 2] * $sub3$i171;
  $sub$i152 = -$add$i163;
  $sub2$i154 = -$add12$i;
  $x28 = $this + 104 | 0;
  HEAPF32[$x28 >> 2] = +HEAPF32[$x28 >> 2] - $add$i163;
  $y31 = $this + 108 | 0;
  HEAPF32[$y31 >> 2] = +HEAPF32[$y31 >> 2] - $add12$i;
  $sub$i152$pn = $sub$i152;
  $sub2$i154$pn = $sub2$i154;
  $wA$0 = $sub20 - $23 * ($36 * $sub2$i154 - $34 * $sub$i152);
  $wB$0 = $add22 + $24 * ($33 * $sub2$i154 - $31 * $sub$i152);
  $mul$i127$pn = $22 * $sub$i152$pn;
  $mul1$i129$pn = $22 * $sub2$i154$pn;
  $mul$i146$pn = $21 * $sub$i152$pn;
  $mul1$i148$pn = $21 * $sub2$i154$pn;
  $vB$sroa$0$0$load217230 = $18 + $mul$i127$pn;
  $vB$sroa$1$4$load221231 = $19 + $mul1$i129$pn;
  $vA$sroa$0$0$load225232 = $8 - $mul$i146$pn;
  $vA$sroa$1$4$load229233 = $9 - $mul1$i148$pn;
  $61 = +$vA$sroa$0$0$load225232;
  $62 = +$vA$sroa$1$4$load229233;
  $63 = $v;
  $64 = $63;
  HEAPF32[$64 >> 2] = $61;
  $65 = $63 + 4 | 0;
  $66 = $65;
  HEAPF32[$66 >> 2] = $62;
  $67 = HEAP32[$m_indexA >> 2] | 0;
  $68 = HEAP32[$velocities >> 2] | 0;
  $w86 = $68 + ($67 * 12 | 0) + 8 | 0;
  HEAPF32[$w86 >> 2] = $wA$0;
  $69 = HEAP32[$m_indexB >> 2] | 0;
  $v90 = $68 + ($69 * 12 | 0) | 0;
  $70 = +$vB$sroa$0$0$load217230;
  $71 = +$vB$sroa$1$4$load221231;
  $72 = $v90;
  $73 = $72;
  HEAPF32[$73 >> 2] = $70;
  $74 = $72 + 4 | 0;
  $75 = $74;
  HEAPF32[$75 >> 2] = $71;
  $76 = HEAP32[$m_indexB >> 2] | 0;
  $77 = HEAP32[$velocities >> 2] | 0;
  $w94 = $77 + ($76 * 12 | 0) + 8 | 0;
  HEAPF32[$w94 >> 2] = $wB$0;
  STACKTOP = sp;
  return;
 } else {
  $43 = +HEAPF32[$this + 136 >> 2];
  $45 = +HEAPF32[$this + 132 >> 2];
  $46 = +HEAPF32[$this + 128 >> 2];
  $48 = +HEAPF32[$this + 124 >> 2];
  $sub$i81 = $18 - $20 * $43 - $8 + $10 * $46;
  $sub3$i83 = $19 + $20 * $45 - $9 - $10 * $48;
  $sub53 = $20 - $10;
  $add$i$i = $sub$i81 * +HEAPF32[$this + 172 >> 2] + $sub3$i83 * +HEAPF32[$this + 184 >> 2] + $sub53 * +HEAPF32[$this + 196 >> 2];
  $add3$i$i = $sub$i81 * +HEAPF32[$this + 176 >> 2] + $sub3$i83 * +HEAPF32[$this + 188 >> 2] + $sub53 * +HEAPF32[$this + 200 >> 2];
  $add5$i$i = $sub$i81 * +HEAPF32[$this + 180 >> 2] + $sub3$i83 * +HEAPF32[$this + 192 >> 2] + $sub53 * +HEAPF32[$this + 204 >> 2];
  $sub$i69 = -$add$i$i;
  $sub2$i = -$add3$i$i;
  $x2$i63 = $this + 104 | 0;
  HEAPF32[$x2$i63 >> 2] = +HEAPF32[$x2$i63 >> 2] - $add$i$i;
  $y3$i66 = $this + 108 | 0;
  HEAPF32[$y3$i66 >> 2] = +HEAPF32[$y3$i66 >> 2] - $add3$i$i;
  $z5$i = $this + 112 | 0;
  HEAPF32[$z5$i >> 2] = +HEAPF32[$z5$i >> 2] - $add5$i$i;
  $sub$i152$pn = $sub$i69;
  $sub2$i154$pn = $sub2$i;
  $wA$0 = $10 - $23 * ($48 * $sub2$i - $46 * $sub$i69 - $add5$i$i);
  $wB$0 = $20 + $24 * ($45 * $sub2$i - $43 * $sub$i69 - $add5$i$i);
  $mul$i127$pn = $22 * $sub$i152$pn;
  $mul1$i129$pn = $22 * $sub2$i154$pn;
  $mul$i146$pn = $21 * $sub$i152$pn;
  $mul1$i148$pn = $21 * $sub2$i154$pn;
  $vB$sroa$0$0$load217230 = $18 + $mul$i127$pn;
  $vB$sroa$1$4$load221231 = $19 + $mul1$i129$pn;
  $vA$sroa$0$0$load225232 = $8 - $mul$i146$pn;
  $vA$sroa$1$4$load229233 = $9 - $mul1$i148$pn;
  $61 = +$vA$sroa$0$0$load225232;
  $62 = +$vA$sroa$1$4$load229233;
  $63 = $v;
  $64 = $63;
  HEAPF32[$64 >> 2] = $61;
  $65 = $63 + 4 | 0;
  $66 = $65;
  HEAPF32[$66 >> 2] = $62;
  $67 = HEAP32[$m_indexA >> 2] | 0;
  $68 = HEAP32[$velocities >> 2] | 0;
  $w86 = $68 + ($67 * 12 | 0) + 8 | 0;
  HEAPF32[$w86 >> 2] = $wA$0;
  $69 = HEAP32[$m_indexB >> 2] | 0;
  $v90 = $68 + ($69 * 12 | 0) | 0;
  $70 = +$vB$sroa$0$0$load217230;
  $71 = +$vB$sroa$1$4$load221231;
  $72 = $v90;
  $73 = $72;
  HEAPF32[$73 >> 2] = $70;
  $74 = $72 + 4 | 0;
  $75 = $74;
  HEAPF32[$75 >> 2] = $71;
  $76 = HEAP32[$m_indexB >> 2] | 0;
  $77 = HEAP32[$velocities >> 2] | 0;
  $w94 = $77 + ($76 * 12 | 0) + 8 | 0;
  HEAPF32[$w94 >> 2] = $wB$0;
  STACKTOP = sp;
  return;
 }
}
function __Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6_($manifold, $edgeA, $xfA, $circleB, $xfB) {
 $manifold = $manifold | 0;
 $edgeA = $edgeA | 0;
 $xfA = $xfA | 0;
 $circleB = $circleB | 0;
 $xfB = $xfB | 0;
 var $0 = 0.0, $1 = 0.0, $11 = 0, $13 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0.0, $21 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $3 = 0.0, $30 = 0, $36 = 0.0, $38 = 0, $42 = 0, $47 = 0, $48 = 0, $53 = 0, $59 = 0.0, $61 = 0, $65 = 0, $70 = 0, $71 = 0, $75 = 0.0, $76 = 0.0, $77 = 0, $8 = 0.0, $81 = 0, $85 = 0, $9 = 0.0, $90 = 0, $91 = 0, $add = 0.0, $add$i134 = 0.0, $add$i221 = 0.0, $add$i236 = 0.0, $add$i71 = 0.0, $add16$i = 0.0, $call$i$i$i = 0.0, $div = 0.0, $div$i = 0.0, $id = 0, $id51 = 0, $id93 = 0, $m_p = 0, $n$sroa$0$0$load255336 = 0.0, $n$sroa$0$0$load255337 = 0.0, $n$sroa$1$4$load258338 = 0.0, $n$sroa$1$4$load258339 = 0.0, $pointCount = 0, $sub = 0.0, $sub$i169 = 0.0, $sub$i224 = 0.0, $sub$i247 = 0.0, $sub$i66 = 0.0, $sub$i98 = 0.0, $sub3$i101 = 0.0, $sub3$i172 = 0.0, $sub3$i227 = 0.0, $sub3$i250 = 0.0, $sub4$i = 0.0, sp = 0;
 sp = STACKTOP;
 $pointCount = $manifold + 60 | 0;
 HEAP32[$pointCount >> 2] = 0;
 $m_p = $circleB + 12 | 0;
 $0 = +HEAPF32[$xfB + 12 >> 2];
 $1 = +HEAPF32[$m_p >> 2];
 $2 = +HEAPF32[$xfB + 8 >> 2];
 $3 = +HEAPF32[$circleB + 16 >> 2];
 $sub$i66 = +HEAPF32[$xfB >> 2] + ($0 * $1 - $2 * $3) - +HEAPF32[$xfA >> 2];
 $sub4$i = $1 * $2 + $0 * $3 + +HEAPF32[$xfB + 4 >> 2] - +HEAPF32[$xfA + 4 >> 2];
 $8 = +HEAPF32[$xfA + 12 >> 2];
 $9 = +HEAPF32[$xfA + 8 >> 2];
 $add$i71 = $sub$i66 * $8 + $sub4$i * $9;
 $add16$i = $8 * $sub4$i - $sub$i66 * $9;
 $11 = $edgeA + 12 | 0;
 $13 = HEAP32[$11 >> 2] | 0;
 $16 = HEAP32[$11 + 4 >> 2] | 0;
 $17 = (HEAP32[tempDoublePtr >> 2] = $13, +HEAPF32[tempDoublePtr >> 2]);
 $18 = (HEAP32[tempDoublePtr >> 2] = $16, +HEAPF32[tempDoublePtr >> 2]);
 $19 = $edgeA + 20 | 0;
 $21 = HEAP32[$19 >> 2] | 0;
 $24 = HEAP32[$19 + 4 >> 2] | 0;
 $25 = (HEAP32[tempDoublePtr >> 2] = $21, +HEAPF32[tempDoublePtr >> 2]);
 $26 = (HEAP32[tempDoublePtr >> 2] = $24, +HEAPF32[tempDoublePtr >> 2]);
 $sub$i247 = $25 - $17;
 $sub3$i250 = $26 - $18;
 $add$i236 = $sub$i247 * ($25 - $add$i71) + $sub3$i250 * ($26 - $add16$i);
 $sub$i224 = $add$i71 - $17;
 $sub3$i227 = $add16$i - $18;
 $add$i221 = $sub$i224 * $sub$i247 + $sub3$i227 * $sub3$i250;
 $add = +HEAPF32[$edgeA + 8 >> 2] + +HEAPF32[$circleB + 8 >> 2];
 if ($add$i221 <= 0.0) {
  if ($sub$i224 * $sub$i224 + $sub3$i227 * $sub3$i227 > $add * $add) {
   STACKTOP = sp;
   return;
  }
  if ((HEAP8[$edgeA + 44 >> 0] | 0) != 0) {
   $30 = $edgeA + 28 | 0;
   $36 = +HEAPF32[$30 >> 2];
   if (($17 - $add$i71) * ($17 - $36) + ($18 - $add16$i) * ($18 - +HEAPF32[$30 + 4 >> 2]) > 0.0) {
    STACKTOP = sp;
    return;
   }
  }
  HEAP32[$pointCount >> 2] = 1;
  HEAP32[$manifold + 56 >> 2] = 0;
  HEAPF32[$manifold + 40 >> 2] = 0.0;
  HEAPF32[$manifold + 44 >> 2] = 0.0;
  $38 = $manifold + 48 | 0;
  HEAP32[$38 >> 2] = $13;
  HEAP32[$38 + 4 >> 2] = $16;
  $id = $manifold + 16 | 0;
  HEAP32[$id >> 2] = 0;
  HEAP8[$id >> 0] = 0;
  HEAP8[$id + 1 >> 0] = 0;
  HEAP8[$id + 2 >> 0] = 0;
  HEAP8[$id + 3 >> 0] = 0;
  $42 = $m_p;
  $47 = HEAP32[$42 + 4 >> 2] | 0;
  $48 = $manifold;
  HEAP32[$48 >> 2] = HEAP32[$42 >> 2];
  HEAP32[$48 + 4 >> 2] = $47;
  STACKTOP = sp;
  return;
 }
 if ($add$i236 <= 0.0) {
  $sub$i169 = $add$i71 - $25;
  $sub3$i172 = $add16$i - $26;
  if ($sub$i169 * $sub$i169 + $sub3$i172 * $sub3$i172 > $add * $add) {
   STACKTOP = sp;
   return;
  }
  if ((HEAP8[$edgeA + 45 >> 0] | 0) != 0) {
   $53 = $edgeA + 36 | 0;
   $59 = +HEAPF32[$53 >> 2];
   if ($sub$i169 * ($59 - $25) + $sub3$i172 * (+HEAPF32[$53 + 4 >> 2] - $26) > 0.0) {
    STACKTOP = sp;
    return;
   }
  }
  HEAP32[$pointCount >> 2] = 1;
  HEAP32[$manifold + 56 >> 2] = 0;
  HEAPF32[$manifold + 40 >> 2] = 0.0;
  HEAPF32[$manifold + 44 >> 2] = 0.0;
  $61 = $manifold + 48 | 0;
  HEAP32[$61 >> 2] = $21;
  HEAP32[$61 + 4 >> 2] = $24;
  $id51 = $manifold + 16 | 0;
  HEAP32[$id51 >> 2] = 0;
  HEAP8[$id51 >> 0] = 1;
  HEAP8[$id51 + 1 >> 0] = 0;
  HEAP8[$id51 + 2 >> 0] = 0;
  HEAP8[$id51 + 3 >> 0] = 0;
  $65 = $m_p;
  $70 = HEAP32[$65 + 4 >> 2] | 0;
  $71 = $manifold;
  HEAP32[$71 >> 2] = HEAP32[$65 >> 2];
  HEAP32[$71 + 4 >> 2] = $70;
  STACKTOP = sp;
  return;
 }
 $add$i134 = $sub$i247 * $sub$i247 + $sub3$i250 * $sub3$i250;
 if (!($add$i134 > 0.0)) ___assert_fail(5176, 5192, 127, 5240);
 $div = 1.0 / $add$i134;
 $sub$i98 = $add$i71 - ($17 * $add$i236 + $25 * $add$i221) * $div;
 $sub3$i101 = $add16$i - ($18 * $add$i236 + $26 * $add$i221) * $div;
 if ($sub$i98 * $sub$i98 + $sub3$i101 * $sub3$i101 > $add * $add) {
  STACKTOP = sp;
  return;
 }
 $sub = -$sub3$i250;
 if ($sub$i247 * $sub3$i227 + $sub$i224 * $sub < 0.0) {
  $n$sroa$0$0$load255337 = $sub3$i250;
  $n$sroa$1$4$load258339 = -$sub$i247;
 } else {
  $n$sroa$0$0$load255337 = $sub;
  $n$sroa$1$4$load258339 = $sub$i247;
 }
 $call$i$i$i = +Math_sqrt(+($n$sroa$1$4$load258339 * $n$sroa$1$4$load258339 + $n$sroa$0$0$load255337 * $n$sroa$0$0$load255337));
 if ($call$i$i$i < 1.1920928955078125e-7) {
  $n$sroa$0$0$load255336 = $n$sroa$0$0$load255337;
  $n$sroa$1$4$load258338 = $n$sroa$1$4$load258339;
 } else {
  $div$i = 1.0 / $call$i$i$i;
  $n$sroa$0$0$load255336 = $n$sroa$0$0$load255337 * $div$i;
  $n$sroa$1$4$load258338 = $n$sroa$1$4$load258339 * $div$i;
 }
 HEAP32[$pointCount >> 2] = 1;
 HEAP32[$manifold + 56 >> 2] = 1;
 $75 = +$n$sroa$0$0$load255336;
 $76 = +$n$sroa$1$4$load258338;
 $77 = $manifold + 40 | 0;
 HEAPF32[$77 >> 2] = $75;
 HEAPF32[$77 + 4 >> 2] = $76;
 $81 = $manifold + 48 | 0;
 HEAP32[$81 >> 2] = $13;
 HEAP32[$81 + 4 >> 2] = $16;
 $id93 = $manifold + 16 | 0;
 HEAP32[$id93 >> 2] = 0;
 HEAP8[$id93 >> 0] = 0;
 HEAP8[$id93 + 1 >> 0] = 0;
 HEAP8[$id93 + 2 >> 0] = 1;
 HEAP8[$id93 + 3 >> 0] = 0;
 $85 = $m_p;
 $90 = HEAP32[$85 + 4 >> 2] | 0;
 $91 = $manifold;
 HEAP32[$91 >> 2] = HEAP32[$85 >> 2];
 HEAP32[$91 + 4 >> 2] = $90;
 STACKTOP = sp;
 return;
}
function __ZN6b2Body13ResetMassDataEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $11 = 0, $16 = 0.0, $17 = 0, $19 = 0.0, $25 = 0.0, $26 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $43 = 0.0, $44 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $53 = 0, $57 = 0.0, $6 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $7 = 0, $I = 0, $add = 0.0, $add$i18 = 0.0, $add$i33 = 0.0, $add17$i = 0.0, $add19 = 0.0, $add4$i36 = 0.0, $c47 = 0, $div = 0.0, $f$057 = 0, $f$061 = 0, $localCenter12$sroa$0$0$load4651 = 0.0, $localCenter12$sroa$0$0$load4652 = 0.0, $localCenter12$sroa$0$0$load4653$lcssa66 = 0.0, $localCenter12$sroa$0$0$load465360 = 0.0, $localCenter12$sroa$1$4$load5054 = 0.0, $localCenter12$sroa$1$4$load5055 = 0.0, $localCenter12$sroa$1$4$load5056$lcssa67 = 0.0, $localCenter12$sroa$1$4$load505659 = 0.0, $m_I = 0, $m_invI = 0, $m_invMass = 0, $m_mass = 0, $m_sweep = 0, $massData = 0, $storemerge = 0.0, $sub = 0.0, $x$i37 = 0, $x2$i = 0, $y$i39 = 0, $y3$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $massData = sp;
 $m_mass = $this + 116 | 0;
 $m_invMass = $this + 120 | 0;
 $m_I = $this + 124 | 0;
 $m_invI = $this + 128 | 0;
 $m_sweep = $this + 28 | 0;
 HEAPF32[$m_sweep >> 2] = 0.0;
 HEAPF32[$this + 32 >> 2] = 0.0;
 HEAP32[$m_mass + 0 >> 2] = 0;
 HEAP32[$m_mass + 4 >> 2] = 0;
 HEAP32[$m_mass + 8 >> 2] = 0;
 HEAP32[$m_mass + 12 >> 2] = 0;
 $0 = HEAP32[$this >> 2] | 0;
 if (($0 | 0) == 2) {
  $f$057 = HEAP32[$this + 100 >> 2] | 0;
  if (($f$057 | 0) == 0) {
   $61 = 0.0;
   $localCenter12$sroa$0$0$load4653$lcssa66 = 0.0;
   $localCenter12$sroa$1$4$load5056$lcssa67 = 0.0;
   label = 11;
  } else {
   $x$i37 = $massData + 4 | 0;
   $y$i39 = $massData + 8 | 0;
   $I = $massData + 12 | 0;
   $62 = 0.0;
   $63 = 0.0;
   $f$061 = $f$057;
   $localCenter12$sroa$0$0$load465360 = 0.0;
   $localCenter12$sroa$1$4$load505659 = 0.0;
   while (1) {
    $16 = +HEAPF32[$f$061 >> 2];
    if ($16 == 0.0) {
     $25 = $63;
     $64 = $62;
     $localCenter12$sroa$0$0$load4652 = $localCenter12$sroa$0$0$load465360;
     $localCenter12$sroa$1$4$load5055 = $localCenter12$sroa$1$4$load505659;
    } else {
     $17 = HEAP32[$f$061 + 12 >> 2] | 0;
     FUNCTION_TABLE_viid[HEAP32[(HEAP32[$17 >> 2] | 0) + 28 >> 2] & 63]($17, $massData, $16);
     $19 = +HEAPF32[$massData >> 2];
     $add = $19 + +HEAPF32[$m_mass >> 2];
     HEAPF32[$m_mass >> 2] = $add;
     $add$i33 = $localCenter12$sroa$0$0$load465360 + $19 * +HEAPF32[$x$i37 >> 2];
     $add4$i36 = $localCenter12$sroa$1$4$load505659 + $19 * +HEAPF32[$y$i39 >> 2];
     $add19 = +HEAPF32[$I >> 2] + +HEAPF32[$m_I >> 2];
     HEAPF32[$m_I >> 2] = $add19;
     $25 = $add;
     $64 = $add19;
     $localCenter12$sroa$0$0$load4652 = $add$i33;
     $localCenter12$sroa$1$4$load5055 = $add4$i36;
    }
    $f$061 = HEAP32[$f$061 + 4 >> 2] | 0;
    if (($f$061 | 0) == 0) break; else {
     $62 = $64;
     $63 = $25;
     $localCenter12$sroa$0$0$load465360 = $localCenter12$sroa$0$0$load4652;
     $localCenter12$sroa$1$4$load505659 = $localCenter12$sroa$1$4$load5055;
    }
   }
   if ($25 > 0.0) {
    $div = 1.0 / $25;
    HEAPF32[$m_invMass >> 2] = $div;
    $26 = $64;
    $28 = $25;
    $localCenter12$sroa$0$0$load4651 = $localCenter12$sroa$0$0$load4652 * $div;
    $localCenter12$sroa$1$4$load5054 = $localCenter12$sroa$1$4$load5055 * $div;
   } else {
    $61 = $64;
    $localCenter12$sroa$0$0$load4653$lcssa66 = $localCenter12$sroa$0$0$load4652;
    $localCenter12$sroa$1$4$load5056$lcssa67 = $localCenter12$sroa$1$4$load5055;
    label = 11;
   }
  }
  if ((label | 0) == 11) {
   HEAPF32[$m_mass >> 2] = 1.0;
   HEAPF32[$m_invMass >> 2] = 1.0;
   $26 = $61;
   $28 = 1.0;
   $localCenter12$sroa$0$0$load4651 = $localCenter12$sroa$0$0$load4653$lcssa66;
   $localCenter12$sroa$1$4$load5054 = $localCenter12$sroa$1$4$load5056$lcssa67;
  }
  do if ($26 > 0.0) if ((HEAP16[$this + 4 >> 1] & 16) == 0) {
   $sub = $26 - ($localCenter12$sroa$1$4$load5054 * $localCenter12$sroa$1$4$load5054 + $localCenter12$sroa$0$0$load4651 * $localCenter12$sroa$0$0$load4651) * $28;
   HEAPF32[$m_I >> 2] = $sub;
   if ($sub > 0.0) {
    $storemerge = 1.0 / $sub;
    break;
   } else ___assert_fail(11848, 11408, 319, 11832);
  } else label = 17; else label = 17; while (0);
  if ((label | 0) == 17) {
   HEAPF32[$m_I >> 2] = 0.0;
   $storemerge = 0.0;
  }
  HEAPF32[$m_invI >> 2] = $storemerge;
  $c47 = $this + 44 | 0;
  $29 = $c47;
  $35 = +HEAPF32[$29 >> 2];
  $36 = +HEAPF32[$29 + 4 >> 2];
  $37 = +$localCenter12$sroa$0$0$load4651;
  $38 = +$localCenter12$sroa$1$4$load5054;
  $39 = $m_sweep;
  HEAPF32[$39 >> 2] = $37;
  HEAPF32[$39 + 4 >> 2] = $38;
  $43 = +HEAPF32[$this + 24 >> 2];
  $44 = +HEAPF32[$this + 20 >> 2];
  $add$i18 = +HEAPF32[$this + 12 >> 2] + ($43 * $localCenter12$sroa$0$0$load4651 - $44 * $localCenter12$sroa$1$4$load5054);
  $add17$i = $localCenter12$sroa$0$0$load4651 * $44 + $43 * $localCenter12$sroa$1$4$load5054 + +HEAPF32[$this + 16 >> 2];
  $47 = +$add$i18;
  $48 = +$add17$i;
  $49 = $c47;
  HEAPF32[$49 >> 2] = $47;
  HEAPF32[$49 + 4 >> 2] = $48;
  $53 = $this + 36 | 0;
  HEAPF32[$53 >> 2] = $47;
  HEAPF32[$53 + 4 >> 2] = $48;
  $57 = +HEAPF32[$this + 72 >> 2];
  $x2$i = $this + 64 | 0;
  HEAPF32[$x2$i >> 2] = +HEAPF32[$x2$i >> 2] - $57 * ($add17$i - $36);
  $y3$i = $this + 68 | 0;
  HEAPF32[$y3$i >> 2] = $57 * ($add$i18 - $35) + +HEAPF32[$y3$i >> 2];
  STACKTOP = sp;
  return;
 } else if (($0 | 0) == 1 | ($0 | 0) == 0) {
  $1 = $this + 12 | 0;
  $3 = HEAP32[$1 >> 2] | 0;
  $6 = HEAP32[$1 + 4 >> 2] | 0;
  $7 = $this + 36 | 0;
  HEAP32[$7 >> 2] = $3;
  HEAP32[$7 + 4 >> 2] = $6;
  $11 = $this + 44 | 0;
  HEAP32[$11 >> 2] = $3;
  HEAP32[$11 + 4 >> 2] = $6;
  HEAPF32[$this + 52 >> 2] = +HEAPF32[$this + 56 >> 2];
  STACKTOP = sp;
  return;
 } else ___assert_fail(11800, 11408, 284, 11832);
}
function __ZN15b2RevoluteJoint24SolvePositionConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $49 = 0.0, $50 = 0.0, $51 = 0, $56 = 0, $58 = 0.0, $59 = 0.0, $60 = 0, $66 = 0, $8 = 0.0, $9 = 0.0, $aA$0 = 0.0, $aB$0 = 0.0, $add$i114 = 0.0, $add$i134 = 0.0, $add30 = 0.0, $add62 = 0.0, $add71 = 0.0, $add97 = 0.0, $angularError$0 = 0.0, $angularError$1 = 0.0, $c = 0, $call$i = 0.0, $call$i$i83 = 0.0, $call$i147 = 0.0, $call2$i = 0.0, $call2$i149 = 0.0, $cond$i$i = 0.0, $cond$i$i42 = 0.0, $cond$i$i85 = 0.0, $cond$i2$i = 0.0, $det$0$i = 0.0, $limitImpulse$0 = 0.0, $m_indexA = 0, $m_indexB = 0, $m_invIA = 0, $m_invIB = 0, $mul = 0.0, $mul78 = 0.0, $positions = 0, $sub$i112 = 0.0, $sub$i119 = 0.0, $sub$i131 = 0.0, $sub$i139 = 0.0, $sub$i71 = 0.0, $sub$i77 = 0.0, $sub$i89 = 0.0, $sub16 = 0.0, $sub2$i = 0.0, $sub20 = 0.0, $sub28 = 0.0, $sub3$i = 0.0, $sub3$i122 = 0.0, $sub3$i142 = 0.0, $sub40 = 0.0, $sub41 = 0.0, $sub81 = 0.0, sp = 0;
 sp = STACKTOP;
 $m_indexA = $this + 128 | 0;
 $0 = HEAP32[$m_indexA >> 2] | 0;
 $positions = $data + 24 | 0;
 $1 = HEAP32[$positions >> 2] | 0;
 $c = $1 + ($0 * 12 | 0) | 0;
 $2 = $c;
 $8 = +HEAPF32[$2 >> 2];
 $9 = +HEAPF32[$2 + 4 >> 2];
 $10 = +HEAPF32[$1 + ($0 * 12 | 0) + 8 >> 2];
 $m_indexB = $this + 132 | 0;
 $11 = HEAP32[$m_indexB >> 2] | 0;
 $12 = $1 + ($11 * 12 | 0) | 0;
 $18 = +HEAPF32[$12 >> 2];
 $19 = +HEAPF32[$12 + 4 >> 2];
 $20 = +HEAPF32[$1 + ($11 * 12 | 0) + 8 >> 2];
 $m_invIA = $this + 176 | 0;
 $m_invIB = $this + 180 | 0;
 if ((HEAP8[$this + 112 >> 0] | 0) == 0) {
  $45 = +HEAPF32[$m_invIA >> 2];
  $46 = +HEAPF32[$m_invIB >> 2];
  $aA$0 = $10;
  $aB$0 = $20;
  $angularError$1 = 0.0;
 } else {
  $22 = +HEAPF32[$m_invIB >> 2];
  $23 = +HEAPF32[$m_invIA >> 2];
  $24 = HEAP32[$this + 224 >> 2] | 0;
  if (($24 | 0) == 0 | $22 + $23 == 0.0) {
   $45 = $23;
   $46 = $22;
   $aA$0 = $10;
   $aB$0 = $20;
   $angularError$1 = 0.0;
  } else {
   $sub16 = $20 - $10 - +HEAPF32[$this + 116 >> 2];
   if (($24 | 0) == 3) {
    $sub20 = $sub16 - +HEAPF32[$this + 120 >> 2];
    $cond$i$i = $sub20 < .13962635397911072 ? $sub20 : .13962635397911072;
    $cond$i2$i = $cond$i$i < -.13962635397911072 ? -.13962635397911072 : $cond$i$i;
    $mul = -(+HEAPF32[$this + 220 >> 2] * $cond$i2$i);
    if ($cond$i2$i > 0.0) {
     $angularError$0 = $cond$i2$i;
     $limitImpulse$0 = $mul;
    } else {
     $angularError$0 = -$cond$i2$i;
     $limitImpulse$0 = $mul;
    }
   } else if (($24 | 0) == 2) {
    $sub40 = $sub16 - +HEAPF32[$this + 124 >> 2];
    $sub41 = $sub40 + -.03490658849477768;
    $cond$i$i85 = $sub41 < .13962635397911072 ? $sub41 : .13962635397911072;
    $angularError$0 = $sub40;
    $limitImpulse$0 = -(+HEAPF32[$this + 220 >> 2] * ($cond$i$i85 < 0.0 ? 0.0 : $cond$i$i85));
   } else if (($24 | 0) == 1) {
    $sub28 = $sub16 - +HEAPF32[$this + 120 >> 2];
    $add30 = $sub28 + .03490658849477768;
    $cond$i$i42 = $add30 < 0.0 ? $add30 : 0.0;
    $angularError$0 = -$sub28;
    $limitImpulse$0 = -(+HEAPF32[$this + 220 >> 2] * ($cond$i$i42 < -.13962635397911072 ? -.13962635397911072 : $cond$i$i42));
   } else {
    $angularError$0 = 0.0;
    $limitImpulse$0 = 0.0;
   }
   $45 = $23;
   $46 = $22;
   $aA$0 = $10 - $limitImpulse$0 * $23;
   $aB$0 = $20 + $limitImpulse$0 * $22;
   $angularError$1 = $angularError$0;
  }
 }
 $call$i147 = +Math_sin(+$aA$0);
 $call2$i149 = +Math_cos(+$aA$0);
 $call$i = +Math_sin(+$aB$0);
 $call2$i = +Math_cos(+$aB$0);
 $sub$i139 = +HEAPF32[$this + 68 >> 2] - +HEAPF32[$this + 152 >> 2];
 $sub3$i142 = +HEAPF32[$this + 72 >> 2] - +HEAPF32[$this + 156 >> 2];
 $sub$i131 = $call2$i149 * $sub$i139 - $call$i147 * $sub3$i142;
 $add$i134 = $call$i147 * $sub$i139 + $call2$i149 * $sub3$i142;
 $sub$i119 = +HEAPF32[$this + 76 >> 2] - +HEAPF32[$this + 160 >> 2];
 $sub3$i122 = +HEAPF32[$this + 80 >> 2] - +HEAPF32[$this + 164 >> 2];
 $sub$i112 = $call2$i * $sub$i119 - $call$i * $sub3$i122;
 $add$i114 = $call$i * $sub$i119 + $call2$i * $sub3$i122;
 $sub$i89 = $18 + $sub$i112 - $8 - $sub$i131;
 $sub3$i = $19 + $add$i114 - $9 - $add$i134;
 $call$i$i83 = +Math_sqrt(+($sub$i89 * $sub$i89 + $sub3$i * $sub3$i));
 $43 = +HEAPF32[$this + 168 >> 2];
 $44 = +HEAPF32[$this + 172 >> 2];
 $add62 = $43 + $44;
 $add71 = $add62 + $add$i134 * $add$i134 * $45 + $add$i114 * $add$i114 * $46;
 $47 = $sub$i131 * $45;
 $mul78 = $sub$i112 * $46;
 $sub81 = -($add$i134 * $47) - $add$i114 * $mul78;
 $add97 = $add62 + $sub$i131 * $47 + $sub$i112 * $mul78;
 $sub$i77 = $add71 * $add97 - $sub81 * $sub81;
 if ($sub$i77 != 0.0) $det$0$i = 1.0 / $sub$i77; else $det$0$i = $sub$i77;
 $sub$i71 = -(($sub$i89 * $add97 - $sub3$i * $sub81) * $det$0$i);
 $sub2$i = -(($sub3$i * $add71 - $sub$i89 * $sub81) * $det$0$i);
 $49 = +($8 - $43 * $sub$i71);
 $50 = +($9 - $43 * $sub2$i);
 $51 = $c;
 HEAPF32[$51 >> 2] = $49;
 HEAPF32[$51 + 4 >> 2] = $50;
 $56 = HEAP32[$positions >> 2] | 0;
 HEAPF32[$56 + ((HEAP32[$m_indexA >> 2] | 0) * 12 | 0) + 8 >> 2] = $aA$0 - $45 * ($sub$i131 * $sub2$i - $add$i134 * $sub$i71);
 $58 = +($18 + $44 * $sub$i71);
 $59 = +($19 + $44 * $sub2$i);
 $60 = $56 + ((HEAP32[$m_indexB >> 2] | 0) * 12 | 0) | 0;
 HEAPF32[$60 >> 2] = $58;
 HEAPF32[$60 + 4 >> 2] = $59;
 HEAPF32[(HEAP32[$positions >> 2] | 0) + ((HEAP32[$m_indexB >> 2] | 0) * 12 | 0) + 8 >> 2] = $aB$0 + $46 * ($sub$i112 * $sub2$i - $add$i114 * $sub$i71);
 if (!($call$i$i83 <= .004999999888241291)) {
  $66 = 0;
  STACKTOP = sp;
  return $66 | 0;
 }
 $66 = $angularError$1 <= .03490658849477768;
 STACKTOP = sp;
 return $66 | 0;
}
function _emscripten_bind_b2World_b2World_1($arg0) {
 $arg0 = $arg0 | 0;
 var $0 = 0, $10 = 0, $15 = 0, $20 = 0, $21 = 0, $7 = 0, $call$i = 0, $call$i$i$i = 0, $call$i$i$i$i$i = 0, $call$lcssa$i = 0, $call4$i = 0, $exception$i = 0, $i$07$i$i$i$i = 0, $i$09$i$i = 0, $inc$i$i = 0, $j$08$i$i = 0, $j$1$i$i = 0, $m_allocator$i$i = 0, $m_chunkSpace$i$i = 0, $m_freeList$i$i$i$i = 0, $m_gravity$i = 0, $m_nodeCapacity$i$i$i$i = 0, $m_nodes$i$i$i$i = 0, $m_pairCapacity$i$i$i = 0, $m_profile9$i = 0, $sub$i$i$i$i = 0, $sub$lcssa$i$i$i$i = 0, $sub5$i$i$i$i = 0, dest = 0, label = 0, sp = 0, stop = 0, $i$07$i$i$i$i$looptemp = 0;
 sp = STACKTOP;
 $call4$i = _malloc(103028) | 0;
 L1 : do if (($call4$i | 0) == 0) {
  while (1) {
   $0 = HEAP32[5378] | 0;
   HEAP32[5378] = $0 + 0;
   if (($0 | 0) == 0) break;
   FUNCTION_TABLE_v[$0 & 63]();
   $call$i = _malloc(103028) | 0;
   if (($call$i | 0) != 0) {
    $call$lcssa$i = $call$i;
    break L1;
   }
  }
  $exception$i = ___cxa_allocate_exception(4) | 0;
  HEAP32[$exception$i >> 2] = 21352;
  ___cxa_throw($exception$i | 0, 21400, 111);
 } else $call$lcssa$i = $call4$i; while (0);
 $m_chunkSpace$i$i = $call$lcssa$i + 8 | 0;
 HEAP32[$m_chunkSpace$i$i >> 2] = 128;
 HEAP32[$call$lcssa$i + 4 >> 2] = 0;
 $call$i$i$i = _malloc(1024) | 0;
 HEAP32[$call$lcssa$i >> 2] = $call$i$i$i;
 _memset($call$i$i$i | 0, 0, HEAP32[$m_chunkSpace$i$i >> 2] << 3 | 0) | 0;
 dest = $call$lcssa$i + 12 | 0;
 stop = dest + 56 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 do if ((HEAP8[8144] | 0) == 0) {
  $i$09$i$i = 1;
  $j$08$i$i = 0;
  while (1) {
   if (($j$08$i$i | 0) >= 14) {
    label = 7;
    break;
   }
   if (($i$09$i$i | 0) > (HEAP32[7440 + ($j$08$i$i << 2) >> 2] | 0)) {
    $inc$i$i = $j$08$i$i + 1 | 0;
    HEAP8[7496 + $i$09$i$i >> 0] = $inc$i$i;
    $j$1$i$i = $inc$i$i;
   } else {
    HEAP8[7496 + $i$09$i$i >> 0] = $j$08$i$i;
    $j$1$i$i = $j$08$i$i;
   }
   $i$09$i$i = $i$09$i$i + 1 | 0;
   if (($i$09$i$i | 0) >= 641) {
    label = 12;
    break;
   } else $j$08$i$i = $j$1$i$i;
  }
  if ((label | 0) == 7) ___assert_fail(8152, 8176, 73, 8224); else if ((label | 0) == 12) {
   HEAP8[8144] = 1;
   break;
  }
 } while (0);
 HEAP32[$call$lcssa$i + 102468 >> 2] = 0;
 HEAP32[$call$lcssa$i + 102472 >> 2] = 0;
 HEAP32[$call$lcssa$i + 102476 >> 2] = 0;
 HEAP32[$call$lcssa$i + 102864 >> 2] = 0;
 HEAP32[$call$lcssa$i + 102872 >> 2] = -1;
 $m_nodeCapacity$i$i$i$i = $call$lcssa$i + 102884 | 0;
 HEAP32[$m_nodeCapacity$i$i$i$i >> 2] = 16;
 HEAP32[$call$lcssa$i + 102880 >> 2] = 0;
 $call$i$i$i$i$i = _malloc(576) | 0;
 $m_nodes$i$i$i$i = $call$lcssa$i + 102876 | 0;
 HEAP32[$m_nodes$i$i$i$i >> 2] = $call$i$i$i$i$i;
 _memset($call$i$i$i$i$i | 0, 0, (HEAP32[$m_nodeCapacity$i$i$i$i >> 2] | 0) * 36 | 0) | 0;
 $sub5$i$i$i$i = (HEAP32[$m_nodeCapacity$i$i$i$i >> 2] | 0) + -1 | 0;
 $7 = HEAP32[$m_nodes$i$i$i$i >> 2] | 0;
 if (($sub5$i$i$i$i | 0) > 0) {
  $i$07$i$i$i$i = 0;
  do {
   $i$07$i$i$i$i$looptemp = $i$07$i$i$i$i;
   $i$07$i$i$i$i = $i$07$i$i$i$i + 1 | 0;
   HEAP32[$7 + ($i$07$i$i$i$i$looptemp * 36 | 0) + 20 >> 2] = $i$07$i$i$i$i;
   HEAP32[$7 + ($i$07$i$i$i$i$looptemp * 36 | 0) + 32 >> 2] = -1;
   $sub$i$i$i$i = (HEAP32[$m_nodeCapacity$i$i$i$i >> 2] | 0) + -1 | 0;
  } while (($i$07$i$i$i$i | 0) < ($sub$i$i$i$i | 0));
  $sub$lcssa$i$i$i$i = $sub$i$i$i$i;
 } else $sub$lcssa$i$i$i$i = $sub5$i$i$i$i;
 HEAP32[$7 + ($sub$lcssa$i$i$i$i * 36 | 0) + 20 >> 2] = -1;
 HEAP32[$7 + (((HEAP32[$m_nodeCapacity$i$i$i$i >> 2] | 0) + -1 | 0) * 36 | 0) + 32 >> 2] = -1;
 $m_freeList$i$i$i$i = $call$lcssa$i + 102888 | 0;
 $m_pairCapacity$i$i$i = $call$lcssa$i + 102920 | 0;
 HEAP32[$m_freeList$i$i$i$i + 0 >> 2] = 0;
 HEAP32[$m_freeList$i$i$i$i + 4 >> 2] = 0;
 HEAP32[$m_freeList$i$i$i$i + 8 >> 2] = 0;
 HEAP32[$m_freeList$i$i$i$i + 12 >> 2] = 0;
 HEAP32[$m_pairCapacity$i$i$i >> 2] = 16;
 HEAP32[$call$lcssa$i + 102924 >> 2] = 0;
 HEAP32[$call$lcssa$i + 102916 >> 2] = _malloc(192) | 0;
 HEAP32[$call$lcssa$i + 102908 >> 2] = 16;
 HEAP32[$call$lcssa$i + 102912 >> 2] = 0;
 HEAP32[$call$lcssa$i + 102904 >> 2] = _malloc(64) | 0;
 HEAP32[$call$lcssa$i + 102932 >> 2] = 0;
 HEAP32[$call$lcssa$i + 102936 >> 2] = 0;
 HEAP32[$call$lcssa$i + 102940 >> 2] = 12432;
 HEAP32[$call$lcssa$i + 102944 >> 2] = 12440;
 $m_allocator$i$i = $call$lcssa$i + 102948 | 0;
 $m_gravity$i = $call$lcssa$i + 102968 | 0;
 HEAP32[$call$lcssa$i + 102980 >> 2] = 0;
 HEAP32[$call$lcssa$i + 102984 >> 2] = 0;
 $10 = $call$lcssa$i + 102992 | 0;
 HEAP32[$m_allocator$i$i + 0 >> 2] = 0;
 HEAP32[$m_allocator$i$i + 4 >> 2] = 0;
 HEAP32[$m_allocator$i$i + 8 >> 2] = 0;
 HEAP32[$m_allocator$i$i + 12 >> 2] = 0;
 HEAP32[$m_allocator$i$i + 16 >> 2] = 0;
 HEAP8[$10 >> 0] = 1;
 HEAP8[$call$lcssa$i + 102993 >> 0] = 1;
 HEAP8[$call$lcssa$i + 102994 >> 0] = 0;
 HEAP8[$call$lcssa$i + 102995 >> 0] = 1;
 HEAP8[$call$lcssa$i + 102976 >> 0] = 1;
 $15 = $arg0;
 $20 = HEAP32[$15 + 4 >> 2] | 0;
 $21 = $m_gravity$i;
 HEAP32[$21 >> 2] = HEAP32[$15 >> 2];
 HEAP32[$21 + 4 >> 2] = $20;
 HEAP32[$call$lcssa$i + 102868 >> 2] = 4;
 HEAPF32[$call$lcssa$i + 102988 >> 2] = 0.0;
 HEAP32[$m_allocator$i$i >> 2] = $call$lcssa$i;
 $m_profile9$i = $call$lcssa$i + 102996 | 0;
 HEAP32[$m_profile9$i + 0 >> 2] = 0;
 HEAP32[$m_profile9$i + 4 >> 2] = 0;
 HEAP32[$m_profile9$i + 8 >> 2] = 0;
 HEAP32[$m_profile9$i + 12 >> 2] = 0;
 HEAP32[$m_profile9$i + 16 >> 2] = 0;
 HEAP32[$m_profile9$i + 20 >> 2] = 0;
 HEAP32[$m_profile9$i + 24 >> 2] = 0;
 HEAP32[$m_profile9$i + 28 >> 2] = 0;
 STACKTOP = sp;
 return $call$lcssa$i | 0;
}
function _emscripten_bind_b2World_CreateBody_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $$$i$i = 0, $1 = 0.0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $2 = 0.0, $22 = 0, $23 = 0, $27 = 0.0, $28 = 0, $3 = 0.0, $32 = 0, $38 = 0, $4 = 0.0, $43 = 0, $44 = 0, $5 = 0.0, $52 = 0, $54 = 0, $56 = 0, $57 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $angle$i$i = 0, $angularDamping$i$i = 0, $angularVelocity$i$i = 0, $call3$i = 0, $conv28$i$i = 0, $conv35$i$i = 0, $conv42$i$i = 0, $inc$i = 0, $linearDamping$i$i = 0, $linearVelocity$i$i = 0, $m_bodyCount$i = 0, $m_bodyList$i = 0, $m_flags$i2$i = 0, $m_mass$i$i = 0, $position$i$i = 0, sp = 0;
 sp = STACKTOP;
 if ((HEAP32[$self + 102868 >> 2] & 2 | 0) != 0) ___assert_fail(13840, 13864, 109, 13904);
 $call3$i = __ZN16b2BlockAllocator8AllocateEi($self, 152) | 0;
 if (($call3$i | 0) == 0) $54 = 0; else {
  $position$i$i = $arg0 + 4 | 0;
  $1 = +HEAPF32[$position$i$i >> 2];
  if (!($1 == $1 & 0.0 == 0.0 & $1 > -inf & $1 < inf)) ___assert_fail(11384, 11408, 27, 11448);
  $2 = +HEAPF32[$arg0 + 8 >> 2];
  if (!($2 == $2 & 0.0 == 0.0 & $2 > -inf & $2 < inf)) ___assert_fail(11384, 11408, 27, 11448);
  $linearVelocity$i$i = $arg0 + 16 | 0;
  $3 = +HEAPF32[$linearVelocity$i$i >> 2];
  if (!($3 == $3 & 0.0 == 0.0 & $3 > -inf & $3 < inf)) ___assert_fail(11456, 11408, 28, 11448);
  $4 = +HEAPF32[$arg0 + 20 >> 2];
  if (!($4 == $4 & 0.0 == 0.0 & $4 > -inf & $4 < inf)) ___assert_fail(11456, 11408, 28, 11448);
  $angle$i$i = $arg0 + 12 | 0;
  $5 = +HEAPF32[$angle$i$i >> 2];
  if (!($5 == $5 & 0.0 == 0.0 & $5 > -inf & $5 < inf)) ___assert_fail(11488, 11408, 29, 11448);
  $angularVelocity$i$i = $arg0 + 24 | 0;
  $6 = +HEAPF32[$angularVelocity$i$i >> 2];
  if (!($6 == $6 & 0.0 == 0.0 & $6 > -inf & $6 < inf)) ___assert_fail(11512, 11408, 30, 11448);
  $angularDamping$i$i = $arg0 + 32 | 0;
  $7 = +HEAPF32[$angularDamping$i$i >> 2];
  if (!($7 >= 0.0) | $7 == $7 & 0.0 == 0.0 & $7 > -inf & $7 < inf ^ 1) ___assert_fail(11544, 11408, 31, 11448);
  $linearDamping$i$i = $arg0 + 28 | 0;
  $8 = +HEAPF32[$linearDamping$i$i >> 2];
  if (!($8 >= 0.0) | $8 == $8 & 0.0 == 0.0 & $8 > -inf & $8 < inf ^ 1) ___assert_fail(11608, 11408, 32, 11448);
  $m_flags$i2$i = $call3$i + 4 | 0;
  $$$i$i = (HEAP8[$arg0 + 39 >> 0] | 0) == 0 ? 0 : 8;
  HEAP16[$m_flags$i2$i >> 1] = $$$i$i;
  if ((HEAP8[$arg0 + 38 >> 0] | 0) == 0) $12 = $$$i$i; else {
   $conv28$i$i = ($$$i$i & 65535 | 16) & 65535;
   HEAP16[$m_flags$i2$i >> 1] = $conv28$i$i;
   $12 = $conv28$i$i;
  }
  if ((HEAP8[$arg0 + 36 >> 0] | 0) == 0) $14 = $12; else {
   $conv35$i$i = ($12 & 65535 | 4) & 65535;
   HEAP16[$m_flags$i2$i >> 1] = $conv35$i$i;
   $14 = $conv35$i$i;
  }
  if ((HEAP8[$arg0 + 37 >> 0] | 0) == 0) $16 = $14; else {
   $conv42$i$i = ($14 & 65535 | 2) & 65535;
   HEAP16[$m_flags$i2$i >> 1] = $conv42$i$i;
   $16 = $conv42$i$i;
  }
  if ((HEAP8[$arg0 + 40 >> 0] | 0) != 0) HEAP16[$m_flags$i2$i >> 1] = $16 & 65535 | 32;
  HEAP32[$call3$i + 88 >> 2] = $self;
  $17 = $position$i$i;
  $19 = HEAP32[$17 >> 2] | 0;
  $22 = HEAP32[$17 + 4 >> 2] | 0;
  $23 = $call3$i + 12 | 0;
  HEAP32[$23 >> 2] = $19;
  HEAP32[$23 + 4 >> 2] = $22;
  $27 = +HEAPF32[$angle$i$i >> 2];
  HEAPF32[$call3$i + 20 >> 2] = +Math_sin(+$27);
  HEAPF32[$call3$i + 24 >> 2] = +Math_cos(+$27);
  HEAPF32[$call3$i + 28 >> 2] = 0.0;
  HEAPF32[$call3$i + 32 >> 2] = 0.0;
  $28 = $call3$i + 36 | 0;
  HEAP32[$28 >> 2] = $19;
  HEAP32[$28 + 4 >> 2] = $22;
  $32 = $call3$i + 44 | 0;
  HEAP32[$32 >> 2] = $19;
  HEAP32[$32 + 4 >> 2] = $22;
  HEAPF32[$call3$i + 52 >> 2] = +HEAPF32[$angle$i$i >> 2];
  HEAPF32[$call3$i + 56 >> 2] = +HEAPF32[$angle$i$i >> 2];
  HEAPF32[$call3$i + 60 >> 2] = 0.0;
  HEAP32[$call3$i + 108 >> 2] = 0;
  HEAP32[$call3$i + 112 >> 2] = 0;
  HEAP32[$call3$i + 92 >> 2] = 0;
  HEAP32[$call3$i + 96 >> 2] = 0;
  $38 = $linearVelocity$i$i;
  $43 = HEAP32[$38 + 4 >> 2] | 0;
  $44 = $call3$i + 64 | 0;
  HEAP32[$44 >> 2] = HEAP32[$38 >> 2];
  HEAP32[$44 + 4 >> 2] = $43;
  HEAPF32[$call3$i + 72 >> 2] = +HEAPF32[$angularVelocity$i$i >> 2];
  HEAPF32[$call3$i + 132 >> 2] = +HEAPF32[$linearDamping$i$i >> 2];
  HEAPF32[$call3$i + 136 >> 2] = +HEAPF32[$angularDamping$i$i >> 2];
  HEAPF32[$call3$i + 140 >> 2] = +HEAPF32[$arg0 + 48 >> 2];
  HEAPF32[$call3$i + 76 >> 2] = 0.0;
  HEAPF32[$call3$i + 80 >> 2] = 0.0;
  HEAPF32[$call3$i + 84 >> 2] = 0.0;
  HEAPF32[$call3$i + 144 >> 2] = 0.0;
  $52 = HEAP32[$arg0 >> 2] | 0;
  HEAP32[$call3$i >> 2] = $52;
  $m_mass$i$i = $call3$i + 116 | 0;
  if (($52 | 0) == 2) {
   HEAPF32[$m_mass$i$i >> 2] = 1.0;
   HEAPF32[$call3$i + 120 >> 2] = 1.0;
  } else {
   HEAPF32[$m_mass$i$i >> 2] = 0.0;
   HEAPF32[$call3$i + 120 >> 2] = 0.0;
  }
  HEAPF32[$call3$i + 124 >> 2] = 0.0;
  HEAPF32[$call3$i + 128 >> 2] = 0.0;
  HEAP32[$call3$i + 148 >> 2] = HEAP32[$arg0 + 44 >> 2];
  HEAP32[$call3$i + 100 >> 2] = 0;
  HEAP32[$call3$i + 104 >> 2] = 0;
  $54 = $call3$i;
 }
 HEAP32[$54 + 92 >> 2] = 0;
 $m_bodyList$i = $self + 102952 | 0;
 HEAP32[$54 + 96 >> 2] = HEAP32[$m_bodyList$i >> 2];
 $56 = HEAP32[$m_bodyList$i >> 2] | 0;
 if (($56 | 0) == 0) {
  HEAP32[$m_bodyList$i >> 2] = $54;
  $m_bodyCount$i = $self + 102960 | 0;
  $57 = HEAP32[$m_bodyCount$i >> 2] | 0;
  $inc$i = $57 + 1 | 0;
  HEAP32[$m_bodyCount$i >> 2] = $inc$i;
  STACKTOP = sp;
  return $54 | 0;
 }
 HEAP32[$56 + 92 >> 2] = $54;
 HEAP32[$m_bodyList$i >> 2] = $54;
 $m_bodyCount$i = $self + 102960 | 0;
 $57 = HEAP32[$m_bodyCount$i >> 2] | 0;
 $inc$i = $57 + 1 | 0;
 HEAP32[$m_bodyCount$i >> 2] = $inc$i;
 STACKTOP = sp;
 return $54 | 0;
}
function __ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4_($this, $broadPhase, $transform1, $transform2) {
 $this = $this | 0;
 $broadPhase = $broadPhase | 0;
 $transform1 = $transform1 | 0;
 $transform2 = $transform2 | 0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $3 = 0, $33 = 0, $35 = 0, $43 = 0, $49 = 0.0, $50 = 0.0, $51 = 0, $57 = 0.0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $66 = 0.0, $67 = 0.0, $68 = 0, $9 = 0.0, $aabb = 0, $aabb1 = 0, $aabb2 = 0, $add$i$i$i = 0.0, $add3$i$i$i = 0.0, $b$sroa$0$sroa$0$0$load6269$i$i = 0.0, $b$sroa$0$sroa$1$4$load6670$i$i = 0.0, $b$sroa$1$sroa$0$0$load5567$i$i = 0.0, $b$sroa$1$sroa$1$4$load5968$i$i = 0.0, $childIndex = 0, $cond$i$i$i = 0.0, $cond$i$i7$i = 0.0, $i$010 = 0, $m_nodeCapacity$i$i = 0, $m_nodes$i$i = 0, $m_proxies = 0, $m_proxyCount = 0, $m_shape = 0, $mul$i$i$i = 0.0, $mul1$i$i$i = 0.0, $sub$i = 0.0, $sub$i$i$i = 0.0, $sub3$i = 0.0, $sub3$i$i$i = 0.0, $upperBound$i = 0, $x$i4$i = 0, $x1$i5$i = 0, $y$i = 0, $y$i$i = 0, $y$i8$i = 0, $y2$i = 0, $y2$i$i = 0, $y2$i9$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $aabb1 = sp + 16 | 0;
 $aabb2 = sp;
 $m_proxyCount = $this + 28 | 0;
 if ((HEAP32[$m_proxyCount >> 2] | 0) <= 0) {
  STACKTOP = sp;
  return;
 }
 $m_proxies = $this + 24 | 0;
 $m_shape = $this + 12 | 0;
 $y$i$i = $aabb1 + 4 | 0;
 $y2$i$i = $aabb2 + 4 | 0;
 $x$i4$i = $aabb1 + 8 | 0;
 $x1$i5$i = $aabb2 + 8 | 0;
 $y$i8$i = $aabb1 + 12 | 0;
 $y2$i9$i = $aabb2 + 12 | 0;
 $y$i = $transform2 + 4 | 0;
 $y2$i = $transform1 + 4 | 0;
 $m_nodeCapacity$i$i = $broadPhase + 12 | 0;
 $m_nodes$i$i = $broadPhase + 4 | 0;
 $i$010 = 0;
 while (1) {
  $2 = HEAP32[$m_proxies >> 2] | 0;
  $3 = HEAP32[$m_shape >> 2] | 0;
  $childIndex = $2 + ($i$010 * 28 | 0) + 20 | 0;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$3 >> 2] | 0) + 24 >> 2] & 63]($3, $aabb1, $transform1, HEAP32[$childIndex >> 2] | 0);
  $6 = HEAP32[$m_shape >> 2] | 0;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$6 >> 2] | 0) + 24 >> 2] & 63]($6, $aabb2, $transform2, HEAP32[$childIndex >> 2] | 0);
  $aabb = $2 + ($i$010 * 28 | 0) | 0;
  $9 = +HEAPF32[$aabb1 >> 2];
  $10 = +HEAPF32[$aabb2 >> 2];
  $cond$i$i$i = $9 < $10 ? $9 : $10;
  $11 = +HEAPF32[$y$i$i >> 2];
  $12 = +HEAPF32[$y2$i$i >> 2];
  $13 = +$cond$i$i$i;
  $14 = +($11 < $12 ? $11 : $12);
  $15 = $aabb;
  HEAPF32[$15 >> 2] = $13;
  HEAPF32[$15 + 4 >> 2] = $14;
  $upperBound$i = $2 + ($i$010 * 28 | 0) + 8 | 0;
  $19 = +HEAPF32[$x$i4$i >> 2];
  $20 = +HEAPF32[$x1$i5$i >> 2];
  $cond$i$i7$i = $19 > $20 ? $19 : $20;
  $21 = +HEAPF32[$y$i8$i >> 2];
  $22 = +HEAPF32[$y2$i9$i >> 2];
  $23 = +$cond$i$i7$i;
  $24 = +($21 > $22 ? $21 : $22);
  $25 = $upperBound$i;
  HEAPF32[$25 >> 2] = $23;
  HEAPF32[$25 + 4 >> 2] = $24;
  $sub$i = +HEAPF32[$transform2 >> 2] - +HEAPF32[$transform1 >> 2];
  $sub3$i = +HEAPF32[$y$i >> 2] - +HEAPF32[$y2$i >> 2];
  $33 = HEAP32[$2 + ($i$010 * 28 | 0) + 24 >> 2] | 0;
  if (!(($33 | 0) > -1)) {
   label = 5;
   break;
  }
  if ((HEAP32[$m_nodeCapacity$i$i >> 2] | 0) <= ($33 | 0)) {
   label = 5;
   break;
  }
  $35 = HEAP32[$m_nodes$i$i >> 2] | 0;
  if (!((HEAP32[$35 + ($33 * 36 | 0) + 24 >> 2] | 0) == -1)) {
   label = 7;
   break;
  }
  if (!(+HEAPF32[$35 + ($33 * 36 | 0) >> 2] <= $cond$i$i$i)) label = 12; else if (!(+HEAPF32[$35 + ($33 * 36 | 0) + 4 >> 2] <= +HEAPF32[$2 + ($i$010 * 28 | 0) + 4 >> 2])) label = 12; else if (!($cond$i$i7$i <= +HEAPF32[$35 + ($33 * 36 | 0) + 8 >> 2])) label = 12; else if (!(+HEAPF32[$2 + ($i$010 * 28 | 0) + 12 >> 2] <= +HEAPF32[$35 + ($33 * 36 | 0) + 12 >> 2])) label = 12;
  if ((label | 0) == 12) {
   label = 0;
   __ZN13b2DynamicTree10RemoveLeafEi($broadPhase, $33);
   $43 = $aabb;
   $49 = +HEAPF32[$43 >> 2];
   $50 = +HEAPF32[$43 + 4 >> 2];
   $51 = $upperBound$i;
   $57 = +HEAPF32[$51 >> 2];
   $sub$i$i$i = $49 + -.10000000149011612;
   $sub3$i$i$i = $50 + -.10000000149011612;
   $add$i$i$i = $57 + .10000000149011612;
   $add3$i$i$i = +HEAPF32[$51 + 4 >> 2] + .10000000149011612;
   $mul$i$i$i = $sub$i * 2.0;
   $mul1$i$i$i = $sub3$i * 2.0;
   if ($mul$i$i$i < 0.0) {
    $b$sroa$0$sroa$0$0$load6269$i$i = $sub$i$i$i + $mul$i$i$i;
    $b$sroa$1$sroa$0$0$load5567$i$i = $add$i$i$i;
   } else {
    $b$sroa$0$sroa$0$0$load6269$i$i = $sub$i$i$i;
    $b$sroa$1$sroa$0$0$load5567$i$i = $mul$i$i$i + $add$i$i$i;
   }
   if ($mul1$i$i$i < 0.0) {
    $b$sroa$0$sroa$1$4$load6670$i$i = $sub3$i$i$i + $mul1$i$i$i;
    $b$sroa$1$sroa$1$4$load5968$i$i = $add3$i$i$i;
   } else {
    $b$sroa$0$sroa$1$4$load6670$i$i = $sub3$i$i$i;
    $b$sroa$1$sroa$1$4$load5968$i$i = $mul1$i$i$i + $add3$i$i$i;
   }
   $59 = HEAP32[$m_nodes$i$i >> 2] | 0;
   $60 = +$b$sroa$0$sroa$0$0$load6269$i$i;
   $61 = +$b$sroa$0$sroa$1$4$load6670$i$i;
   $62 = $59 + ($33 * 36 | 0) | 0;
   HEAPF32[$62 >> 2] = $60;
   HEAPF32[$62 + 4 >> 2] = $61;
   $66 = +$b$sroa$1$sroa$0$0$load5567$i$i;
   $67 = +$b$sroa$1$sroa$1$4$load5968$i$i;
   $68 = $59 + ($33 * 36 | 0) + 8 | 0;
   HEAPF32[$68 >> 2] = $66;
   HEAPF32[$68 + 4 >> 2] = $67;
   __ZN13b2DynamicTree10InsertLeafEi($broadPhase, $33);
   __ZN12b2BroadPhase10BufferMoveEi($broadPhase, $33);
  }
  $i$010 = $i$010 + 1 | 0;
  if (($i$010 | 0) >= (HEAP32[$m_proxyCount >> 2] | 0)) {
   label = 20;
   break;
  }
 }
 if ((label | 0) == 5) ___assert_fail(14568, 5696, 135, 5880); else if ((label | 0) == 7) ___assert_fail(5848, 5696, 137, 5880); else if ((label | 0) == 20) {
  STACKTOP = sp;
  return;
 }
}
function __ZN24b2PositionSolverManifold10InitializeEP27b2ContactPositionConstraintRK11b2TransformS4_i($this, $pc, $xfA, $xfB, $index) {
 $this = $this | 0;
 $pc = $pc | 0;
 $xfA = $xfA | 0;
 $xfB = $xfB | 0;
 $index = $index | 0;
 var $1 = 0, $10 = 0.0, $11 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $26 = 0.0, $27 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0, $add$i = 0.0, $add$i108 = 0.0, $add$i141 = 0.0, $add$i183 = 0.0, $add$i52 = 0.0, $add$i82 = 0.0, $add17$i = 0.0, $add17$i113 = 0.0, $add17$i188 = 0.0, $add17$i57 = 0.0, $c$i132 = 0, $c$i76 = 0, $call$i$i$i = 0.0, $div$i = 0.0, $mul$i174 = 0.0, $mul2$i = 0.0, $s$i135 = 0, $s$i79 = 0, $sub$i138 = 0.0, $sub$i193 = 0.0, $sub$i81 = 0.0, $sub3$i196 = 0.0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 if ((HEAP32[$pc + 84 >> 2] | 0) <= 0) ___assert_fail(16608, 15952, 624, 19512);
 $1 = HEAP32[$pc + 72 >> 2] | 0;
 if (($1 | 0) == 1) {
  $c$i132 = $xfA + 12 | 0;
  $30 = +HEAPF32[$c$i132 >> 2];
  $31 = +HEAPF32[$pc + 16 >> 2];
  $s$i135 = $xfA + 8 | 0;
  $32 = +HEAPF32[$s$i135 >> 2];
  $33 = +HEAPF32[$pc + 20 >> 2];
  $sub$i138 = $30 * $31 - $32 * $33;
  $add$i141 = $31 * $32 + $30 * $33;
  $34 = +$sub$i138;
  $35 = +$add$i141;
  $36 = $this;
  HEAPF32[$36 >> 2] = $34;
  HEAPF32[$36 + 4 >> 2] = $35;
  $40 = +HEAPF32[$c$i132 >> 2];
  $41 = +HEAPF32[$pc + 24 >> 2];
  $42 = +HEAPF32[$s$i135 >> 2];
  $43 = +HEAPF32[$pc + 28 >> 2];
  $46 = +HEAPF32[$xfB + 12 >> 2];
  $47 = +HEAPF32[$pc + ($index << 3) >> 2];
  $48 = +HEAPF32[$xfB + 8 >> 2];
  $49 = +HEAPF32[$pc + ($index << 3) + 4 >> 2];
  $add$i108 = +HEAPF32[$xfB >> 2] + ($46 * $47 - $48 * $49);
  $add17$i113 = $47 * $48 + $46 * $49 + +HEAPF32[$xfB + 4 >> 2];
  HEAPF32[$this + 16 >> 2] = $sub$i138 * ($add$i108 - (+HEAPF32[$xfA >> 2] + ($40 * $41 - $42 * $43))) + ($add17$i113 - ($41 * $42 + $40 * $43 + +HEAPF32[$xfA + 4 >> 2])) * $add$i141 - +HEAPF32[$pc + 76 >> 2] - +HEAPF32[$pc + 80 >> 2];
  $54 = +$add$i108;
  $55 = +$add17$i113;
  $56 = $this + 8 | 0;
  HEAPF32[$56 >> 2] = $54;
  HEAPF32[$56 + 4 >> 2] = $55;
 } else if (($1 | 0) == 2) {
  $c$i76 = $xfB + 12 | 0;
  $60 = +HEAPF32[$c$i76 >> 2];
  $61 = +HEAPF32[$pc + 16 >> 2];
  $s$i79 = $xfB + 8 | 0;
  $62 = +HEAPF32[$s$i79 >> 2];
  $63 = +HEAPF32[$pc + 20 >> 2];
  $sub$i81 = $60 * $61 - $62 * $63;
  $add$i82 = $61 * $62 + $60 * $63;
  $64 = +$sub$i81;
  $65 = +$add$i82;
  $66 = $this;
  HEAPF32[$66 >> 2] = $64;
  HEAPF32[$66 + 4 >> 2] = $65;
  $70 = +HEAPF32[$c$i76 >> 2];
  $71 = +HEAPF32[$pc + 24 >> 2];
  $72 = +HEAPF32[$s$i79 >> 2];
  $73 = +HEAPF32[$pc + 28 >> 2];
  $76 = +HEAPF32[$xfA + 12 >> 2];
  $77 = +HEAPF32[$pc + ($index << 3) >> 2];
  $78 = +HEAPF32[$xfA + 8 >> 2];
  $79 = +HEAPF32[$pc + ($index << 3) + 4 >> 2];
  $add$i52 = +HEAPF32[$xfA >> 2] + ($76 * $77 - $78 * $79);
  $add17$i57 = $77 * $78 + $76 * $79 + +HEAPF32[$xfA + 4 >> 2];
  HEAPF32[$this + 16 >> 2] = $sub$i81 * ($add$i52 - (+HEAPF32[$xfB >> 2] + ($70 * $71 - $72 * $73))) + ($add17$i57 - ($71 * $72 + $70 * $73 + +HEAPF32[$xfB + 4 >> 2])) * $add$i82 - +HEAPF32[$pc + 76 >> 2] - +HEAPF32[$pc + 80 >> 2];
  $84 = +$add$i52;
  $85 = +$add17$i57;
  $86 = $this + 8 | 0;
  HEAPF32[$86 >> 2] = $84;
  HEAPF32[$86 + 4 >> 2] = $85;
  $90 = +-$sub$i81;
  $91 = +-$add$i82;
  $92 = $this;
  HEAPF32[$92 >> 2] = $90;
  HEAPF32[$92 + 4 >> 2] = $91;
 } else if (($1 | 0) == 0) {
  $2 = +HEAPF32[$xfA + 12 >> 2];
  $3 = +HEAPF32[$pc + 24 >> 2];
  $4 = +HEAPF32[$xfA + 8 >> 2];
  $5 = +HEAPF32[$pc + 28 >> 2];
  $add$i = +HEAPF32[$xfA >> 2] + ($2 * $3 - $4 * $5);
  $add17$i = $3 * $4 + $2 * $5 + +HEAPF32[$xfA + 4 >> 2];
  $8 = +HEAPF32[$xfB + 12 >> 2];
  $9 = +HEAPF32[$pc >> 2];
  $10 = +HEAPF32[$xfB + 8 >> 2];
  $11 = +HEAPF32[$pc + 4 >> 2];
  $add$i183 = +HEAPF32[$xfB >> 2] + ($8 * $9 - $10 * $11);
  $add17$i188 = $9 * $10 + $8 * $11 + +HEAPF32[$xfB + 4 >> 2];
  $sub$i193 = $add$i183 - $add$i;
  $sub3$i196 = $add17$i188 - $add17$i;
  $14 = +$sub$i193;
  $15 = +$sub3$i196;
  $16 = $this;
  HEAPF32[$16 >> 2] = $14;
  HEAPF32[$16 + 4 >> 2] = $15;
  $call$i$i$i = +Math_sqrt(+($sub$i193 * $sub$i193 + $sub3$i196 * $sub3$i196));
  if ($call$i$i$i < 1.1920928955078125e-7) {
   $26 = $sub$i193;
   $27 = $sub3$i196;
  } else {
   $div$i = 1.0 / $call$i$i$i;
   $mul$i174 = $sub$i193 * $div$i;
   HEAPF32[$this >> 2] = $mul$i174;
   $mul2$i = $sub3$i196 * $div$i;
   HEAPF32[$this + 4 >> 2] = $mul2$i;
   $26 = $mul$i174;
   $27 = $mul2$i;
  }
  $20 = +(($add$i + $add$i183) * .5);
  $21 = +(($add17$i + $add17$i188) * .5);
  $22 = $this + 8 | 0;
  HEAPF32[$22 >> 2] = $20;
  HEAPF32[$22 + 4 >> 2] = $21;
  HEAPF32[$this + 16 >> 2] = $sub$i193 * $26 + $sub3$i196 * $27 - +HEAPF32[$pc + 76 >> 2] - +HEAPF32[$pc + 80 >> 2];
 }
 if ((HEAP8[8368] | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 16 >> 2];
 HEAP32[$vararg_buffer >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(16632, $vararg_buffer);
 STACKTOP = sp;
 return;
}
function __ZN9b2Contact6UpdateEP17b2ContactListener($this, $listener) {
 $this = $this | 0;
 $listener = $listener | 0;
 var $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $16 = 0, $21 = 0, $25 = 0, $3 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $cache$i = 0, $cmp$i1 = 0, $cmp25 = 0, $cmp3349 = 0, $conv$i = 0, $conv$i38 = 0, $i$052 = 0, $id2$sroa$0$0$copyload = 0, $inc = 0, $input$i = 0, $j$050 = 0, $m_flags = 0, $m_flags$i = 0, $m_flags$i37 = 0, $m_manifold = 0, $m_xf$i = 0, $m_xf$i47 = 0, $normalImpulse = 0, $oldManifold = 0, $output$i = 0, $pointCount24 = 0, $tangentImpulse = 0, $tobool64 = 0, $tobool71 = 0, $touching$0$off0 = 0, $touching$0$off0$not = 0, $transformA$i = 0, $transformB$i = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 $input$i = sp + 104 | 0;
 $cache$i = sp;
 $output$i = sp + 16 | 0;
 $oldManifold = sp + 40 | 0;
 $m_manifold = $this + 64 | 0;
 dest = $oldManifold + 0 | 0;
 src = $m_manifold + 0 | 0;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $m_flags = $this + 4 | 0;
 $0 = HEAP32[$m_flags >> 2] | 0;
 HEAP32[$m_flags >> 2] = $0 | 4;
 $and = $0 >>> 1;
 $1 = HEAP32[$this + 48 >> 2] | 0;
 $3 = HEAP32[$this + 52 >> 2] | 0;
 $6 = (HEAP8[$3 + 38 >> 0] | HEAP8[$1 + 38 >> 0]) << 24 >> 24 != 0;
 $7 = HEAP32[$1 + 8 >> 2] | 0;
 $8 = HEAP32[$3 + 8 >> 2] | 0;
 $m_xf$i = $7 + 12 | 0;
 $m_xf$i47 = $8 + 12 | 0;
 if ($6) {
  $9 = HEAP32[$1 + 12 >> 2] | 0;
  $10 = HEAP32[$3 + 12 >> 2] | 0;
  $11 = HEAP32[$this + 56 >> 2] | 0;
  $12 = HEAP32[$this + 60 >> 2] | 0;
  HEAP32[$input$i + 16 >> 2] = 0;
  HEAP32[$input$i + 20 >> 2] = 0;
  HEAPF32[$input$i + 24 >> 2] = 0.0;
  HEAP32[$input$i + 44 >> 2] = 0;
  HEAP32[$input$i + 48 >> 2] = 0;
  HEAPF32[$input$i + 52 >> 2] = 0.0;
  __ZN15b2DistanceProxy3SetEPK7b2Shapei($input$i, $9, $11);
  __ZN15b2DistanceProxy3SetEPK7b2Shapei($input$i + 28 | 0, $10, $12);
  $transformA$i = $input$i + 56 | 0;
  HEAP32[$transformA$i + 0 >> 2] = HEAP32[$m_xf$i + 0 >> 2];
  HEAP32[$transformA$i + 4 >> 2] = HEAP32[$m_xf$i + 4 >> 2];
  HEAP32[$transformA$i + 8 >> 2] = HEAP32[$m_xf$i + 8 >> 2];
  HEAP32[$transformA$i + 12 >> 2] = HEAP32[$m_xf$i + 12 >> 2];
  $transformB$i = $input$i + 72 | 0;
  HEAP32[$transformB$i + 0 >> 2] = HEAP32[$m_xf$i47 + 0 >> 2];
  HEAP32[$transformB$i + 4 >> 2] = HEAP32[$m_xf$i47 + 4 >> 2];
  HEAP32[$transformB$i + 8 >> 2] = HEAP32[$m_xf$i47 + 8 >> 2];
  HEAP32[$transformB$i + 12 >> 2] = HEAP32[$m_xf$i47 + 12 >> 2];
  HEAP8[$input$i + 88 >> 0] = 1;
  HEAP16[$cache$i + 4 >> 1] = 0;
  __Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput($output$i, $cache$i, $input$i);
  $cmp$i1 = +HEAPF32[$output$i + 16 >> 2] < 11920928955078125.0e-22;
  HEAP32[$this + 124 >> 2] = 0;
  $$pre$phiZ2D = $and & 1;
  $touching$0$off0 = $cmp$i1;
 } else {
  FUNCTION_TABLE_viiii[HEAP32[HEAP32[$this >> 2] >> 2] & 63]($this, $m_manifold, $m_xf$i, $m_xf$i47);
  $pointCount24 = $this + 124 | 0;
  $cmp25 = (HEAP32[$pointCount24 >> 2] | 0) > 0;
  if ($cmp25) {
   $16 = HEAP32[$oldManifold + 60 >> 2] | 0;
   $cmp3349 = ($16 | 0) > 0;
   $i$052 = 0;
   do {
    $normalImpulse = $this + ($i$052 * 20 | 0) + 72 | 0;
    HEAPF32[$normalImpulse >> 2] = 0.0;
    $tangentImpulse = $this + ($i$052 * 20 | 0) + 76 | 0;
    HEAPF32[$tangentImpulse >> 2] = 0.0;
    $id2$sroa$0$0$copyload = HEAP32[$this + ($i$052 * 20 | 0) + 80 >> 2] | 0;
    L7 : do if ($cmp3349) {
     $j$050 = 0;
     while (1) {
      $inc = $j$050 + 1 | 0;
      if ((HEAP32[$oldManifold + ($j$050 * 20 | 0) + 16 >> 2] | 0) == ($id2$sroa$0$0$copyload | 0)) break;
      if (($inc | 0) < ($16 | 0)) $j$050 = $inc; else break L7;
     }
     HEAPF32[$normalImpulse >> 2] = +HEAPF32[$oldManifold + ($j$050 * 20 | 0) + 8 >> 2];
     HEAPF32[$tangentImpulse >> 2] = +HEAPF32[$oldManifold + ($j$050 * 20 | 0) + 12 >> 2];
    } while (0);
    $i$052 = $i$052 + 1 | 0;
   } while (($i$052 | 0) < (HEAP32[$pointCount24 >> 2] | 0));
  }
  $21 = $and & 1;
  if ($cmp25 ^ ($21 | 0) != 0) {
   $m_flags$i37 = $7 + 4 | 0;
   $conv$i38 = HEAPU16[$m_flags$i37 >> 1] | 0;
   if (($conv$i38 & 2 | 0) == 0) {
    HEAP16[$m_flags$i37 >> 1] = $conv$i38 | 2;
    HEAPF32[$7 + 144 >> 2] = 0.0;
   }
   $m_flags$i = $8 + 4 | 0;
   $conv$i = HEAPU16[$m_flags$i >> 1] | 0;
   if (($conv$i & 2 | 0) == 0) {
    HEAP16[$m_flags$i >> 1] = $conv$i | 2;
    HEAPF32[$8 + 144 >> 2] = 0.0;
    $$pre$phiZ2D = $21;
    $touching$0$off0 = $cmp25;
   } else {
    $$pre$phiZ2D = $21;
    $touching$0$off0 = $cmp25;
   }
  } else {
   $$pre$phiZ2D = $21;
   $touching$0$off0 = $cmp25;
  }
 }
 $25 = HEAP32[$m_flags >> 2] | 0;
 HEAP32[$m_flags >> 2] = $touching$0$off0 ? $25 | 2 : $25 & -3;
 $tobool64 = ($$pre$phiZ2D | 0) == 0;
 $touching$0$off0$not = $touching$0$off0 ^ 1;
 $tobool71 = ($listener | 0) == 0;
 if (!($tobool64 ^ 1 | $touching$0$off0$not | $tobool71)) FUNCTION_TABLE_vii[HEAP32[(HEAP32[$listener >> 2] | 0) + 8 >> 2] & 127]($listener, $this);
 if (!($tobool64 | $touching$0$off0 | $tobool71)) FUNCTION_TABLE_vii[HEAP32[(HEAP32[$listener >> 2] | 0) + 12 >> 2] & 127]($listener, $this);
 if ($6 | $touching$0$off0$not | $tobool71) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[$listener >> 2] | 0) + 16 >> 2] & 63]($listener, $this, $oldManifold);
 STACKTOP = sp;
 return;
}
function __ZN11b2WeldJoint24SolvePositionConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $40 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $50 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $60 = 0, $8 = 0.0, $9 = 0.0, $C = 0, $K = 0, $add = 0.0, $add$i = 0.0, $add$i109 = 0.0, $add20 = 0.0, $add52 = 0.0, $add59 = 0.0, $angularError$0 = 0.0, $call$i$i = 0.0, $call$i$i184 = 0.0, $call$i$i38 = 0.0, $call$i$i99 = 0.0, $call2$i$i = 0.0, $call2$i$i40 = 0.0, $call75$pn = 0.0, $call79$pn = 0.0, $cond$i = 0.0, $det$0$i = 0.0, $m_indexA = 0, $m_indexB = 0, $positionError$0 = 0.0, $positions = 0, $sub$i = 0.0, $sub$i106 = 0.0, $sub$i174 = 0.0, $sub$i174$pn = 0.0, $sub$i187 = 0.0, $sub$i4 = 0.0, $sub$i44 = 0.0, $sub$i49 = 0.0, $sub$i88 = 0.0, $sub2$i = 0.0, $sub2$i176 = 0.0, $sub2$i176$pn = 0.0, $sub29 = 0.0, $sub3$i = 0.0, $sub3$i190 = 0.0, $sub3$i52 = 0.0, $sub36 = 0.0, $sub88 = 0.0, $tmp95 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $K = sp + 24 | 0;
 $C = sp;
 $tmp95 = sp + 12 | 0;
 $m_indexA = $this + 116 | 0;
 $0 = HEAP32[$m_indexA >> 2] | 0;
 $positions = $data + 24 | 0;
 $1 = HEAP32[$positions >> 2] | 0;
 $2 = $1 + ($0 * 12 | 0) | 0;
 $8 = +HEAPF32[$2 >> 2];
 $9 = +HEAPF32[$2 + 4 >> 2];
 $10 = +HEAPF32[$1 + ($0 * 12 | 0) + 8 >> 2];
 $m_indexB = $this + 120 | 0;
 $11 = HEAP32[$m_indexB >> 2] | 0;
 $12 = $1 + ($11 * 12 | 0) | 0;
 $18 = +HEAPF32[$12 >> 2];
 $19 = +HEAPF32[$12 + 4 >> 2];
 $20 = +HEAPF32[$1 + ($11 * 12 | 0) + 8 >> 2];
 $call$i$i = +Math_sin(+$10);
 $call2$i$i = +Math_cos(+$10);
 $call$i$i38 = +Math_sin(+$20);
 $call2$i$i40 = +Math_cos(+$20);
 $21 = +HEAPF32[$this + 156 >> 2];
 $22 = +HEAPF32[$this + 160 >> 2];
 $23 = +HEAPF32[$this + 164 >> 2];
 $24 = +HEAPF32[$this + 168 >> 2];
 $sub$i = +HEAPF32[$this + 80 >> 2] - +HEAPF32[$this + 140 >> 2];
 $sub3$i = +HEAPF32[$this + 84 >> 2] - +HEAPF32[$this + 144 >> 2];
 $sub$i44 = $call2$i$i * $sub$i - $call$i$i * $sub3$i;
 $add$i = $call$i$i * $sub$i + $call2$i$i * $sub3$i;
 $sub$i49 = +HEAPF32[$this + 88 >> 2] - +HEAPF32[$this + 148 >> 2];
 $sub3$i52 = +HEAPF32[$this + 92 >> 2] - +HEAPF32[$this + 152 >> 2];
 $sub$i106 = $call2$i$i40 * $sub$i49 - $call$i$i38 * $sub3$i52;
 $add$i109 = $call$i$i38 * $sub$i49 + $call2$i$i40 * $sub3$i52;
 $add = $21 + $22;
 $add20 = $add + $23 * $add$i * $add$i + $24 * $add$i109 * $add$i109;
 HEAPF32[$K >> 2] = $add20;
 $sub29 = -($23 * $add$i * $sub$i44) - $24 * $add$i109 * $sub$i106;
 HEAPF32[$K + 12 >> 2] = $sub29;
 $sub36 = -($23 * $add$i) - $24 * $add$i109;
 HEAPF32[$K + 24 >> 2] = $sub36;
 HEAPF32[$K + 4 >> 2] = $sub29;
 $add52 = $add + $23 * $sub$i44 * $sub$i44 + $24 * $sub$i106 * $sub$i106;
 HEAPF32[$K + 16 >> 2] = $add52;
 $add59 = $23 * $sub$i44 + $24 * $sub$i106;
 HEAPF32[$K + 28 >> 2] = $add59;
 HEAPF32[$K + 8 >> 2] = $sub36;
 HEAPF32[$K + 20 >> 2] = $add59;
 HEAPF32[$K + 32 >> 2] = $23 + $24;
 $sub$i187 = $18 + $sub$i106 - $8 - $sub$i44;
 $sub3$i190 = $19 + $add$i109 - $9 - $add$i;
 if (+HEAPF32[$this + 68 >> 2] > 0.0) {
  $call$i$i184 = +Math_sqrt(+($sub3$i190 * $sub3$i190 + $sub$i187 * $sub$i187));
  $sub$i4 = $add20 * $add52 - $sub29 * $sub29;
  if ($sub$i4 != 0.0) $det$0$i = 1.0 / $sub$i4; else $det$0$i = $sub$i4;
  $sub$i174 = -($det$0$i * ($add52 * $sub$i187 - $sub29 * $sub3$i190));
  $sub2$i176 = -($det$0$i * ($add20 * $sub3$i190 - $sub29 * $sub$i187));
  $angularError$0 = 0.0;
  $call75$pn = $sub$i44 * $sub2$i176 - $add$i * $sub$i174;
  $call79$pn = $sub$i106 * $sub2$i176 - $add$i109 * $sub$i174;
  $positionError$0 = $call$i$i184;
  $sub$i174$pn = $sub$i174;
  $sub2$i176$pn = $sub2$i176;
 } else {
  $sub88 = $20 - $10 - +HEAPF32[$this + 96 >> 2];
  $call$i$i99 = +Math_sqrt(+($sub$i187 * $sub$i187 + $sub3$i190 * $sub3$i190));
  if ($sub88 > 0.0) $cond$i = $sub88; else $cond$i = -$sub88;
  HEAPF32[$C >> 2] = $sub$i187;
  HEAPF32[$C + 4 >> 2] = $sub3$i190;
  HEAPF32[$C + 8 >> 2] = $sub88;
  __ZNK7b2Mat337Solve33ERK6b2Vec3($tmp95, $K, $C);
  $sub$i88 = -+HEAPF32[$tmp95 >> 2];
  $sub2$i = -+HEAPF32[$tmp95 + 4 >> 2];
  $40 = +HEAPF32[$tmp95 + 8 >> 2];
  $angularError$0 = $cond$i;
  $call75$pn = $sub$i44 * $sub2$i - $add$i * $sub$i88 - $40;
  $call79$pn = $sub$i106 * $sub2$i - $add$i109 * $sub$i88 - $40;
  $positionError$0 = $call$i$i99;
  $sub$i174$pn = $sub$i88;
  $sub2$i176$pn = $sub2$i;
 }
 $43 = +($8 - $21 * $sub$i174$pn);
 $44 = +($9 - $21 * $sub2$i176$pn);
 $45 = (HEAP32[$positions >> 2] | 0) + ((HEAP32[$m_indexA >> 2] | 0) * 12 | 0) | 0;
 HEAPF32[$45 >> 2] = $43;
 HEAPF32[$45 + 4 >> 2] = $44;
 $50 = HEAP32[$positions >> 2] | 0;
 HEAPF32[$50 + ((HEAP32[$m_indexA >> 2] | 0) * 12 | 0) + 8 >> 2] = $10 - $23 * $call75$pn;
 $52 = +($18 + $22 * $sub$i174$pn);
 $53 = +($19 + $22 * $sub2$i176$pn);
 $54 = $50 + ((HEAP32[$m_indexB >> 2] | 0) * 12 | 0) | 0;
 HEAPF32[$54 >> 2] = $52;
 HEAPF32[$54 + 4 >> 2] = $53;
 HEAPF32[(HEAP32[$positions >> 2] | 0) + ((HEAP32[$m_indexB >> 2] | 0) * 12 | 0) + 8 >> 2] = $20 + $24 * $call79$pn;
 if (!($positionError$0 <= .004999999888241291)) {
  $60 = 0;
  STACKTOP = sp;
  return $60 | 0;
 }
 $60 = $angularError$0 <= .03490658849477768;
 STACKTOP = sp;
 return $60 | 0;
}
function __ZN7b2World9DrawShapeEP9b2FixtureRK11b2TransformRK7b2Color($this, $fixture$0$3$val, $xf, $color) {
 $this = $this | 0;
 $fixture$0$3$val = $fixture$0$3$val | 0;
 $xf = $xf | 0;
 $color = $color | 0;
 var $$pre = 0.0, $$pre126 = 0.0, $$pre127 = 0.0, $$pre128 = 0.0, $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $18 = 0.0, $19 = 0, $2 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $38 = 0, $4 = 0.0, $40 = 0, $45 = 0, $46 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $60 = 0, $7 = 0.0, $8 = 0, $add17$i44 = 0.0, $axis = 0, $c$i63 = 0, $center = 0, $i$0122 = 0, $i23$0124 = 0, $inc = 0, $m_debugDraw13 = 0, $m_vertex2 = 0, $m_vertices29 = 0, $s$i66 = 0, $v1 = 0, $v110 = 0, $v2 = 0, $v211 = 0, $vertices22 = 0, $y16$i75 = 0, $y3$i$i$i62 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $center = sp + 104 | 0;
 $axis = sp + 32 | 0;
 $v1 = sp + 24 | 0;
 $v2 = sp + 16 | 0;
 $v110 = sp;
 $v211 = sp + 8 | 0;
 $vertices22 = sp + 40 | 0;
 $0 = HEAP32[$fixture$0$3$val + 4 >> 2] | 0;
 if (($0 | 0) == 0) {
  $1 = +HEAPF32[$xf + 12 >> 2];
  $2 = +HEAPF32[$fixture$0$3$val + 12 >> 2];
  $3 = +HEAPF32[$xf + 8 >> 2];
  $4 = +HEAPF32[$fixture$0$3$val + 16 >> 2];
  $add17$i44 = $2 * $3 + $1 * $4 + +HEAPF32[$xf + 4 >> 2];
  HEAPF32[$center >> 2] = +HEAPF32[$xf >> 2] + ($1 * $2 - $3 * $4);
  HEAPF32[$center + 4 >> 2] = $add17$i44;
  $7 = +HEAPF32[$fixture$0$3$val + 8 >> 2];
  HEAPF32[$axis >> 2] = $1 - $3 * 0.0;
  HEAPF32[$axis + 4 >> 2] = $3 + $1 * 0.0;
  $8 = HEAP32[$this + 102984 >> 2] | 0;
  FUNCTION_TABLE_viidii[HEAP32[(HEAP32[$8 >> 2] | 0) + 20 >> 2] & 63]($8, $center, $7, $axis, $color);
  STACKTOP = sp;
  return;
 } else if (($0 | 0) == 2) {
  $51 = HEAP32[$fixture$0$3$val + 148 >> 2] | 0;
  if (($51 | 0) >= 9) ___assert_fail(14152, 13864, 1077, 14176);
  if (($51 | 0) > 0) {
   $m_vertices29 = $fixture$0$3$val + 20 | 0;
   $$pre = +HEAPF32[$xf + 12 >> 2];
   $$pre126 = +HEAPF32[$xf + 8 >> 2];
   $$pre127 = +HEAPF32[$xf >> 2];
   $$pre128 = +HEAPF32[$xf + 4 >> 2];
   $i23$0124 = 0;
   do {
    $52 = +HEAPF32[$m_vertices29 + ($i23$0124 << 3) >> 2];
    $53 = +HEAPF32[$m_vertices29 + ($i23$0124 << 3) + 4 >> 2];
    $54 = +($$pre127 + ($$pre * $52 - $$pre126 * $53));
    $55 = +($52 * $$pre126 + $$pre * $53 + $$pre128);
    $56 = $vertices22 + ($i23$0124 << 3) | 0;
    HEAPF32[$56 >> 2] = $54;
    HEAPF32[$56 + 4 >> 2] = $55;
    $i23$0124 = $i23$0124 + 1 | 0;
   } while (($i23$0124 | 0) != ($51 | 0));
  }
  $60 = HEAP32[$this + 102984 >> 2] | 0;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$60 >> 2] | 0) + 12 >> 2] & 63]($60, $vertices22, $51, $color);
  STACKTOP = sp;
  return;
 } else if (($0 | 0) == 1) {
  $10 = +HEAPF32[$xf + 12 >> 2];
  $11 = +HEAPF32[$fixture$0$3$val + 12 >> 2];
  $12 = +HEAPF32[$xf + 8 >> 2];
  $13 = +HEAPF32[$fixture$0$3$val + 16 >> 2];
  $14 = +HEAPF32[$xf >> 2];
  $15 = +HEAPF32[$xf + 4 >> 2];
  HEAPF32[$v1 >> 2] = $14 + ($10 * $11 - $12 * $13);
  HEAPF32[$v1 + 4 >> 2] = $11 * $12 + $10 * $13 + $15;
  $m_vertex2 = $fixture$0$3$val + 20 | 0;
  $16 = +HEAPF32[$m_vertex2 >> 2];
  $18 = +HEAPF32[$m_vertex2 + 4 >> 2];
  HEAPF32[$v2 >> 2] = $14 + ($10 * $16 - $12 * $18);
  HEAPF32[$v2 + 4 >> 2] = $16 * $12 + $10 * $18 + $15;
  $19 = HEAP32[$this + 102984 >> 2] | 0;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$19 >> 2] | 0) + 24 >> 2] & 63]($19, $v1, $v2, $color);
  STACKTOP = sp;
  return;
 } else if (($0 | 0) == 3) {
  $22 = HEAP32[$fixture$0$3$val + 16 >> 2] | 0;
  $23 = HEAP32[$fixture$0$3$val + 12 >> 2] | 0;
  $c$i63 = $xf + 12 | 0;
  $24 = +HEAPF32[$c$i63 >> 2];
  $25 = +HEAPF32[$23 >> 2];
  $s$i66 = $xf + 8 | 0;
  $26 = +HEAPF32[$s$i66 >> 2];
  $27 = +HEAPF32[$23 + 4 >> 2];
  $28 = +HEAPF32[$xf >> 2];
  $y16$i75 = $xf + 4 | 0;
  $29 = +HEAPF32[$y16$i75 >> 2];
  HEAPF32[$v110 >> 2] = $28 + ($24 * $25 - $26 * $27);
  HEAPF32[$v110 + 4 >> 2] = $25 * $26 + $24 * $27 + $29;
  if (($22 | 0) <= 1) {
   STACKTOP = sp;
   return;
  }
  $y3$i$i$i62 = $v211 + 4 | 0;
  $m_debugDraw13 = $this + 102984 | 0;
  $31 = $24;
  $33 = $26;
  $34 = $28;
  $35 = $29;
  $i$0122 = 1;
  while (1) {
   $30 = +HEAPF32[$23 + ($i$0122 << 3) >> 2];
   $32 = +HEAPF32[$23 + ($i$0122 << 3) + 4 >> 2];
   HEAPF32[$v211 >> 2] = $34 + ($31 * $30 - $33 * $32);
   HEAPF32[$y3$i$i$i62 >> 2] = $30 * $33 + $31 * $32 + $35;
   $36 = HEAP32[$m_debugDraw13 >> 2] | 0;
   FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$36 >> 2] | 0) + 24 >> 2] & 63]($36, $v110, $v211, $color);
   $38 = HEAP32[$m_debugDraw13 >> 2] | 0;
   FUNCTION_TABLE_viidi[HEAP32[(HEAP32[$38 >> 2] | 0) + 16 >> 2] & 63]($38, $v110, .05000000074505806, $color);
   $40 = $v211;
   $45 = HEAP32[$40 + 4 >> 2] | 0;
   $46 = $v110;
   HEAP32[$46 >> 2] = HEAP32[$40 >> 2];
   HEAP32[$46 + 4 >> 2] = $45;
   $inc = $i$0122 + 1 | 0;
   if (($inc | 0) == ($22 | 0)) break;
   $31 = +HEAPF32[$c$i63 >> 2];
   $33 = +HEAPF32[$s$i66 >> 2];
   $34 = +HEAPF32[$xf >> 2];
   $35 = +HEAPF32[$y16$i75 >> 2];
   $i$0122 = $inc;
  }
  STACKTOP = sp;
  return;
 } else {
  STACKTOP = sp;
  return;
 }
}
function __ZN12b2MouseJoint23InitVelocityConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $0 = 0, $1 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $2 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $42 = 0.0, $43 = 0.0, $44 = 0, $48 = 0.0, $49 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $59 = 0.0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $add = 0.0, $add$i69 = 0.0, $add42 = 0.0, $add65 = 0.0, $call$i$i = 0.0, $call2$i$i = 0.0, $det$0$i = 0.0, $m_C = 0, $m_impulse = 0, $m_indexB = 0, $mul = 0.0, $mul$i37 = 0.0, $mul11$i = 0.0, $mul2$i = 0.0, $mul20 = 0.0, $mul23 = 0.0, $mul30 = 0.0, $mul74 = 0.0, $storemerge = 0.0, $sub$i = 0.0, $sub$i45 = 0.0, $sub$i62 = 0.0, $sub$i67 = 0.0, $sub3$i = 0.0, $sub3$i48 = 0.0, $v92 = 0, $vB$sroa$0$0$load7577 = 0.0, $vB$sroa$1$4$load7678 = 0.0, $velocities = 0, $w96 = 0, $wB$0 = 0.0, $y$i38 = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this + 52 >> 2] | 0;
 $1 = HEAP32[$0 + 8 >> 2] | 0;
 $m_indexB = $this + 116 | 0;
 HEAP32[$m_indexB >> 2] = $1;
 $2 = $0 + 28 | 0;
 $4 = HEAP32[$2 >> 2] | 0;
 $7 = HEAP32[$2 + 4 >> 2] | 0;
 $8 = $this + 128 | 0;
 HEAP32[$8 >> 2] = $4;
 HEAP32[$8 + 4 >> 2] = $7;
 $12 = +HEAPF32[$0 + 120 >> 2];
 HEAPF32[$this + 136 >> 2] = $12;
 $13 = +HEAPF32[$0 + 128 >> 2];
 HEAPF32[$this + 140 >> 2] = $13;
 $14 = HEAP32[$data + 24 >> 2] | 0;
 $15 = $14 + ($1 * 12 | 0) | 0;
 $21 = +HEAPF32[$15 >> 2];
 $22 = +HEAPF32[$15 + 4 >> 2];
 $23 = +HEAPF32[$14 + ($1 * 12 | 0) + 8 >> 2];
 $velocities = $data + 28 | 0;
 $24 = HEAP32[$velocities >> 2] | 0;
 $25 = $24 + ($1 * 12 | 0) | 0;
 $31 = +HEAPF32[$25 >> 2];
 $32 = +HEAPF32[$25 + 4 >> 2];
 $33 = +HEAPF32[$24 + ($1 * 12 | 0) + 8 >> 2];
 $call$i$i = +Math_sin(+$23);
 $call2$i$i = +Math_cos(+$23);
 $34 = +HEAPF32[$0 + 116 >> 2];
 $mul = +HEAPF32[$this + 84 >> 2] * 6.2831854820251465;
 $37 = +HEAPF32[$data >> 2];
 $mul20 = $37 * $34 * $mul * $mul;
 $add = $mul * $34 * 2.0 * +HEAPF32[$this + 88 >> 2] + $mul20;
 $38 = (HEAP32[tempDoublePtr >> 2] = $4, +HEAPF32[tempDoublePtr >> 2]);
 $39 = (HEAP32[tempDoublePtr >> 2] = $7, +HEAPF32[tempDoublePtr >> 2]);
 if (!($add > 1.1920928955078125e-7)) ___assert_fail(19e3, 18752, 125, 19040);
 $mul23 = $37 * $add;
 if ($mul23 != 0.0) $storemerge = 1.0 / $mul23; else $storemerge = $mul23;
 HEAPF32[$this + 108 >> 2] = $storemerge;
 $mul30 = $mul20 * $storemerge;
 HEAPF32[$this + 92 >> 2] = $mul30;
 $sub$i = +HEAPF32[$this + 68 >> 2] - $38;
 $sub3$i = +HEAPF32[$this + 72 >> 2] - $39;
 $sub$i67 = $call2$i$i * $sub$i - $call$i$i * $sub3$i;
 $add$i69 = $call$i$i * $sub$i + $call2$i$i * $sub3$i;
 $42 = +$sub$i67;
 $43 = +$add$i69;
 $44 = $this + 120 | 0;
 HEAPF32[$44 >> 2] = $42;
 HEAPF32[$44 + 4 >> 2] = $43;
 $add42 = $storemerge + ($12 + $add$i69 * $13 * $add$i69);
 $48 = $13 * $sub$i67;
 $49 = $add$i69 * $48;
 $add65 = $storemerge + ($12 + $sub$i67 * $48);
 $sub$i62 = $add42 * $add65 - $49 * $49;
 if ($sub$i62 != 0.0) $det$0$i = 1.0 / $sub$i62; else $det$0$i = $sub$i62;
 $mul11$i = $49 * $det$0$i;
 HEAPF32[$this + 144 >> 2] = $add65 * $det$0$i;
 HEAPF32[$this + 148 >> 2] = $mul11$i;
 HEAPF32[$this + 152 >> 2] = $mul11$i;
 HEAPF32[$this + 156 >> 2] = $add42 * $det$0$i;
 $m_C = $this + 160 | 0;
 $sub$i45 = $21 + $sub$i67 - +HEAPF32[$this + 76 >> 2];
 $sub3$i48 = $22 + $add$i69 - +HEAPF32[$this + 80 >> 2];
 $52 = +$sub$i45;
 $53 = +$sub3$i48;
 $54 = $m_C;
 HEAPF32[$54 >> 2] = $52;
 HEAPF32[$54 + 4 >> 2] = $53;
 HEAPF32[$m_C >> 2] = $mul30 * $sub$i45;
 HEAPF32[$this + 164 >> 2] = $mul30 * $sub3$i48;
 $mul74 = $33 * .9800000190734863;
 $m_impulse = $this + 96 | 0;
 if ((HEAP8[$data + 20 >> 0] | 0) == 0) {
  HEAPF32[$m_impulse >> 2] = 0.0;
  HEAPF32[$this + 100 >> 2] = 0.0;
  $vB$sroa$0$0$load7577 = $31;
  $vB$sroa$1$4$load7678 = $32;
  $wB$0 = $mul74;
  $62 = HEAP32[$velocities >> 2] | 0;
  $v92 = $62 + ($1 * 12 | 0) | 0;
  $63 = +$vB$sroa$0$0$load7577;
  $64 = +$vB$sroa$1$4$load7678;
  $65 = $v92;
  $66 = $65;
  HEAPF32[$66 >> 2] = $63;
  $67 = $65 + 4 | 0;
  $68 = $67;
  HEAPF32[$68 >> 2] = $64;
  $69 = HEAP32[$m_indexB >> 2] | 0;
  $70 = HEAP32[$velocities >> 2] | 0;
  $w96 = $70 + ($69 * 12 | 0) + 8 | 0;
  HEAPF32[$w96 >> 2] = $wB$0;
  STACKTOP = sp;
  return;
 } else {
  $59 = +HEAPF32[$data + 8 >> 2];
  $mul$i37 = $59 * +HEAPF32[$m_impulse >> 2];
  HEAPF32[$m_impulse >> 2] = $mul$i37;
  $y$i38 = $this + 100 | 0;
  $mul2$i = $59 * +HEAPF32[$y$i38 >> 2];
  HEAPF32[$y$i38 >> 2] = $mul2$i;
  $vB$sroa$0$0$load7577 = $31 + $12 * $mul$i37;
  $vB$sroa$1$4$load7678 = $32 + $mul2$i * $12;
  $wB$0 = $mul74 + $13 * ($mul2$i * $sub$i67 - $mul$i37 * $add$i69);
  $62 = HEAP32[$velocities >> 2] | 0;
  $v92 = $62 + ($1 * 12 | 0) | 0;
  $63 = +$vB$sroa$0$0$load7577;
  $64 = +$vB$sroa$1$4$load7678;
  $65 = $v92;
  $66 = $65;
  HEAPF32[$66 >> 2] = $63;
  $67 = $65 + 4 | 0;
  $68 = $67;
  HEAPF32[$68 >> 2] = $64;
  $69 = HEAP32[$m_indexB >> 2] | 0;
  $70 = HEAP32[$velocities >> 2] | 0;
  $w96 = $70 + ($69 * 12 | 0) + 8 | 0;
  HEAPF32[$w96 >> 2] = $wB$0;
  STACKTOP = sp;
  return;
 }
}
function _emscripten_bind_b2Body_SetType_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $10 = 0, $11 = 0, $15 = 0.0, $16 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $26 = 0, $27 = 0, $31 = 0, $34 = 0, $36 = 0, $37 = 0, $4 = 0.0, $40 = 0, $5 = 0, $7 = 0, $call$i$i = 0, $call$i$i3 = 0.0, $call2$i$i = 0.0, $conv$i$i = 0, $edge$010$i$i = 0, $edge$012$i$i = 0, $f$010$i = 0, $f$012$i = 0, $f$012$i8 = 0, $f$014$i = 0, $i$09$i$i = 0, $m_broadPhase$i = 0, $m_flags$i$i$i = 0, $m_flags$i4$i = 0, $m_moveBuffer$i = 0, $m_moveCapacity$i = 0, $m_moveCount$i = 0, $m_proxies$i$i = 0, $m_proxyCount$i$i = 0, $m_world$i = 0, $m_xf$i = 0, $sub$i$i = 0.0, $sub3$i$i = 0.0, $xf1$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $xf1$i = sp;
 $m_world$i = $self + 88 | 0;
 if ((HEAP32[(HEAP32[$m_world$i >> 2] | 0) + 102868 >> 2] & 2 | 0) != 0) ___assert_fail(11672, 11408, 115, 11704);
 if ((HEAP32[$self >> 2] | 0) == ($arg0 | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$self >> 2] = $arg0;
 __ZN6b2Body13ResetMassDataEv($self);
 if ((HEAP32[$self >> 2] | 0) == 0) {
  HEAPF32[$self + 64 >> 2] = 0.0;
  HEAPF32[$self + 68 >> 2] = 0.0;
  HEAPF32[$self + 72 >> 2] = 0.0;
  $4 = +HEAPF32[$self + 56 >> 2];
  HEAPF32[$self + 52 >> 2] = $4;
  $5 = $self + 44 | 0;
  $7 = HEAP32[$5 >> 2] | 0;
  $10 = HEAP32[$5 + 4 >> 2] | 0;
  $11 = $self + 36 | 0;
  HEAP32[$11 >> 2] = $7;
  HEAP32[$11 + 4 >> 2] = $10;
  $call$i$i3 = +Math_sin(+$4);
  HEAPF32[$xf1$i + 8 >> 2] = $call$i$i3;
  $call2$i$i = +Math_cos(+$4);
  HEAPF32[$xf1$i + 12 >> 2] = $call2$i$i;
  $15 = +HEAPF32[$self + 28 >> 2];
  $16 = +HEAPF32[$self + 32 >> 2];
  $sub$i$i = (HEAP32[tempDoublePtr >> 2] = $7, +HEAPF32[tempDoublePtr >> 2]) - ($call2$i$i * $15 - $call$i$i3 * $16);
  $sub3$i$i = (HEAP32[tempDoublePtr >> 2] = $10, +HEAPF32[tempDoublePtr >> 2]) - ($15 * $call$i$i3 + $call2$i$i * $16);
  $18 = +$sub$i$i;
  $19 = +$sub3$i$i;
  $20 = $xf1$i;
  HEAPF32[$20 >> 2] = $18;
  HEAPF32[$20 + 4 >> 2] = $19;
  $m_broadPhase$i = (HEAP32[$m_world$i >> 2] | 0) + 102872 | 0;
  $f$010$i = HEAP32[$self + 100 >> 2] | 0;
  if (($f$010$i | 0) != 0) {
   $m_xf$i = $self + 12 | 0;
   $f$012$i8 = $f$010$i;
   do {
    __ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4_($f$012$i8, $m_broadPhase$i, $xf1$i, $m_xf$i);
    $f$012$i8 = HEAP32[$f$012$i8 + 4 >> 2] | 0;
   } while (($f$012$i8 | 0) != 0);
  }
 }
 $m_flags$i4$i = $self + 4 | 0;
 $conv$i$i = HEAPU16[$m_flags$i4$i >> 1] | 0;
 if (($conv$i$i & 2 | 0) == 0) {
  HEAP16[$m_flags$i4$i >> 1] = $conv$i$i | 2;
  HEAPF32[$self + 144 >> 2] = 0.0;
 }
 HEAPF32[$self + 76 >> 2] = 0.0;
 HEAPF32[$self + 80 >> 2] = 0.0;
 HEAPF32[$self + 84 >> 2] = 0.0;
 $f$012$i = HEAP32[$self + 100 >> 2] | 0;
 if (($f$012$i | 0) == 0) {
  STACKTOP = sp;
  return;
 } else $f$014$i = $f$012$i;
 do {
  $26 = HEAP32[$f$014$i + 8 >> 2] | 0;
  if (($26 | 0) != 0) {
   $edge$010$i$i = HEAP32[$26 + 112 >> 2] | 0;
   if (($edge$010$i$i | 0) != 0) {
    $edge$012$i$i = $edge$010$i$i;
    do {
     $27 = HEAP32[$edge$012$i$i + 4 >> 2] | 0;
     if ((HEAP32[$27 + 48 >> 2] | 0) == ($f$014$i | 0) ? 1 : (HEAP32[$27 + 52 >> 2] | 0) == ($f$014$i | 0)) {
      $m_flags$i$i$i = $27 + 4 | 0;
      HEAP32[$m_flags$i$i$i >> 2] = HEAP32[$m_flags$i$i$i >> 2] | 8;
     }
     $edge$012$i$i = HEAP32[$edge$012$i$i + 12 >> 2] | 0;
    } while (($edge$012$i$i | 0) != 0);
   }
   $31 = HEAP32[$26 + 88 >> 2] | 0;
   if (($31 | 0) != 0) {
    $m_proxyCount$i$i = $f$014$i + 28 | 0;
    if ((HEAP32[$m_proxyCount$i$i >> 2] | 0) > 0) {
     $m_proxies$i$i = $f$014$i + 24 | 0;
     $m_moveCount$i = $31 + 102912 | 0;
     $m_moveCapacity$i = $31 + 102908 | 0;
     $m_moveBuffer$i = $31 + 102904 | 0;
     $36 = HEAP32[$m_moveCount$i >> 2] | 0;
     $i$09$i$i = 0;
     do {
      $34 = HEAP32[(HEAP32[$m_proxies$i$i >> 2] | 0) + ($i$09$i$i * 28 | 0) + 24 >> 2] | 0;
      if (($36 | 0) == (HEAP32[$m_moveCapacity$i >> 2] | 0)) {
       $37 = HEAP32[$m_moveBuffer$i >> 2] | 0;
       HEAP32[$m_moveCapacity$i >> 2] = $36 << 1;
       $call$i$i = _malloc($36 << 3) | 0;
       HEAP32[$m_moveBuffer$i >> 2] = $call$i$i;
       _memcpy($call$i$i | 0, $37 | 0, HEAP32[$m_moveCount$i >> 2] << 2 | 0) | 0;
       _free($37);
       $40 = HEAP32[$m_moveCount$i >> 2] | 0;
      } else $40 = $36;
      HEAP32[(HEAP32[$m_moveBuffer$i >> 2] | 0) + ($40 << 2) >> 2] = $34;
      $36 = (HEAP32[$m_moveCount$i >> 2] | 0) + 1 | 0;
      HEAP32[$m_moveCount$i >> 2] = $36;
      $i$09$i$i = $i$09$i$i + 1 | 0;
     } while (($i$09$i$i | 0) < (HEAP32[$m_proxyCount$i$i >> 2] | 0));
    }
   }
  }
  $f$014$i = HEAP32[$f$014$i + 4 >> 2] | 0;
 } while (($f$014$i | 0) != 0);
 STACKTOP = sp;
 return;
}
function __ZNK20b2SeparationFunction8EvaluateEiif($this, $indexA, $indexB, $t) {
 $this = $this | 0;
 $indexA = $indexA | 0;
 $indexB = $indexB | 0;
 $t = +$t;
 var $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $22 = 0, $28 = 0.0, $29 = 0.0, $30 = 0, $33 = 0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $48 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0, $63 = 0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $add$i100 = 0.0, $add$i120 = 0.0, $call$i$i = 0.0, $call$i$i121 = 0.0, $call2$i$i = 0.0, $call2$i$i123 = 0.0, $retval$0 = 0.0, $sub$i$i = 0.0, $sub$i$i134 = 0.0, $sub$i96 = 0.0, $sub4$i$i = 0.0, $sub4$i$i136 = 0.0, sp = 0;
 sp = STACKTOP;
 $sub$i96 = 1.0 - $t;
 $add$i100 = $sub$i96 * +HEAPF32[$this + 32 >> 2] + +HEAPF32[$this + 36 >> 2] * $t;
 $call$i$i = +Math_sin(+$add$i100);
 $call2$i$i = +Math_cos(+$add$i100);
 $6 = +HEAPF32[$this + 8 >> 2];
 $7 = +HEAPF32[$this + 12 >> 2];
 $sub$i$i = $sub$i96 * +HEAPF32[$this + 16 >> 2] + +HEAPF32[$this + 24 >> 2] * $t - ($call2$i$i * $6 - $call$i$i * $7);
 $sub4$i$i = $sub$i96 * +HEAPF32[$this + 20 >> 2] + +HEAPF32[$this + 28 >> 2] * $t - ($call$i$i * $6 + $call2$i$i * $7);
 $add$i120 = $sub$i96 * +HEAPF32[$this + 68 >> 2] + +HEAPF32[$this + 72 >> 2] * $t;
 $call$i$i121 = +Math_sin(+$add$i120);
 $call2$i$i123 = +Math_cos(+$add$i120);
 $14 = +HEAPF32[$this + 44 >> 2];
 $15 = +HEAPF32[$this + 48 >> 2];
 $sub$i$i134 = $sub$i96 * +HEAPF32[$this + 52 >> 2] + +HEAPF32[$this + 60 >> 2] * $t - ($call2$i$i123 * $14 - $call$i$i121 * $15);
 $sub4$i$i136 = $sub$i96 * +HEAPF32[$this + 56 >> 2] + +HEAPF32[$this + 64 >> 2] * $t - ($call$i$i121 * $14 + $call2$i$i123 * $15);
 $16 = HEAP32[$this + 80 >> 2] | 0;
 if (($16 | 0) == 2) {
  $56 = +HEAPF32[$this + 92 >> 2];
  $57 = +HEAPF32[$this + 96 >> 2];
  $58 = +HEAPF32[$this + 84 >> 2];
  $59 = +HEAPF32[$this + 88 >> 2];
  $60 = HEAP32[$this >> 2] | 0;
  if (!(($indexA | 0) > -1)) ___assert_fail(6408, 6440, 103, 6488);
  if ((HEAP32[$60 + 20 >> 2] | 0) <= ($indexA | 0)) ___assert_fail(6408, 6440, 103, 6488);
  $63 = (HEAP32[$60 + 16 >> 2] | 0) + ($indexA << 3) | 0;
  $69 = +HEAPF32[$63 >> 2];
  $70 = +HEAPF32[$63 + 4 >> 2];
  $retval$0 = ($call2$i$i123 * $56 - $call$i$i121 * $57) * ($sub$i$i + ($call2$i$i * $69 - $call$i$i * $70) - ($sub$i$i134 + ($call2$i$i123 * $58 - $call$i$i121 * $59))) + ($call$i$i121 * $56 + $call2$i$i123 * $57) * ($sub4$i$i + ($call$i$i * $69 + $call2$i$i * $70) - ($sub4$i$i136 + ($call$i$i121 * $58 + $call2$i$i123 * $59)));
  STACKTOP = sp;
  return +$retval$0;
 } else if (($16 | 0) == 0) {
  $17 = +HEAPF32[$this + 92 >> 2];
  $18 = +HEAPF32[$this + 96 >> 2];
  $19 = HEAP32[$this >> 2] | 0;
  if (!(($indexA | 0) > -1)) ___assert_fail(6408, 6440, 103, 6488);
  if ((HEAP32[$19 + 20 >> 2] | 0) <= ($indexA | 0)) ___assert_fail(6408, 6440, 103, 6488);
  $22 = (HEAP32[$19 + 16 >> 2] | 0) + ($indexA << 3) | 0;
  $28 = +HEAPF32[$22 >> 2];
  $29 = +HEAPF32[$22 + 4 >> 2];
  $30 = HEAP32[$this + 4 >> 2] | 0;
  if (!(($indexB | 0) > -1)) ___assert_fail(6408, 6440, 103, 6488);
  if ((HEAP32[$30 + 20 >> 2] | 0) <= ($indexB | 0)) ___assert_fail(6408, 6440, 103, 6488);
  $33 = (HEAP32[$30 + 16 >> 2] | 0) + ($indexB << 3) | 0;
  $39 = +HEAPF32[$33 >> 2];
  $40 = +HEAPF32[$33 + 4 >> 2];
  $retval$0 = $17 * ($sub$i$i134 + ($call2$i$i123 * $39 - $call$i$i121 * $40) - ($sub$i$i + ($call2$i$i * $28 - $call$i$i * $29))) + $18 * ($sub4$i$i136 + ($call$i$i121 * $39 + $call2$i$i123 * $40) - ($sub4$i$i + ($call$i$i * $28 + $call2$i$i * $29)));
  STACKTOP = sp;
  return +$retval$0;
 } else if (($16 | 0) == 1) {
  $41 = +HEAPF32[$this + 92 >> 2];
  $42 = +HEAPF32[$this + 96 >> 2];
  $43 = +HEAPF32[$this + 84 >> 2];
  $44 = +HEAPF32[$this + 88 >> 2];
  $45 = HEAP32[$this + 4 >> 2] | 0;
  if (!(($indexB | 0) > -1)) ___assert_fail(6408, 6440, 103, 6488);
  if ((HEAP32[$45 + 20 >> 2] | 0) <= ($indexB | 0)) ___assert_fail(6408, 6440, 103, 6488);
  $48 = (HEAP32[$45 + 16 >> 2] | 0) + ($indexB << 3) | 0;
  $54 = +HEAPF32[$48 >> 2];
  $55 = +HEAPF32[$48 + 4 >> 2];
  $retval$0 = ($call2$i$i * $41 - $call$i$i * $42) * ($sub$i$i134 + ($call2$i$i123 * $54 - $call$i$i121 * $55) - ($sub$i$i + ($call2$i$i * $43 - $call$i$i * $44))) + ($call$i$i * $41 + $call2$i$i * $42) * ($sub4$i$i136 + ($call$i$i121 * $54 + $call2$i$i123 * $55) - ($sub4$i$i + ($call$i$i * $43 + $call2$i$i * $44)));
  STACKTOP = sp;
  return +$retval$0;
 } else ___assert_fail(18472, 6328, 242, 6392);
 return 0.0;
}
function __ZN13b2PulleyJoint24SolvePositionConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $47 = 0, $49 = 0.0, $50 = 0.0, $51 = 0, $8 = 0.0, $9 = 0.0, $add$i = 0.0, $add$i126 = 0.0, $add30 = 0.0, $c = 0, $call$i$i = 0.0, $call$i$i116 = 0.0, $call$i$i134 = 0.0, $call$i$i23 = 0.0, $call2$i$i = 0.0, $call2$i$i25 = 0.0, $cond$i = 0.0, $div = 0.0, $div18 = 0.0, $m_indexA = 0, $m_indexB = 0, $mass$0 = 0.0, $mul$i74 = 0.0, $mul$i80 = 0.0, $mul1$i76 = 0.0, $mul1$i82 = 0.0, $mul44 = 0.0, $positions = 0, $sub$i = 0.0, $sub$i123 = 0.0, $sub$i144 = 0.0, $sub$i144198 = 0.0, $sub$i160 = 0.0, $sub$i160200 = 0.0, $sub$i29 = 0.0, $sub$i34 = 0.0, $sub$i92 = 0.0, $sub$i99 = 0.0, $sub3$i = 0.0, $sub3$i147 = 0.0, $sub3$i147199 = 0.0, $sub3$i163 = 0.0, $sub3$i163201 = 0.0, $sub3$i37 = 0.0, $sub37 = 0.0, sp = 0;
 sp = STACKTOP;
 $m_indexA = $this + 120 | 0;
 $0 = HEAP32[$m_indexA >> 2] | 0;
 $positions = $data + 24 | 0;
 $1 = HEAP32[$positions >> 2] | 0;
 $c = $1 + ($0 * 12 | 0) | 0;
 $2 = $c;
 $8 = +HEAPF32[$2 >> 2];
 $9 = +HEAPF32[$2 + 4 >> 2];
 $10 = +HEAPF32[$1 + ($0 * 12 | 0) + 8 >> 2];
 $m_indexB = $this + 124 | 0;
 $11 = HEAP32[$m_indexB >> 2] | 0;
 $12 = $1 + ($11 * 12 | 0) | 0;
 $18 = +HEAPF32[$12 >> 2];
 $19 = +HEAPF32[$12 + 4 >> 2];
 $20 = +HEAPF32[$1 + ($11 * 12 | 0) + 8 >> 2];
 $call$i$i = +Math_sin(+$10);
 $call2$i$i = +Math_cos(+$10);
 $call$i$i23 = +Math_sin(+$20);
 $call2$i$i25 = +Math_cos(+$20);
 $sub$i = +HEAPF32[$this + 92 >> 2] - +HEAPF32[$this + 160 >> 2];
 $sub3$i = +HEAPF32[$this + 96 >> 2] - +HEAPF32[$this + 164 >> 2];
 $sub$i29 = $call2$i$i * $sub$i - $call$i$i * $sub3$i;
 $add$i = $call$i$i * $sub$i + $call2$i$i * $sub3$i;
 $sub$i34 = +HEAPF32[$this + 100 >> 2] - +HEAPF32[$this + 168 >> 2];
 $sub3$i37 = +HEAPF32[$this + 104 >> 2] - +HEAPF32[$this + 172 >> 2];
 $sub$i123 = $call2$i$i25 * $sub$i34 - $call$i$i23 * $sub3$i37;
 $add$i126 = $call$i$i23 * $sub$i34 + $call2$i$i25 * $sub3$i37;
 $sub$i160 = $8 + $sub$i29 - +HEAPF32[$this + 68 >> 2];
 $sub3$i163 = $9 + $add$i - +HEAPF32[$this + 72 >> 2];
 $sub$i144 = $18 + $sub$i123 - +HEAPF32[$this + 76 >> 2];
 $sub3$i147 = $19 + $add$i126 - +HEAPF32[$this + 80 >> 2];
 $call$i$i134 = +Math_sqrt(+($sub$i160 * $sub$i160 + $sub3$i163 * $sub3$i163));
 $call$i$i116 = +Math_sqrt(+($sub$i144 * $sub$i144 + $sub3$i147 * $sub3$i147));
 if ($call$i$i134 > .04999999701976776) {
  $div = 1.0 / $call$i$i134;
  $sub$i160200 = $sub$i160 * $div;
  $sub3$i163201 = $sub3$i163 * $div;
 } else {
  $sub$i160200 = 0.0;
  $sub3$i163201 = 0.0;
 }
 if ($call$i$i116 > .04999999701976776) {
  $div18 = 1.0 / $call$i$i116;
  $sub$i144198 = $sub$i144 * $div18;
  $sub3$i147199 = $sub3$i147 * $div18;
 } else {
  $sub$i144198 = 0.0;
  $sub3$i147199 = 0.0;
 }
 $sub$i99 = $sub$i29 * $sub3$i163201 - $add$i * $sub$i160200;
 $sub$i92 = $sub$i123 * $sub3$i147199 - $add$i126 * $sub$i144198;
 $33 = +HEAPF32[$this + 176 >> 2];
 $34 = +HEAPF32[$this + 184 >> 2];
 $35 = +HEAPF32[$this + 180 >> 2];
 $36 = +HEAPF32[$this + 188 >> 2];
 $37 = +HEAPF32[$this + 112 >> 2];
 $add30 = $33 + $sub$i99 * $sub$i99 * $34 + $37 * $37 * ($35 + $sub$i92 * $sub$i92 * $36);
 if ($add30 > 0.0) $mass$0 = 1.0 / $add30; else $mass$0 = $add30;
 $sub37 = +HEAPF32[$this + 108 >> 2] - $call$i$i134 - $call$i$i116 * $37;
 if ($sub37 > 0.0) $cond$i = $sub37; else $cond$i = -$sub37;
 $39 = $mass$0 * $sub37;
 $mul$i80 = $sub$i160200 * $39;
 $mul1$i82 = $sub3$i163201 * $39;
 $mul44 = $39 * $37;
 $mul$i74 = $sub$i144198 * $mul44;
 $mul1$i76 = $sub3$i147199 * $mul44;
 $40 = +($8 + $mul$i80 * $33);
 $41 = +($9 + $mul1$i82 * $33);
 $42 = $c;
 HEAPF32[$42 >> 2] = $40;
 HEAPF32[$42 + 4 >> 2] = $41;
 $47 = HEAP32[$positions >> 2] | 0;
 HEAPF32[$47 + ((HEAP32[$m_indexA >> 2] | 0) * 12 | 0) + 8 >> 2] = $10 + ($sub$i29 * $mul1$i82 - $add$i * $mul$i80) * $34;
 $49 = +($18 + $mul$i74 * $35);
 $50 = +($19 + $mul1$i76 * $35);
 $51 = $47 + ((HEAP32[$m_indexB >> 2] | 0) * 12 | 0) | 0;
 HEAPF32[$51 >> 2] = $49;
 HEAPF32[$51 + 4 >> 2] = $50;
 HEAPF32[(HEAP32[$positions >> 2] | 0) + ((HEAP32[$m_indexB >> 2] | 0) * 12 | 0) + 8 >> 2] = $20 + $36 * ($sub$i123 * $mul1$i76 - $add$i126 * $mul$i74);
 STACKTOP = sp;
 return $cond$i < .004999999888241291 | 0;
}
function _emscripten_bind_b2World_DestroyBody_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $11 = 0, $13 = 0, $15 = 0, $18 = 0, $2 = 0, $20 = 0, $25 = 0, $4 = 0, $8 = 0, $arrayidx10$i = 0, $arrayidx10$i9 = 0, $ce$039$i = 0, $f$037$i = 0, $je$041$i = 0, $joint$i = 0, $joint10$pre$phi$iZ2D = 0, $m_bodyCount$i = 0, $m_bodyList$i = 0, $m_broadPhase$i = 0, $m_contactList$i = 0, $m_contactManager$i = 0, $m_destructionListener$i = 0, $m_destructionListener22$i = 0, $m_fixtureCount$i = 0, $m_fixtureCount34$pre$phi$iZ2D = 0, $m_fixtureList$i = 0, $m_jointList$i = 0, $m_next41$pre$i = 0, $m_prev$i = 0, sp = 0, $je$041$i$looptemp = 0, $ce$039$i$looptemp = 0, $f$037$i$looptemp = 0;
 sp = STACKTOP;
 $m_bodyCount$i = $self + 102960 | 0;
 if ((HEAP32[$m_bodyCount$i >> 2] | 0) <= 0) ___assert_fail(13920, 13864, 133, 13936);
 if ((HEAP32[$self + 102868 >> 2] & 2 | 0) != 0) ___assert_fail(13840, 13864, 134, 13936);
 $m_jointList$i = $arg0 + 108 | 0;
 $2 = HEAP32[$m_jointList$i >> 2] | 0;
 if (($2 | 0) != 0) {
  $m_destructionListener$i = $self + 102980 | 0;
  $je$041$i = $2;
  do {
   $je$041$i$looptemp = $je$041$i;
   $je$041$i = HEAP32[$je$041$i + 12 >> 2] | 0;
   $4 = HEAP32[$m_destructionListener$i >> 2] | 0;
   if (($4 | 0) == 0) $joint10$pre$phi$iZ2D = $je$041$i$looptemp + 4 | 0; else {
    $joint$i = $je$041$i$looptemp + 4 | 0;
    FUNCTION_TABLE_vii[HEAP32[(HEAP32[$4 >> 2] | 0) + 8 >> 2] & 127]($4, HEAP32[$joint$i >> 2] | 0);
    $joint10$pre$phi$iZ2D = $joint$i;
   }
   __ZN7b2World12DestroyJointEP7b2Joint($self, HEAP32[$joint10$pre$phi$iZ2D >> 2] | 0);
   HEAP32[$m_jointList$i >> 2] = $je$041$i;
  } while (($je$041$i | 0) != 0);
 }
 HEAP32[$m_jointList$i >> 2] = 0;
 $m_contactList$i = $arg0 + 112 | 0;
 $8 = HEAP32[$m_contactList$i >> 2] | 0;
 if (($8 | 0) != 0) {
  $m_contactManager$i = $self + 102872 | 0;
  $ce$039$i = $8;
  do {
   $ce$039$i$looptemp = $ce$039$i;
   $ce$039$i = HEAP32[$ce$039$i + 12 >> 2] | 0;
   __ZN16b2ContactManager7DestroyEP9b2Contact($m_contactManager$i, HEAP32[$ce$039$i$looptemp + 4 >> 2] | 0);
  } while (($ce$039$i | 0) != 0);
 }
 HEAP32[$m_contactList$i >> 2] = 0;
 $m_fixtureList$i = $arg0 + 100 | 0;
 $11 = HEAP32[$m_fixtureList$i >> 2] | 0;
 L21 : do if (($11 | 0) == 0) $m_fixtureCount34$pre$phi$iZ2D = $arg0 + 104 | 0; else {
  $m_destructionListener22$i = $self + 102980 | 0;
  $m_broadPhase$i = $self + 102872 | 0;
  $m_fixtureCount$i = $arg0 + 104 | 0;
  $f$037$i = $11;
  while (1) {
   $f$037$i$looptemp = $f$037$i;
   $f$037$i = HEAP32[$f$037$i + 4 >> 2] | 0;
   $13 = HEAP32[$m_destructionListener22$i >> 2] | 0;
   if (($13 | 0) != 0) FUNCTION_TABLE_vii[HEAP32[(HEAP32[$13 >> 2] | 0) + 12 >> 2] & 127]($13, $f$037$i$looptemp);
   __ZN9b2Fixture14DestroyProxiesEP12b2BroadPhase($f$037$i$looptemp, $m_broadPhase$i);
   __ZN9b2Fixture7DestroyEP16b2BlockAllocator($f$037$i$looptemp, $self);
   $15 = HEAP8[7540] | 0;
   if (!(($15 & 255) < 14)) break;
   $arrayidx10$i9 = $self + (($15 & 255) << 2) + 12 | 0;
   HEAP32[$f$037$i$looptemp >> 2] = HEAP32[$arrayidx10$i9 >> 2];
   HEAP32[$arrayidx10$i9 >> 2] = $f$037$i$looptemp;
   HEAP32[$m_fixtureList$i >> 2] = $f$037$i;
   HEAP32[$m_fixtureCount$i >> 2] = (HEAP32[$m_fixtureCount$i >> 2] | 0) + -1;
   if (($f$037$i | 0) == 0) {
    $m_fixtureCount34$pre$phi$iZ2D = $m_fixtureCount$i;
    break L21;
   }
  }
  ___assert_fail(8264, 8176, 173, 11352);
 } while (0);
 HEAP32[$m_fixtureList$i >> 2] = 0;
 HEAP32[$m_fixtureCount34$pre$phi$iZ2D >> 2] = 0;
 $m_prev$i = $arg0 + 92 | 0;
 $18 = HEAP32[$m_prev$i >> 2] | 0;
 $m_next41$pre$i = $arg0 + 96 | 0;
 if (($18 | 0) != 0) HEAP32[$18 + 96 >> 2] = HEAP32[$m_next41$pre$i >> 2];
 $20 = HEAP32[$m_next41$pre$i >> 2] | 0;
 if (($20 | 0) != 0) HEAP32[$20 + 92 >> 2] = HEAP32[$m_prev$i >> 2];
 $m_bodyList$i = $self + 102952 | 0;
 if ((HEAP32[$m_bodyList$i >> 2] | 0) == ($arg0 | 0)) HEAP32[$m_bodyList$i >> 2] = HEAP32[$m_next41$pre$i >> 2];
 HEAP32[$m_bodyCount$i >> 2] = (HEAP32[$m_bodyCount$i >> 2] | 0) + -1;
 $25 = HEAP8[7648] | 0;
 if (($25 & 255) < 14) {
  $arrayidx10$i = $self + (($25 & 255) << 2) + 12 | 0;
  HEAP32[$arg0 >> 2] = HEAP32[$arrayidx10$i >> 2];
  HEAP32[$arrayidx10$i >> 2] = $arg0;
  STACKTOP = sp;
  return;
 } else ___assert_fail(8264, 8176, 173, 11352);
}
function _emscripten_bind_b2World_QueryAABB_2($self, $arg0, $arg1) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 $arg1 = $arg1 | 0;
 var $2 = 0, $26 = 0, $3 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $arraydecay$i$i$i$i = 0, $call$i$i = 0, $call$i$i26 = 0, $child1$i$i$i = 0, $child2$i$i = 0, $dec$i = 0, $inc$i = 0, $inc$i14 = 0, $inc$i33 = 0, $m_capacity$i$i$i$i = 0, $m_count$i$i$i$i = 0, $m_nodeCapacity$i$i$i$i = 0, $m_nodes$i$i = 0, $stack$i$i = 0, $x1$i$i$i$i = 0, $y$i9$i$i$i = 0, $y2$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040 | 0;
 $stack$i$i = sp;
 $arraydecay$i$i$i$i = $stack$i$i + 4 | 0;
 HEAP32[$stack$i$i >> 2] = $arraydecay$i$i$i$i;
 $m_count$i$i$i$i = $stack$i$i + 1028 | 0;
 HEAP32[$m_count$i$i$i$i >> 2] = 0;
 $m_capacity$i$i$i$i = $stack$i$i + 1032 | 0;
 HEAP32[$m_capacity$i$i$i$i >> 2] = 256;
 $2 = HEAP32[$stack$i$i >> 2] | 0;
 HEAP32[$2 + (HEAP32[$m_count$i$i$i$i >> 2] << 2) >> 2] = HEAP32[$self + 102872 >> 2];
 $3 = HEAP32[$m_count$i$i$i$i >> 2] | 0;
 $inc$i14 = $3 + 1 | 0;
 HEAP32[$m_count$i$i$i$i >> 2] = $inc$i14;
 do if (($3 | 0) > -1) {
  $m_nodes$i$i = $self + 102876 | 0;
  $y$i9$i$i$i = $arg1 + 4 | 0;
  $x1$i$i$i$i = $arg1 + 8 | 0;
  $y2$i$i$i$i = $arg1 + 12 | 0;
  $m_nodeCapacity$i$i$i$i = $self + 102884 | 0;
  $4 = $inc$i14;
  L3 : while (1) {
   if (($4 | 0) <= 0) {
    label = 4;
    break;
   }
   $dec$i = $4 + -1 | 0;
   HEAP32[$m_count$i$i$i$i >> 2] = $dec$i;
   $5 = HEAP32[$stack$i$i >> 2] | 0;
   $6 = HEAP32[$5 + ($dec$i << 2) >> 2] | 0;
   do if (($6 | 0) == -1) $7 = $dec$i; else {
    $8 = HEAP32[$m_nodes$i$i >> 2] | 0;
    if ((+HEAPF32[$arg1 >> 2] - +HEAPF32[$8 + ($6 * 36 | 0) + 8 >> 2] > 0.0 ? 1 : +HEAPF32[$y$i9$i$i$i >> 2] - +HEAPF32[$8 + ($6 * 36 | 0) + 12 >> 2] > 0.0) | +HEAPF32[$8 + ($6 * 36 | 0) >> 2] - +HEAPF32[$x1$i$i$i$i >> 2] > 0.0 | +HEAPF32[$8 + ($6 * 36 | 0) + 4 >> 2] - +HEAPF32[$y2$i$i$i$i >> 2] > 0.0) $7 = $dec$i; else {
     $child1$i$i$i = $8 + ($6 * 36 | 0) + 24 | 0;
     if ((HEAP32[$child1$i$i$i >> 2] | 0) == -1) {
      if (!(($6 | 0) > -1)) {
       label = 11;
       break L3;
      }
      if ((HEAP32[$m_nodeCapacity$i$i$i$i >> 2] | 0) <= ($6 | 0)) {
       label = 11;
       break L3;
      }
      if (!(FUNCTION_TABLE_iii[HEAP32[(HEAP32[$arg0 >> 2] | 0) + 8 >> 2] & 63]($arg0, HEAP32[(HEAP32[$8 + ($6 * 36 | 0) + 16 >> 2] | 0) + 16 >> 2] | 0) | 0)) {
       label = 21;
       break L3;
      }
      $7 = HEAP32[$m_count$i$i$i$i >> 2] | 0;
      break;
     }
     if (($dec$i | 0) == (HEAP32[$m_capacity$i$i$i$i >> 2] | 0)) {
      HEAP32[$m_capacity$i$i$i$i >> 2] = $dec$i << 1;
      $call$i$i26 = _malloc($dec$i << 3) | 0;
      HEAP32[$stack$i$i >> 2] = $call$i$i26;
      _memcpy($call$i$i26 | 0, $5 | 0, HEAP32[$m_count$i$i$i$i >> 2] << 2 | 0) | 0;
      if (($5 | 0) != ($arraydecay$i$i$i$i | 0)) _free($5);
     }
     $26 = HEAP32[$stack$i$i >> 2] | 0;
     HEAP32[$26 + (HEAP32[$m_count$i$i$i$i >> 2] << 2) >> 2] = HEAP32[$child1$i$i$i >> 2];
     $inc$i33 = (HEAP32[$m_count$i$i$i$i >> 2] | 0) + 1 | 0;
     HEAP32[$m_count$i$i$i$i >> 2] = $inc$i33;
     $child2$i$i = $8 + ($6 * 36 | 0) + 28 | 0;
     if (($inc$i33 | 0) == (HEAP32[$m_capacity$i$i$i$i >> 2] | 0)) {
      HEAP32[$m_capacity$i$i$i$i >> 2] = $inc$i33 << 1;
      $call$i$i = _malloc($inc$i33 << 3) | 0;
      HEAP32[$stack$i$i >> 2] = $call$i$i;
      _memcpy($call$i$i | 0, $26 | 0, HEAP32[$m_count$i$i$i$i >> 2] << 2 | 0) | 0;
      if (($26 | 0) != ($arraydecay$i$i$i$i | 0)) _free($26);
     }
     HEAP32[(HEAP32[$stack$i$i >> 2] | 0) + (HEAP32[$m_count$i$i$i$i >> 2] << 2) >> 2] = HEAP32[$child2$i$i >> 2];
     $inc$i = (HEAP32[$m_count$i$i$i$i >> 2] | 0) + 1 | 0;
     HEAP32[$m_count$i$i$i$i >> 2] = $inc$i;
     $7 = $inc$i;
    }
   } while (0);
   if (($7 | 0) > 0) $4 = $7; else {
    label = 21;
    break;
   }
  }
  if ((label | 0) == 4) ___assert_fail(12448, 12464, 67, 12512); else if ((label | 0) == 11) ___assert_fail(14568, 14512, 153, 14616); else if ((label | 0) == 21) {
   $34 = HEAP32[$stack$i$i >> 2] | 0;
   break;
  }
 } else $34 = $2; while (0);
 if (($34 | 0) == ($arraydecay$i$i$i$i | 0)) {
  STACKTOP = sp;
  return;
 }
 _free($34);
 HEAP32[$stack$i$i >> 2] = 0;
 STACKTOP = sp;
 return;
}
function __ZN15b2FrictionJoint24SolveVelocityConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $28 = 0.0, $30 = 0.0, $32 = 0.0, $33 = 0.0, $35 = 0.0, $40 = 0, $46 = 0.0, $47 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $63 = 0, $65 = 0.0, $66 = 0.0, $67 = 0, $8 = 0.0, $9 = 0.0, $add = 0.0, $add$i72 = 0.0, $add$i75 = 0.0, $add12$i = 0.0, $add22 = 0.0, $add4$i78 = 0.0, $call$i$i$i = 0.0, $cond$i$i = 0.0, $cond$i2$i = 0.0, $div$i = 0.0, $m_angularImpulse = 0, $m_indexA = 0, $m_indexB = 0, $m_linearImpulse = 0, $mul$i59 = 0.0, $mul$i61 = 0.0, $mul13 = 0.0, $mul2$i = 0.0, $mul2$i62 = 0.0, $mul33 = 0.0, $sub$i54 = 0.0, $sub$i95 = 0.0, $sub15 = 0.0, $sub18 = 0.0, $sub20 = 0.0, $sub3$i = 0.0, $sub3$i98 = 0.0, $velocities = 0, $y3$i77 = 0, sp = 0;
 sp = STACKTOP;
 $m_indexA = $this + 104 | 0;
 $0 = HEAP32[$m_indexA >> 2] | 0;
 $velocities = $data + 28 | 0;
 $1 = HEAP32[$velocities >> 2] | 0;
 $2 = $1 + ($0 * 12 | 0) | 0;
 $8 = +HEAPF32[$2 >> 2];
 $9 = +HEAPF32[$2 + 4 >> 2];
 $10 = +HEAPF32[$1 + ($0 * 12 | 0) + 8 >> 2];
 $m_indexB = $this + 108 | 0;
 $11 = HEAP32[$m_indexB >> 2] | 0;
 $12 = $1 + ($11 * 12 | 0) | 0;
 $18 = +HEAPF32[$12 >> 2];
 $19 = +HEAPF32[$12 + 4 >> 2];
 $20 = +HEAPF32[$1 + ($11 * 12 | 0) + 8 >> 2];
 $21 = +HEAPF32[$this + 144 >> 2];
 $22 = +HEAPF32[$this + 148 >> 2];
 $23 = +HEAPF32[$this + 152 >> 2];
 $24 = +HEAPF32[$this + 156 >> 2];
 $25 = +HEAPF32[$data >> 2];
 $m_angularImpulse = $this + 92 | 0;
 $28 = +HEAPF32[$m_angularImpulse >> 2];
 $mul13 = $25 * +HEAPF32[$this + 100 >> 2];
 $add = $28 - ($20 - $10) * +HEAPF32[$this + 176 >> 2];
 $sub15 = -$mul13;
 $cond$i$i = $add < $mul13 ? $add : $mul13;
 $cond$i2$i = $cond$i$i < $sub15 ? $sub15 : $cond$i$i;
 HEAPF32[$m_angularImpulse >> 2] = $cond$i2$i;
 $sub18 = $cond$i2$i - $28;
 $sub20 = $10 - $23 * $sub18;
 $add22 = $20 + $24 * $sub18;
 $30 = +HEAPF32[$this + 124 >> 2];
 $32 = +HEAPF32[$this + 120 >> 2];
 $33 = +HEAPF32[$this + 116 >> 2];
 $35 = +HEAPF32[$this + 112 >> 2];
 $sub$i95 = $33 * $sub20 + ($18 - $30 * $add22 - $8);
 $sub3$i98 = $19 + $32 * $add22 - $9 - $35 * $sub20;
 $add12$i = +HEAPF32[$this + 164 >> 2] * $sub$i95 + +HEAPF32[$this + 172 >> 2] * $sub3$i98;
 $m_linearImpulse = $this + 84 | 0;
 $40 = $m_linearImpulse;
 $46 = +HEAPF32[$40 >> 2];
 $47 = +HEAPF32[$40 + 4 >> 2];
 $add$i75 = $46 - (+HEAPF32[$this + 160 >> 2] * $sub$i95 + +HEAPF32[$this + 168 >> 2] * $sub3$i98);
 HEAPF32[$m_linearImpulse >> 2] = $add$i75;
 $y3$i77 = $this + 88 | 0;
 $add4$i78 = +HEAPF32[$y3$i77 >> 2] - $add12$i;
 HEAPF32[$y3$i77 >> 2] = $add4$i78;
 $mul33 = $25 * +HEAPF32[$this + 96 >> 2];
 $add$i72 = $add$i75 * $add$i75 + $add4$i78 * $add4$i78;
 if ($add$i72 > $mul33 * $mul33) {
  $call$i$i$i = +Math_sqrt(+$add$i72);
  if ($call$i$i$i < 1.1920928955078125e-7) {
   $50 = $add$i75;
   $51 = $add4$i78;
  } else {
   $div$i = 1.0 / $call$i$i$i;
   $mul$i61 = $add$i75 * $div$i;
   HEAPF32[$m_linearImpulse >> 2] = $mul$i61;
   $mul2$i62 = $add4$i78 * $div$i;
   HEAPF32[$y3$i77 >> 2] = $mul2$i62;
   $50 = $mul$i61;
   $51 = $mul2$i62;
  }
  $mul$i59 = $mul33 * $50;
  HEAPF32[$m_linearImpulse >> 2] = $mul$i59;
  $mul2$i = $mul33 * $51;
  HEAPF32[$y3$i77 >> 2] = $mul2$i;
  $52 = $mul$i59;
  $53 = $mul2$i;
 } else {
  $52 = $add$i75;
  $53 = $add4$i78;
 }
 $sub$i54 = $52 - $46;
 $sub3$i = $53 - $47;
 $56 = +($8 - $21 * $sub$i54);
 $57 = +($9 - $21 * $sub3$i);
 $58 = (HEAP32[$velocities >> 2] | 0) + ((HEAP32[$m_indexA >> 2] | 0) * 12 | 0) | 0;
 HEAPF32[$58 >> 2] = $56;
 HEAPF32[$58 + 4 >> 2] = $57;
 $63 = HEAP32[$velocities >> 2] | 0;
 HEAPF32[$63 + ((HEAP32[$m_indexA >> 2] | 0) * 12 | 0) + 8 >> 2] = $sub20 - $23 * ($35 * $sub3$i - $sub$i54 * $33);
 $65 = +($18 + $22 * $sub$i54);
 $66 = +($19 + $22 * $sub3$i);
 $67 = $63 + ((HEAP32[$m_indexB >> 2] | 0) * 12 | 0) | 0;
 HEAPF32[$67 >> 2] = $65;
 HEAPF32[$67 + 4 >> 2] = $66;
 HEAPF32[(HEAP32[$velocities >> 2] | 0) + ((HEAP32[$m_indexB >> 2] | 0) * 12 | 0) + 8 >> 2] = $add22 + $24 * ($sub3$i * $32 - $sub$i54 * $30);
 STACKTOP = sp;
 return;
}
function __ZNSt3__127__insertion_sort_incompleteIRPFbRK6b2PairS3_EPS1_EEbT0_S8_T_($__first, $__last, $__comp) {
 $__first = $__first | 0;
 $__last = $__last | 0;
 $__comp = $__comp | 0;
 var $__count$047 = 0, $__count$1 = 0, $__i$048 = 0, $__j$046 = 0, $__j$046$phi = 0, $__j$1 = 0, $__j$1$phi = 0, $__k$0 = 0, $__t = 0, $__t$i = 0, $add$ptr16 = 0, $add$ptr19 = 0, $inc = 0, $incdec$ptr = 0, $incdec$ptr25 = 0, $incdec$ptr34 = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__t$i = sp + 12 | 0;
 $__t = sp;
 switch (($__last - $__first | 0) / 12 | 0 | 0) {
 case 5:
  {
   __ZNSt3__17__sort5IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_S8_S8_T_($__first, $__first + 12 | 0, $__first + 24 | 0, $__first + 36 | 0, $__last + -12 | 0, $__comp) | 0;
   $retval$0 = 1;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
 case 4:
  {
   __ZNSt3__17__sort4IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_S8_T_($__first, $__first + 12 | 0, $__first + 24 | 0, $__last + -12 | 0, $__comp) | 0;
   $retval$0 = 1;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
 case 2:
  {
   $incdec$ptr = $__last + -12 | 0;
   if (!(FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 63]($incdec$ptr, $__first) | 0)) {
    $retval$0 = 1;
    STACKTOP = sp;
    return $retval$0 | 0;
   }
   HEAP32[$__t$i + 0 >> 2] = HEAP32[$__first + 0 >> 2];
   HEAP32[$__t$i + 4 >> 2] = HEAP32[$__first + 4 >> 2];
   HEAP32[$__t$i + 8 >> 2] = HEAP32[$__first + 8 >> 2];
   HEAP32[$__first + 0 >> 2] = HEAP32[$incdec$ptr + 0 >> 2];
   HEAP32[$__first + 4 >> 2] = HEAP32[$incdec$ptr + 4 >> 2];
   HEAP32[$__first + 8 >> 2] = HEAP32[$incdec$ptr + 8 >> 2];
   HEAP32[$incdec$ptr + 0 >> 2] = HEAP32[$__t$i + 0 >> 2];
   HEAP32[$incdec$ptr + 4 >> 2] = HEAP32[$__t$i + 4 >> 2];
   HEAP32[$incdec$ptr + 8 >> 2] = HEAP32[$__t$i + 8 >> 2];
   $retval$0 = 1;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
 case 3:
  {
   __ZNSt3__17__sort3IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_T_($__first, $__first + 12 | 0, $__last + -12 | 0, $__comp) | 0;
   $retval$0 = 1;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
 case 1:
 case 0:
  {
   $retval$0 = 1;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
 default:
  {
   $add$ptr16 = $__first + 24 | 0;
   __ZNSt3__17__sort3IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_T_($__first, $__first + 12 | 0, $add$ptr16, $__comp) | 0;
   $add$ptr19 = $__first + 36 | 0;
   if (($add$ptr19 | 0) == ($__last | 0)) {
    $retval$0 = 1;
    STACKTOP = sp;
    return $retval$0 | 0;
   }
   $__count$047 = 0;
   $__i$048 = $add$ptr19;
   $__j$046 = $add$ptr16;
   while (1) {
    if (FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 63]($__i$048, $__j$046) | 0) {
     HEAP32[$__t + 0 >> 2] = HEAP32[$__i$048 + 0 >> 2];
     HEAP32[$__t + 4 >> 2] = HEAP32[$__i$048 + 4 >> 2];
     HEAP32[$__t + 8 >> 2] = HEAP32[$__i$048 + 8 >> 2];
     $__j$1 = $__i$048;
     $__k$0 = $__j$046;
     while (1) {
      HEAP32[$__j$1 + 0 >> 2] = HEAP32[$__k$0 + 0 >> 2];
      HEAP32[$__j$1 + 4 >> 2] = HEAP32[$__k$0 + 4 >> 2];
      HEAP32[$__j$1 + 8 >> 2] = HEAP32[$__k$0 + 8 >> 2];
      if (($__k$0 | 0) == ($__first | 0)) break;
      $incdec$ptr25 = $__k$0 + -12 | 0;
      if (FUNCTION_TABLE_iii[HEAP32[$__comp >> 2] & 63]($__t, $incdec$ptr25) | 0) {
       $__j$1$phi = $__k$0;
       $__k$0 = $incdec$ptr25;
       $__j$1 = $__j$1$phi;
      } else break;
     }
     HEAP32[$__k$0 + 0 >> 2] = HEAP32[$__t + 0 >> 2];
     HEAP32[$__k$0 + 4 >> 2] = HEAP32[$__t + 4 >> 2];
     HEAP32[$__k$0 + 8 >> 2] = HEAP32[$__t + 8 >> 2];
     $inc = $__count$047 + 1 | 0;
     if (($inc | 0) == 8) break; else $__count$1 = $inc;
    } else $__count$1 = $__count$047;
    $incdec$ptr34 = $__i$048 + 12 | 0;
    if (($incdec$ptr34 | 0) == ($__last | 0)) {
     $retval$0 = 1;
     label = 16;
     break;
    } else {
     $__j$046$phi = $__i$048;
     $__count$047 = $__count$1;
     $__i$048 = $incdec$ptr34;
     $__j$046 = $__j$046$phi;
    }
   }
   if ((label | 0) == 16) {
    STACKTOP = sp;
    return $retval$0 | 0;
   }
   $retval$0 = ($__i$048 + 12 | 0) == ($__last | 0);
   STACKTOP = sp;
   return $retval$0 | 0;
  }
 }
 return 0;
}
function __ZN7b2World12DestroyJointEP7b2Joint($this, $j) {
 $this = $this | 0;
 $j = $j | 0;
 var $1 = 0, $12 = 0, $14 = 0, $18 = 0, $2 = 0, $20 = 0, $26 = 0, $4 = 0, $8 = 0, $9 = 0, $conv$i = 0, $conv$i47 = 0, $edge$058 = 0, $edge$060 = 0, $m_flags$i41 = 0, $m_flags$i42 = 0, $m_flags$i46 = 0, $m_jointCount = 0, $m_jointList = 0, $m_jointList38 = 0, $m_jointList69 = 0, $m_next8$pre = 0, $m_prev = 0, $next28$pre = 0, $next59$pre = 0, $prev = 0, $prev49 = 0, sp = 0;
 sp = STACKTOP;
 if ((HEAP32[$this + 102868 >> 2] & 2 | 0) != 0) ___assert_fail(13840, 13864, 274, 13968);
 $1 = HEAP8[$j + 61 >> 0] | 0;
 $m_prev = $j + 8 | 0;
 $2 = HEAP32[$m_prev >> 2] | 0;
 $m_next8$pre = $j + 12 | 0;
 if (($2 | 0) != 0) HEAP32[$2 + 12 >> 2] = HEAP32[$m_next8$pre >> 2];
 $4 = HEAP32[$m_next8$pre >> 2] | 0;
 if (($4 | 0) != 0) HEAP32[$4 + 8 >> 2] = HEAP32[$m_prev >> 2];
 $m_jointList = $this + 102956 | 0;
 if ((HEAP32[$m_jointList >> 2] | 0) == ($j | 0)) HEAP32[$m_jointList >> 2] = HEAP32[$m_next8$pre >> 2];
 $8 = HEAP32[$j + 48 >> 2] | 0;
 $9 = HEAP32[$j + 52 >> 2] | 0;
 $m_flags$i46 = $8 + 4 | 0;
 $conv$i47 = HEAPU16[$m_flags$i46 >> 1] | 0;
 if (($conv$i47 & 2 | 0) == 0) {
  HEAP16[$m_flags$i46 >> 1] = $conv$i47 | 2;
  HEAPF32[$8 + 144 >> 2] = 0.0;
 }
 $m_flags$i42 = $9 + 4 | 0;
 $conv$i = HEAPU16[$m_flags$i42 >> 1] | 0;
 if (($conv$i & 2 | 0) == 0) {
  HEAP16[$m_flags$i42 >> 1] = $conv$i | 2;
  HEAPF32[$9 + 144 >> 2] = 0.0;
 }
 $prev = $j + 24 | 0;
 $12 = HEAP32[$prev >> 2] | 0;
 $next28$pre = $j + 28 | 0;
 if (($12 | 0) != 0) HEAP32[$12 + 12 >> 2] = HEAP32[$next28$pre >> 2];
 $14 = HEAP32[$next28$pre >> 2] | 0;
 if (($14 | 0) != 0) HEAP32[$14 + 8 >> 2] = HEAP32[$prev >> 2];
 $m_jointList38 = $8 + 108 | 0;
 if (($j + 16 | 0) == (HEAP32[$m_jointList38 >> 2] | 0)) HEAP32[$m_jointList38 >> 2] = HEAP32[$next28$pre >> 2];
 HEAP32[$prev >> 2] = 0;
 HEAP32[$next28$pre >> 2] = 0;
 $prev49 = $j + 40 | 0;
 $18 = HEAP32[$prev49 >> 2] | 0;
 $next59$pre = $j + 44 | 0;
 if (($18 | 0) != 0) HEAP32[$18 + 12 >> 2] = HEAP32[$next59$pre >> 2];
 $20 = HEAP32[$next59$pre >> 2] | 0;
 if (($20 | 0) != 0) HEAP32[$20 + 8 >> 2] = HEAP32[$prev49 >> 2];
 $m_jointList69 = $9 + 108 | 0;
 if (($j + 32 | 0) == (HEAP32[$m_jointList69 >> 2] | 0)) HEAP32[$m_jointList69 >> 2] = HEAP32[$next59$pre >> 2];
 HEAP32[$prev49 >> 2] = 0;
 HEAP32[$next59$pre >> 2] = 0;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$j >> 2] | 0) + 20 >> 2] & 127]($j);
 do switch (HEAP32[$j + 4 >> 2] | 0) {
 case 3:
  {
   __ZN16b2BlockAllocator4FreeEPvi($this, $j, 176);
   break;
  }
 case 6:
  {
   __ZN16b2BlockAllocator4FreeEPvi($this, $j, 276);
   break;
  }
 case 5:
  {
   __ZN16b2BlockAllocator4FreeEPvi($this, $j, 168);
   break;
  }
 case 10:
  {
   __ZN16b2BlockAllocator4FreeEPvi($this, $j, 168);
   break;
  }
 case 1:
  {
   __ZN16b2BlockAllocator4FreeEPvi($this, $j, 228);
   break;
  }
 case 8:
  {
   __ZN16b2BlockAllocator4FreeEPvi($this, $j, 208);
   break;
  }
 case 4:
  {
   __ZN16b2BlockAllocator4FreeEPvi($this, $j, 196);
   break;
  }
 case 2:
  {
   __ZN16b2BlockAllocator4FreeEPvi($this, $j, 256);
   break;
  }
 case 7:
  {
   __ZN16b2BlockAllocator4FreeEPvi($this, $j, 224);
   break;
  }
 case 9:
  {
   __ZN16b2BlockAllocator4FreeEPvi($this, $j, 180);
   break;
  }
 default:
  ___assert_fail(18472, 18480, 166, 18536);
 } while (0);
 $m_jointCount = $this + 102964 | 0;
 $26 = HEAP32[$m_jointCount >> 2] | 0;
 if (($26 | 0) <= 0) ___assert_fail(13984, 13864, 346, 13968);
 HEAP32[$m_jointCount >> 2] = $26 + -1;
 if (!($1 << 24 >> 24 == 0)) {
  STACKTOP = sp;
  return;
 }
 $edge$058 = HEAP32[$9 + 112 >> 2] | 0;
 if (($edge$058 | 0) == 0) {
  STACKTOP = sp;
  return;
 } else $edge$060 = $edge$058;
 do {
  if ((HEAP32[$edge$060 >> 2] | 0) == ($8 | 0)) {
   $m_flags$i41 = (HEAP32[$edge$060 + 4 >> 2] | 0) + 4 | 0;
   HEAP32[$m_flags$i41 >> 2] = HEAP32[$m_flags$i41 >> 2] | 8;
  }
  $edge$060 = HEAP32[$edge$060 + 12 >> 2] | 0;
 } while (($edge$060 | 0) != 0);
 STACKTOP = sp;
 return;
}
function __ZN11b2GearJoint24SolveVelocityConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0, $32 = 0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $50 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $69 = 0, $71 = 0.0, $72 = 0.0, $73 = 0, $78 = 0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0, $87 = 0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0, $add43 = 0.0, $add50 = 0.0, $m_impulse = 0, $m_indexA = 0, $m_indexB = 0, $m_indexC = 0, $m_indexD = 0, $mul35 = 0.0, $mul38 = 0.0, $mul45 = 0.0, $mul52 = 0.0, $mul59 = 0.0, $sub57 = 0.0, $sub64 = 0.0, $velocities = 0, sp = 0;
 sp = STACKTOP;
 $m_indexA = $this + 160 | 0;
 $0 = HEAP32[$m_indexA >> 2] | 0;
 $velocities = $data + 28 | 0;
 $1 = HEAP32[$velocities >> 2] | 0;
 $2 = $1 + ($0 * 12 | 0) | 0;
 $8 = +HEAPF32[$2 >> 2];
 $9 = +HEAPF32[$2 + 4 >> 2];
 $10 = +HEAPF32[$1 + ($0 * 12 | 0) + 8 >> 2];
 $m_indexB = $this + 164 | 0;
 $11 = HEAP32[$m_indexB >> 2] | 0;
 $12 = $1 + ($11 * 12 | 0) | 0;
 $18 = +HEAPF32[$12 >> 2];
 $19 = +HEAPF32[$12 + 4 >> 2];
 $20 = +HEAPF32[$1 + ($11 * 12 | 0) + 8 >> 2];
 $m_indexC = $this + 168 | 0;
 $21 = HEAP32[$m_indexC >> 2] | 0;
 $22 = $1 + ($21 * 12 | 0) | 0;
 $28 = +HEAPF32[$22 >> 2];
 $29 = +HEAPF32[$22 + 4 >> 2];
 $30 = +HEAPF32[$1 + ($21 * 12 | 0) + 8 >> 2];
 $m_indexD = $this + 172 | 0;
 $31 = HEAP32[$m_indexD >> 2] | 0;
 $32 = $1 + ($31 * 12 | 0) | 0;
 $38 = +HEAPF32[$32 >> 2];
 $39 = +HEAPF32[$32 + 4 >> 2];
 $40 = +HEAPF32[$1 + ($31 * 12 | 0) + 8 >> 2];
 $41 = +HEAPF32[$this + 240 >> 2];
 $42 = +HEAPF32[$this + 244 >> 2];
 $43 = +HEAPF32[$this + 248 >> 2];
 $44 = +HEAPF32[$this + 252 >> 2];
 $45 = +HEAPF32[$this + 256 >> 2];
 $46 = +HEAPF32[$this + 264 >> 2];
 $47 = +HEAPF32[$this + 260 >> 2];
 $48 = +HEAPF32[$this + 268 >> 2];
 $50 = +HEAPF32[$this + 272 >> 2] * (($8 - $28) * $41 + ($9 - $29) * $42 + (($18 - $38) * $43 + ($19 - $39) * $44) + ($10 * $45 - $30 * $46 + ($20 * $47 - $40 * $48)));
 $mul35 = -$50;
 $m_impulse = $this + 156 | 0;
 HEAPF32[$m_impulse >> 2] = +HEAPF32[$m_impulse >> 2] - $50;
 $mul38 = +HEAPF32[$this + 208 >> 2] * $mul35;
 $add43 = $10 + +HEAPF32[$this + 224 >> 2] * $mul35 * $45;
 $mul45 = +HEAPF32[$this + 212 >> 2] * $mul35;
 $add50 = $20 + +HEAPF32[$this + 228 >> 2] * $mul35 * $47;
 $mul52 = +HEAPF32[$this + 216 >> 2] * $mul35;
 $sub57 = $30 - +HEAPF32[$this + 232 >> 2] * $mul35 * $46;
 $mul59 = +HEAPF32[$this + 220 >> 2] * $mul35;
 $sub64 = $40 - +HEAPF32[$this + 236 >> 2] * $mul35 * $48;
 $62 = +($8 + $41 * $mul38);
 $63 = +($9 + $42 * $mul38);
 $64 = (HEAP32[$velocities >> 2] | 0) + ((HEAP32[$m_indexA >> 2] | 0) * 12 | 0) | 0;
 HEAPF32[$64 >> 2] = $62;
 HEAPF32[$64 + 4 >> 2] = $63;
 $69 = HEAP32[$velocities >> 2] | 0;
 HEAPF32[$69 + ((HEAP32[$m_indexA >> 2] | 0) * 12 | 0) + 8 >> 2] = $add43;
 $71 = +($18 + $43 * $mul45);
 $72 = +($19 + $mul45 * $44);
 $73 = $69 + ((HEAP32[$m_indexB >> 2] | 0) * 12 | 0) | 0;
 HEAPF32[$73 >> 2] = $71;
 HEAPF32[$73 + 4 >> 2] = $72;
 $78 = HEAP32[$velocities >> 2] | 0;
 HEAPF32[$78 + ((HEAP32[$m_indexB >> 2] | 0) * 12 | 0) + 8 >> 2] = $add50;
 $80 = +($28 - $41 * $mul52);
 $81 = +($29 - $42 * $mul52);
 $82 = $78 + ((HEAP32[$m_indexC >> 2] | 0) * 12 | 0) | 0;
 HEAPF32[$82 >> 2] = $80;
 HEAPF32[$82 + 4 >> 2] = $81;
 $87 = HEAP32[$velocities >> 2] | 0;
 HEAPF32[$87 + ((HEAP32[$m_indexC >> 2] | 0) * 12 | 0) + 8 >> 2] = $sub57;
 $89 = +($38 - $43 * $mul59);
 $90 = +($39 - $44 * $mul59);
 $91 = $87 + ((HEAP32[$m_indexD >> 2] | 0) * 12 | 0) | 0;
 HEAPF32[$91 >> 2] = $89;
 HEAPF32[$91 + 4 >> 2] = $90;
 HEAPF32[(HEAP32[$velocities >> 2] | 0) + ((HEAP32[$m_indexD >> 2] | 0) * 12 | 0) + 8 >> 2] = $sub64;
 STACKTOP = sp;
 return;
}
function __ZN12b2WheelJoint24SolveVelocityConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $0 = 0.0, $1 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $2 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $3 = 0.0, $32 = 0.0, $33 = 0.0, $37 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $45 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $56 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $add$i76 = 0.0, $add30 = 0.0, $add39 = 0.0, $add4$i79 = 0.0, $add48 = 0.0, $cond$i$i = 0.0, $cond$i2$i = 0.0, $m_impulse = 0, $m_indexA = 0, $m_indexB = 0, $m_motorImpulse = 0, $m_springImpulse = 0, $mul$i55 = 0.0, $mul$i99 = 0.0, $mul1$i101 = 0.0, $mul1$i57 = 0.0, $mul17 = 0.0, $mul37 = 0.0, $mul58 = 0.0, $sub$i88 = 0.0, $sub27 = 0.0, $sub4$i91 = 0.0, $sub40 = 0.0, $sub44 = 0.0, $sub46 = 0.0, $velocities = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF32[$this + 156 >> 2];
 $1 = +HEAPF32[$this + 160 >> 2];
 $2 = +HEAPF32[$this + 164 >> 2];
 $3 = +HEAPF32[$this + 168 >> 2];
 $m_indexA = $this + 132 | 0;
 $4 = HEAP32[$m_indexA >> 2] | 0;
 $velocities = $data + 28 | 0;
 $5 = HEAP32[$velocities >> 2] | 0;
 $6 = $5 + ($4 * 12 | 0) | 0;
 $12 = +HEAPF32[$6 >> 2];
 $13 = +HEAPF32[$6 + 4 >> 2];
 $14 = +HEAPF32[$5 + ($4 * 12 | 0) + 8 >> 2];
 $m_indexB = $this + 136 | 0;
 $15 = HEAP32[$m_indexB >> 2] | 0;
 $16 = $5 + ($15 * 12 | 0) | 0;
 $22 = +HEAPF32[$16 >> 2];
 $23 = +HEAPF32[$16 + 4 >> 2];
 $24 = +HEAPF32[$5 + ($15 * 12 | 0) + 8 >> 2];
 $25 = +HEAPF32[$this + 172 >> 2];
 $26 = +HEAPF32[$this + 176 >> 2];
 $27 = +HEAPF32[$this + 192 >> 2];
 $28 = +HEAPF32[$this + 188 >> 2];
 $m_springImpulse = $this + 116 | 0;
 $32 = +HEAPF32[$m_springImpulse >> 2];
 $33 = +HEAPF32[$this + 212 >> 2] * (+HEAPF32[$this + 216 >> 2] + ($24 * $27 + ($25 * ($22 - $12) + $26 * ($23 - $13)) - $14 * $28) + +HEAPF32[$this + 220 >> 2] * $32);
 $mul17 = -$33;
 HEAPF32[$m_springImpulse >> 2] = $32 - $33;
 $mul$i99 = $25 * $mul17;
 $mul1$i101 = $26 * $mul17;
 $sub$i88 = $12 - $0 * $mul$i99;
 $sub4$i91 = $13 - $0 * $mul1$i101;
 $sub27 = $14 - $2 * $28 * $mul17;
 $add$i76 = $22 + $1 * $mul$i99;
 $add4$i79 = $23 + $1 * $mul1$i101;
 $add30 = $24 + $3 * $27 * $mul17;
 $m_motorImpulse = $this + 112 | 0;
 $37 = +HEAPF32[$m_motorImpulse >> 2];
 $mul37 = +HEAPF32[$data >> 2] * +HEAPF32[$this + 120 >> 2];
 $add39 = $37 - +HEAPF32[$this + 208 >> 2] * ($add30 - $sub27 - +HEAPF32[$this + 124 >> 2]);
 $sub40 = -$mul37;
 $cond$i$i = $add39 < $mul37 ? $add39 : $mul37;
 $cond$i2$i = $cond$i$i < $sub40 ? $sub40 : $cond$i$i;
 HEAPF32[$m_motorImpulse >> 2] = $cond$i2$i;
 $sub44 = $cond$i2$i - $37;
 $sub46 = $sub27 - $2 * $sub44;
 $add48 = $add30 + $3 * $sub44;
 $40 = +HEAPF32[$this + 180 >> 2];
 $41 = +HEAPF32[$this + 184 >> 2];
 $42 = +HEAPF32[$this + 200 >> 2];
 $43 = +HEAPF32[$this + 196 >> 2];
 $45 = +HEAPF32[$this + 204 >> 2] * (($add$i76 - $sub$i88) * $40 + ($add4$i79 - $sub4$i91) * $41 + $42 * $add48 - $43 * $sub46);
 $mul58 = -$45;
 $m_impulse = $this + 108 | 0;
 HEAPF32[$m_impulse >> 2] = +HEAPF32[$m_impulse >> 2] - $45;
 $mul$i55 = $40 * $mul58;
 $mul1$i57 = $41 * $mul58;
 $49 = +($sub$i88 - $0 * $mul$i55);
 $50 = +($sub4$i91 - $0 * $mul1$i57);
 $51 = (HEAP32[$velocities >> 2] | 0) + ((HEAP32[$m_indexA >> 2] | 0) * 12 | 0) | 0;
 HEAPF32[$51 >> 2] = $49;
 HEAPF32[$51 + 4 >> 2] = $50;
 $56 = HEAP32[$velocities >> 2] | 0;
 HEAPF32[$56 + ((HEAP32[$m_indexA >> 2] | 0) * 12 | 0) + 8 >> 2] = $sub46 - $2 * $43 * $mul58;
 $58 = +($add$i76 + $1 * $mul$i55);
 $59 = +($add4$i79 + $1 * $mul1$i57);
 $60 = $56 + ((HEAP32[$m_indexB >> 2] | 0) * 12 | 0) | 0;
 HEAPF32[$60 >> 2] = $58;
 HEAPF32[$60 + 4 >> 2] = $59;
 HEAPF32[(HEAP32[$velocities >> 2] | 0) + ((HEAP32[$m_indexB >> 2] | 0) * 12 | 0) + 8 >> 2] = $add48 + $3 * $42 * $mul58;
 STACKTOP = sp;
 return;
}
function __ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi($this, $output, $input, $xf, $childIndex) {
 $this = $this | 0;
 $output = $output | 0;
 $input = $input | 0;
 $xf = $xf | 0;
 $childIndex = $childIndex | 0;
 var $1 = 0.0, $10 = 0, $11 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $add$i40 = 0.0, $add$i47 = 0.0, $add$i88 = 0.0, $add8$i90 = 0.0, $c$i82 = 0, $i$0100 = 0, $index$0$lcssa105 = 0, $index$099 = 0, $index$1 = 0, $lower$0$lcssa104 = 0.0, $lower$0101 = 0.0, $lower$1 = 0.0, $retval$0 = 0, $s$i85 = 0, $sub$i = 0.0, $sub$i58 = 0.0, $sub$i76 = 0.0, $sub3$i = 0.0, $sub3$i61 = 0.0, $sub3$i79 = 0.0, $upper$098 = 0.0, $upper$1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = +HEAPF32[$xf >> 2];
 $sub$i = +HEAPF32[$input >> 2] - $1;
 $3 = +HEAPF32[$xf + 4 >> 2];
 $sub3$i = +HEAPF32[$input + 4 >> 2] - $3;
 $c$i82 = $xf + 12 | 0;
 $4 = +HEAPF32[$c$i82 >> 2];
 $s$i85 = $xf + 8 | 0;
 $5 = +HEAPF32[$s$i85 >> 2];
 $add$i88 = $sub$i * $4 + $sub3$i * $5;
 $add8$i90 = $4 * $sub3$i - $sub$i * $5;
 $sub$i76 = +HEAPF32[$input + 8 >> 2] - $1;
 $sub3$i79 = +HEAPF32[$input + 12 >> 2] - $3;
 $sub$i58 = $4 * $sub$i76 + $5 * $sub3$i79 - $add$i88;
 $sub3$i61 = $4 * $sub3$i79 - $5 * $sub$i76 - $add8$i90;
 $10 = HEAP32[$this + 148 >> 2] | 0;
 $11 = +HEAPF32[$input + 16 >> 2];
 do if (($10 | 0) > 0) {
  $i$0100 = 0;
  $index$099 = -1;
  $lower$0101 = 0.0;
  $upper$098 = $11;
  L2 : while (1) {
   $14 = +HEAPF32[$this + ($i$0100 << 3) + 84 >> 2];
   $15 = +HEAPF32[$this + ($i$0100 << 3) + 88 >> 2];
   $add$i47 = (+HEAPF32[$this + ($i$0100 << 3) + 20 >> 2] - $add$i88) * $14 + (+HEAPF32[$this + ($i$0100 << 3) + 24 >> 2] - $add8$i90) * $15;
   $add$i40 = $sub$i58 * $14 + $sub3$i61 * $15;
   do if ($add$i40 == 0.0) if ($add$i47 < 0.0) {
    $retval$0 = 0;
    label = 17;
    break L2;
   } else {
    $index$1 = $index$099;
    $lower$1 = $lower$0101;
    $upper$1 = $upper$098;
   } else {
    if ($add$i40 < 0.0) if ($add$i47 < $lower$0101 * $add$i40) {
     $index$1 = $i$0100;
     $lower$1 = $add$i47 / $add$i40;
     $upper$1 = $upper$098;
     break;
    }
    if ($add$i40 > 0.0) if ($add$i47 < $upper$098 * $add$i40) {
     $index$1 = $index$099;
     $lower$1 = $lower$0101;
     $upper$1 = $add$i47 / $add$i40;
    } else {
     $index$1 = $index$099;
     $lower$1 = $lower$0101;
     $upper$1 = $upper$098;
    } else {
     $index$1 = $index$099;
     $lower$1 = $lower$0101;
     $upper$1 = $upper$098;
    }
   } while (0);
   $i$0100 = $i$0100 + 1 | 0;
   if ($upper$1 < $lower$1) {
    $retval$0 = 0;
    label = 17;
    break;
   }
   if (($i$0100 | 0) >= ($10 | 0)) {
    label = 12;
    break;
   } else {
    $index$099 = $index$1;
    $lower$0101 = $lower$1;
    $upper$098 = $upper$1;
   }
  }
  if ((label | 0) == 12) {
   if ($lower$1 >= 0.0) {
    $16 = $11;
    $index$0$lcssa105 = $index$1;
    $lower$0$lcssa104 = $lower$1;
    break;
   }
   ___assert_fail(7208, 7064, 249, 14560);
  } else if ((label | 0) == 17) {
   STACKTOP = sp;
   return $retval$0 | 0;
  }
 } else {
  $16 = $11;
  $index$0$lcssa105 = -1;
  $lower$0$lcssa104 = 0.0;
 } while (0);
 if (!($lower$0$lcssa104 <= $16)) ___assert_fail(7208, 7064, 249, 14560);
 if (!(($index$0$lcssa105 | 0) > -1)) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 HEAPF32[$output + 8 >> 2] = $lower$0$lcssa104;
 $17 = +HEAPF32[$c$i82 >> 2];
 $18 = +HEAPF32[$this + ($index$0$lcssa105 << 3) + 84 >> 2];
 $19 = +HEAPF32[$s$i85 >> 2];
 $20 = +HEAPF32[$this + ($index$0$lcssa105 << 3) + 88 >> 2];
 $21 = +($17 * $18 - $19 * $20);
 $22 = +($18 * $19 + $17 * $20);
 $23 = $output;
 HEAPF32[$23 >> 2] = $21;
 HEAPF32[$23 + 4 >> 2] = $22;
 $retval$0 = 1;
 STACKTOP = sp;
 return $retval$0 | 0;
}
function __ZN6b2Body4DumpEv($this) {
 $this = $this | 0;
 var $0 = 0, $conv10 = 0.0, $conv4 = 0.0, $f$03 = 0, $f$05 = 0, $m_flags = 0, $m_islandIndex = 0, $vararg_buffer52 = 0, $vararg_ptr15 = 0, $vararg_ptr8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer52 = sp;
 $m_islandIndex = $this + 8 | 0;
 $0 = HEAP32[$m_islandIndex >> 2] | 0;
 __Z5b2LogPKcz(14384, $vararg_buffer52);
 __Z5b2LogPKcz(11912, $vararg_buffer52);
 HEAP32[$vararg_buffer52 >> 2] = HEAP32[$this >> 2];
 __Z5b2LogPKcz(11936, $vararg_buffer52);
 $conv4 = +HEAPF32[$this + 16 >> 2];
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 12 >> 2];
 HEAP32[$vararg_buffer52 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer52 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 $vararg_ptr8 = $vararg_buffer52 + 8 | 0;
 HEAPF64[tempDoublePtr >> 3] = $conv4;
 HEAP32[$vararg_ptr8 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_ptr8 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(11968, $vararg_buffer52);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 56 >> 2];
 HEAP32[$vararg_buffer52 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer52 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(12008, $vararg_buffer52);
 $conv10 = +HEAPF32[$this + 68 >> 2];
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 64 >> 2];
 HEAP32[$vararg_buffer52 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer52 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 $vararg_ptr15 = $vararg_buffer52 + 8 | 0;
 HEAPF64[tempDoublePtr >> 3] = $conv10;
 HEAP32[$vararg_ptr15 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_ptr15 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(12032, $vararg_buffer52);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 72 >> 2];
 HEAP32[$vararg_buffer52 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer52 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(12080, $vararg_buffer52);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 132 >> 2];
 HEAP32[$vararg_buffer52 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer52 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(12120, $vararg_buffer52);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 136 >> 2];
 HEAP32[$vararg_buffer52 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer52 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(12152, $vararg_buffer52);
 $m_flags = $this + 4 | 0;
 HEAP32[$vararg_buffer52 >> 2] = (HEAPU16[$m_flags >> 1] | 0) & 4;
 __Z5b2LogPKcz(12184, $vararg_buffer52);
 HEAP32[$vararg_buffer52 >> 2] = (HEAPU16[$m_flags >> 1] | 0) & 2;
 __Z5b2LogPKcz(12216, $vararg_buffer52);
 HEAP32[$vararg_buffer52 >> 2] = (HEAPU16[$m_flags >> 1] | 0) & 16;
 __Z5b2LogPKcz(12240, $vararg_buffer52);
 HEAP32[$vararg_buffer52 >> 2] = (HEAPU16[$m_flags >> 1] | 0) & 8;
 __Z5b2LogPKcz(12272, $vararg_buffer52);
 HEAP32[$vararg_buffer52 >> 2] = (HEAPU16[$m_flags >> 1] | 0) & 32;
 __Z5b2LogPKcz(12304, $vararg_buffer52);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 140 >> 2];
 HEAP32[$vararg_buffer52 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer52 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(12336, $vararg_buffer52);
 HEAP32[$vararg_buffer52 >> 2] = HEAP32[$m_islandIndex >> 2];
 __Z5b2LogPKcz(12368, $vararg_buffer52);
 __Z5b2LogPKcz(16472, $vararg_buffer52);
 $f$03 = HEAP32[$this + 100 >> 2] | 0;
 if (($f$03 | 0) == 0) {
  __Z5b2LogPKcz(14392, $vararg_buffer52);
  STACKTOP = sp;
  return;
 } else $f$05 = $f$03;
 do {
  __Z5b2LogPKcz(12416, $vararg_buffer52);
  __ZN9b2Fixture4DumpEi($f$05, $0);
  __Z5b2LogPKcz(12424, $vararg_buffer52);
  $f$05 = HEAP32[$f$05 + 4 >> 2] | 0;
 } while (($f$05 | 0) != 0);
 __Z5b2LogPKcz(14392, $vararg_buffer52);
 STACKTOP = sp;
 return;
}
function __ZN15b2DistanceJoint24SolvePositionConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $3 = 0, $33 = 0.0, $35 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $44 = 0, $46 = 0.0, $47 = 0.0, $48 = 0, $9 = 0.0, $add = 0.0, $add$i = 0.0, $add$i82 = 0.0, $c = 0, $call$i$i = 0.0, $call$i$i$i = 0.0, $call$i$i15 = 0.0, $call2$i$i = 0.0, $call2$i$i17 = 0.0, $cond$i = 0.0, $cond$i$i = 0.0, $cond$i2$i = 0.0, $div$i = 0.0, $m_indexA = 0, $m_indexB = 0, $mul = 0.0, $mul$i66 = 0.0, $mul1$i68 = 0.0, $positions = 0, $retval$0 = 0, $retval$0$i = 0.0, $sub = 0.0, $sub$i = 0.0, $sub$i21 = 0.0, $sub$i26 = 0.0, $sub$i79 = 0.0, $sub$i87 = 0.0, $sub$i87128 = 0.0, $sub20 = 0.0, $sub3$i = 0.0, $sub3$i29 = 0.0, $sub3$i90 = 0.0, $sub3$i90129 = 0.0, sp = 0;
 sp = STACKTOP;
 if (+HEAPF32[$this + 68 >> 2] > 0.0) {
  $retval$0 = 1;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $m_indexA = $this + 108 | 0;
 $1 = HEAP32[$m_indexA >> 2] | 0;
 $positions = $data + 24 | 0;
 $2 = HEAP32[$positions >> 2] | 0;
 $c = $2 + ($1 * 12 | 0) | 0;
 $3 = $c;
 $9 = +HEAPF32[$3 >> 2];
 $10 = +HEAPF32[$3 + 4 >> 2];
 $11 = +HEAPF32[$2 + ($1 * 12 | 0) + 8 >> 2];
 $m_indexB = $this + 112 | 0;
 $12 = HEAP32[$m_indexB >> 2] | 0;
 $13 = $2 + ($12 * 12 | 0) | 0;
 $19 = +HEAPF32[$13 >> 2];
 $20 = +HEAPF32[$13 + 4 >> 2];
 $21 = +HEAPF32[$2 + ($12 * 12 | 0) + 8 >> 2];
 $call$i$i = +Math_sin(+$11);
 $call2$i$i = +Math_cos(+$11);
 $call$i$i15 = +Math_sin(+$21);
 $call2$i$i17 = +Math_cos(+$21);
 $sub$i = +HEAPF32[$this + 80 >> 2] - +HEAPF32[$this + 140 >> 2];
 $sub3$i = +HEAPF32[$this + 84 >> 2] - +HEAPF32[$this + 144 >> 2];
 $sub$i21 = $call2$i$i * $sub$i - $call$i$i * $sub3$i;
 $add$i = $call$i$i * $sub$i + $call2$i$i * $sub3$i;
 $sub$i26 = +HEAPF32[$this + 88 >> 2] - +HEAPF32[$this + 148 >> 2];
 $sub3$i29 = +HEAPF32[$this + 92 >> 2] - +HEAPF32[$this + 152 >> 2];
 $sub$i79 = $call2$i$i17 * $sub$i26 - $call$i$i15 * $sub3$i29;
 $add$i82 = $call$i$i15 * $sub$i26 + $call2$i$i17 * $sub3$i29;
 $sub$i87 = $19 + $sub$i79 - $9 - $sub$i21;
 $sub3$i90 = $20 + $add$i82 - $10 - $add$i;
 $call$i$i$i = +Math_sqrt(+($sub$i87 * $sub$i87 + $sub3$i90 * $sub3$i90));
 if ($call$i$i$i < 1.1920928955078125e-7) {
  $retval$0$i = 0.0;
  $sub$i87128 = $sub$i87;
  $sub3$i90129 = $sub3$i90;
 } else {
  $div$i = 1.0 / $call$i$i$i;
  $retval$0$i = $call$i$i$i;
  $sub$i87128 = $sub$i87 * $div$i;
  $sub3$i90129 = $sub3$i90 * $div$i;
 }
 $sub = $retval$0$i - +HEAPF32[$this + 104 >> 2];
 $cond$i$i = $sub < .20000000298023224 ? $sub : .20000000298023224;
 $cond$i2$i = $cond$i$i < -.20000000298023224 ? -.20000000298023224 : $cond$i$i;
 $mul = -(+HEAPF32[$this + 172 >> 2] * $cond$i2$i);
 $mul$i66 = $sub$i87128 * $mul;
 $mul1$i68 = $sub3$i90129 * $mul;
 $33 = +HEAPF32[$this + 156 >> 2];
 $sub20 = $11 - +HEAPF32[$this + 164 >> 2] * ($sub$i21 * $mul1$i68 - $add$i * $mul$i66);
 $35 = +HEAPF32[$this + 160 >> 2];
 $add = $21 + +HEAPF32[$this + 168 >> 2] * ($sub$i79 * $mul1$i68 - $add$i82 * $mul$i66);
 $37 = +($9 - $33 * $mul$i66);
 $38 = +($10 - $33 * $mul1$i68);
 $39 = $c;
 HEAPF32[$39 >> 2] = $37;
 HEAPF32[$39 + 4 >> 2] = $38;
 $44 = HEAP32[$positions >> 2] | 0;
 HEAPF32[$44 + ((HEAP32[$m_indexA >> 2] | 0) * 12 | 0) + 8 >> 2] = $sub20;
 $46 = +($19 + $35 * $mul$i66);
 $47 = +($20 + $35 * $mul1$i68);
 $48 = $44 + ((HEAP32[$m_indexB >> 2] | 0) * 12 | 0) | 0;
 HEAPF32[$48 >> 2] = $46;
 HEAPF32[$48 + 4 >> 2] = $47;
 HEAPF32[(HEAP32[$positions >> 2] | 0) + ((HEAP32[$m_indexB >> 2] | 0) * 12 | 0) + 8 >> 2] = $add;
 if ($cond$i2$i > 0.0) $cond$i = $cond$i2$i; else $cond$i = -$cond$i2$i;
 $retval$0 = $cond$i < .004999999888241291;
 STACKTOP = sp;
 return $retval$0 | 0;
}
function __ZN12b2WheelJoint24SolvePositionConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0, $46 = 0, $48 = 0.0, $49 = 0.0, $50 = 0, $8 = 0.0, $9 = 0.0, $add$i = 0.0, $add$i132 = 0.0, $add$i66 = 0.0, $add$i96 = 0.0, $add24 = 0.0, $call$i$i = 0.0, $call$i$i17 = 0.0, $call2$i$i = 0.0, $call2$i$i19 = 0.0, $cmp54 = 0, $cond$i = 0.0, $impulse$0 = 0.0, $m_indexA = 0, $m_indexB = 0, $mul$i56 = 0.0, $mul1$i58 = 0.0, $positions = 0, $sub$i = 0.0, $sub$i101 = 0.0, $sub$i129 = 0.0, $sub$i23 = 0.0, $sub$i28 = 0.0, $sub$i93 = 0.0, $sub3$i = 0.0, $sub3$i104 = 0.0, $sub3$i31 = 0.0, sp = 0;
 sp = STACKTOP;
 $m_indexA = $this + 132 | 0;
 $0 = HEAP32[$m_indexA >> 2] | 0;
 $positions = $data + 24 | 0;
 $1 = HEAP32[$positions >> 2] | 0;
 $2 = $1 + ($0 * 12 | 0) | 0;
 $8 = +HEAPF32[$2 >> 2];
 $9 = +HEAPF32[$2 + 4 >> 2];
 $10 = +HEAPF32[$1 + ($0 * 12 | 0) + 8 >> 2];
 $m_indexB = $this + 136 | 0;
 $11 = HEAP32[$m_indexB >> 2] | 0;
 $12 = $1 + ($11 * 12 | 0) | 0;
 $18 = +HEAPF32[$12 >> 2];
 $19 = +HEAPF32[$12 + 4 >> 2];
 $20 = +HEAPF32[$1 + ($11 * 12 | 0) + 8 >> 2];
 $call$i$i = +Math_sin(+$10);
 $call2$i$i = +Math_cos(+$10);
 $call$i$i17 = +Math_sin(+$20);
 $call2$i$i19 = +Math_cos(+$20);
 $sub$i = +HEAPF32[$this + 76 >> 2] - +HEAPF32[$this + 140 >> 2];
 $sub3$i = +HEAPF32[$this + 80 >> 2] - +HEAPF32[$this + 144 >> 2];
 $sub$i23 = $call2$i$i * $sub$i - $call$i$i * $sub3$i;
 $add$i = $call$i$i * $sub$i + $call2$i$i * $sub3$i;
 $sub$i28 = +HEAPF32[$this + 84 >> 2] - +HEAPF32[$this + 148 >> 2];
 $sub3$i31 = +HEAPF32[$this + 88 >> 2] - +HEAPF32[$this + 152 >> 2];
 $sub$i129 = $call2$i$i19 * $sub$i28 - $call$i$i17 * $sub3$i31;
 $add$i132 = $call$i$i17 * $sub$i28 + $call2$i$i19 * $sub3$i31;
 $sub$i101 = $18 - $8 + $sub$i129 - $sub$i23;
 $sub3$i104 = $19 - $9 + $add$i132 - $add$i;
 $29 = +HEAPF32[$this + 100 >> 2];
 $30 = +HEAPF32[$this + 104 >> 2];
 $sub$i93 = $call2$i$i * $29 - $call$i$i * $30;
 $add$i96 = $call$i$i * $29 + $call2$i$i * $30;
 $add$i66 = $sub$i93 * $sub$i101 + $add$i96 * $sub3$i104;
 $31 = +HEAPF32[$this + 156 >> 2];
 $32 = +HEAPF32[$this + 160 >> 2];
 $33 = +HEAPF32[$this + 164 >> 2];
 $34 = +HEAPF32[$this + 196 >> 2];
 $35 = +HEAPF32[$this + 168 >> 2];
 $36 = +HEAPF32[$this + 200 >> 2];
 $add24 = $31 + $32 + $34 * $33 * $34 + $36 * $35 * $36;
 if ($add24 != 0.0) $impulse$0 = -$add$i66 / $add24; else $impulse$0 = 0.0;
 $mul$i56 = $sub$i93 * $impulse$0;
 $mul1$i58 = $add$i96 * $impulse$0;
 $39 = +($8 - $mul$i56 * $31);
 $40 = +($9 - $mul1$i58 * $31);
 $41 = (HEAP32[$positions >> 2] | 0) + ((HEAP32[$m_indexA >> 2] | 0) * 12 | 0) | 0;
 HEAPF32[$41 >> 2] = $39;
 HEAPF32[$41 + 4 >> 2] = $40;
 $46 = HEAP32[$positions >> 2] | 0;
 HEAPF32[$46 + ((HEAP32[$m_indexA >> 2] | 0) * 12 | 0) + 8 >> 2] = $10 - ($add$i96 * ($sub$i23 + $sub$i101) - $sub$i93 * ($add$i + $sub3$i104)) * $impulse$0 * $33;
 $48 = +($18 + $mul$i56 * $32);
 $49 = +($19 + $mul1$i58 * $32);
 $50 = $46 + ((HEAP32[$m_indexB >> 2] | 0) * 12 | 0) | 0;
 HEAPF32[$50 >> 2] = $48;
 HEAPF32[$50 + 4 >> 2] = $49;
 HEAPF32[(HEAP32[$positions >> 2] | 0) + ((HEAP32[$m_indexB >> 2] | 0) * 12 | 0) + 8 >> 2] = $20 + ($sub$i129 * $add$i96 - $add$i132 * $sub$i93) * $impulse$0 * $35;
 if ($add$i66 > 0.0) {
  $cond$i = $add$i66;
  $cmp54 = $cond$i <= .004999999888241291;
  STACKTOP = sp;
  return $cmp54 | 0;
 }
 $cond$i = -$add$i66;
 $cmp54 = $cond$i <= .004999999888241291;
 STACKTOP = sp;
 return $cmp54 | 0;
}
function _emscripten_bind_b2PolygonShape_Set_2($self, $arg0, $arg1) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 $arg1 = $arg1 | 0;
 var $1 = 0, $12 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $23 = 0.0, $24 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $7 = 0, $8 = 0, $add$$i = 0, $add4$i65$i$i = 0.0, $area$064$i$i = 0.0, $arraydecay$i = 0, $arrayidx21$i = 0, $call$i$i$i$i = 0.0, $cond$lvalue$i$i2D = 0, $div$i$i = 0.0, $div$i24$i = 0.0, $i$033$i = 0, $i$063$i$i = 0, $i6$030$i = 0, $m_centroid$i = 0, $m_vertexCount$i = 0, $mul$i$i = 0.0, $mul4$i$i = 0.0, $mul7$i$i = 0.0, $sub$i$i = 0.0, $sub3$i$i = 0.0, $y$i$i$i = 0, label = 0, sp = 0, $i6$030$i$looptemp = 0;
 sp = STACKTOP;
 if (!(($arg1 + -3 | 0) >>> 0 < 6)) ___assert_fail(7032, 7064, 122, 7120);
 $m_vertexCount$i = $self + 148 | 0;
 HEAP32[$m_vertexCount$i >> 2] = $arg1;
 $i$033$i = 0;
 do {
  $2 = $arg0 + ($i$033$i << 3) | 0;
  $7 = HEAP32[$2 + 4 >> 2] | 0;
  $8 = $self + ($i$033$i << 3) + 20 | 0;
  HEAP32[$8 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$8 + 4 >> 2] = $7;
  $i$033$i = $i$033$i + 1 | 0;
  $1 = HEAP32[$m_vertexCount$i >> 2] | 0;
 } while (($i$033$i | 0) < ($1 | 0));
 if (($1 | 0) > 0) {
  $12 = $1;
  $i6$030$i = 0;
 } else ___assert_fail(7408, 7064, 76, 7424);
 do {
  $i6$030$i$looptemp = $i6$030$i;
  $i6$030$i = $i6$030$i + 1 | 0;
  $add$$i = ($i6$030$i | 0) < ($12 | 0) ? $i6$030$i : 0;
  $sub$i$i = +HEAPF32[$self + ($add$$i << 3) + 20 >> 2] - +HEAPF32[$self + ($i6$030$i$looptemp << 3) + 20 >> 2];
  $sub3$i$i = +HEAPF32[$self + ($add$$i << 3) + 24 >> 2] - +HEAPF32[$self + ($i6$030$i$looptemp << 3) + 24 >> 2];
  $mul4$i$i = $sub3$i$i * $sub3$i$i;
  if (!($sub$i$i * $sub$i$i + $mul4$i$i > 1.4210854715202004e-14)) {
   label = 8;
   break;
  }
  $arrayidx21$i = $self + ($i6$030$i$looptemp << 3) + 84 | 0;
  $17 = +$sub3$i$i;
  $18 = +-$sub$i$i;
  $19 = $arrayidx21$i;
  HEAPF32[$19 >> 2] = $17;
  HEAPF32[$19 + 4 >> 2] = $18;
  $y$i$i$i = $self + ($i6$030$i$looptemp << 3) + 88 | 0;
  $23 = +HEAPF32[$y$i$i$i >> 2];
  $call$i$i$i$i = +Math_sqrt(+($mul4$i$i + $23 * $23));
  if (!($call$i$i$i$i < 1.1920928955078125e-7)) {
   $div$i24$i = 1.0 / $call$i$i$i$i;
   HEAPF32[$arrayidx21$i >> 2] = $sub3$i$i * $div$i24$i;
   HEAPF32[$y$i$i$i >> 2] = $23 * $div$i24$i;
  }
  $12 = HEAP32[$m_vertexCount$i >> 2] | 0;
 } while (($i6$030$i | 0) < ($12 | 0));
 if ((label | 0) == 8) ___assert_fail(7128, 7064, 137, 7120);
 $m_centroid$i = $self + 12 | 0;
 $arraydecay$i = $self + 20 | 0;
 if (($12 | 0) > 2) {
  $40 = 0.0;
  $add4$i65$i$i = 0.0;
  $area$064$i$i = 0.0;
  $i$063$i$i = 0;
 } else ___assert_fail(7408, 7064, 76, 7424);
 do {
  $24 = $self + ($i$063$i$i << 3) + 20 | 0;
  $30 = +HEAPF32[$24 >> 2];
  $31 = +HEAPF32[$24 + 4 >> 2];
  $i$063$i$i = $i$063$i$i + 1 | 0;
  if (($i$063$i$i | 0) < ($12 | 0)) $cond$lvalue$i$i2D = $self + ($i$063$i$i << 3) + 20 | 0; else $cond$lvalue$i$i2D = $arraydecay$i;
  $32 = $cond$lvalue$i$i2D;
  $38 = +HEAPF32[$32 >> 2];
  $39 = +HEAPF32[$32 + 4 >> 2];
  $mul$i$i = ($30 * $39 - $31 * $38) * .5;
  $area$064$i$i = $area$064$i$i + $mul$i$i;
  $mul7$i$i = $mul$i$i * .3333333432674408;
  $40 = $40 + ($30 + 0.0 + $38) * $mul7$i$i;
  $add4$i65$i$i = $add4$i65$i$i + ($31 + 0.0 + $39) * $mul7$i$i;
 } while (($i$063$i$i | 0) != ($12 | 0));
 if ($area$064$i$i > 1.1920928955078125e-7) {
  $div$i$i = 1.0 / $area$064$i$i;
  $41 = +($40 * $div$i$i);
  $42 = +($add4$i65$i$i * $div$i$i);
  $43 = $m_centroid$i;
  HEAPF32[$43 >> 2] = $41;
  HEAPF32[$43 + 4 >> 2] = $42;
  STACKTOP = sp;
  return;
 } else ___assert_fail(7296, 7064, 115, 7424);
}
function __ZN16b2PrismaticJoint4DumpEv($this) {
 $this = $this | 0;
 var $1 = 0, $3 = 0, $conv10 = 0.0, $conv15 = 0.0, $conv5 = 0.0, $vararg_buffer42 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr20 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer42 = sp;
 $1 = HEAP32[(HEAP32[$this + 48 >> 2] | 0) + 8 >> 2] | 0;
 $3 = HEAP32[(HEAP32[$this + 52 >> 2] | 0) + 8 >> 2] | 0;
 __Z5b2LogPKcz(19240, $vararg_buffer42);
 HEAP32[$vararg_buffer42 >> 2] = $1;
 __Z5b2LogPKcz(20504, $vararg_buffer42);
 HEAP32[$vararg_buffer42 >> 2] = $3;
 __Z5b2LogPKcz(20536, $vararg_buffer42);
 HEAP32[$vararg_buffer42 >> 2] = HEAPU8[$this + 61 >> 0];
 __Z5b2LogPKcz(20568, $vararg_buffer42);
 $conv5 = +HEAPF32[$this + 72 >> 2];
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 68 >> 2];
 HEAP32[$vararg_buffer42 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer42 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 $vararg_ptr12 = $vararg_buffer42 + 8 | 0;
 HEAPF64[tempDoublePtr >> 3] = $conv5;
 HEAP32[$vararg_ptr12 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_ptr12 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(20608, $vararg_buffer42);
 $conv10 = +HEAPF32[$this + 80 >> 2];
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 76 >> 2];
 HEAP32[$vararg_buffer42 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer42 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 $vararg_ptr16 = $vararg_buffer42 + 8 | 0;
 HEAPF64[tempDoublePtr >> 3] = $conv10;
 HEAP32[$vararg_ptr16 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_ptr16 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(20656, $vararg_buffer42);
 $conv15 = +HEAPF32[$this + 88 >> 2];
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 84 >> 2];
 HEAP32[$vararg_buffer42 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer42 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 $vararg_ptr20 = $vararg_buffer42 + 8 | 0;
 HEAPF64[tempDoublePtr >> 3] = $conv15;
 HEAP32[$vararg_ptr20 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_ptr20 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(20704, $vararg_buffer42);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 100 >> 2];
 HEAP32[$vararg_buffer42 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer42 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(20368, $vararg_buffer42);
 HEAP32[$vararg_buffer42 >> 2] = HEAPU8[$this + 136 >> 0];
 __Z5b2LogPKcz(20024, $vararg_buffer42);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 120 >> 2];
 HEAP32[$vararg_buffer42 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer42 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(19272, $vararg_buffer42);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 124 >> 2];
 HEAP32[$vararg_buffer42 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer42 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(19312, $vararg_buffer42);
 HEAP32[$vararg_buffer42 >> 2] = HEAPU8[$this + 137 >> 0];
 __Z5b2LogPKcz(20744, $vararg_buffer42);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 132 >> 2];
 HEAP32[$vararg_buffer42 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer42 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(20776, $vararg_buffer42);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 128 >> 2];
 HEAP32[$vararg_buffer42 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer42 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(19352, $vararg_buffer42);
 HEAP32[$vararg_buffer42 >> 2] = HEAP32[$this + 56 >> 2];
 __Z5b2LogPKcz(20904, $vararg_buffer42);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2AABB_RayCast_2($self, $arg0, $arg1) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 $arg1 = $arg1 | 0;
 var $0 = 0, $13 = 0.0, $14 = 0.0, $19 = 0.0, $2 = 0, $22 = 0, $27 = 0, $28 = 0, $5 = 0, $6 = 0, $absD$i = 0, $cmp20$i = 0, $cond$i$i = 0.0, $cond$i$i$i = 0.0, $cond$i5$i$i = 0.0, $d$i = 0, $div$i = 0.0, $i$059$i = 0, $inc$i = 0, $mul$i = 0.0, $mul19$i = 0.0, $mul1955$i = 0.0, $normal$i = 0, $p$i = 0, $retval$0$i = 0, $sub$i$i = 0.0, $sub3$i$i = 0.0, $t1$0$load5354$i = 0.0, $tmax$058$i = 0.0, $tmax$1$i = 0.0, $tmin$057$i = 0.0, $tmin$1$i = 0.0, $tmin$2$i = 0.0, $x$i38$i = 0, $y$i25$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $p$i = sp + 8 | 0;
 $d$i = sp + 24 | 0;
 $absD$i = sp + 16 | 0;
 $normal$i = sp;
 $0 = $arg1;
 $2 = HEAP32[$0 >> 2] | 0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $p$i;
 HEAP32[$6 >> 2] = $2;
 HEAP32[$6 + 4 >> 2] = $5;
 $sub$i$i = +HEAPF32[$arg1 + 8 >> 2] - (HEAP32[tempDoublePtr >> 2] = $2, +HEAPF32[tempDoublePtr >> 2]);
 $sub3$i$i = +HEAPF32[$arg1 + 12 >> 2] - +HEAPF32[$arg1 + 4 >> 2];
 HEAPF32[$d$i >> 2] = $sub$i$i;
 HEAPF32[$d$i + 4 >> 2] = $sub3$i$i;
 if ($sub$i$i > 0.0) $cond$i$i$i = $sub$i$i; else $cond$i$i$i = -$sub$i$i;
 if ($sub3$i$i > 0.0) $cond$i5$i$i = $sub3$i$i; else $cond$i5$i$i = -$sub3$i$i;
 HEAPF32[$absD$i >> 2] = $cond$i$i$i;
 HEAPF32[$absD$i + 4 >> 2] = $cond$i5$i$i;
 $x$i38$i = $self + 8 | 0;
 $y$i25$i = $normal$i + 4 | 0;
 $13 = $cond$i$i$i;
 $i$059$i = 0;
 $tmax$058$i = 3.4028234663852886e+38;
 $tmin$057$i = -3.4028234663852886e+38;
 while (1) {
  if ($13 < 1.1920928955078125e-7) {
   $14 = +HEAPF32[$p$i + ($i$059$i << 2) >> 2];
   if ($14 < +HEAPF32[$self + ($i$059$i << 2) >> 2]) {
    $retval$0$i = 0;
    label = 17;
    break;
   }
   if (+HEAPF32[$x$i38$i + ($i$059$i << 2) >> 2] < $14) {
    $retval$0$i = 0;
    label = 17;
    break;
   } else {
    $tmax$1$i = $tmax$058$i;
    $tmin$2$i = $tmin$057$i;
   }
  } else {
   $div$i = 1.0 / +HEAPF32[$d$i + ($i$059$i << 2) >> 2];
   $19 = +HEAPF32[$p$i + ($i$059$i << 2) >> 2];
   $mul$i = $div$i * (+HEAPF32[$self + ($i$059$i << 2) >> 2] - $19);
   $mul19$i = $div$i * (+HEAPF32[$x$i38$i + ($i$059$i << 2) >> 2] - $19);
   $cmp20$i = $mul$i > $mul19$i;
   $mul1955$i = $cmp20$i ? $mul19$i : $mul$i;
   $t1$0$load5354$i = $cmp20$i ? $mul$i : $mul19$i;
   if ($mul1955$i > $tmin$057$i) {
    HEAPF32[$normal$i >> 2] = 0.0;
    HEAPF32[$y$i25$i >> 2] = 0.0;
    HEAPF32[$normal$i + ($i$059$i << 2) >> 2] = $cmp20$i ? 1.0 : -1.0;
    $tmin$1$i = $mul1955$i;
   } else $tmin$1$i = $tmin$057$i;
   $cond$i$i = $tmax$058$i < $t1$0$load5354$i ? $tmax$058$i : $t1$0$load5354$i;
   if ($tmin$1$i > $cond$i$i) {
    $retval$0$i = 0;
    label = 17;
    break;
   } else {
    $tmax$1$i = $cond$i$i;
    $tmin$2$i = $tmin$1$i;
   }
  }
  $inc$i = $i$059$i + 1 | 0;
  if (($inc$i | 0) >= 2) {
   label = 14;
   break;
  }
  $13 = +HEAPF32[$absD$i + ($inc$i << 2) >> 2];
  $i$059$i = $inc$i;
  $tmax$058$i = $tmax$1$i;
  $tmin$057$i = $tmin$2$i;
 }
 if ((label | 0) == 14) {
  if ($tmin$2$i < 0.0) {
   $retval$0$i = 0;
   STACKTOP = sp;
   return $retval$0$i | 0;
  }
  if (+HEAPF32[$arg1 + 16 >> 2] < $tmin$2$i) {
   $retval$0$i = 0;
   STACKTOP = sp;
   return $retval$0$i | 0;
  }
  HEAPF32[$arg0 + 8 >> 2] = $tmin$2$i;
  $22 = $normal$i;
  $27 = HEAP32[$22 + 4 >> 2] | 0;
  $28 = $arg0;
  HEAP32[$28 >> 2] = HEAP32[$22 >> 2];
  HEAP32[$28 + 4 >> 2] = $27;
  $retval$0$i = 1;
  STACKTOP = sp;
  return $retval$0$i | 0;
 } else if ((label | 0) == 17) {
  STACKTOP = sp;
  return $retval$0$i | 0;
 }
 return 0;
}
function __ZN11b2RopeJoint24SolvePositionConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $32 = 0.0, $34 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $43 = 0, $45 = 0.0, $46 = 0.0, $47 = 0, $8 = 0.0, $9 = 0.0, $add = 0.0, $add$i = 0.0, $add$i80 = 0.0, $c = 0, $call$i$i = 0.0, $call$i$i$i = 0.0, $call$i$i15 = 0.0, $call2$i$i = 0.0, $call2$i$i17 = 0.0, $cond$i$i = 0.0, $div$i = 0.0, $m_indexA = 0, $m_indexB = 0, $m_maxLength = 0, $mul = 0.0, $mul$i65 = 0.0, $mul1$i67 = 0.0, $positions = 0, $retval$0$i = 0.0, $sub = 0.0, $sub$i = 0.0, $sub$i21 = 0.0, $sub$i26 = 0.0, $sub$i77 = 0.0, $sub$i85 = 0.0, $sub$i85126 = 0.0, $sub20 = 0.0, $sub3$i = 0.0, $sub3$i29 = 0.0, $sub3$i88 = 0.0, $sub3$i88127 = 0.0, sp = 0;
 sp = STACKTOP;
 $m_indexA = $this + 96 | 0;
 $0 = HEAP32[$m_indexA >> 2] | 0;
 $positions = $data + 24 | 0;
 $1 = HEAP32[$positions >> 2] | 0;
 $c = $1 + ($0 * 12 | 0) | 0;
 $2 = $c;
 $8 = +HEAPF32[$2 >> 2];
 $9 = +HEAPF32[$2 + 4 >> 2];
 $10 = +HEAPF32[$1 + ($0 * 12 | 0) + 8 >> 2];
 $m_indexB = $this + 100 | 0;
 $11 = HEAP32[$m_indexB >> 2] | 0;
 $12 = $1 + ($11 * 12 | 0) | 0;
 $18 = +HEAPF32[$12 >> 2];
 $19 = +HEAPF32[$12 + 4 >> 2];
 $20 = +HEAPF32[$1 + ($11 * 12 | 0) + 8 >> 2];
 $call$i$i = +Math_sin(+$10);
 $call2$i$i = +Math_cos(+$10);
 $call$i$i15 = +Math_sin(+$20);
 $call2$i$i17 = +Math_cos(+$20);
 $sub$i = +HEAPF32[$this + 68 >> 2] - +HEAPF32[$this + 128 >> 2];
 $sub3$i = +HEAPF32[$this + 72 >> 2] - +HEAPF32[$this + 132 >> 2];
 $sub$i21 = $call2$i$i * $sub$i - $call$i$i * $sub3$i;
 $add$i = $call$i$i * $sub$i + $call2$i$i * $sub3$i;
 $sub$i26 = +HEAPF32[$this + 76 >> 2] - +HEAPF32[$this + 136 >> 2];
 $sub3$i29 = +HEAPF32[$this + 80 >> 2] - +HEAPF32[$this + 140 >> 2];
 $sub$i77 = $call2$i$i17 * $sub$i26 - $call$i$i15 * $sub3$i29;
 $add$i80 = $call$i$i15 * $sub$i26 + $call2$i$i17 * $sub3$i29;
 $sub$i85 = $18 + $sub$i77 - $8 - $sub$i21;
 $sub3$i88 = $19 + $add$i80 - $9 - $add$i;
 $call$i$i$i = +Math_sqrt(+($sub$i85 * $sub$i85 + $sub3$i88 * $sub3$i88));
 if ($call$i$i$i < 1.1920928955078125e-7) {
  $retval$0$i = 0.0;
  $sub$i85126 = $sub$i85;
  $sub3$i88127 = $sub3$i88;
 } else {
  $div$i = 1.0 / $call$i$i$i;
  $retval$0$i = $call$i$i$i;
  $sub$i85126 = $sub$i85 * $div$i;
  $sub3$i88127 = $sub3$i88 * $div$i;
 }
 $m_maxLength = $this + 84 | 0;
 $sub = $retval$0$i - +HEAPF32[$m_maxLength >> 2];
 $cond$i$i = $sub < .20000000298023224 ? $sub : .20000000298023224;
 $mul = -(+HEAPF32[$this + 160 >> 2] * ($cond$i$i < 0.0 ? 0.0 : $cond$i$i));
 $mul$i65 = $sub$i85126 * $mul;
 $mul1$i67 = $sub3$i88127 * $mul;
 $32 = +HEAPF32[$this + 144 >> 2];
 $sub20 = $10 - +HEAPF32[$this + 152 >> 2] * ($sub$i21 * $mul1$i67 - $add$i * $mul$i65);
 $34 = +HEAPF32[$this + 148 >> 2];
 $add = $20 + +HEAPF32[$this + 156 >> 2] * ($sub$i77 * $mul1$i67 - $add$i80 * $mul$i65);
 $36 = +($8 - $32 * $mul$i65);
 $37 = +($9 - $32 * $mul1$i67);
 $38 = $c;
 HEAPF32[$38 >> 2] = $36;
 HEAPF32[$38 + 4 >> 2] = $37;
 $43 = HEAP32[$positions >> 2] | 0;
 HEAPF32[$43 + ((HEAP32[$m_indexA >> 2] | 0) * 12 | 0) + 8 >> 2] = $sub20;
 $45 = +($18 + $34 * $mul$i65);
 $46 = +($19 + $34 * $mul1$i67);
 $47 = $43 + ((HEAP32[$m_indexB >> 2] | 0) * 12 | 0) | 0;
 HEAPF32[$47 >> 2] = $45;
 HEAPF32[$47 + 4 >> 2] = $46;
 HEAPF32[(HEAP32[$positions >> 2] | 0) + ((HEAP32[$m_indexB >> 2] | 0) * 12 | 0) + 8 >> 2] = $add;
 STACKTOP = sp;
 return $retval$0$i - +HEAPF32[$m_maxLength >> 2] < .004999999888241291 | 0;
}
function __ZN13b2PulleyJoint4DumpEv($this) {
 $this = $this | 0;
 var $1 = 0, $3 = 0, $conv10 = 0.0, $conv15 = 0.0, $conv20 = 0.0, $conv5 = 0.0, $vararg_buffer34 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr20 = 0, $vararg_ptr24 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer34 = sp;
 $1 = HEAP32[(HEAP32[$this + 48 >> 2] | 0) + 8 >> 2] | 0;
 $3 = HEAP32[(HEAP32[$this + 52 >> 2] | 0) + 8 >> 2] | 0;
 __Z5b2LogPKcz(19616, $vararg_buffer34);
 HEAP32[$vararg_buffer34 >> 2] = $1;
 __Z5b2LogPKcz(20504, $vararg_buffer34);
 HEAP32[$vararg_buffer34 >> 2] = $3;
 __Z5b2LogPKcz(20536, $vararg_buffer34);
 HEAP32[$vararg_buffer34 >> 2] = HEAPU8[$this + 61 >> 0];
 __Z5b2LogPKcz(20568, $vararg_buffer34);
 $conv5 = +HEAPF32[$this + 72 >> 2];
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 68 >> 2];
 HEAP32[$vararg_buffer34 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer34 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 $vararg_ptr12 = $vararg_buffer34 + 8 | 0;
 HEAPF64[tempDoublePtr >> 3] = $conv5;
 HEAP32[$vararg_ptr12 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_ptr12 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(19640, $vararg_buffer34);
 $conv10 = +HEAPF32[$this + 80 >> 2];
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 76 >> 2];
 HEAP32[$vararg_buffer34 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer34 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 $vararg_ptr16 = $vararg_buffer34 + 8 | 0;
 HEAPF64[tempDoublePtr >> 3] = $conv10;
 HEAP32[$vararg_ptr16 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_ptr16 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(19688, $vararg_buffer34);
 $conv15 = +HEAPF32[$this + 96 >> 2];
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 92 >> 2];
 HEAP32[$vararg_buffer34 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer34 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 $vararg_ptr20 = $vararg_buffer34 + 8 | 0;
 HEAPF64[tempDoublePtr >> 3] = $conv15;
 HEAP32[$vararg_ptr20 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_ptr20 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(20608, $vararg_buffer34);
 $conv20 = +HEAPF32[$this + 104 >> 2];
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 100 >> 2];
 HEAP32[$vararg_buffer34 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer34 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 $vararg_ptr24 = $vararg_buffer34 + 8 | 0;
 HEAPF64[tempDoublePtr >> 3] = $conv20;
 HEAP32[$vararg_ptr24 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_ptr24 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(20656, $vararg_buffer34);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 84 >> 2];
 HEAP32[$vararg_buffer34 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer34 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(19736, $vararg_buffer34);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 88 >> 2];
 HEAP32[$vararg_buffer34 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer34 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(19768, $vararg_buffer34);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 112 >> 2];
 HEAP32[$vararg_buffer34 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer34 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(19800, $vararg_buffer34);
 HEAP32[$vararg_buffer34 >> 2] = HEAP32[$this + 56 >> 2];
 __Z5b2LogPKcz(20904, $vararg_buffer34);
 STACKTOP = sp;
 return;
}
function __ZL19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5_($edgeIndex, $poly1, $xf1, $poly2, $xf2) {
 $edgeIndex = $edgeIndex | 0;
 $poly1 = $poly1 | 0;
 $xf1 = $xf1 | 0;
 $poly2 = $poly2 | 0;
 $xf2 = $xf2 | 0;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $add = 0, $add$ = 0, $add$i77 = 0.0, $add$i86 = 0.0, $add36 = 0, $add8$i = 0.0, $bestEdge$0 = 0, $bestEdge$0$ph = 0, $bestSeparation$0 = 0.0, $bestSeparation$0$ph = 0.0, $call15 = 0.0, $call4 = 0.0, $call44 = 0.0, $call8 = 0.0, $cmp3 = 0, $edge$0$lcssa = 0, $edge$090 = 0, $edge$1 = 0, $edge$2 = 0, $i$088 = 0, $increment$0$ph = 0, $maxDot$089 = 0.0, $retval$0 = 0.0, $storemerge = 0, $sub$i68 = 0.0, $sub3$i = 0.0, $sub6 = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$poly1 + 148 >> 2] | 0;
 $1 = +HEAPF32[$xf2 + 12 >> 2];
 $2 = +HEAPF32[$poly2 + 12 >> 2];
 $3 = +HEAPF32[$xf2 + 8 >> 2];
 $4 = +HEAPF32[$poly2 + 16 >> 2];
 $7 = +HEAPF32[$xf1 + 12 >> 2];
 $8 = +HEAPF32[$poly1 + 12 >> 2];
 $9 = +HEAPF32[$xf1 + 8 >> 2];
 $10 = +HEAPF32[$poly1 + 16 >> 2];
 $sub$i68 = +HEAPF32[$xf2 >> 2] + ($1 * $2 - $3 * $4) - (+HEAPF32[$xf1 >> 2] + ($7 * $8 - $9 * $10));
 $sub3$i = $2 * $3 + $1 * $4 + +HEAPF32[$xf2 + 4 >> 2] - ($8 * $9 + $7 * $10 + +HEAPF32[$xf1 + 4 >> 2]);
 $add$i77 = $7 * $sub$i68 + $9 * $sub3$i;
 $add8$i = $7 * $sub3$i - $sub$i68 * $9;
 if (($0 | 0) > 0) {
  $edge$090 = 0;
  $i$088 = 0;
  $maxDot$089 = -3.4028234663852886e+38;
  while (1) {
   $add$i86 = $add$i77 * +HEAPF32[$poly1 + ($i$088 << 3) + 84 >> 2] + $add8$i * +HEAPF32[$poly1 + ($i$088 << 3) + 88 >> 2];
   $cmp3 = $add$i86 > $maxDot$089;
   $edge$1 = $cmp3 ? $i$088 : $edge$090;
   $i$088 = $i$088 + 1 | 0;
   if (($i$088 | 0) == ($0 | 0)) {
    $edge$0$lcssa = $edge$1;
    break;
   } else {
    $edge$090 = $edge$1;
    $maxDot$089 = $cmp3 ? $add$i86 : $maxDot$089;
   }
  }
 } else $edge$0$lcssa = 0;
 $call4 = +__ZL16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4_($poly1, $xf1, $edge$0$lcssa, $poly2, $xf2);
 $sub6 = (($edge$0$lcssa | 0) > 0 ? $edge$0$lcssa : $0) + -1 | 0;
 $call8 = +__ZL16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4_($poly1, $xf1, $sub6, $poly2, $xf2);
 $add = $edge$0$lcssa + 1 | 0;
 $add$ = ($add | 0) < ($0 | 0) ? $add : 0;
 $call15 = +__ZL16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4_($poly1, $xf1, $add$, $poly2, $xf2);
 if ($call8 > $call4 & $call8 > $call15) {
  $bestEdge$0$ph = $sub6;
  $bestSeparation$0$ph = $call8;
  $increment$0$ph = 1;
 } else if ($call15 > $call4) {
  $bestEdge$0$ph = $add$;
  $bestSeparation$0$ph = $call15;
  $increment$0$ph = 0;
 } else {
  $retval$0 = $call4;
  $storemerge = $edge$0$lcssa;
  HEAP32[$edgeIndex >> 2] = $storemerge;
  STACKTOP = sp;
  return +$retval$0;
 }
 $bestEdge$0 = $bestEdge$0$ph;
 $bestSeparation$0 = $bestSeparation$0$ph;
 while (1) {
  if ($increment$0$ph) $edge$2 = (($bestEdge$0 | 0) > 0 ? $bestEdge$0 : $0) + -1 | 0; else {
   $add36 = $bestEdge$0 + 1 | 0;
   $edge$2 = ($add36 | 0) < ($0 | 0) ? $add36 : 0;
  }
  $call44 = +__ZL16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4_($poly1, $xf1, $edge$2, $poly2, $xf2);
  if ($call44 > $bestSeparation$0) {
   $bestEdge$0 = $edge$2;
   $bestSeparation$0 = $call44;
  } else {
   $retval$0 = $bestSeparation$0;
   $storemerge = $bestEdge$0;
   break;
  }
 }
 HEAP32[$edgeIndex >> 2] = $storemerge;
 STACKTOP = sp;
 return +$retval$0;
}
function __ZN16b2ContactManager7DestroyEP9b2Contact($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 var $13 = 0, $15 = 0, $19 = 0, $2 = 0, $21 = 0, $25 = 0, $28 = 0, $29 = 0, $3 = 0, $31 = 0, $32 = 0, $35 = 0, $36 = 0, $38 = 0, $4 = 0, $7 = 0, $9 = 0, $conv$i$i = 0, $conv$i16$i = 0, $m_contactCount = 0, $m_contactList = 0, $m_contactList41 = 0, $m_contactList68 = 0, $m_fixtureA$i = 0, $m_fixtureB$i = 0, $m_flags$i$i = 0, $m_flags$i15$i = 0, $m_next12$pre = 0, $m_prev = 0, $next31$pre = 0, $next58$pre = 0, $prev = 0, $prev48 = 0, sp = 0;
 sp = STACKTOP;
 $m_fixtureA$i = $c + 48 | 0;
 $m_fixtureB$i = $c + 52 | 0;
 $2 = HEAP32[(HEAP32[$m_fixtureA$i >> 2] | 0) + 8 >> 2] | 0;
 $3 = HEAP32[(HEAP32[$m_fixtureB$i >> 2] | 0) + 8 >> 2] | 0;
 $4 = HEAP32[$this + 72 >> 2] | 0;
 if (($4 | 0) != 0) if ((HEAP32[$c + 4 >> 2] & 2 | 0) != 0) FUNCTION_TABLE_vii[HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] & 127]($4, $c);
 $m_prev = $c + 8 | 0;
 $7 = HEAP32[$m_prev >> 2] | 0;
 $m_next12$pre = $c + 12 | 0;
 if (($7 | 0) != 0) HEAP32[$7 + 12 >> 2] = HEAP32[$m_next12$pre >> 2];
 $9 = HEAP32[$m_next12$pre >> 2] | 0;
 if (($9 | 0) != 0) HEAP32[$9 + 8 >> 2] = HEAP32[$m_prev >> 2];
 $m_contactList = $this + 60 | 0;
 if ((HEAP32[$m_contactList >> 2] | 0) == ($c | 0)) HEAP32[$m_contactList >> 2] = HEAP32[$m_next12$pre >> 2];
 $prev = $c + 24 | 0;
 $13 = HEAP32[$prev >> 2] | 0;
 $next31$pre = $c + 28 | 0;
 if (($13 | 0) != 0) HEAP32[$13 + 12 >> 2] = HEAP32[$next31$pre >> 2];
 $15 = HEAP32[$next31$pre >> 2] | 0;
 if (($15 | 0) != 0) HEAP32[$15 + 8 >> 2] = HEAP32[$prev >> 2];
 $m_contactList41 = $2 + 112 | 0;
 if (($c + 16 | 0) == (HEAP32[$m_contactList41 >> 2] | 0)) HEAP32[$m_contactList41 >> 2] = HEAP32[$next31$pre >> 2];
 $prev48 = $c + 40 | 0;
 $19 = HEAP32[$prev48 >> 2] | 0;
 $next58$pre = $c + 44 | 0;
 if (($19 | 0) != 0) HEAP32[$19 + 12 >> 2] = HEAP32[$next58$pre >> 2];
 $21 = HEAP32[$next58$pre >> 2] | 0;
 if (($21 | 0) != 0) HEAP32[$21 + 8 >> 2] = HEAP32[$prev48 >> 2];
 $m_contactList68 = $3 + 112 | 0;
 if (($c + 32 | 0) == (HEAP32[$m_contactList68 >> 2] | 0)) HEAP32[$m_contactList68 >> 2] = HEAP32[$next58$pre >> 2];
 $25 = HEAP32[$this + 76 >> 2] | 0;
 if ((HEAP8[15704] | 0) == 0) ___assert_fail(15864, 15760, 103, 18536);
 $28 = HEAP32[$m_fixtureA$i >> 2] | 0;
 if ((HEAP32[$c + 124 >> 2] | 0) > 0) {
  $29 = HEAP32[$28 + 8 >> 2] | 0;
  $m_flags$i15$i = $29 + 4 | 0;
  $conv$i16$i = HEAPU16[$m_flags$i15$i >> 1] | 0;
  if (($conv$i16$i & 2 | 0) == 0) {
   HEAP16[$m_flags$i15$i >> 1] = $conv$i16$i | 2;
   HEAPF32[$29 + 144 >> 2] = 0.0;
  }
  $31 = HEAP32[$m_fixtureB$i >> 2] | 0;
  $32 = HEAP32[$31 + 8 >> 2] | 0;
  $m_flags$i$i = $32 + 4 | 0;
  $conv$i$i = HEAPU16[$m_flags$i$i >> 1] | 0;
  if (($conv$i$i & 2 | 0) == 0) {
   HEAP16[$m_flags$i$i >> 1] = $conv$i$i | 2;
   HEAPF32[$32 + 144 >> 2] = 0.0;
   $36 = $31;
  } else $36 = $31;
 } else $36 = HEAP32[$m_fixtureB$i >> 2] | 0;
 $35 = HEAP32[(HEAP32[$28 + 12 >> 2] | 0) + 4 >> 2] | 0;
 $38 = HEAP32[(HEAP32[$36 + 12 >> 2] | 0) + 4 >> 2] | 0;
 if (($35 | 0) > -1 & ($38 | 0) < 4) {
  FUNCTION_TABLE_vii[HEAP32[15512 + ($35 * 48 | 0) + ($38 * 12 | 0) + 4 >> 2] & 127]($c, $25);
  $m_contactCount = $this + 64 | 0;
  HEAP32[$m_contactCount >> 2] = (HEAP32[$m_contactCount >> 2] | 0) + -1;
  STACKTOP = sp;
  return;
 } else ___assert_fail(15888, 15760, 114, 18536);
}
function __ZNSt3__17__sort3IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_T_($__x, $__y, $__z, $__c) {
 $__x = $__x | 0;
 $__y = $__y | 0;
 $__z = $__z | 0;
 $__c = $__c | 0;
 var $__t$i24 = 0, $call = 0, $call7 = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__t$i24 = sp;
 $call = FUNCTION_TABLE_iii[HEAP32[$__c >> 2] & 63]($__y, $__x) | 0;
 $call7 = FUNCTION_TABLE_iii[HEAP32[$__c >> 2] & 63]($__z, $__y) | 0;
 if (!$call) {
  if (!$call7) {
   $retval$0 = 0;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
  HEAP32[$__t$i24 + 0 >> 2] = HEAP32[$__y + 0 >> 2];
  HEAP32[$__t$i24 + 4 >> 2] = HEAP32[$__y + 4 >> 2];
  HEAP32[$__t$i24 + 8 >> 2] = HEAP32[$__y + 8 >> 2];
  HEAP32[$__y + 0 >> 2] = HEAP32[$__z + 0 >> 2];
  HEAP32[$__y + 4 >> 2] = HEAP32[$__z + 4 >> 2];
  HEAP32[$__y + 8 >> 2] = HEAP32[$__z + 8 >> 2];
  HEAP32[$__z + 0 >> 2] = HEAP32[$__t$i24 + 0 >> 2];
  HEAP32[$__z + 4 >> 2] = HEAP32[$__t$i24 + 4 >> 2];
  HEAP32[$__z + 8 >> 2] = HEAP32[$__t$i24 + 8 >> 2];
  if (!(FUNCTION_TABLE_iii[HEAP32[$__c >> 2] & 63]($__y, $__x) | 0)) {
   $retval$0 = 1;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
  HEAP32[$__t$i24 + 0 >> 2] = HEAP32[$__x + 0 >> 2];
  HEAP32[$__t$i24 + 4 >> 2] = HEAP32[$__x + 4 >> 2];
  HEAP32[$__t$i24 + 8 >> 2] = HEAP32[$__x + 8 >> 2];
  HEAP32[$__x + 0 >> 2] = HEAP32[$__y + 0 >> 2];
  HEAP32[$__x + 4 >> 2] = HEAP32[$__y + 4 >> 2];
  HEAP32[$__x + 8 >> 2] = HEAP32[$__y + 8 >> 2];
  HEAP32[$__y + 0 >> 2] = HEAP32[$__t$i24 + 0 >> 2];
  HEAP32[$__y + 4 >> 2] = HEAP32[$__t$i24 + 4 >> 2];
  HEAP32[$__y + 8 >> 2] = HEAP32[$__t$i24 + 8 >> 2];
  $retval$0 = 2;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 if ($call7) {
  HEAP32[$__t$i24 + 0 >> 2] = HEAP32[$__x + 0 >> 2];
  HEAP32[$__t$i24 + 4 >> 2] = HEAP32[$__x + 4 >> 2];
  HEAP32[$__t$i24 + 8 >> 2] = HEAP32[$__x + 8 >> 2];
  HEAP32[$__x + 0 >> 2] = HEAP32[$__z + 0 >> 2];
  HEAP32[$__x + 4 >> 2] = HEAP32[$__z + 4 >> 2];
  HEAP32[$__x + 8 >> 2] = HEAP32[$__z + 8 >> 2];
  HEAP32[$__z + 0 >> 2] = HEAP32[$__t$i24 + 0 >> 2];
  HEAP32[$__z + 4 >> 2] = HEAP32[$__t$i24 + 4 >> 2];
  HEAP32[$__z + 8 >> 2] = HEAP32[$__t$i24 + 8 >> 2];
  $retval$0 = 1;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 HEAP32[$__t$i24 + 0 >> 2] = HEAP32[$__x + 0 >> 2];
 HEAP32[$__t$i24 + 4 >> 2] = HEAP32[$__x + 4 >> 2];
 HEAP32[$__t$i24 + 8 >> 2] = HEAP32[$__x + 8 >> 2];
 HEAP32[$__x + 0 >> 2] = HEAP32[$__y + 0 >> 2];
 HEAP32[$__x + 4 >> 2] = HEAP32[$__y + 4 >> 2];
 HEAP32[$__x + 8 >> 2] = HEAP32[$__y + 8 >> 2];
 HEAP32[$__y + 0 >> 2] = HEAP32[$__t$i24 + 0 >> 2];
 HEAP32[$__y + 4 >> 2] = HEAP32[$__t$i24 + 4 >> 2];
 HEAP32[$__y + 8 >> 2] = HEAP32[$__t$i24 + 8 >> 2];
 if (!(FUNCTION_TABLE_iii[HEAP32[$__c >> 2] & 63]($__z, $__y) | 0)) {
  $retval$0 = 1;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 HEAP32[$__t$i24 + 0 >> 2] = HEAP32[$__y + 0 >> 2];
 HEAP32[$__t$i24 + 4 >> 2] = HEAP32[$__y + 4 >> 2];
 HEAP32[$__t$i24 + 8 >> 2] = HEAP32[$__y + 8 >> 2];
 HEAP32[$__y + 0 >> 2] = HEAP32[$__z + 0 >> 2];
 HEAP32[$__y + 4 >> 2] = HEAP32[$__z + 4 >> 2];
 HEAP32[$__y + 8 >> 2] = HEAP32[$__z + 8 >> 2];
 HEAP32[$__z + 0 >> 2] = HEAP32[$__t$i24 + 0 >> 2];
 HEAP32[$__z + 4 >> 2] = HEAP32[$__t$i24 + 4 >> 2];
 HEAP32[$__z + 8 >> 2] = HEAP32[$__t$i24 + 8 >> 2];
 $retval$0 = 2;
 STACKTOP = sp;
 return $retval$0 | 0;
}
function __ZN12b2WheelJoint4DumpEv($this) {
 $this = $this | 0;
 var $1 = 0, $3 = 0, $conv10 = 0.0, $conv15 = 0.0, $conv5 = 0.0, $vararg_buffer36 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr20 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer36 = sp;
 $1 = HEAP32[(HEAP32[$this + 48 >> 2] | 0) + 8 >> 2] | 0;
 $3 = HEAP32[(HEAP32[$this + 52 >> 2] | 0) + 8 >> 2] | 0;
 __Z5b2LogPKcz(20480, $vararg_buffer36);
 HEAP32[$vararg_buffer36 >> 2] = $1;
 __Z5b2LogPKcz(20504, $vararg_buffer36);
 HEAP32[$vararg_buffer36 >> 2] = $3;
 __Z5b2LogPKcz(20536, $vararg_buffer36);
 HEAP32[$vararg_buffer36 >> 2] = HEAPU8[$this + 61 >> 0];
 __Z5b2LogPKcz(20568, $vararg_buffer36);
 $conv5 = +HEAPF32[$this + 80 >> 2];
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 76 >> 2];
 HEAP32[$vararg_buffer36 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer36 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 $vararg_ptr12 = $vararg_buffer36 + 8 | 0;
 HEAPF64[tempDoublePtr >> 3] = $conv5;
 HEAP32[$vararg_ptr12 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_ptr12 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(20608, $vararg_buffer36);
 $conv10 = +HEAPF32[$this + 88 >> 2];
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 84 >> 2];
 HEAP32[$vararg_buffer36 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer36 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 $vararg_ptr16 = $vararg_buffer36 + 8 | 0;
 HEAPF64[tempDoublePtr >> 3] = $conv10;
 HEAP32[$vararg_ptr16 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_ptr16 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(20656, $vararg_buffer36);
 $conv15 = +HEAPF32[$this + 96 >> 2];
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 92 >> 2];
 HEAP32[$vararg_buffer36 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer36 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 $vararg_ptr20 = $vararg_buffer36 + 8 | 0;
 HEAPF64[tempDoublePtr >> 3] = $conv15;
 HEAP32[$vararg_ptr20 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_ptr20 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(20704, $vararg_buffer36);
 HEAP32[$vararg_buffer36 >> 2] = HEAPU8[$this + 128 >> 0];
 __Z5b2LogPKcz(20744, $vararg_buffer36);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 124 >> 2];
 HEAP32[$vararg_buffer36 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer36 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(20776, $vararg_buffer36);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 120 >> 2];
 HEAP32[$vararg_buffer36 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer36 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(20808, $vararg_buffer36);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 68 >> 2];
 HEAP32[$vararg_buffer36 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer36 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(20840, $vararg_buffer36);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 72 >> 2];
 HEAP32[$vararg_buffer36 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer36 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(20872, $vararg_buffer36);
 HEAP32[$vararg_buffer36 >> 2] = HEAP32[$this + 56 >> 2];
 __Z5b2LogPKcz(20904, $vararg_buffer36);
 STACKTOP = sp;
 return;
}
function __ZN6b2Body13CreateFixtureEPK12b2FixtureDef($this, $def) {
 $this = $this | 0;
 $def = $def | 0;
 var $0 = 0, $10 = 0, $12 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $3 = 0, $7 = 0, $call$i = 0, $call5$i = 0, $call6$i = 0, $call7 = 0, $filter$i = 0, $i$013$i = 0, $m_body$i = 0, $m_filter$i = 0, $m_fixtureCount = 0, $m_fixtureList = 0, $m_flags17 = 0, $m_next$i = 0, $m_proxies$i2 = 0, $m_world = 0, $or = 0, sp = 0;
 sp = STACKTOP;
 $m_world = $this + 88 | 0;
 $0 = HEAP32[$m_world >> 2] | 0;
 if ((HEAP32[$0 + 102868 >> 2] & 2 | 0) != 0) ___assert_fail(11672, 11408, 153, 11712);
 $call7 = __ZN16b2BlockAllocator8AllocateEi($0, 44) | 0;
 if (($call7 | 0) == 0) $3 = 0; else {
  HEAP16[$call7 + 32 >> 1] = 1;
  HEAP16[$call7 + 34 >> 1] = -1;
  HEAP16[$call7 + 36 >> 1] = 0;
  HEAP32[$call7 + 40 >> 2] = 0;
  HEAP32[$call7 + 24 >> 2] = 0;
  HEAP32[$call7 + 28 >> 2] = 0;
  HEAP32[$call7 + 0 >> 2] = 0;
  HEAP32[$call7 + 4 >> 2] = 0;
  HEAP32[$call7 + 8 >> 2] = 0;
  HEAP32[$call7 + 12 >> 2] = 0;
  $3 = $call7;
 }
 HEAP32[$3 + 40 >> 2] = HEAP32[$def + 4 >> 2];
 HEAPF32[$3 + 16 >> 2] = +HEAPF32[$def + 8 >> 2];
 HEAPF32[$3 + 20 >> 2] = +HEAPF32[$def + 12 >> 2];
 $m_body$i = $3 + 8 | 0;
 HEAP32[$m_body$i >> 2] = $this;
 $m_next$i = $3 + 4 | 0;
 HEAP32[$m_next$i >> 2] = 0;
 $m_filter$i = $3 + 32 | 0;
 $filter$i = $def + 22 | 0;
 HEAP16[$m_filter$i + 0 >> 1] = HEAP16[$filter$i + 0 >> 1] | 0;
 HEAP16[$m_filter$i + 2 >> 1] = HEAP16[$filter$i + 2 >> 1] | 0;
 HEAP16[$m_filter$i + 4 >> 1] = HEAP16[$filter$i + 4 >> 1] | 0;
 HEAP8[$3 + 38 >> 0] = HEAP8[$def + 20 >> 0] | 0;
 $7 = HEAP32[$def >> 2] | 0;
 $call$i = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] & 63]($7, $0) | 0;
 HEAP32[$3 + 12 >> 2] = $call$i;
 $call5$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 12 >> 2] & 63]($call$i) | 0;
 $call6$i = __ZN16b2BlockAllocator8AllocateEi($0, $call5$i * 28 | 0) | 0;
 $m_proxies$i2 = $3 + 24 | 0;
 HEAP32[$m_proxies$i2 >> 2] = $call6$i;
 if (($call5$i | 0) > 0) {
  $10 = $call6$i;
  $i$013$i = 0;
  do {
   HEAP32[$10 + ($i$013$i * 28 | 0) + 16 >> 2] = 0;
   $10 = HEAP32[$m_proxies$i2 >> 2] | 0;
   HEAP32[$10 + ($i$013$i * 28 | 0) + 24 >> 2] = -1;
   $i$013$i = $i$013$i + 1 | 0;
  } while (($i$013$i | 0) != ($call5$i | 0));
 }
 HEAP32[$3 + 28 >> 2] = 0;
 $12 = +HEAPF32[$def + 16 >> 2];
 HEAPF32[$3 >> 2] = $12;
 if ((HEAP16[$this + 4 >> 1] & 32) == 0) $17 = $12; else {
  __ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform($3, (HEAP32[$m_world >> 2] | 0) + 102872 | 0, $this + 12 | 0);
  $17 = +HEAPF32[$3 >> 2];
 }
 $m_fixtureList = $this + 100 | 0;
 HEAP32[$m_next$i >> 2] = HEAP32[$m_fixtureList >> 2];
 HEAP32[$m_fixtureList >> 2] = $3;
 $m_fixtureCount = $this + 104 | 0;
 HEAP32[$m_fixtureCount >> 2] = (HEAP32[$m_fixtureCount >> 2] | 0) + 1;
 HEAP32[$m_body$i >> 2] = $this;
 if (!($17 > 0.0)) {
  $18 = HEAP32[$m_world >> 2] | 0;
  $m_flags17 = $18 + 102868 | 0;
  $19 = HEAP32[$m_flags17 >> 2] | 0;
  $or = $19 | 1;
  HEAP32[$m_flags17 >> 2] = $or;
  STACKTOP = sp;
  return $3 | 0;
 }
 __ZN6b2Body13ResetMassDataEv($this);
 $18 = HEAP32[$m_world >> 2] | 0;
 $m_flags17 = $18 + 102868 | 0;
 $19 = HEAP32[$m_flags17 >> 2] | 0;
 $or = $19 | 1;
 HEAP32[$m_flags17 >> 2] = $or;
 STACKTOP = sp;
 return $3 | 0;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $14 = 0, $7 = 0, $dst_ptr_not_leading_to_static_ptr = 0, $found_any_static_type = 0, $found_our_static_ptr = 0, $is_dst_type_derived_from_static_type = 0, $is_dst_type_derived_from_static_type13$0$off034 = 0, $number_to_dst_ptr = 0, $path_dynamic_ptr_to_static_ptr$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) {
  if ((HEAP32[$info + 4 >> 2] | 0) != ($current_ptr | 0)) {
   STACKTOP = sp;
   return;
  }
  $path_dynamic_ptr_to_static_ptr$i = $info + 28 | 0;
  if ((HEAP32[$path_dynamic_ptr_to_static_ptr$i >> 2] | 0) == 1) {
   STACKTOP = sp;
   return;
  }
  HEAP32[$path_dynamic_ptr_to_static_ptr$i >> 2] = $path_below;
  STACKTOP = sp;
  return;
 }
 if (($this | 0) != (HEAP32[$info >> 2] | 0)) {
  $14 = HEAP32[$this + 8 >> 2] | 0;
  FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$14 >> 2] | 0) + 24 >> 2] & 63]($14, $info, $current_ptr, $path_below, $use_strcmp);
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[$info + 16 >> 2] | 0) != ($current_ptr | 0)) {
  $dst_ptr_not_leading_to_static_ptr = $info + 20 | 0;
  if ((HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] | 0) != ($current_ptr | 0)) {
   HEAP32[$info + 32 >> 2] = $path_below;
   $is_dst_type_derived_from_static_type = $info + 44 | 0;
   if ((HEAP32[$is_dst_type_derived_from_static_type >> 2] | 0) == 4) {
    STACKTOP = sp;
    return;
   }
   $found_our_static_ptr = $info + 52 | 0;
   HEAP8[$found_our_static_ptr >> 0] = 0;
   $found_any_static_type = $info + 53 | 0;
   HEAP8[$found_any_static_type >> 0] = 0;
   $7 = HEAP32[$this + 8 >> 2] | 0;
   FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$7 >> 2] | 0) + 20 >> 2] & 63]($7, $info, $current_ptr, $current_ptr, 1, $use_strcmp);
   if ((HEAP8[$found_any_static_type >> 0] | 0) == 0) {
    $is_dst_type_derived_from_static_type13$0$off034 = 0;
    label = 13;
   } else if ((HEAP8[$found_our_static_ptr >> 0] | 0) == 0) {
    $is_dst_type_derived_from_static_type13$0$off034 = 1;
    label = 13;
   }
   do if ((label | 0) == 13) {
    HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] = $current_ptr;
    $number_to_dst_ptr = $info + 40 | 0;
    HEAP32[$number_to_dst_ptr >> 2] = (HEAP32[$number_to_dst_ptr >> 2] | 0) + 1;
    if ((HEAP32[$info + 36 >> 2] | 0) == 1) if ((HEAP32[$info + 24 >> 2] | 0) == 2) {
     HEAP8[$info + 54 >> 0] = 1;
     if ($is_dst_type_derived_from_static_type13$0$off034) break;
    } else label = 16; else label = 16;
    if ((label | 0) == 16) if ($is_dst_type_derived_from_static_type13$0$off034) break;
    HEAP32[$is_dst_type_derived_from_static_type >> 2] = 4;
    STACKTOP = sp;
    return;
   } while (0);
   HEAP32[$is_dst_type_derived_from_static_type >> 2] = 3;
   STACKTOP = sp;
   return;
  }
 }
 if (($path_below | 0) != 1) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$info + 32 >> 2] = 1;
 STACKTOP = sp;
 return;
}
function __ZNK11b2EdgeShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi($this, $output, $input, $xf, $childIndex) {
 $this = $this | 0;
 $output = $output | 0;
 $input = $input | 0;
 $xf = $xf | 0;
 $childIndex = $childIndex | 0;
 var $1 = 0.0, $10 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $24 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $4 = 0.0, $5 = 0.0, $add$i$i = 0.0, $add$i65 = 0.0, $add$i72 = 0.0, $add$i88 = 0.0, $add8$i = 0.0, $call$i$i$i = 0.0, $div = 0.0, $div$i = 0.0, $div22 = 0.0, $normal$sroa$0$0$load133152 = 0.0, $normal$sroa$1$4$load137153 = 0.0, $retval$0 = 0, $sub = 0.0, $sub$i = 0.0, $sub$i101 = 0.0, $sub$i120 = 0.0, $sub$i93 = 0.0, $sub3$i = 0.0, $sub3$i104 = 0.0, $sub3$i123 = 0.0, $sub3$i96 = 0.0, sp = 0;
 sp = STACKTOP;
 $1 = +HEAPF32[$xf >> 2];
 $sub$i = +HEAPF32[$input >> 2] - $1;
 $3 = +HEAPF32[$xf + 4 >> 2];
 $sub3$i = +HEAPF32[$input + 4 >> 2] - $3;
 $4 = +HEAPF32[$xf + 12 >> 2];
 $5 = +HEAPF32[$xf + 8 >> 2];
 $add$i88 = $sub$i * $4 + $sub3$i * $5;
 $add8$i = $4 * $sub3$i - $sub$i * $5;
 $sub$i120 = +HEAPF32[$input + 8 >> 2] - $1;
 $sub3$i123 = +HEAPF32[$input + 12 >> 2] - $3;
 $sub$i101 = $4 * $sub$i120 + $5 * $sub3$i123 - $add$i88;
 $sub3$i104 = $4 * $sub3$i123 - $5 * $sub$i120 - $add8$i;
 $10 = $this + 12 | 0;
 $16 = +HEAPF32[$10 >> 2];
 $17 = +HEAPF32[$10 + 4 >> 2];
 $18 = $this + 20 | 0;
 $24 = +HEAPF32[$18 >> 2];
 $sub$i93 = $24 - $16;
 $sub3$i96 = +HEAPF32[$18 + 4 >> 2] - $17;
 $sub = -$sub$i93;
 $add$i$i = $sub$i93 * $sub$i93 + $sub3$i96 * $sub3$i96;
 $call$i$i$i = +Math_sqrt(+$add$i$i);
 if ($call$i$i$i < 1.1920928955078125e-7) {
  $normal$sroa$0$0$load133152 = $sub3$i96;
  $normal$sroa$1$4$load137153 = $sub;
 } else {
  $div$i = 1.0 / $call$i$i$i;
  $normal$sroa$0$0$load133152 = $sub3$i96 * $div$i;
  $normal$sroa$1$4$load137153 = $div$i * $sub;
 }
 $add$i72 = ($17 - $add8$i) * $normal$sroa$1$4$load137153 + ($16 - $add$i88) * $normal$sroa$0$0$load133152;
 $add$i65 = $sub3$i104 * $normal$sroa$1$4$load137153 + $sub$i101 * $normal$sroa$0$0$load133152;
 if ($add$i65 == 0.0) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $div = $add$i72 / $add$i65;
 if ($div < 0.0) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 if ($add$i$i == 0.0 ? 1 : +HEAPF32[$input + 16 >> 2] < $div) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $div22 = ($sub$i93 * ($add$i88 + $sub$i101 * $div - $16) + $sub3$i96 * ($add8$i + $sub3$i104 * $div - $17)) / $add$i$i;
 if ($div22 < 0.0 | $div22 > 1.0) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 HEAPF32[$output + 8 >> 2] = $div;
 if ($add$i72 > 0.0) {
  $27 = +-$normal$sroa$0$0$load133152;
  $28 = +-$normal$sroa$1$4$load137153;
  $29 = $output;
  HEAPF32[$29 >> 2] = $27;
  HEAPF32[$29 + 4 >> 2] = $28;
  $retval$0 = 1;
  STACKTOP = sp;
  return $retval$0 | 0;
 } else {
  $33 = +$normal$sroa$0$0$load133152;
  $34 = +$normal$sroa$1$4$load137153;
  $35 = $output;
  HEAPF32[$35 >> 2] = $33;
  HEAPF32[$35 + 4 >> 2] = $34;
  $retval$0 = 1;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 return 0;
}
function __ZN15b2RevoluteJoint4DumpEv($this) {
 $this = $this | 0;
 var $1 = 0, $3 = 0, $conv10 = 0.0, $conv5 = 0.0, $vararg_buffer38 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer38 = sp;
 $1 = HEAP32[(HEAP32[$this + 48 >> 2] | 0) + 8 >> 2] | 0;
 $3 = HEAP32[(HEAP32[$this + 52 >> 2] | 0) + 8 >> 2] | 0;
 __Z5b2LogPKcz(19992, $vararg_buffer38);
 HEAP32[$vararg_buffer38 >> 2] = $1;
 __Z5b2LogPKcz(20504, $vararg_buffer38);
 HEAP32[$vararg_buffer38 >> 2] = $3;
 __Z5b2LogPKcz(20536, $vararg_buffer38);
 HEAP32[$vararg_buffer38 >> 2] = HEAPU8[$this + 61 >> 0];
 __Z5b2LogPKcz(20568, $vararg_buffer38);
 $conv5 = +HEAPF32[$this + 72 >> 2];
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 68 >> 2];
 HEAP32[$vararg_buffer38 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer38 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 $vararg_ptr12 = $vararg_buffer38 + 8 | 0;
 HEAPF64[tempDoublePtr >> 3] = $conv5;
 HEAP32[$vararg_ptr12 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_ptr12 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(20608, $vararg_buffer38);
 $conv10 = +HEAPF32[$this + 80 >> 2];
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 76 >> 2];
 HEAP32[$vararg_buffer38 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer38 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 $vararg_ptr16 = $vararg_buffer38 + 8 | 0;
 HEAPF64[tempDoublePtr >> 3] = $conv10;
 HEAP32[$vararg_ptr16 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_ptr16 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(20656, $vararg_buffer38);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 116 >> 2];
 HEAP32[$vararg_buffer38 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer38 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(20368, $vararg_buffer38);
 HEAP32[$vararg_buffer38 >> 2] = HEAPU8[$this + 112 >> 0];
 __Z5b2LogPKcz(20024, $vararg_buffer38);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 120 >> 2];
 HEAP32[$vararg_buffer38 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer38 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(20056, $vararg_buffer38);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 124 >> 2];
 HEAP32[$vararg_buffer38 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer38 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(20088, $vararg_buffer38);
 HEAP32[$vararg_buffer38 >> 2] = HEAPU8[$this + 100 >> 0];
 __Z5b2LogPKcz(20744, $vararg_buffer38);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 108 >> 2];
 HEAP32[$vararg_buffer38 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer38 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(20776, $vararg_buffer38);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 104 >> 2];
 HEAP32[$vararg_buffer38 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer38 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(20808, $vararg_buffer38);
 HEAP32[$vararg_buffer38 >> 2] = HEAP32[$this + 56 >> 2];
 __Z5b2LogPKcz(20904, $vararg_buffer38);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2World_Dump_0($self) {
 $self = $self | 0;
 var $b$025$i = 0, $b$028$i = 0, $conv3$i = 0.0, $i$027$i = 0, $i$123$i = 0, $j$021$i = 0, $j$024$i = 0, $j11$018$pre$i = 0, $j11$020$i = 0, $j22$015$pre$i = 0, $j22$017$i = 0, $m_jointList$i = 0, $vararg_buffer24 = 0, $vararg_ptr1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer24 = sp;
 if ((HEAP32[$self + 102868 >> 2] & 2 | 0) != 0) {
  STACKTOP = sp;
  return;
 }
 $conv3$i = +HEAPF32[$self + 102972 >> 2];
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$self + 102968 >> 2];
 HEAP32[$vararg_buffer24 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer24 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 $vararg_ptr1 = $vararg_buffer24 + 8 | 0;
 HEAPF64[tempDoublePtr >> 3] = $conv3$i;
 HEAP32[$vararg_ptr1 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_ptr1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(14192, $vararg_buffer24);
 __Z5b2LogPKcz(14224, $vararg_buffer24);
 HEAP32[$vararg_buffer24 >> 2] = HEAP32[$self + 102960 >> 2];
 __Z5b2LogPKcz(14256, $vararg_buffer24);
 HEAP32[$vararg_buffer24 >> 2] = HEAP32[$self + 102964 >> 2];
 __Z5b2LogPKcz(14320, $vararg_buffer24);
 $b$025$i = HEAP32[$self + 102952 >> 2] | 0;
 if (($b$025$i | 0) != 0) {
  $b$028$i = $b$025$i;
  $i$027$i = 0;
  while (1) {
   HEAP32[$b$028$i + 8 >> 2] = $i$027$i;
   __ZN6b2Body4DumpEv($b$028$i);
   $b$028$i = HEAP32[$b$028$i + 96 >> 2] | 0;
   if (($b$028$i | 0) == 0) break; else $i$027$i = $i$027$i + 1 | 0;
  }
 }
 $m_jointList$i = $self + 102956 | 0;
 $j$021$i = HEAP32[$m_jointList$i >> 2] | 0;
 if (($j$021$i | 0) != 0) {
  $i$123$i = 0;
  $j$024$i = $j$021$i;
  while (1) {
   HEAP32[$j$024$i + 56 >> 2] = $i$123$i;
   $j$024$i = HEAP32[$j$024$i + 12 >> 2] | 0;
   if (($j$024$i | 0) == 0) break; else $i$123$i = $i$123$i + 1 | 0;
  }
  $j11$018$pre$i = HEAP32[$m_jointList$i >> 2] | 0;
  if (($j11$018$pre$i | 0) != 0) {
   $j11$020$i = $j11$018$pre$i;
   do {
    if ((HEAP32[$j11$020$i + 4 >> 2] | 0) != 6) {
     __Z5b2LogPKcz(14384, $vararg_buffer24);
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$j11$020$i >> 2] | 0) + 16 >> 2] & 127]($j11$020$i);
     __Z5b2LogPKcz(14392, $vararg_buffer24);
    }
    $j11$020$i = HEAP32[$j11$020$i + 12 >> 2] | 0;
   } while (($j11$020$i | 0) != 0);
   $j22$015$pre$i = HEAP32[$m_jointList$i >> 2] | 0;
   if (($j22$015$pre$i | 0) != 0) {
    $j22$017$i = $j22$015$pre$i;
    do {
     if ((HEAP32[$j22$017$i + 4 >> 2] | 0) == 6) {
      __Z5b2LogPKcz(14384, $vararg_buffer24);
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$j22$017$i >> 2] | 0) + 16 >> 2] & 127]($j22$017$i);
      __Z5b2LogPKcz(14392, $vararg_buffer24);
     }
     $j22$017$i = HEAP32[$j22$017$i + 12 >> 2] | 0;
    } while (($j22$017$i | 0) != 0);
   }
  }
 }
 __Z5b2LogPKcz(14400, $vararg_buffer24);
 __Z5b2LogPKcz(14424, $vararg_buffer24);
 __Z5b2LogPKcz(14448, $vararg_buffer24);
 __Z5b2LogPKcz(14464, $vararg_buffer24);
 STACKTOP = sp;
 return;
}
function __ZNSt3__17__sort5IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_S8_S8_T_($__x1, $__x2, $__x3, $__x4, $__x5, $__c) {
 $__x1 = $__x1 | 0;
 $__x2 = $__x2 | 0;
 $__x3 = $__x3 | 0;
 $__x4 = $__x4 | 0;
 $__x5 = $__x5 | 0;
 $__c = $__c | 0;
 var $__r$0 = 0, $__t$i26 = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__t$i26 = sp;
 $call = __ZNSt3__17__sort4IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_S8_T_($__x1, $__x2, $__x3, $__x4, $__c) | 0;
 if (!(FUNCTION_TABLE_iii[HEAP32[$__c >> 2] & 63]($__x5, $__x4) | 0)) {
  $__r$0 = $call;
  STACKTOP = sp;
  return $__r$0 | 0;
 }
 HEAP32[$__t$i26 + 0 >> 2] = HEAP32[$__x4 + 0 >> 2];
 HEAP32[$__t$i26 + 4 >> 2] = HEAP32[$__x4 + 4 >> 2];
 HEAP32[$__t$i26 + 8 >> 2] = HEAP32[$__x4 + 8 >> 2];
 HEAP32[$__x4 + 0 >> 2] = HEAP32[$__x5 + 0 >> 2];
 HEAP32[$__x4 + 4 >> 2] = HEAP32[$__x5 + 4 >> 2];
 HEAP32[$__x4 + 8 >> 2] = HEAP32[$__x5 + 8 >> 2];
 HEAP32[$__x5 + 0 >> 2] = HEAP32[$__t$i26 + 0 >> 2];
 HEAP32[$__x5 + 4 >> 2] = HEAP32[$__t$i26 + 4 >> 2];
 HEAP32[$__x5 + 8 >> 2] = HEAP32[$__t$i26 + 8 >> 2];
 if (!(FUNCTION_TABLE_iii[HEAP32[$__c >> 2] & 63]($__x4, $__x3) | 0)) {
  $__r$0 = $call + 1 | 0;
  STACKTOP = sp;
  return $__r$0 | 0;
 }
 HEAP32[$__t$i26 + 0 >> 2] = HEAP32[$__x3 + 0 >> 2];
 HEAP32[$__t$i26 + 4 >> 2] = HEAP32[$__x3 + 4 >> 2];
 HEAP32[$__t$i26 + 8 >> 2] = HEAP32[$__x3 + 8 >> 2];
 HEAP32[$__x3 + 0 >> 2] = HEAP32[$__x4 + 0 >> 2];
 HEAP32[$__x3 + 4 >> 2] = HEAP32[$__x4 + 4 >> 2];
 HEAP32[$__x3 + 8 >> 2] = HEAP32[$__x4 + 8 >> 2];
 HEAP32[$__x4 + 0 >> 2] = HEAP32[$__t$i26 + 0 >> 2];
 HEAP32[$__x4 + 4 >> 2] = HEAP32[$__t$i26 + 4 >> 2];
 HEAP32[$__x4 + 8 >> 2] = HEAP32[$__t$i26 + 8 >> 2];
 if (!(FUNCTION_TABLE_iii[HEAP32[$__c >> 2] & 63]($__x3, $__x2) | 0)) {
  $__r$0 = $call + 2 | 0;
  STACKTOP = sp;
  return $__r$0 | 0;
 }
 HEAP32[$__t$i26 + 0 >> 2] = HEAP32[$__x2 + 0 >> 2];
 HEAP32[$__t$i26 + 4 >> 2] = HEAP32[$__x2 + 4 >> 2];
 HEAP32[$__t$i26 + 8 >> 2] = HEAP32[$__x2 + 8 >> 2];
 HEAP32[$__x2 + 0 >> 2] = HEAP32[$__x3 + 0 >> 2];
 HEAP32[$__x2 + 4 >> 2] = HEAP32[$__x3 + 4 >> 2];
 HEAP32[$__x2 + 8 >> 2] = HEAP32[$__x3 + 8 >> 2];
 HEAP32[$__x3 + 0 >> 2] = HEAP32[$__t$i26 + 0 >> 2];
 HEAP32[$__x3 + 4 >> 2] = HEAP32[$__t$i26 + 4 >> 2];
 HEAP32[$__x3 + 8 >> 2] = HEAP32[$__t$i26 + 8 >> 2];
 if (!(FUNCTION_TABLE_iii[HEAP32[$__c >> 2] & 63]($__x2, $__x1) | 0)) {
  $__r$0 = $call + 3 | 0;
  STACKTOP = sp;
  return $__r$0 | 0;
 }
 HEAP32[$__t$i26 + 0 >> 2] = HEAP32[$__x1 + 0 >> 2];
 HEAP32[$__t$i26 + 4 >> 2] = HEAP32[$__x1 + 4 >> 2];
 HEAP32[$__t$i26 + 8 >> 2] = HEAP32[$__x1 + 8 >> 2];
 HEAP32[$__x1 + 0 >> 2] = HEAP32[$__x2 + 0 >> 2];
 HEAP32[$__x1 + 4 >> 2] = HEAP32[$__x2 + 4 >> 2];
 HEAP32[$__x1 + 8 >> 2] = HEAP32[$__x2 + 8 >> 2];
 HEAP32[$__x2 + 0 >> 2] = HEAP32[$__t$i26 + 0 >> 2];
 HEAP32[$__x2 + 4 >> 2] = HEAP32[$__t$i26 + 4 >> 2];
 HEAP32[$__x2 + 8 >> 2] = HEAP32[$__t$i26 + 8 >> 2];
 $__r$0 = $call + 4 | 0;
 STACKTOP = sp;
 return $__r$0 | 0;
}
function ___dynamic_cast($static_ptr, $dst_type) {
 $static_ptr = $static_ptr | 0;
 $dst_type = $dst_type | 0;
 var $0 = 0, $3 = 0, $7 = 0, $add$ptr = 0, $cmp$i = 0, $dst_ptr$0 = 0, $dst_ptr_leading_to_static_ptr = 0, $dst_ptr_not_leading_to_static_ptr = 0, $info = 0, $number_to_dst_ptr = 0, $path_dst_ptr_to_static_ptr = 0, $path_dynamic_ptr_to_dst_ptr = 0, $path_dynamic_ptr_to_static_ptr = 0, $src2dst_offset5 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $info = sp;
 $0 = HEAP32[$static_ptr >> 2] | 0;
 $add$ptr = $static_ptr + (HEAP32[$0 + -8 >> 2] | 0) | 0;
 $3 = HEAP32[$0 + -4 >> 2] | 0;
 HEAP32[$info >> 2] = $dst_type;
 HEAP32[$info + 4 >> 2] = $static_ptr;
 HEAP32[$info + 8 >> 2] = 21608;
 $src2dst_offset5 = $info + 12 | 0;
 $dst_ptr_leading_to_static_ptr = $info + 16 | 0;
 $dst_ptr_not_leading_to_static_ptr = $info + 20 | 0;
 $path_dst_ptr_to_static_ptr = $info + 24 | 0;
 $path_dynamic_ptr_to_static_ptr = $info + 28 | 0;
 $path_dynamic_ptr_to_dst_ptr = $info + 32 | 0;
 $number_to_dst_ptr = $info + 40 | 0;
 $cmp$i = ($3 | 0) == ($dst_type | 0);
 dest = $src2dst_offset5 + 0 | 0;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$src2dst_offset5 + 40 >> 1] = 0;
 HEAP8[$src2dst_offset5 + 42 >> 0] = 0;
 if ($cmp$i) {
  HEAP32[$info + 48 >> 2] = 1;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$3 >> 2] | 0) + 20 >> 2] & 63]($3, $info, $add$ptr, $add$ptr, 1, 0);
  $dst_ptr$0 = (HEAP32[$path_dst_ptr_to_static_ptr >> 2] | 0) == 1 ? $add$ptr : 0;
  STACKTOP = sp;
  return $dst_ptr$0 | 0;
 }
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$3 >> 2] | 0) + 24 >> 2] & 63]($3, $info, $add$ptr, 1, 0);
 $7 = HEAP32[$info + 36 >> 2] | 0;
 if (($7 | 0) == 0) {
  if ((HEAP32[$number_to_dst_ptr >> 2] | 0) != 1) {
   $dst_ptr$0 = 0;
   STACKTOP = sp;
   return $dst_ptr$0 | 0;
  }
  if ((HEAP32[$path_dynamic_ptr_to_static_ptr >> 2] | 0) != 1) {
   $dst_ptr$0 = 0;
   STACKTOP = sp;
   return $dst_ptr$0 | 0;
  }
  $dst_ptr$0 = (HEAP32[$path_dynamic_ptr_to_dst_ptr >> 2] | 0) == 1 ? HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] | 0 : 0;
  STACKTOP = sp;
  return $dst_ptr$0 | 0;
 } else if (($7 | 0) == 1) {
  if ((HEAP32[$path_dst_ptr_to_static_ptr >> 2] | 0) != 1) {
   if ((HEAP32[$number_to_dst_ptr >> 2] | 0) != 0) {
    $dst_ptr$0 = 0;
    STACKTOP = sp;
    return $dst_ptr$0 | 0;
   }
   if ((HEAP32[$path_dynamic_ptr_to_static_ptr >> 2] | 0) != 1) {
    $dst_ptr$0 = 0;
    STACKTOP = sp;
    return $dst_ptr$0 | 0;
   }
   if ((HEAP32[$path_dynamic_ptr_to_dst_ptr >> 2] | 0) != 1) {
    $dst_ptr$0 = 0;
    STACKTOP = sp;
    return $dst_ptr$0 | 0;
   }
  }
  $dst_ptr$0 = HEAP32[$dst_ptr_leading_to_static_ptr >> 2] | 0;
  STACKTOP = sp;
  return $dst_ptr$0 | 0;
 } else {
  $dst_ptr$0 = 0;
  STACKTOP = sp;
  return $dst_ptr$0 | 0;
 }
 return 0;
}
function __ZNK14b2PolygonShape11ComputeMassEP10b2MassDataf($this, $massData, $density) {
 $this = $this | 0;
 $massData = $massData | 0;
 $density = +$density;
 var $$pn$in = 0, $$sink$in = 0, $0 = 0, $10 = 0.0, $11 = 0, $2 = 0.0, $4 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $I$0130 = 0.0, $add$i37 = 0.0, $add3$i = 0.0, $area$0131 = 0.0, $cmp13 = 0, $div = 0.0, $div45 = 0.0, $i$0139 = 0, $i5$0129 = 0, $mul = 0.0, $mul$i41 = 0.0, $mul$i88 = 0.0, $mul2$i = 0.0, $mul2$i90 = 0.0, $mul20 = 0.0, $mul41 = 0.0, $sub$i = 0.0, $sub$i73125 = 0.0, $sub$i81 = 0.0, $sub3$i76 = 0.0, $sub3$i84 = 0.0, $x$i64 = 0, $y$i67 = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this + 148 >> 2] | 0;
 if (($0 | 0) > 2) {
  $2 = 0.0;
  $4 = 0.0;
  $i$0139 = 0;
 } else ___assert_fail(7256, 7064, 306, 7280);
 do {
  $2 = $2 + +HEAPF32[$this + ($i$0139 << 3) + 20 >> 2];
  $4 = $4 + +HEAPF32[$this + ($i$0139 << 3) + 24 >> 2];
  $i$0139 = $i$0139 + 1 | 0;
 } while (($i$0139 | 0) < ($0 | 0));
 $div = 1.0 / +($0 | 0);
 $mul$i88 = $2 * $div;
 $mul2$i90 = $4 * $div;
 $x$i64 = $this + 20 | 0;
 $y$i67 = $this + 24 | 0;
 $7 = 0.0;
 $8 = 0.0;
 $I$0130 = 0.0;
 $area$0131 = 0.0;
 $i5$0129 = 0;
 do {
  $sub$i81 = +HEAPF32[$this + ($i5$0129 << 3) + 20 >> 2] - $mul$i88;
  $sub3$i84 = +HEAPF32[$this + ($i5$0129 << 3) + 24 >> 2] - $mul2$i90;
  $i5$0129 = $i5$0129 + 1 | 0;
  $cmp13 = ($i5$0129 | 0) < ($0 | 0);
  if ($cmp13) {
   $$pn$in = $this + ($i5$0129 << 3) + 20 | 0;
   $$sink$in = $this + ($i5$0129 << 3) + 24 | 0;
  } else {
   $$pn$in = $x$i64;
   $$sink$in = $y$i67;
  }
  $sub$i73125 = +HEAPF32[$$pn$in >> 2] - $mul$i88;
  $sub3$i76 = +HEAPF32[$$sink$in >> 2] - $mul2$i90;
  $sub$i = $sub$i81 * $sub3$i76 - $sub3$i84 * $sub$i73125;
  $mul = $sub$i * .5;
  $area$0131 = $area$0131 + $mul;
  $mul20 = $mul * .3333333432674408;
  $7 = $7 + ($sub$i81 + $sub$i73125) * $mul20;
  $8 = $8 + ($sub3$i84 + $sub3$i76) * $mul20;
  $I$0130 = $I$0130 + $sub$i * .0833333358168602 * ($sub$i73125 * $sub$i73125 + ($sub$i81 * $sub$i81 + $sub$i81 * $sub$i73125) + ($sub3$i76 * $sub3$i76 + ($sub3$i84 * $sub3$i84 + $sub3$i84 * $sub3$i76)));
 } while ($cmp13);
 $mul41 = $area$0131 * $density;
 HEAPF32[$massData >> 2] = $mul41;
 if ($area$0131 > 1.1920928955078125e-7) {
  $div45 = 1.0 / $area$0131;
  $mul$i41 = $7 * $div45;
  $mul2$i = $8 * $div45;
  $add$i37 = $mul$i88 + $mul$i41;
  $add3$i = $mul2$i90 + $mul2$i;
  $9 = +$add$i37;
  $10 = +$add3$i;
  $11 = $massData + 4 | 0;
  HEAPF32[$11 >> 2] = $9;
  HEAPF32[$11 + 4 >> 2] = $10;
  HEAPF32[$massData + 12 >> 2] = $I$0130 * $density + $mul41 * ($add$i37 * $add$i37 + $add3$i * $add3$i - ($mul$i41 * $mul$i41 + $mul2$i * $mul2$i));
  STACKTOP = sp;
  return;
 } else ___assert_fail(7296, 7064, 352, 7280);
}
function __ZN11b2RopeJoint24SolveVelocityConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $23 = 0.0, $24 = 0.0, $26 = 0.0, $29 = 0.0, $30 = 0.0, $34 = 0.0, $35 = 0.0, $37 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0, $46 = 0, $48 = 0.0, $49 = 0.0, $50 = 0, $8 = 0.0, $9 = 0.0, $Cdot$0 = 0.0, $add$i57 = 0.0, $add17 = 0.0, $add32 = 0.0, $cond$i = 0.0, $m_impulse = 0, $m_indexA = 0, $m_indexB = 0, $mul$i48 = 0.0, $mul1$i50 = 0.0, $sub = 0.0, $sub21 = 0.0, $sub27 = 0.0, $v = 0, $velocities = 0, sp = 0;
 sp = STACKTOP;
 $m_indexA = $this + 96 | 0;
 $0 = HEAP32[$m_indexA >> 2] | 0;
 $velocities = $data + 28 | 0;
 $1 = HEAP32[$velocities >> 2] | 0;
 $v = $1 + ($0 * 12 | 0) | 0;
 $2 = $v;
 $8 = +HEAPF32[$2 >> 2];
 $9 = +HEAPF32[$2 + 4 >> 2];
 $10 = +HEAPF32[$1 + ($0 * 12 | 0) + 8 >> 2];
 $m_indexB = $this + 100 | 0;
 $11 = HEAP32[$m_indexB >> 2] | 0;
 $12 = $1 + ($11 * 12 | 0) | 0;
 $18 = +HEAPF32[$12 >> 2];
 $19 = +HEAPF32[$12 + 4 >> 2];
 $20 = +HEAPF32[$1 + ($11 * 12 | 0) + 8 >> 2];
 $21 = +HEAPF32[$this + 116 >> 2];
 $23 = +HEAPF32[$this + 112 >> 2];
 $24 = +HEAPF32[$this + 124 >> 2];
 $26 = +HEAPF32[$this + 120 >> 2];
 $sub = +HEAPF32[$this + 88 >> 2] - +HEAPF32[$this + 84 >> 2];
 $29 = +HEAPF32[$this + 104 >> 2];
 $30 = +HEAPF32[$this + 108 >> 2];
 $add$i57 = ($18 - $20 * $24 - ($8 - $10 * $21)) * $29 + ($19 + $20 * $26 - ($9 + $10 * $23)) * $30;
 if ($sub < 0.0) $Cdot$0 = $add$i57 + $sub * +HEAPF32[$data + 4 >> 2]; else $Cdot$0 = $add$i57;
 $m_impulse = $this + 92 | 0;
 $34 = +HEAPF32[$m_impulse >> 2];
 $add17 = $34 - $Cdot$0 * +HEAPF32[$this + 160 >> 2];
 $cond$i = $add17 > 0.0 ? 0.0 : $add17;
 HEAPF32[$m_impulse >> 2] = $cond$i;
 $sub21 = $cond$i - $34;
 $mul$i48 = $29 * $sub21;
 $mul1$i50 = $30 * $sub21;
 $35 = +HEAPF32[$this + 144 >> 2];
 $sub27 = $10 - +HEAPF32[$this + 152 >> 2] * ($23 * $mul1$i50 - $mul$i48 * $21);
 $37 = +HEAPF32[$this + 148 >> 2];
 $add32 = $20 + +HEAPF32[$this + 156 >> 2] * ($mul1$i50 * $26 - $mul$i48 * $24);
 $39 = +($8 - $35 * $mul$i48);
 $40 = +($9 - $35 * $mul1$i50);
 $41 = $v;
 HEAPF32[$41 >> 2] = $39;
 HEAPF32[$41 + 4 >> 2] = $40;
 $46 = HEAP32[$velocities >> 2] | 0;
 HEAPF32[$46 + ((HEAP32[$m_indexA >> 2] | 0) * 12 | 0) + 8 >> 2] = $sub27;
 $48 = +($18 + $mul$i48 * $37);
 $49 = +($19 + $mul1$i50 * $37);
 $50 = $46 + ((HEAP32[$m_indexB >> 2] | 0) * 12 | 0) | 0;
 HEAPF32[$50 >> 2] = $48;
 HEAPF32[$50 + 4 >> 2] = $49;
 HEAPF32[(HEAP32[$velocities >> 2] | 0) + ((HEAP32[$m_indexB >> 2] | 0) * 12 | 0) + 8 >> 2] = $add32;
 STACKTOP = sp;
 return;
}
function __ZN13b2PulleyJoint24SolveVelocityConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $23 = 0.0, $24 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $33 = 0.0, $35 = 0.0, $37 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0, $46 = 0, $48 = 0.0, $49 = 0.0, $50 = 0, $8 = 0.0, $9 = 0.0, $add27 = 0.0, $add32 = 0.0, $m_impulse = 0, $m_indexA = 0, $m_indexB = 0, $mul$i47 = 0.0, $mul$i53 = 0.0, $mul1$i49 = 0.0, $mul1$i55 = 0.0, $mul21 = 0.0, $v = 0, $velocities = 0, sp = 0;
 sp = STACKTOP;
 $m_indexA = $this + 120 | 0;
 $0 = HEAP32[$m_indexA >> 2] | 0;
 $velocities = $data + 28 | 0;
 $1 = HEAP32[$velocities >> 2] | 0;
 $v = $1 + ($0 * 12 | 0) | 0;
 $2 = $v;
 $8 = +HEAPF32[$2 >> 2];
 $9 = +HEAPF32[$2 + 4 >> 2];
 $10 = +HEAPF32[$1 + ($0 * 12 | 0) + 8 >> 2];
 $m_indexB = $this + 124 | 0;
 $11 = HEAP32[$m_indexB >> 2] | 0;
 $12 = $1 + ($11 * 12 | 0) | 0;
 $18 = +HEAPF32[$12 >> 2];
 $19 = +HEAPF32[$12 + 4 >> 2];
 $20 = +HEAPF32[$1 + ($11 * 12 | 0) + 8 >> 2];
 $21 = +HEAPF32[$this + 148 >> 2];
 $23 = +HEAPF32[$this + 144 >> 2];
 $24 = +HEAPF32[$this + 156 >> 2];
 $26 = +HEAPF32[$this + 152 >> 2];
 $27 = +HEAPF32[$this + 128 >> 2];
 $28 = +HEAPF32[$this + 132 >> 2];
 $29 = +HEAPF32[$this + 112 >> 2];
 $30 = +HEAPF32[$this + 136 >> 2];
 $31 = +HEAPF32[$this + 140 >> 2];
 $33 = +HEAPF32[$this + 192 >> 2] * (-(($8 - $10 * $21) * $27 + ($9 + $10 * $23) * $28) - $29 * (($18 - $20 * $24) * $30 + ($19 + $20 * $26) * $31));
 $m_impulse = $this + 116 | 0;
 HEAPF32[$m_impulse >> 2] = +HEAPF32[$m_impulse >> 2] - $33;
 $mul$i53 = $27 * $33;
 $mul1$i55 = $28 * $33;
 $mul21 = $29 * $33;
 $mul$i47 = $30 * $mul21;
 $mul1$i49 = $mul21 * $31;
 $35 = +HEAPF32[$this + 176 >> 2];
 $add27 = $10 + +HEAPF32[$this + 184 >> 2] * ($mul1$i55 * $23 - $mul$i53 * $21);
 $37 = +HEAPF32[$this + 180 >> 2];
 $add32 = $20 + +HEAPF32[$this + 188 >> 2] * ($mul1$i49 * $26 - $mul$i47 * $24);
 $39 = +($8 + $mul$i53 * $35);
 $40 = +($9 + $mul1$i55 * $35);
 $41 = $v;
 HEAPF32[$41 >> 2] = $39;
 HEAPF32[$41 + 4 >> 2] = $40;
 $46 = HEAP32[$velocities >> 2] | 0;
 HEAPF32[$46 + ((HEAP32[$m_indexA >> 2] | 0) * 12 | 0) + 8 >> 2] = $add27;
 $48 = +($18 + $mul$i47 * $37);
 $49 = +($19 + $mul1$i49 * $37);
 $50 = $46 + ((HEAP32[$m_indexB >> 2] | 0) * 12 | 0) | 0;
 HEAPF32[$50 >> 2] = $48;
 HEAPF32[$50 + 4 >> 2] = $49;
 HEAPF32[(HEAP32[$velocities >> 2] | 0) + ((HEAP32[$m_indexB >> 2] | 0) * 12 | 0) + 8 >> 2] = $add32;
 STACKTOP = sp;
 return;
}
function __ZN16b2BlockAllocator8AllocateEi($this, $size) {
 $this = $this | 0;
 $size = $size | 0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $5 = 0, $9 = 0, $add = 0, $arrayidx10 = 0, $blocks = 0, $call$i1 = 0, $call$i2 = 0, $conv = 0, $div = 0, $i$027 = 0, $m_chunkCount = 0, $m_chunkSpace = 0, $retval$0 = 0, $sub = 0, sp = 0, $i$027$looptemp = 0;
 sp = STACKTOP;
 if (($size | 0) == 0) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 if (($size | 0) <= 0) ___assert_fail(8248, 8176, 104, 11312);
 if (($size | 0) > 640) {
  $retval$0 = _malloc($size) | 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $0 = HEAP8[7496 + $size >> 0] | 0;
 $conv = $0 & 255;
 if (!(($0 & 255) < 14)) ___assert_fail(8264, 8176, 112, 11312);
 $arrayidx10 = $this + ($conv << 2) + 12 | 0;
 $1 = HEAP32[$arrayidx10 >> 2] | 0;
 if (($1 | 0) != 0) {
  HEAP32[$arrayidx10 >> 2] = HEAP32[$1 >> 2];
  $retval$0 = $1;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $m_chunkCount = $this + 4 | 0;
 $3 = HEAP32[$m_chunkCount >> 2] | 0;
 $m_chunkSpace = $this + 8 | 0;
 if (($3 | 0) == (HEAP32[$m_chunkSpace >> 2] | 0)) {
  $5 = HEAP32[$this >> 2] | 0;
  $add = $3 + 128 | 0;
  HEAP32[$m_chunkSpace >> 2] = $add;
  $call$i1 = _malloc($add << 3) | 0;
  HEAP32[$this >> 2] = $call$i1;
  _memcpy($call$i1 | 0, $5 | 0, HEAP32[$m_chunkCount >> 2] << 3 | 0) | 0;
  _memset((HEAP32[$this >> 2] | 0) + (HEAP32[$m_chunkCount >> 2] << 3) | 0, 0, 1024) | 0;
  _free($5);
  $10 = HEAP32[$m_chunkCount >> 2] | 0;
 } else $10 = $3;
 $9 = HEAP32[$this >> 2] | 0;
 $call$i2 = _malloc(16384) | 0;
 $blocks = $9 + ($10 << 3) + 4 | 0;
 HEAP32[$blocks >> 2] = $call$i2;
 $11 = HEAP32[7440 + ($conv << 2) >> 2] | 0;
 HEAP32[$9 + ($10 << 3) >> 2] = $11;
 $div = 16384 / ($11 | 0) | 0;
 if ((Math_imul($div, $11) | 0) >= 16385) ___assert_fail(8304, 8176, 140, 11312);
 $sub = $div + -1 | 0;
 if (($sub | 0) > 0) {
  $12 = $call$i2;
  $i$027 = 0;
  while (1) {
   $i$027$looptemp = $i$027;
   $i$027 = $i$027 + 1 | 0;
   HEAP32[$12 + (Math_imul($i$027$looptemp, $11) | 0) >> 2] = $12 + (Math_imul($i$027, $11) | 0);
   $13 = HEAP32[$blocks >> 2] | 0;
   if (($i$027 | 0) == ($sub | 0)) {
    $$lcssa = $13;
    break;
   } else $12 = $13;
  }
 } else $$lcssa = $call$i2;
 HEAP32[$$lcssa + (Math_imul($sub, $11) | 0) >> 2] = 0;
 HEAP32[$arrayidx10 >> 2] = HEAP32[HEAP32[$blocks >> 2] >> 2];
 HEAP32[$m_chunkCount >> 2] = (HEAP32[$m_chunkCount >> 2] | 0) + 1;
 $retval$0 = HEAP32[$blocks >> 2] | 0;
 STACKTOP = sp;
 return $retval$0 | 0;
}
function _emscripten_bind_b2Body_SetMassData_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $14 = 0.0, $15 = 0.0, $16 = 0, $18 = 0, $21 = 0, $22 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $3 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $37 = 0, $4 = 0.0, $41 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $add$i17$i = 0.0, $add17$i$i = 0.0, $bitcast$i = 0.0, $c$i = 0, $m_I$i = 0, $m_invI$i = 0, $m_invMass$i = 0, $storemerge$i = 0.0, $sub$i = 0.0, $x2$i$i = 0, $y3$i$i = 0, sp = 0;
 sp = STACKTOP;
 if ((HEAP32[(HEAP32[$self + 88 >> 2] | 0) + 102868 >> 2] & 2 | 0) != 0) ___assert_fail(11672, 11408, 340, 11864);
 if ((HEAP32[$self >> 2] | 0) != 2) {
  STACKTOP = sp;
  return;
 }
 $m_invMass$i = $self + 120 | 0;
 HEAPF32[$m_invMass$i >> 2] = 0.0;
 $m_I$i = $self + 124 | 0;
 HEAPF32[$m_I$i >> 2] = 0.0;
 $m_invI$i = $self + 128 | 0;
 HEAPF32[$m_invI$i >> 2] = 0.0;
 $3 = +HEAPF32[$arg0 >> 2];
 $storemerge$i = !($3 <= 0.0) ? $3 : 1.0;
 HEAPF32[$self + 116 >> 2] = $storemerge$i;
 HEAPF32[$m_invMass$i >> 2] = 1.0 / $storemerge$i;
 $4 = +HEAPF32[$arg0 + 12 >> 2];
 do if ($4 > 0.0) if ((HEAP16[$self + 4 >> 1] & 16) == 0) {
  $6 = +HEAPF32[$arg0 + 4 >> 2];
  $7 = +HEAPF32[$arg0 + 8 >> 2];
  $sub$i = $4 - $storemerge$i * ($6 * $6 + $7 * $7);
  HEAPF32[$m_I$i >> 2] = $sub$i;
  if ($sub$i > 0.0) {
   HEAPF32[$m_invI$i >> 2] = 1.0 / $sub$i;
   break;
  } else ___assert_fail(11848, 11408, 366, 11864);
 } while (0);
 $c$i = $self + 44 | 0;
 $8 = $c$i;
 $14 = +HEAPF32[$8 >> 2];
 $15 = +HEAPF32[$8 + 4 >> 2];
 $16 = $arg0 + 4 | 0;
 $18 = HEAP32[$16 >> 2] | 0;
 $21 = HEAP32[$16 + 4 >> 2] | 0;
 $22 = $self + 28 | 0;
 HEAP32[$22 >> 2] = $18;
 HEAP32[$22 + 4 >> 2] = $21;
 $26 = +HEAPF32[$self + 24 >> 2];
 $bitcast$i = (HEAP32[tempDoublePtr >> 2] = $18, +HEAPF32[tempDoublePtr >> 2]);
 $27 = +HEAPF32[$self + 20 >> 2];
 $28 = (HEAP32[tempDoublePtr >> 2] = $21, +HEAPF32[tempDoublePtr >> 2]);
 $add$i17$i = +HEAPF32[$self + 12 >> 2] + ($26 * $bitcast$i - $27 * $28);
 $add17$i$i = $bitcast$i * $27 + $26 * $28 + +HEAPF32[$self + 16 >> 2];
 $31 = +$add$i17$i;
 $32 = +$add17$i$i;
 $33 = $c$i;
 HEAPF32[$33 >> 2] = $31;
 HEAPF32[$33 + 4 >> 2] = $32;
 $37 = $self + 36 | 0;
 HEAPF32[$37 >> 2] = $31;
 HEAPF32[$37 + 4 >> 2] = $32;
 $41 = +HEAPF32[$self + 72 >> 2];
 $x2$i$i = $self + 64 | 0;
 HEAPF32[$x2$i$i >> 2] = +HEAPF32[$x2$i$i >> 2] - $41 * ($add17$i$i - $15);
 $y3$i$i = $self + 68 | 0;
 HEAPF32[$y3$i$i >> 2] = $41 * ($add$i17$i - $14) + +HEAPF32[$y3$i$i >> 2];
 STACKTOP = sp;
 return;
}
function __ZN12b2MouseJoint24SolveVelocityConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $13 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $2 = 0, $23 = 0, $29 = 0.0, $30 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $8 = 0.0, $9 = 0.0, $add = 0.0, $add$i47 = 0.0, $add$i50 = 0.0, $add12$i = 0.0, $add4$i53 = 0.0, $div = 0.0, $m_impulse = 0, $m_indexB = 0, $mul = 0.0, $mul$i30 = 0.0, $mul2$i = 0.0, $sub$i25 = 0.0, $sub$i64 = 0.0, $sub2$i = 0.0, $sub3$i = 0.0, $v = 0, $velocities = 0, $y$i76 = 0, sp = 0;
 sp = STACKTOP;
 $m_indexB = $this + 116 | 0;
 $0 = HEAP32[$m_indexB >> 2] | 0;
 $velocities = $data + 28 | 0;
 $1 = HEAP32[$velocities >> 2] | 0;
 $v = $1 + ($0 * 12 | 0) | 0;
 $2 = $v;
 $8 = +HEAPF32[$2 >> 2];
 $9 = +HEAPF32[$2 + 4 >> 2];
 $10 = +HEAPF32[$1 + ($0 * 12 | 0) + 8 >> 2];
 $11 = +HEAPF32[$this + 124 >> 2];
 $13 = +HEAPF32[$this + 120 >> 2];
 $16 = +HEAPF32[$this + 108 >> 2];
 $m_impulse = $this + 96 | 0;
 $17 = +HEAPF32[$m_impulse >> 2];
 $y$i76 = $this + 100 | 0;
 $18 = +HEAPF32[$y$i76 >> 2];
 $sub$i64 = -($8 - $10 * $11 + +HEAPF32[$this + 160 >> 2] + $16 * $17);
 $sub2$i = -($9 + $10 * $13 + +HEAPF32[$this + 164 >> 2] + $16 * $18);
 $add12$i = +HEAPF32[$this + 148 >> 2] * $sub$i64 + +HEAPF32[$this + 156 >> 2] * $sub2$i;
 $23 = $m_impulse;
 $29 = +HEAPF32[$23 >> 2];
 $30 = +HEAPF32[$23 + 4 >> 2];
 $add$i50 = $17 + (+HEAPF32[$this + 144 >> 2] * $sub$i64 + +HEAPF32[$this + 152 >> 2] * $sub2$i);
 HEAPF32[$m_impulse >> 2] = $add$i50;
 $add4$i53 = $add12$i + $18;
 HEAPF32[$y$i76 >> 2] = $add4$i53;
 $mul = +HEAPF32[$data >> 2] * +HEAPF32[$this + 104 >> 2];
 $add$i47 = $add4$i53 * $add4$i53 + $add$i50 * $add$i50;
 if ($add$i47 > $mul * $mul) {
  $div = $mul / +Math_sqrt(+$add$i47);
  $mul$i30 = $add$i50 * $div;
  HEAPF32[$m_impulse >> 2] = $mul$i30;
  $mul2$i = $div * $add4$i53;
  HEAPF32[$y$i76 >> 2] = $mul2$i;
  $33 = $mul$i30;
  $34 = $mul2$i;
 } else {
  $33 = $add$i50;
  $34 = $add4$i53;
 }
 $sub$i25 = $33 - $29;
 $sub3$i = $34 - $30;
 $35 = +HEAPF32[$this + 136 >> 2];
 $add = $10 + +HEAPF32[$this + 140 >> 2] * ($sub3$i * $13 - $sub$i25 * $11);
 $37 = +($8 + $sub$i25 * $35);
 $38 = +($9 + $sub3$i * $35);
 $39 = $v;
 HEAPF32[$39 >> 2] = $37;
 HEAPF32[$39 + 4 >> 2] = $38;
 HEAPF32[(HEAP32[$velocities >> 2] | 0) + ((HEAP32[$m_indexB >> 2] | 0) * 12 | 0) + 8 >> 2] = $add;
 STACKTOP = sp;
 return;
}
function __ZN15b2DistanceJoint4DumpEv($this) {
 $this = $this | 0;
 var $1 = 0, $3 = 0, $conv10 = 0.0, $conv5 = 0.0, $vararg_buffer26 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer26 = sp;
 $1 = HEAP32[(HEAP32[$this + 48 >> 2] | 0) + 8 >> 2] | 0;
 $3 = HEAP32[(HEAP32[$this + 52 >> 2] | 0) + 8 >> 2] | 0;
 __Z5b2LogPKcz(17592, $vararg_buffer26);
 HEAP32[$vararg_buffer26 >> 2] = $1;
 __Z5b2LogPKcz(20504, $vararg_buffer26);
 HEAP32[$vararg_buffer26 >> 2] = $3;
 __Z5b2LogPKcz(20536, $vararg_buffer26);
 HEAP32[$vararg_buffer26 >> 2] = HEAPU8[$this + 61 >> 0];
 __Z5b2LogPKcz(20568, $vararg_buffer26);
 $conv5 = +HEAPF32[$this + 84 >> 2];
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 80 >> 2];
 HEAP32[$vararg_buffer26 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer26 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 $vararg_ptr12 = $vararg_buffer26 + 8 | 0;
 HEAPF64[tempDoublePtr >> 3] = $conv5;
 HEAP32[$vararg_ptr12 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_ptr12 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(20608, $vararg_buffer26);
 $conv10 = +HEAPF32[$this + 92 >> 2];
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 88 >> 2];
 HEAP32[$vararg_buffer26 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer26 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 $vararg_ptr16 = $vararg_buffer26 + 8 | 0;
 HEAPF64[tempDoublePtr >> 3] = $conv10;
 HEAP32[$vararg_ptr16 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_ptr16 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(20656, $vararg_buffer26);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 104 >> 2];
 HEAP32[$vararg_buffer26 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer26 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(17624, $vararg_buffer26);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 68 >> 2];
 HEAP32[$vararg_buffer26 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer26 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(20840, $vararg_buffer26);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 72 >> 2];
 HEAP32[$vararg_buffer26 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer26 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(20872, $vararg_buffer26);
 HEAP32[$vararg_buffer26 >> 2] = HEAP32[$this + 56 >> 2];
 __Z5b2LogPKcz(20904, $vararg_buffer26);
 STACKTOP = sp;
 return;
}
function __ZN11b2WeldJoint4DumpEv($this) {
 $this = $this | 0;
 var $1 = 0, $3 = 0, $conv10 = 0.0, $conv5 = 0.0, $vararg_buffer26 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer26 = sp;
 $1 = HEAP32[(HEAP32[$this + 48 >> 2] | 0) + 8 >> 2] | 0;
 $3 = HEAP32[(HEAP32[$this + 52 >> 2] | 0) + 8 >> 2] | 0;
 __Z5b2LogPKcz(20344, $vararg_buffer26);
 HEAP32[$vararg_buffer26 >> 2] = $1;
 __Z5b2LogPKcz(20504, $vararg_buffer26);
 HEAP32[$vararg_buffer26 >> 2] = $3;
 __Z5b2LogPKcz(20536, $vararg_buffer26);
 HEAP32[$vararg_buffer26 >> 2] = HEAPU8[$this + 61 >> 0];
 __Z5b2LogPKcz(20568, $vararg_buffer26);
 $conv5 = +HEAPF32[$this + 84 >> 2];
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 80 >> 2];
 HEAP32[$vararg_buffer26 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer26 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 $vararg_ptr12 = $vararg_buffer26 + 8 | 0;
 HEAPF64[tempDoublePtr >> 3] = $conv5;
 HEAP32[$vararg_ptr12 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_ptr12 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(20608, $vararg_buffer26);
 $conv10 = +HEAPF32[$this + 92 >> 2];
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 88 >> 2];
 HEAP32[$vararg_buffer26 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer26 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 $vararg_ptr16 = $vararg_buffer26 + 8 | 0;
 HEAPF64[tempDoublePtr >> 3] = $conv10;
 HEAP32[$vararg_ptr16 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_ptr16 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(20656, $vararg_buffer26);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 96 >> 2];
 HEAP32[$vararg_buffer26 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer26 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(20368, $vararg_buffer26);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 68 >> 2];
 HEAP32[$vararg_buffer26 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer26 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(20840, $vararg_buffer26);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 72 >> 2];
 HEAP32[$vararg_buffer26 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer26 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(20872, $vararg_buffer26);
 HEAP32[$vararg_buffer26 >> 2] = HEAP32[$this + 56 >> 2];
 __Z5b2LogPKcz(20904, $vararg_buffer26);
 STACKTOP = sp;
 return;
}
function __ZN15b2DistanceJoint24SolveVelocityConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $23 = 0.0, $24 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $36 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0, $45 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $8 = 0.0, $9 = 0.0, $add28 = 0.0, $m_impulse = 0, $m_indexA = 0, $m_indexB = 0, $mul$i45 = 0.0, $mul1$i47 = 0.0, $mul15 = 0.0, $sub23 = 0.0, $v = 0, $velocities = 0, sp = 0;
 sp = STACKTOP;
 $m_indexA = $this + 108 | 0;
 $0 = HEAP32[$m_indexA >> 2] | 0;
 $velocities = $data + 28 | 0;
 $1 = HEAP32[$velocities >> 2] | 0;
 $v = $1 + ($0 * 12 | 0) | 0;
 $2 = $v;
 $8 = +HEAPF32[$2 >> 2];
 $9 = +HEAPF32[$2 + 4 >> 2];
 $10 = +HEAPF32[$1 + ($0 * 12 | 0) + 8 >> 2];
 $m_indexB = $this + 112 | 0;
 $11 = HEAP32[$m_indexB >> 2] | 0;
 $12 = $1 + ($11 * 12 | 0) | 0;
 $18 = +HEAPF32[$12 >> 2];
 $19 = +HEAPF32[$12 + 4 >> 2];
 $20 = +HEAPF32[$1 + ($11 * 12 | 0) + 8 >> 2];
 $21 = +HEAPF32[$this + 128 >> 2];
 $23 = +HEAPF32[$this + 124 >> 2];
 $24 = +HEAPF32[$this + 136 >> 2];
 $26 = +HEAPF32[$this + 132 >> 2];
 $27 = +HEAPF32[$this + 116 >> 2];
 $28 = +HEAPF32[$this + 120 >> 2];
 $m_impulse = $this + 100 | 0;
 $32 = +HEAPF32[$m_impulse >> 2];
 $33 = +HEAPF32[$this + 172 >> 2] * (+HEAPF32[$this + 76 >> 2] + ($27 * ($18 - $20 * $24 - ($8 - $10 * $21)) + $28 * ($19 + $20 * $26 - ($9 + $10 * $23))) + +HEAPF32[$this + 96 >> 2] * $32);
 $mul15 = -$33;
 HEAPF32[$m_impulse >> 2] = $32 - $33;
 $mul$i45 = $27 * $mul15;
 $mul1$i47 = $28 * $mul15;
 $34 = +HEAPF32[$this + 156 >> 2];
 $sub23 = $10 - +HEAPF32[$this + 164 >> 2] * ($23 * $mul1$i47 - $mul$i45 * $21);
 $36 = +HEAPF32[$this + 160 >> 2];
 $add28 = $20 + +HEAPF32[$this + 168 >> 2] * ($mul1$i47 * $26 - $mul$i45 * $24);
 $38 = +($8 - $34 * $mul$i45);
 $39 = +($9 - $34 * $mul1$i47);
 $40 = $v;
 HEAPF32[$40 >> 2] = $38;
 HEAPF32[$40 + 4 >> 2] = $39;
 $45 = HEAP32[$velocities >> 2] | 0;
 HEAPF32[$45 + ((HEAP32[$m_indexA >> 2] | 0) * 12 | 0) + 8 >> 2] = $sub23;
 $47 = +($18 + $mul$i45 * $36);
 $48 = +($19 + $mul1$i47 * $36);
 $49 = $45 + ((HEAP32[$m_indexB >> 2] | 0) * 12 | 0) | 0;
 HEAPF32[$49 >> 2] = $47;
 HEAPF32[$49 + 4 >> 2] = $48;
 HEAPF32[(HEAP32[$velocities >> 2] | 0) + ((HEAP32[$m_indexB >> 2] | 0) * 12 | 0) + 8 >> 2] = $add28;
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2PulleyJointDef_Initialize_7($self, $arg0, $arg1, $arg2, $arg3, $arg4, $arg5, $arg6) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 $arg1 = $arg1 | 0;
 $arg2 = $arg2 | 0;
 $arg3 = $arg3 | 0;
 $arg4 = $arg4 | 0;
 $arg5 = $arg5 | 0;
 $arg6 = +$arg6;
 var $0 = 0, $10 = 0, $15 = 0, $16 = 0, $24 = 0.0, $25 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0, $37 = 0.0, $38 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $5 = 0, $6 = 0, $sub$i$i = 0.0, $sub$i$i$i = 0.0, $sub$i$i8$i = 0.0, $sub$i31$i = 0.0, $sub3$i$i = 0.0, $sub3$i34$i = 0.0, $sub4$i$i$i = 0.0, $sub4$i$i11$i = 0.0, $y$i$i$i = 0, $y$i$i9$i = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$self + 8 >> 2] = $arg0;
 HEAP32[$self + 12 >> 2] = $arg1;
 $0 = $arg2;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $self + 20 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 $10 = $arg3;
 $15 = HEAP32[$10 + 4 >> 2] | 0;
 $16 = $self + 28 | 0;
 HEAP32[$16 >> 2] = HEAP32[$10 >> 2];
 HEAP32[$16 + 4 >> 2] = $15;
 $sub$i$i$i = +HEAPF32[$arg4 >> 2] - +HEAPF32[$arg0 + 12 >> 2];
 $y$i$i$i = $arg4 + 4 | 0;
 $sub4$i$i$i = +HEAPF32[$y$i$i$i >> 2] - +HEAPF32[$arg0 + 16 >> 2];
 $24 = +HEAPF32[$arg0 + 24 >> 2];
 $25 = +HEAPF32[$arg0 + 20 >> 2];
 $27 = +($sub$i$i$i * $24 + $sub4$i$i$i * $25);
 $28 = +($24 * $sub4$i$i$i - $sub$i$i$i * $25);
 $29 = $self + 36 | 0;
 HEAPF32[$29 >> 2] = $27;
 HEAPF32[$29 + 4 >> 2] = $28;
 $sub$i$i8$i = +HEAPF32[$arg5 >> 2] - +HEAPF32[$arg1 + 12 >> 2];
 $y$i$i9$i = $arg5 + 4 | 0;
 $sub4$i$i11$i = +HEAPF32[$y$i$i9$i >> 2] - +HEAPF32[$arg1 + 16 >> 2];
 $37 = +HEAPF32[$arg1 + 24 >> 2];
 $38 = +HEAPF32[$arg1 + 20 >> 2];
 $40 = +($sub$i$i8$i * $37 + $sub4$i$i11$i * $38);
 $41 = +($37 * $sub4$i$i11$i - $sub$i$i8$i * $38);
 $42 = $self + 44 | 0;
 HEAPF32[$42 >> 2] = $40;
 HEAPF32[$42 + 4 >> 2] = $41;
 $sub$i31$i = +HEAPF32[$arg4 >> 2] - +HEAPF32[$arg2 >> 2];
 $sub3$i34$i = +HEAPF32[$y$i$i$i >> 2] - +HEAPF32[$arg2 + 4 >> 2];
 HEAPF32[$self + 52 >> 2] = +Math_sqrt(+($sub$i31$i * $sub$i31$i + $sub3$i34$i * $sub3$i34$i));
 $sub$i$i = +HEAPF32[$arg5 >> 2] - +HEAPF32[$arg3 >> 2];
 $sub3$i$i = +HEAPF32[$y$i$i9$i >> 2] - +HEAPF32[$arg3 + 4 >> 2];
 HEAPF32[$self + 56 >> 2] = +Math_sqrt(+($sub$i$i * $sub$i$i + $sub3$i$i * $sub3$i$i));
 HEAPF32[$self + 60 >> 2] = $arg6;
 if ($arg6 > 1.1920928955078125e-7) {
  STACKTOP = sp;
  return;
 } else ___assert_fail(19424, 19456, 51, 19512);
}
function _emscripten_bind_b2Body_DestroyFixture_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $14 = 0, $16 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $arrayidx10$i = 0, $edge$023$i = 0, $m_body$i = 0, $m_fixtureCount$i = 0, $m_fixtureList$i = 0, $m_next$i = 0, $m_next16$i = 0, $m_world$i = 0, $node$026$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $m_world$i = $self + 88 | 0;
 if ((HEAP32[(HEAP32[$m_world$i >> 2] | 0) + 102868 >> 2] & 2 | 0) != 0) ___assert_fail(11672, 11408, 201, 11728);
 $m_body$i = $arg0 + 8 | 0;
 if ((HEAP32[$m_body$i >> 2] | 0) != ($self | 0)) ___assert_fail(11744, 11408, 207, 11728);
 $m_fixtureCount$i = $self + 104 | 0;
 if ((HEAP32[$m_fixtureCount$i >> 2] | 0) <= 0) ___assert_fail(11768, 11408, 210, 11728);
 $m_fixtureList$i = $self + 100 | 0;
 $4 = HEAP32[$m_fixtureList$i >> 2] | 0;
 if (($4 | 0) == 0) ___assert_fail(11792, 11408, 226, 11728); else {
  $6 = $4;
  $node$026$i = $m_fixtureList$i;
 }
 while (1) {
  $m_next16$i = $6 + 4 | 0;
  if (($6 | 0) == ($arg0 | 0)) break;
  $6 = HEAP32[$m_next16$i >> 2] | 0;
  if (($6 | 0) == 0) {
   label = 11;
   break;
  } else $node$026$i = $m_next16$i;
 }
 if ((label | 0) == 11) ___assert_fail(11792, 11408, 226, 11728);
 $m_next$i = $arg0 + 4 | 0;
 HEAP32[$node$026$i >> 2] = HEAP32[$m_next$i >> 2];
 $8 = HEAP32[$self + 112 >> 2] | 0;
 if (($8 | 0) != 0) {
  $edge$023$i = $8;
  do {
   $9 = HEAP32[$edge$023$i + 4 >> 2] | 0;
   $edge$023$i = HEAP32[$edge$023$i + 12 >> 2] | 0;
   if ((HEAP32[$9 + 48 >> 2] | 0) == ($arg0 | 0) ? 1 : (HEAP32[$9 + 52 >> 2] | 0) == ($arg0 | 0)) __ZN16b2ContactManager7DestroyEP9b2Contact((HEAP32[$m_world$i >> 2] | 0) + 102872 | 0, $9);
  } while (($edge$023$i | 0) != 0);
 }
 $14 = HEAP32[$m_world$i >> 2] | 0;
 if (!((HEAP16[$self + 4 >> 1] & 32) == 0)) __ZN9b2Fixture14DestroyProxiesEP12b2BroadPhase($arg0, $14 + 102872 | 0);
 __ZN9b2Fixture7DestroyEP16b2BlockAllocator($arg0, $14);
 HEAP32[$m_body$i >> 2] = 0;
 HEAP32[$m_next$i >> 2] = 0;
 $16 = HEAP8[7540] | 0;
 if (($16 & 255) < 14) {
  $arrayidx10$i = $14 + (($16 & 255) << 2) + 12 | 0;
  HEAP32[$arg0 >> 2] = HEAP32[$arrayidx10$i >> 2];
  HEAP32[$arrayidx10$i >> 2] = $arg0;
  HEAP32[$m_fixtureCount$i >> 2] = (HEAP32[$m_fixtureCount$i >> 2] | 0) + -1;
  __ZN6b2Body13ResetMassDataEv($self);
  STACKTOP = sp;
  return;
 } else ___assert_fail(8264, 8176, 173, 11352);
}
function __ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform($this, $broadPhase, $xf) {
 $this = $this | 0;
 $broadPhase = $broadPhase | 0;
 $xf = $xf | 0;
 var $1 = 0, $10 = 0.0, $11 = 0, $18 = 0.0, $19 = 0.0, $20 = 0, $3 = 0, $4 = 0, $9 = 0.0, $add$ptr = 0, $call = 0, $call$i$i = 0, $i$011 = 0, $m_nodes$i$i = 0, $m_proxies = 0, $m_proxyCount = 0, $m_proxyCount$i = 0, $m_shape = 0, sp = 0;
 sp = STACKTOP;
 $m_proxyCount = $this + 28 | 0;
 if ((HEAP32[$m_proxyCount >> 2] | 0) != 0) ___assert_fail(12552, 12576, 124, 12624);
 $m_shape = $this + 12 | 0;
 $1 = HEAP32[$m_shape >> 2] | 0;
 $call = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 12 >> 2] & 63]($1) | 0;
 HEAP32[$m_proxyCount >> 2] = $call;
 if (($call | 0) <= 0) {
  STACKTOP = sp;
  return;
 }
 $m_proxies = $this + 24 | 0;
 $m_nodes$i$i = $broadPhase + 4 | 0;
 $m_proxyCount$i = $broadPhase + 28 | 0;
 $i$011 = 0;
 do {
  $3 = HEAP32[$m_proxies >> 2] | 0;
  $add$ptr = $3 + ($i$011 * 28 | 0) | 0;
  $4 = HEAP32[$m_shape >> 2] | 0;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 24 >> 2] & 63]($4, $add$ptr, $xf, $i$011);
  $call$i$i = __ZN13b2DynamicTree12AllocateNodeEv($broadPhase) | 0;
  $9 = +(+HEAPF32[$add$ptr >> 2] + -.10000000149011612);
  $10 = +(+HEAPF32[$3 + ($i$011 * 28 | 0) + 4 >> 2] + -.10000000149011612);
  $11 = (HEAP32[$m_nodes$i$i >> 2] | 0) + ($call$i$i * 36 | 0) | 0;
  HEAPF32[$11 >> 2] = $9;
  HEAPF32[$11 + 4 >> 2] = $10;
  $18 = +(+HEAPF32[$3 + ($i$011 * 28 | 0) + 8 >> 2] + .10000000149011612);
  $19 = +(+HEAPF32[$3 + ($i$011 * 28 | 0) + 12 >> 2] + .10000000149011612);
  $20 = (HEAP32[$m_nodes$i$i >> 2] | 0) + ($call$i$i * 36 | 0) + 8 | 0;
  HEAPF32[$20 >> 2] = $18;
  HEAPF32[$20 + 4 >> 2] = $19;
  HEAP32[(HEAP32[$m_nodes$i$i >> 2] | 0) + ($call$i$i * 36 | 0) + 16 >> 2] = $add$ptr;
  HEAP32[(HEAP32[$m_nodes$i$i >> 2] | 0) + ($call$i$i * 36 | 0) + 32 >> 2] = 0;
  __ZN13b2DynamicTree10InsertLeafEi($broadPhase, $call$i$i);
  HEAP32[$m_proxyCount$i >> 2] = (HEAP32[$m_proxyCount$i >> 2] | 0) + 1;
  __ZN12b2BroadPhase10BufferMoveEi($broadPhase, $call$i$i);
  HEAP32[$3 + ($i$011 * 28 | 0) + 24 >> 2] = $call$i$i;
  HEAP32[$3 + ($i$011 * 28 | 0) + 16 >> 2] = $this;
  HEAP32[$3 + ($i$011 * 28 | 0) + 20 >> 2] = $i$011;
  $i$011 = $i$011 + 1 | 0;
 } while (($i$011 | 0) < (HEAP32[$m_proxyCount >> 2] | 0));
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2PolygonShape_SetAsBox_4($self, $arg0, $arg1, $arg2, $arg3) {
 $self = $self | 0;
 $arg0 = +$arg0;
 $arg1 = +$arg1;
 $arg2 = $arg2 | 0;
 $arg3 = +$arg3;
 var $0 = 0, $10 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0, $5 = 0, $6 = 0, $arrayidx20$i = 0, $arrayidx24$i = 0, $call$i$i = 0.0, $call2$i$i = 0.0, $i$043$i = 0, $inc$i = 0, $m_vertexCount$i = 0, $sub$i = 0.0, $sub2$i = 0.0, sp = 0;
 sp = STACKTOP;
 $m_vertexCount$i = $self + 148 | 0;
 HEAP32[$m_vertexCount$i >> 2] = 4;
 $sub$i = -$arg0;
 $sub2$i = -$arg1;
 HEAPF32[$self + 20 >> 2] = $sub$i;
 HEAPF32[$self + 24 >> 2] = $sub2$i;
 HEAPF32[$self + 28 >> 2] = $arg0;
 HEAPF32[$self + 32 >> 2] = $sub2$i;
 HEAPF32[$self + 36 >> 2] = $arg0;
 HEAPF32[$self + 40 >> 2] = $arg1;
 HEAPF32[$self + 44 >> 2] = $sub$i;
 HEAPF32[$self + 48 >> 2] = $arg1;
 HEAPF32[$self + 84 >> 2] = 0.0;
 HEAPF32[$self + 88 >> 2] = -1.0;
 HEAPF32[$self + 92 >> 2] = 1.0;
 HEAPF32[$self + 96 >> 2] = 0.0;
 HEAPF32[$self + 100 >> 2] = 0.0;
 HEAPF32[$self + 104 >> 2] = 1.0;
 HEAPF32[$self + 108 >> 2] = -1.0;
 HEAPF32[$self + 112 >> 2] = 0.0;
 $0 = $arg2;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $self + 12 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 $10 = $arg2;
 $16 = +HEAPF32[$10 >> 2];
 $17 = +HEAPF32[$10 + 4 >> 2];
 $call$i$i = +Math_sin(+$arg3);
 $call2$i$i = +Math_cos(+$arg3);
 $19 = $sub2$i;
 $27 = -1.0;
 $i$043$i = 0;
 while (1) {
  $arrayidx20$i = $self + ($i$043$i << 3) + 20 | 0;
  $18 = +HEAPF32[$arrayidx20$i >> 2];
  $20 = +($16 + ($call2$i$i * $18 - $call$i$i * $19));
  $21 = +($17 + ($call$i$i * $18 + $call2$i$i * $19));
  $22 = $arrayidx20$i;
  HEAPF32[$22 >> 2] = $20;
  HEAPF32[$22 + 4 >> 2] = $21;
  $arrayidx24$i = $self + ($i$043$i << 3) + 84 | 0;
  $26 = +HEAPF32[$arrayidx24$i >> 2];
  $28 = +($call2$i$i * $26 - $call$i$i * $27);
  $29 = +($call$i$i * $26 + $call2$i$i * $27);
  $30 = $arrayidx24$i;
  HEAPF32[$30 >> 2] = $28;
  HEAPF32[$30 + 4 >> 2] = $29;
  $inc$i = $i$043$i + 1 | 0;
  if (($inc$i | 0) >= (HEAP32[$m_vertexCount$i >> 2] | 0)) break;
  $19 = +HEAPF32[$self + ($inc$i << 3) + 24 >> 2];
  $27 = +HEAPF32[$self + ($inc$i << 3) + 88 >> 2];
  $i$043$i = $inc$i;
 }
 STACKTOP = sp;
 return;
}
function __ZNK13b2CircleShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi($this, $output, $input, $transform, $childIndex) {
 $this = $this | 0;
 $output = $output | 0;
 $input = $input | 0;
 $transform = $transform | 0;
 $childIndex = $childIndex | 0;
 var $0 = 0.0, $1 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $2 = 0.0, $3 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $add = 0.0, $add$i25 = 0.0, $add$i49 = 0.0, $add$i56 = 0.0, $add3$i28 = 0.0, $call$i$i$i = 0.0, $div = 0.0, $div$i = 0.0, $retval$0 = 0, $sub$i39 = 0.0, $sub$i59 = 0.0, $sub11 = 0.0, $sub3$i = 0.0, $sub3$i62 = 0.0, $sub8 = 0.0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF32[$transform + 12 >> 2];
 $1 = +HEAPF32[$this + 12 >> 2];
 $2 = +HEAPF32[$transform + 8 >> 2];
 $3 = +HEAPF32[$this + 16 >> 2];
 $6 = +HEAPF32[$input >> 2];
 $sub$i39 = $6 - (+HEAPF32[$transform >> 2] + ($0 * $1 - $2 * $3));
 $7 = +HEAPF32[$input + 4 >> 2];
 $sub3$i = $7 - (+HEAPF32[$transform + 4 >> 2] + ($1 * $2 + $0 * $3));
 $8 = +HEAPF32[$this + 8 >> 2];
 $sub$i59 = +HEAPF32[$input + 8 >> 2] - $6;
 $sub3$i62 = +HEAPF32[$input + 12 >> 2] - $7;
 $add$i56 = $sub$i39 * $sub$i59 + $sub3$i * $sub3$i62;
 $add$i49 = $sub$i59 * $sub$i59 + $sub3$i62 * $sub3$i62;
 $sub8 = $add$i56 * $add$i56 - ($sub$i39 * $sub$i39 + $sub3$i * $sub3$i - $8 * $8) * $add$i49;
 if ($sub8 < 0.0 | $add$i49 < 1.1920928955078125e-7) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $add = $add$i56 + +Math_sqrt(+$sub8);
 $sub11 = -$add;
 if (!($add <= -0.0)) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 if (!($add$i49 * +HEAPF32[$input + 16 >> 2] >= $sub11)) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $div = $sub11 / $add$i49;
 HEAPF32[$output + 8 >> 2] = $div;
 $add$i25 = $sub$i39 + $sub$i59 * $div;
 $add3$i28 = $sub3$i + $sub3$i62 * $div;
 $12 = +$add$i25;
 $13 = +$add3$i28;
 $14 = $output;
 HEAPF32[$14 >> 2] = $12;
 HEAPF32[$14 + 4 >> 2] = $13;
 $call$i$i$i = +Math_sqrt(+($add$i25 * $add$i25 + $add3$i28 * $add3$i28));
 if ($call$i$i$i < 1.1920928955078125e-7) {
  $retval$0 = 1;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $div$i = 1.0 / $call$i$i$i;
 HEAPF32[$output >> 2] = $add$i25 * $div$i;
 HEAPF32[$output + 4 >> 2] = $add3$i28 * $div$i;
 $retval$0 = 1;
 STACKTOP = sp;
 return $retval$0 | 0;
}
function __ZNSt3__17__sort4IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_S8_T_($__x1, $__x2, $__x3, $__x4, $__c) {
 $__x1 = $__x1 | 0;
 $__x2 = $__x2 | 0;
 $__x3 = $__x3 | 0;
 $__x4 = $__x4 | 0;
 $__c = $__c | 0;
 var $__r$0 = 0, $__t$i19 = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__t$i19 = sp;
 $call = __ZNSt3__17__sort3IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_T_($__x1, $__x2, $__x3, $__c) | 0;
 if (!(FUNCTION_TABLE_iii[HEAP32[$__c >> 2] & 63]($__x4, $__x3) | 0)) {
  $__r$0 = $call;
  STACKTOP = sp;
  return $__r$0 | 0;
 }
 HEAP32[$__t$i19 + 0 >> 2] = HEAP32[$__x3 + 0 >> 2];
 HEAP32[$__t$i19 + 4 >> 2] = HEAP32[$__x3 + 4 >> 2];
 HEAP32[$__t$i19 + 8 >> 2] = HEAP32[$__x3 + 8 >> 2];
 HEAP32[$__x3 + 0 >> 2] = HEAP32[$__x4 + 0 >> 2];
 HEAP32[$__x3 + 4 >> 2] = HEAP32[$__x4 + 4 >> 2];
 HEAP32[$__x3 + 8 >> 2] = HEAP32[$__x4 + 8 >> 2];
 HEAP32[$__x4 + 0 >> 2] = HEAP32[$__t$i19 + 0 >> 2];
 HEAP32[$__x4 + 4 >> 2] = HEAP32[$__t$i19 + 4 >> 2];
 HEAP32[$__x4 + 8 >> 2] = HEAP32[$__t$i19 + 8 >> 2];
 if (!(FUNCTION_TABLE_iii[HEAP32[$__c >> 2] & 63]($__x3, $__x2) | 0)) {
  $__r$0 = $call + 1 | 0;
  STACKTOP = sp;
  return $__r$0 | 0;
 }
 HEAP32[$__t$i19 + 0 >> 2] = HEAP32[$__x2 + 0 >> 2];
 HEAP32[$__t$i19 + 4 >> 2] = HEAP32[$__x2 + 4 >> 2];
 HEAP32[$__t$i19 + 8 >> 2] = HEAP32[$__x2 + 8 >> 2];
 HEAP32[$__x2 + 0 >> 2] = HEAP32[$__x3 + 0 >> 2];
 HEAP32[$__x2 + 4 >> 2] = HEAP32[$__x3 + 4 >> 2];
 HEAP32[$__x2 + 8 >> 2] = HEAP32[$__x3 + 8 >> 2];
 HEAP32[$__x3 + 0 >> 2] = HEAP32[$__t$i19 + 0 >> 2];
 HEAP32[$__x3 + 4 >> 2] = HEAP32[$__t$i19 + 4 >> 2];
 HEAP32[$__x3 + 8 >> 2] = HEAP32[$__t$i19 + 8 >> 2];
 if (!(FUNCTION_TABLE_iii[HEAP32[$__c >> 2] & 63]($__x2, $__x1) | 0)) {
  $__r$0 = $call + 2 | 0;
  STACKTOP = sp;
  return $__r$0 | 0;
 }
 HEAP32[$__t$i19 + 0 >> 2] = HEAP32[$__x1 + 0 >> 2];
 HEAP32[$__t$i19 + 4 >> 2] = HEAP32[$__x1 + 4 >> 2];
 HEAP32[$__t$i19 + 8 >> 2] = HEAP32[$__x1 + 8 >> 2];
 HEAP32[$__x1 + 0 >> 2] = HEAP32[$__x2 + 0 >> 2];
 HEAP32[$__x1 + 4 >> 2] = HEAP32[$__x2 + 4 >> 2];
 HEAP32[$__x1 + 8 >> 2] = HEAP32[$__x2 + 8 >> 2];
 HEAP32[$__x2 + 0 >> 2] = HEAP32[$__t$i19 + 0 >> 2];
 HEAP32[$__x2 + 4 >> 2] = HEAP32[$__t$i19 + 4 >> 2];
 HEAP32[$__x2 + 8 >> 2] = HEAP32[$__t$i19 + 8 >> 2];
 $__r$0 = $call + 3 | 0;
 STACKTOP = sp;
 return $__r$0 | 0;
}
function _emscripten_bind_b2Fixture_SetFilterData_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $14 = 0, $5 = 0, $8 = 0, $call$i$i = 0, $edge$010$i = 0, $edge$012$i = 0, $i$09$i = 0, $m_filter$i = 0, $m_flags$i$i = 0, $m_moveBuffer$i = 0, $m_moveCapacity$i = 0, $m_moveCount$i = 0, $m_proxies$i = 0, $m_proxyCount$i = 0, sp = 0;
 sp = STACKTOP;
 $m_filter$i = $self + 32 | 0;
 HEAP16[$m_filter$i + 0 >> 1] = HEAP16[$arg0 + 0 >> 1] | 0;
 HEAP16[$m_filter$i + 2 >> 1] = HEAP16[$arg0 + 2 >> 1] | 0;
 HEAP16[$m_filter$i + 4 >> 1] = HEAP16[$arg0 + 4 >> 1] | 0;
 $0 = HEAP32[$self + 8 >> 2] | 0;
 if (($0 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 $edge$010$i = HEAP32[$0 + 112 >> 2] | 0;
 if (($edge$010$i | 0) != 0) {
  $edge$012$i = $edge$010$i;
  do {
   $1 = HEAP32[$edge$012$i + 4 >> 2] | 0;
   if ((HEAP32[$1 + 48 >> 2] | 0) == ($self | 0) ? 1 : (HEAP32[$1 + 52 >> 2] | 0) == ($self | 0)) {
    $m_flags$i$i = $1 + 4 | 0;
    HEAP32[$m_flags$i$i >> 2] = HEAP32[$m_flags$i$i >> 2] | 8;
   }
   $edge$012$i = HEAP32[$edge$012$i + 12 >> 2] | 0;
  } while (($edge$012$i | 0) != 0);
 }
 $5 = HEAP32[$0 + 88 >> 2] | 0;
 if (($5 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 $m_proxyCount$i = $self + 28 | 0;
 if ((HEAP32[$m_proxyCount$i >> 2] | 0) <= 0) {
  STACKTOP = sp;
  return;
 }
 $m_proxies$i = $self + 24 | 0;
 $m_moveCount$i = $5 + 102912 | 0;
 $m_moveCapacity$i = $5 + 102908 | 0;
 $m_moveBuffer$i = $5 + 102904 | 0;
 $10 = HEAP32[$m_moveCount$i >> 2] | 0;
 $i$09$i = 0;
 do {
  $8 = HEAP32[(HEAP32[$m_proxies$i >> 2] | 0) + ($i$09$i * 28 | 0) + 24 >> 2] | 0;
  if (($10 | 0) == (HEAP32[$m_moveCapacity$i >> 2] | 0)) {
   $11 = HEAP32[$m_moveBuffer$i >> 2] | 0;
   HEAP32[$m_moveCapacity$i >> 2] = $10 << 1;
   $call$i$i = _malloc($10 << 3) | 0;
   HEAP32[$m_moveBuffer$i >> 2] = $call$i$i;
   _memcpy($call$i$i | 0, $11 | 0, HEAP32[$m_moveCount$i >> 2] << 2 | 0) | 0;
   _free($11);
   $14 = HEAP32[$m_moveCount$i >> 2] | 0;
  } else $14 = $10;
  HEAP32[(HEAP32[$m_moveBuffer$i >> 2] | 0) + ($14 << 2) >> 2] = $8;
  $10 = (HEAP32[$m_moveCount$i >> 2] | 0) + 1 | 0;
  HEAP32[$m_moveCount$i >> 2] = $10;
  $i$09$i = $i$09$i + 1 | 0;
 } while (($i$09$i | 0) < (HEAP32[$m_proxyCount$i >> 2] | 0));
 STACKTOP = sp;
 return;
}
function __ZN13b2DynamicTree12AllocateNodeEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $3 = 0, $5 = 0, $7 = 0, $call$i = 0, $i$014 = 0, $m_freeList = 0, $m_nodeCapacity = 0, $m_nodeCount = 0, $m_nodeCount44$pre$phiZ2D = 0, $m_nodes = 0, $next31 = 0, $sub = 0, $sub$lcssa = 0, $sub12 = 0, sp = 0, $i$014$looptemp = 0;
 sp = STACKTOP;
 $m_freeList = $this + 16 | 0;
 $0 = HEAP32[$m_freeList >> 2] | 0;
 if (($0 | 0) == -1) {
  $m_nodeCount = $this + 8 | 0;
  $1 = HEAP32[$m_nodeCount >> 2] | 0;
  $m_nodeCapacity = $this + 12 | 0;
  if (($1 | 0) != (HEAP32[$m_nodeCapacity >> 2] | 0)) ___assert_fail(5664, 5696, 61, 5744);
  $m_nodes = $this + 4 | 0;
  $3 = HEAP32[$m_nodes >> 2] | 0;
  HEAP32[$m_nodeCapacity >> 2] = $1 << 1;
  $call$i = _malloc($1 * 72 | 0) | 0;
  HEAP32[$m_nodes >> 2] = $call$i;
  _memcpy($call$i | 0, $3 | 0, (HEAP32[$m_nodeCount >> 2] | 0) * 36 | 0) | 0;
  _free($3);
  $5 = HEAP32[$m_nodeCount >> 2] | 0;
  $sub12 = (HEAP32[$m_nodeCapacity >> 2] | 0) + -1 | 0;
  $7 = HEAP32[$m_nodes >> 2] | 0;
  if (($5 | 0) < ($sub12 | 0)) {
   $i$014 = $5;
   do {
    $i$014$looptemp = $i$014;
    $i$014 = $i$014 + 1 | 0;
    HEAP32[$7 + ($i$014$looptemp * 36 | 0) + 20 >> 2] = $i$014;
    HEAP32[$7 + ($i$014$looptemp * 36 | 0) + 32 >> 2] = -1;
    $sub = (HEAP32[$m_nodeCapacity >> 2] | 0) + -1 | 0;
   } while (($i$014 | 0) < ($sub | 0));
   $sub$lcssa = $sub;
  } else $sub$lcssa = $sub12;
  HEAP32[$7 + ($sub$lcssa * 36 | 0) + 20 >> 2] = -1;
  HEAP32[$7 + (((HEAP32[$m_nodeCapacity >> 2] | 0) + -1 | 0) * 36 | 0) + 32 >> 2] = -1;
  $10 = HEAP32[$m_nodeCount >> 2] | 0;
  HEAP32[$m_freeList >> 2] = $10;
  $11 = $7;
  $12 = $10;
  $m_nodeCount44$pre$phiZ2D = $m_nodeCount;
 } else {
  $11 = HEAP32[$this + 4 >> 2] | 0;
  $12 = $0;
  $m_nodeCount44$pre$phiZ2D = $this + 8 | 0;
 }
 $next31 = $11 + ($12 * 36 | 0) + 20 | 0;
 HEAP32[$m_freeList >> 2] = HEAP32[$next31 >> 2];
 HEAP32[$next31 >> 2] = -1;
 HEAP32[$11 + ($12 * 36 | 0) + 24 >> 2] = -1;
 HEAP32[$11 + ($12 * 36 | 0) + 28 >> 2] = -1;
 HEAP32[$11 + ($12 * 36 | 0) + 32 >> 2] = 0;
 HEAP32[$11 + ($12 * 36 | 0) + 16 >> 2] = 0;
 HEAP32[$m_nodeCount44$pre$phiZ2D >> 2] = (HEAP32[$m_nodeCount44$pre$phiZ2D >> 2] | 0) + 1;
 STACKTOP = sp;
 return $12 | 0;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $1 = 0, $2 = 0, $3 = 0, $__flags = 0, $add$ptr = 0, $found_any_static_type5 = 0, $found_our_static_ptr2 = 0, $p$0 = 0, $path_dst_ptr_to_static_ptr = 0, $search_done = 0, sp = 0;
 sp = STACKTOP;
 if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($info, $dst_ptr, $current_ptr, $path_below);
  STACKTOP = sp;
  return;
 }
 $found_our_static_ptr2 = $info + 52 | 0;
 $1 = HEAP8[$found_our_static_ptr2 >> 0] | 0;
 $found_any_static_type5 = $info + 53 | 0;
 $2 = HEAP8[$found_any_static_type5 >> 0] | 0;
 $3 = HEAP32[$this + 12 >> 2] | 0;
 $add$ptr = $this + ($3 << 3) + 16 | 0;
 HEAP8[$found_our_static_ptr2 >> 0] = 0;
 HEAP8[$found_any_static_type5 >> 0] = 0;
 __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this + 16 | 0, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp);
 L5 : do if (($3 | 0) > 1) {
  $path_dst_ptr_to_static_ptr = $info + 24 | 0;
  $__flags = $this + 8 | 0;
  $search_done = $info + 54 | 0;
  $p$0 = $this + 24 | 0;
  do {
   if ((HEAP8[$search_done >> 0] | 0) != 0) break L5;
   if ((HEAP8[$found_our_static_ptr2 >> 0] | 0) == 0) {
    if ((HEAP8[$found_any_static_type5 >> 0] | 0) != 0) if ((HEAP32[$__flags >> 2] & 1 | 0) == 0) break L5;
   } else {
    if ((HEAP32[$path_dst_ptr_to_static_ptr >> 2] | 0) == 1) break L5;
    if ((HEAP32[$__flags >> 2] & 2 | 0) == 0) break L5;
   }
   HEAP8[$found_our_static_ptr2 >> 0] = 0;
   HEAP8[$found_any_static_type5 >> 0] = 0;
   __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp);
   $p$0 = $p$0 + 8 | 0;
  } while ($p$0 >>> 0 < $add$ptr >>> 0);
 } while (0);
 HEAP8[$found_our_static_ptr2 >> 0] = $1;
 HEAP8[$found_any_static_type5 >> 0] = $2;
 STACKTOP = sp;
 return;
}
function __ZN15b2FrictionJoint4DumpEv($this) {
 $this = $this | 0;
 var $1 = 0, $3 = 0, $conv10 = 0.0, $conv5 = 0.0, $vararg_buffer23 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer23 = sp;
 $1 = HEAP32[(HEAP32[$this + 48 >> 2] | 0) + 8 >> 2] | 0;
 $3 = HEAP32[(HEAP32[$this + 52 >> 2] | 0) + 8 >> 2] | 0;
 __Z5b2LogPKcz(17928, $vararg_buffer23);
 HEAP32[$vararg_buffer23 >> 2] = $1;
 __Z5b2LogPKcz(20504, $vararg_buffer23);
 HEAP32[$vararg_buffer23 >> 2] = $3;
 __Z5b2LogPKcz(20536, $vararg_buffer23);
 HEAP32[$vararg_buffer23 >> 2] = HEAPU8[$this + 61 >> 0];
 __Z5b2LogPKcz(20568, $vararg_buffer23);
 $conv5 = +HEAPF32[$this + 72 >> 2];
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 68 >> 2];
 HEAP32[$vararg_buffer23 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer23 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 $vararg_ptr12 = $vararg_buffer23 + 8 | 0;
 HEAPF64[tempDoublePtr >> 3] = $conv5;
 HEAP32[$vararg_ptr12 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_ptr12 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(20608, $vararg_buffer23);
 $conv10 = +HEAPF32[$this + 80 >> 2];
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 76 >> 2];
 HEAP32[$vararg_buffer23 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer23 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 $vararg_ptr16 = $vararg_buffer23 + 8 | 0;
 HEAPF64[tempDoublePtr >> 3] = $conv10;
 HEAP32[$vararg_ptr16 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_ptr16 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(20656, $vararg_buffer23);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 96 >> 2];
 HEAP32[$vararg_buffer23 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer23 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(17960, $vararg_buffer23);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 100 >> 2];
 HEAP32[$vararg_buffer23 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer23 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(17992, $vararg_buffer23);
 HEAP32[$vararg_buffer23 >> 2] = HEAP32[$this + 56 >> 2];
 __Z5b2LogPKcz(20904, $vararg_buffer23);
 STACKTOP = sp;
 return;
}
function __ZNK14b2PolygonShape11ComputeAABBEP6b2AABBRK11b2Transformi($this, $aabb, $xf, $childIndex) {
 $this = $this | 0;
 $aabb = $aabb | 0;
 $xf = $xf | 0;
 $childIndex = $childIndex | 0;
 var $$lcssa = 0.0, $$lcssa67 = 0.0, $$lcssa68 = 0.0, $$lcssa69 = 0.0, $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $add$i = 0.0, $add$i46 = 0.0, $add17$i = 0.0, $add17$i51 = 0.0, $cond$i$i = 0.0, $cond$i$i31 = 0.0, $cond$i4$i = 0.0, $cond$i4$i35 = 0.0, $i$071 = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF32[$xf + 12 >> 2];
 $1 = +HEAPF32[$this + 20 >> 2];
 $2 = +HEAPF32[$xf + 8 >> 2];
 $3 = +HEAPF32[$this + 24 >> 2];
 $4 = +HEAPF32[$xf >> 2];
 $add$i = $4 + ($0 * $1 - $2 * $3);
 $5 = +HEAPF32[$xf + 4 >> 2];
 $add17$i = $1 * $2 + $0 * $3 + $5;
 $6 = HEAP32[$this + 148 >> 2] | 0;
 if (($6 | 0) > 1) {
  $10 = $add17$i;
  $11 = $add$i;
  $12 = $add17$i;
  $9 = $add$i;
  $i$071 = 1;
  while (1) {
   $7 = +HEAPF32[$this + ($i$071 << 3) + 20 >> 2];
   $8 = +HEAPF32[$this + ($i$071 << 3) + 24 >> 2];
   $add$i46 = $4 + ($0 * $7 - $2 * $8);
   $add17$i51 = $7 * $2 + $0 * $8 + $5;
   $cond$i$i31 = $9 < $add$i46 ? $9 : $add$i46;
   $cond$i4$i35 = $10 < $add17$i51 ? $10 : $add17$i51;
   $cond$i$i = $11 > $add$i46 ? $11 : $add$i46;
   $cond$i4$i = $12 > $add17$i51 ? $12 : $add17$i51;
   $i$071 = $i$071 + 1 | 0;
   if (($i$071 | 0) >= ($6 | 0)) {
    $$lcssa = $cond$i4$i35;
    $$lcssa67 = $cond$i$i31;
    $$lcssa68 = $cond$i4$i;
    $$lcssa69 = $cond$i$i;
    break;
   } else {
    $10 = $cond$i4$i35;
    $11 = $cond$i$i;
    $12 = $cond$i4$i;
    $9 = $cond$i$i31;
   }
  }
 } else {
  $$lcssa = $add17$i;
  $$lcssa67 = $add$i;
  $$lcssa68 = $add17$i;
  $$lcssa69 = $add$i;
 }
 $13 = +HEAPF32[$this + 8 >> 2];
 $14 = +($$lcssa67 - $13);
 $15 = +($$lcssa - $13);
 $16 = $aabb;
 HEAPF32[$16 >> 2] = $14;
 HEAPF32[$16 + 4 >> 2] = $15;
 $20 = +($$lcssa69 + $13);
 $21 = +($$lcssa68 + $13);
 $22 = $aabb + 8 | 0;
 HEAPF32[$22 >> 2] = $20;
 HEAPF32[$22 + 4 >> 2] = $21;
 STACKTOP = sp;
 return;
}
function __ZNK12b2ChainShape12GetChildEdgeEP11b2EdgeShapei($this, $edge, $index) {
 $this = $this | 0;
 $edge = $edge | 0;
 $index = $index | 0;
 var $14 = 0, $19 = 0, $20 = 0, $25 = 0, $3 = 0, $30 = 0, $31 = 0, $35 = 0, $40 = 0, $41 = 0, $48 = 0, $53 = 0, $54 = 0, $58 = 0, $63 = 0, $64 = 0, $8 = 0, $9 = 0, $m_count = 0, $m_vertex0 = 0, $m_vertex3 = 0, $m_vertices = 0, sp = 0;
 sp = STACKTOP;
 if (!(($index | 0) > -1)) ___assert_fail(6736, 6632, 89, 6776);
 $m_count = $this + 16 | 0;
 if (((HEAP32[$m_count >> 2] | 0) + -1 | 0) <= ($index | 0)) ___assert_fail(6736, 6632, 89, 6776);
 HEAP32[$edge + 4 >> 2] = 1;
 HEAPF32[$edge + 8 >> 2] = +HEAPF32[$this + 8 >> 2];
 $m_vertices = $this + 12 | 0;
 $3 = (HEAP32[$m_vertices >> 2] | 0) + ($index << 3) | 0;
 $8 = HEAP32[$3 + 4 >> 2] | 0;
 $9 = $edge + 12 | 0;
 HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$9 + 4 >> 2] = $8;
 $14 = (HEAP32[$m_vertices >> 2] | 0) + ($index + 1 << 3) | 0;
 $19 = HEAP32[$14 + 4 >> 2] | 0;
 $20 = $edge + 20 | 0;
 HEAP32[$20 >> 2] = HEAP32[$14 >> 2];
 HEAP32[$20 + 4 >> 2] = $19;
 $m_vertex0 = $edge + 28 | 0;
 if (($index | 0) > 0) {
  $25 = (HEAP32[$m_vertices >> 2] | 0) + ($index + -1 << 3) | 0;
  $30 = HEAP32[$25 + 4 >> 2] | 0;
  $31 = $m_vertex0;
  HEAP32[$31 >> 2] = HEAP32[$25 >> 2];
  HEAP32[$31 + 4 >> 2] = $30;
  HEAP8[$edge + 44 >> 0] = 1;
 } else {
  $35 = $this + 20 | 0;
  $40 = HEAP32[$35 + 4 >> 2] | 0;
  $41 = $m_vertex0;
  HEAP32[$41 >> 2] = HEAP32[$35 >> 2];
  HEAP32[$41 + 4 >> 2] = $40;
  HEAP8[$edge + 44 >> 0] = HEAP8[$this + 36 >> 0] | 0;
 }
 $m_vertex3 = $edge + 36 | 0;
 if (((HEAP32[$m_count >> 2] | 0) + -2 | 0) > ($index | 0)) {
  $48 = (HEAP32[$m_vertices >> 2] | 0) + ($index + 2 << 3) | 0;
  $53 = HEAP32[$48 + 4 >> 2] | 0;
  $54 = $m_vertex3;
  HEAP32[$54 >> 2] = HEAP32[$48 >> 2];
  HEAP32[$54 + 4 >> 2] = $53;
  HEAP8[$edge + 45 >> 0] = 1;
  STACKTOP = sp;
  return;
 } else {
  $58 = $this + 28 | 0;
  $63 = HEAP32[$58 + 4 >> 2] | 0;
  $64 = $m_vertex3;
  HEAP32[$64 >> 2] = HEAP32[$58 >> 2];
  HEAP32[$64 + 4 >> 2] = $63;
  HEAP8[$edge + 45 >> 0] = HEAP8[$this + 37 >> 0] | 0;
  STACKTOP = sp;
  return;
 }
}
function _emscripten_bind_b2Body_SetTransform_2($self, $arg0, $arg1) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 $arg1 = +$arg1;
 var $0 = 0, $12 = 0.0, $13 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $2 = 0, $21 = 0, $25 = 0, $4 = 0, $7 = 0, $8 = 0, $add$i$i = 0.0, $add17$i$i = 0.0, $call$i$i = 0.0, $call2$i$i = 0.0, $f$010$i = 0, $f$012$i = 0, $m_broadPhase$i = 0, $m_contactManager18$i = 0, $m_world$i = 0, $m_xf$i = 0, sp = 0;
 sp = STACKTOP;
 $m_world$i = $self + 88 | 0;
 $0 = HEAP32[$m_world$i >> 2] | 0;
 if ((HEAP32[$0 + 102868 >> 2] & 2 | 0) != 0) ___assert_fail(11672, 11408, 404, 11880);
 $m_xf$i = $self + 12 | 0;
 $call$i$i = +Math_sin(+$arg1);
 HEAPF32[$self + 20 >> 2] = $call$i$i;
 $call2$i$i = +Math_cos(+$arg1);
 HEAPF32[$self + 24 >> 2] = $call2$i$i;
 $2 = $arg0;
 $4 = HEAP32[$2 >> 2] | 0;
 $7 = HEAP32[$2 + 4 >> 2] | 0;
 $8 = $m_xf$i;
 HEAP32[$8 >> 2] = $4;
 HEAP32[$8 + 4 >> 2] = $7;
 $12 = +HEAPF32[$self + 28 >> 2];
 $13 = +HEAPF32[$self + 32 >> 2];
 $add$i$i = (HEAP32[tempDoublePtr >> 2] = $4, +HEAPF32[tempDoublePtr >> 2]) + ($call2$i$i * $12 - $call$i$i * $13);
 $add17$i$i = $12 * $call$i$i + $call2$i$i * $13 + (HEAP32[tempDoublePtr >> 2] = $7, +HEAPF32[tempDoublePtr >> 2]);
 $15 = +$add$i$i;
 $16 = +$add17$i$i;
 $17 = $self + 44 | 0;
 HEAPF32[$17 >> 2] = $15;
 HEAPF32[$17 + 4 >> 2] = $16;
 HEAPF32[$self + 56 >> 2] = $arg1;
 $21 = $self + 36 | 0;
 HEAPF32[$21 >> 2] = $15;
 HEAPF32[$21 + 4 >> 2] = $16;
 HEAPF32[$self + 52 >> 2] = $arg1;
 $m_broadPhase$i = $0 + 102872 | 0;
 $f$010$i = HEAP32[$self + 100 >> 2] | 0;
 if (($f$010$i | 0) == 0) {
  $25 = $0;
  $m_contactManager18$i = $25 + 102872 | 0;
  __ZN16b2ContactManager15FindNewContactsEv($m_contactManager18$i);
  STACKTOP = sp;
  return;
 } else $f$012$i = $f$010$i;
 do {
  __ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4_($f$012$i, $m_broadPhase$i, $m_xf$i, $m_xf$i);
  $f$012$i = HEAP32[$f$012$i + 4 >> 2] | 0;
 } while (($f$012$i | 0) != 0);
 $25 = HEAP32[$m_world$i >> 2] | 0;
 $m_contactManager18$i = $25 + 102872 | 0;
 __ZN16b2ContactManager15FindNewContactsEv($m_contactManager18$i);
 STACKTOP = sp;
 return;
}
function __ZN9b2Fixture14DestroyProxiesEP12b2BroadPhase($this, $broadPhase) {
 $this = $this | 0;
 $broadPhase = $broadPhase | 0;
 var $2 = 0, $3 = 0, $4 = 0, $arrayidx$i$i = 0, $i$04$i$i = 0, $i$05 = 0, $m_moveBuffer$i$i = 0, $m_moveCount$i$i = 0, $m_nodeCapacity$i$i = 0, $m_nodes$i$i = 0, $m_proxies = 0, $m_proxyCount = 0, $m_proxyCount$i = 0, $proxyId = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $m_proxyCount = $this + 28 | 0;
 if ((HEAP32[$m_proxyCount >> 2] | 0) <= 0) {
  HEAP32[$m_proxyCount >> 2] = 0;
  STACKTOP = sp;
  return;
 }
 $m_proxies = $this + 24 | 0;
 $m_moveCount$i$i = $broadPhase + 40 | 0;
 $m_moveBuffer$i$i = $broadPhase + 32 | 0;
 $m_proxyCount$i = $broadPhase + 28 | 0;
 $m_nodeCapacity$i$i = $broadPhase + 12 | 0;
 $m_nodes$i$i = $broadPhase + 4 | 0;
 $i$05 = 0;
 while (1) {
  $proxyId = (HEAP32[$m_proxies >> 2] | 0) + ($i$05 * 28 | 0) + 24 | 0;
  $2 = HEAP32[$proxyId >> 2] | 0;
  $3 = HEAP32[$m_moveCount$i$i >> 2] | 0;
  L6 : do if (($3 | 0) > 0) {
   $4 = HEAP32[$m_moveBuffer$i$i >> 2] | 0;
   $i$04$i$i = 0;
   while (1) {
    $arrayidx$i$i = $4 + ($i$04$i$i << 2) | 0;
    $i$04$i$i = $i$04$i$i + 1 | 0;
    if ((HEAP32[$arrayidx$i$i >> 2] | 0) == ($2 | 0)) break;
    if (($i$04$i$i | 0) >= ($3 | 0)) break L6;
   }
   HEAP32[$arrayidx$i$i >> 2] = -1;
  } while (0);
  HEAP32[$m_proxyCount$i >> 2] = (HEAP32[$m_proxyCount$i >> 2] | 0) + -1;
  if (!(($2 | 0) > -1)) {
   label = 10;
   break;
  }
  if ((HEAP32[$m_nodeCapacity$i$i >> 2] | 0) <= ($2 | 0)) {
   label = 10;
   break;
  }
  if (!((HEAP32[(HEAP32[$m_nodes$i$i >> 2] | 0) + ($2 * 36 | 0) + 24 >> 2] | 0) == -1)) {
   label = 12;
   break;
  }
  __ZN13b2DynamicTree10RemoveLeafEi($broadPhase, $2);
  __ZN13b2DynamicTree8FreeNodeEi($broadPhase, $2);
  HEAP32[$proxyId >> 2] = -1;
  $i$05 = $i$05 + 1 | 0;
  if (($i$05 | 0) >= (HEAP32[$m_proxyCount >> 2] | 0)) {
   label = 14;
   break;
  }
 }
 if ((label | 0) == 10) ___assert_fail(14568, 5696, 126, 5832); else if ((label | 0) == 12) ___assert_fail(5848, 5696, 127, 5832); else if ((label | 0) == 14) {
  HEAP32[$m_proxyCount >> 2] = 0;
  STACKTOP = sp;
  return;
 }
}
function __ZL16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4_($poly1, $xf1, $edge1, $poly2, $xf2) {
 $poly1 = $poly1 | 0;
 $xf1 = $xf1 | 0;
 $edge1 = $edge1 | 0;
 $poly2 = $poly2 | 0;
 $xf2 = $xf2 | 0;
 var $0 = 0, $11 = 0.0, $12 = 0.0, $15 = 0.0, $16 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $add$i = 0.0, $add$i57 = 0.0, $add$i64 = 0.0, $add8$i = 0.0, $cmp9 = 0, $i$071 = 0, $index$0$lcssa = 0, $index$073 = 0, $index$1 = 0, $minDot$072 = 0.0, $sub$i = 0.0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$poly2 + 148 >> 2] | 0;
 if (!(($edge1 | 0) > -1)) ___assert_fail(5264, 5312, 32, 5392);
 if ((HEAP32[$poly1 + 148 >> 2] | 0) <= ($edge1 | 0)) ___assert_fail(5264, 5312, 32, 5392);
 $2 = +HEAPF32[$xf1 + 12 >> 2];
 $3 = +HEAPF32[$poly1 + ($edge1 << 3) + 84 >> 2];
 $4 = +HEAPF32[$xf1 + 8 >> 2];
 $5 = +HEAPF32[$poly1 + ($edge1 << 3) + 88 >> 2];
 $sub$i = $2 * $3 - $4 * $5;
 $add$i = $3 * $4 + $2 * $5;
 $6 = +HEAPF32[$xf2 + 12 >> 2];
 $7 = +HEAPF32[$xf2 + 8 >> 2];
 $add$i64 = $6 * $sub$i + $7 * $add$i;
 $add8$i = $6 * $add$i - $sub$i * $7;
 if (($0 | 0) > 0) {
  $i$071 = 0;
  $index$073 = 0;
  $minDot$072 = 3.4028234663852886e+38;
  while (1) {
   $add$i57 = $add$i64 * +HEAPF32[$poly2 + ($i$071 << 3) + 20 >> 2] + $add8$i * +HEAPF32[$poly2 + ($i$071 << 3) + 24 >> 2];
   $cmp9 = $add$i57 < $minDot$072;
   $index$1 = $cmp9 ? $i$071 : $index$073;
   $i$071 = $i$071 + 1 | 0;
   if (($i$071 | 0) == ($0 | 0)) {
    $index$0$lcssa = $index$1;
    break;
   } else {
    $index$073 = $index$1;
    $minDot$072 = $cmp9 ? $add$i57 : $minDot$072;
   }
  }
 } else $index$0$lcssa = 0;
 $11 = +HEAPF32[$poly1 + ($edge1 << 3) + 20 >> 2];
 $12 = +HEAPF32[$poly1 + ($edge1 << 3) + 24 >> 2];
 $15 = +HEAPF32[$poly2 + ($index$0$lcssa << 3) + 20 >> 2];
 $16 = +HEAPF32[$poly2 + ($index$0$lcssa << 3) + 24 >> 2];
 STACKTOP = sp;
 return +($sub$i * (+HEAPF32[$xf2 >> 2] + ($6 * $15 - $7 * $16) - (+HEAPF32[$xf1 >> 2] + ($2 * $11 - $4 * $12))) + $add$i * ($15 * $7 + $6 * $16 + +HEAPF32[$xf2 + 4 >> 2] - ($11 * $4 + $2 * $12 + +HEAPF32[$xf1 + 4 >> 2])));
}
function __Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi($vOut, $vIn, $normal$0$0$val, $normal$0$1$val, $offset, $vertexIndexA) {
 $vOut = $vOut | 0;
 $vIn = $vIn | 0;
 $normal$0$0$val = +$normal$0$0$val;
 $normal$0$1$val = +$normal$0$1$val;
 $offset = +$offset;
 $vertexIndexA = $vertexIndexA | 0;
 var $10 = 0, $5 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $arrayidx1 = 0, $arrayidx10 = 0, $div = 0.0, $id = 0, $inc9 = 0, $numOut$0 = 0, $numOut$1 = 0, $numOut$2 = 0, $sub = 0.0, $sub4 = 0.0, $y2$i = 0, $y2$i49 = 0, sp = 0;
 sp = STACKTOP;
 $y2$i = $vIn + 4 | 0;
 $sub = +HEAPF32[$vIn >> 2] * $normal$0$0$val + +HEAPF32[$y2$i >> 2] * $normal$0$1$val - $offset;
 $arrayidx1 = $vIn + 12 | 0;
 $y2$i49 = $vIn + 16 | 0;
 $sub4 = +HEAPF32[$arrayidx1 >> 2] * $normal$0$0$val + +HEAPF32[$y2$i49 >> 2] * $normal$0$1$val - $offset;
 if (!($sub <= 0.0)) $numOut$0 = 0; else {
  HEAP32[$vOut + 0 >> 2] = HEAP32[$vIn + 0 >> 2];
  HEAP32[$vOut + 4 >> 2] = HEAP32[$vIn + 4 >> 2];
  HEAP32[$vOut + 8 >> 2] = HEAP32[$vIn + 8 >> 2];
  $numOut$0 = 1;
 }
 if (!($sub4 <= 0.0)) $numOut$1 = $numOut$0; else {
  $inc9 = $numOut$0 + 1 | 0;
  $arrayidx10 = $vOut + ($numOut$0 * 12 | 0) | 0;
  HEAP32[$arrayidx10 + 0 >> 2] = HEAP32[$arrayidx1 + 0 >> 2];
  HEAP32[$arrayidx10 + 4 >> 2] = HEAP32[$arrayidx1 + 4 >> 2];
  HEAP32[$arrayidx10 + 8 >> 2] = HEAP32[$arrayidx1 + 8 >> 2];
  $numOut$1 = $inc9;
 }
 if (!($sub * $sub4 < 0.0)) {
  $numOut$2 = $numOut$1;
  STACKTOP = sp;
  return $numOut$2 | 0;
 }
 $div = $sub / ($sub - $sub4);
 $5 = +HEAPF32[$vIn >> 2];
 $7 = +HEAPF32[$y2$i >> 2];
 $8 = +($5 + $div * (+HEAPF32[$arrayidx1 >> 2] - $5));
 $9 = +($7 + $div * (+HEAPF32[$y2$i49 >> 2] - $7));
 $10 = $vOut + ($numOut$1 * 12 | 0) | 0;
 HEAPF32[$10 >> 2] = $8;
 HEAPF32[$10 + 4 >> 2] = $9;
 $id = $vOut + ($numOut$1 * 12 | 0) + 8 | 0;
 HEAP8[$id >> 0] = $vertexIndexA;
 HEAP8[$id + 1 >> 0] = HEAP8[$vIn + 9 >> 0] | 0;
 HEAP8[$id + 2 >> 0] = 0;
 HEAP8[$id + 3 >> 0] = 1;
 $numOut$2 = $numOut$1 + 1 | 0;
 STACKTOP = sp;
 return $numOut$2 | 0;
}
function _emscripten_bind_b2Fixture_Refilter_0($self) {
 $self = $self | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $14 = 0, $5 = 0, $8 = 0, $call$i$i = 0, $edge$010$i = 0, $edge$012$i = 0, $i$09$i = 0, $m_flags$i$i = 0, $m_moveBuffer$i = 0, $m_moveCapacity$i = 0, $m_moveCount$i = 0, $m_proxies$i = 0, $m_proxyCount$i = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self + 8 >> 2] | 0;
 if (($0 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 $edge$010$i = HEAP32[$0 + 112 >> 2] | 0;
 if (($edge$010$i | 0) != 0) {
  $edge$012$i = $edge$010$i;
  do {
   $1 = HEAP32[$edge$012$i + 4 >> 2] | 0;
   if ((HEAP32[$1 + 48 >> 2] | 0) == ($self | 0) ? 1 : (HEAP32[$1 + 52 >> 2] | 0) == ($self | 0)) {
    $m_flags$i$i = $1 + 4 | 0;
    HEAP32[$m_flags$i$i >> 2] = HEAP32[$m_flags$i$i >> 2] | 8;
   }
   $edge$012$i = HEAP32[$edge$012$i + 12 >> 2] | 0;
  } while (($edge$012$i | 0) != 0);
 }
 $5 = HEAP32[$0 + 88 >> 2] | 0;
 if (($5 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 $m_proxyCount$i = $self + 28 | 0;
 if ((HEAP32[$m_proxyCount$i >> 2] | 0) <= 0) {
  STACKTOP = sp;
  return;
 }
 $m_proxies$i = $self + 24 | 0;
 $m_moveCount$i = $5 + 102912 | 0;
 $m_moveCapacity$i = $5 + 102908 | 0;
 $m_moveBuffer$i = $5 + 102904 | 0;
 $10 = HEAP32[$m_moveCount$i >> 2] | 0;
 $i$09$i = 0;
 do {
  $8 = HEAP32[(HEAP32[$m_proxies$i >> 2] | 0) + ($i$09$i * 28 | 0) + 24 >> 2] | 0;
  if (($10 | 0) == (HEAP32[$m_moveCapacity$i >> 2] | 0)) {
   $11 = HEAP32[$m_moveBuffer$i >> 2] | 0;
   HEAP32[$m_moveCapacity$i >> 2] = $10 << 1;
   $call$i$i = _malloc($10 << 3) | 0;
   HEAP32[$m_moveBuffer$i >> 2] = $call$i$i;
   _memcpy($call$i$i | 0, $11 | 0, HEAP32[$m_moveCount$i >> 2] << 2 | 0) | 0;
   _free($11);
   $14 = HEAP32[$m_moveCount$i >> 2] | 0;
  } else $14 = $10;
  HEAP32[(HEAP32[$m_moveBuffer$i >> 2] | 0) + ($14 << 2) >> 2] = $8;
  $10 = (HEAP32[$m_moveCount$i >> 2] | 0) + 1 | 0;
  HEAP32[$m_moveCount$i >> 2] = $10;
  $i$09$i = $i$09$i + 1 | 0;
 } while (($i$09$i | 0) < (HEAP32[$m_proxyCount$i >> 2] | 0));
 STACKTOP = sp;
 return;
}
function __ZN15b2DistanceProxy3SetEPK7b2Shapei($this, $shape, $index) {
 $this = $this | 0;
 $shape = $shape | 0;
 $index = $index | 0;
 var $0 = 0, $13 = 0, $14 = 0, $19 = 0, $20 = 0, $25 = 0, $26 = 0, $30 = 0, $35 = 0, $36 = 0, $5 = 0, $8 = 0, $add = 0, $arrayidx17 = 0, $m_vertices12 = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$shape + 4 >> 2] | 0;
 if (($0 | 0) == 0) {
  HEAP32[$this + 16 >> 2] = $shape + 12;
  HEAP32[$this + 20 >> 2] = 1;
  HEAPF32[$this + 24 >> 2] = +HEAPF32[$shape + 8 >> 2];
  STACKTOP = sp;
  return;
 } else if (($0 | 0) == 2) {
  HEAP32[$this + 16 >> 2] = $shape + 20;
  HEAP32[$this + 20 >> 2] = HEAP32[$shape + 148 >> 2];
  HEAPF32[$this + 24 >> 2] = +HEAPF32[$shape + 8 >> 2];
  STACKTOP = sp;
  return;
 } else if (($0 | 0) == 1) {
  HEAP32[$this + 16 >> 2] = $shape + 12;
  HEAP32[$this + 20 >> 2] = 2;
  HEAPF32[$this + 24 >> 2] = +HEAPF32[$shape + 8 >> 2];
  STACKTOP = sp;
  return;
 } else if (($0 | 0) == 3) {
  if (!(($index | 0) > -1)) ___assert_fail(5440, 5480, 53, 7120);
  $5 = $shape + 16 | 0;
  if ((HEAP32[$5 >> 2] | 0) <= ($index | 0)) ___assert_fail(5440, 5480, 53, 7120);
  $m_vertices12 = $shape + 12 | 0;
  $8 = (HEAP32[$m_vertices12 >> 2] | 0) + ($index << 3) | 0;
  $13 = HEAP32[$8 + 4 >> 2] | 0;
  $14 = $this;
  HEAP32[$14 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$14 + 4 >> 2] = $13;
  $add = $index + 1 | 0;
  $arrayidx17 = $this + 8 | 0;
  $19 = HEAP32[$m_vertices12 >> 2] | 0;
  if (($add | 0) < (HEAP32[$5 >> 2] | 0)) {
   $20 = $19 + ($add << 3) | 0;
   $25 = HEAP32[$20 + 4 >> 2] | 0;
   $26 = $arrayidx17;
   HEAP32[$26 >> 2] = HEAP32[$20 >> 2];
   HEAP32[$26 + 4 >> 2] = $25;
  } else {
   $30 = $19;
   $35 = HEAP32[$30 + 4 >> 2] | 0;
   $36 = $arrayidx17;
   HEAP32[$36 >> 2] = HEAP32[$30 >> 2];
   HEAP32[$36 + 4 >> 2] = $35;
  }
  HEAP32[$this + 16 >> 2] = $this;
  HEAP32[$this + 20 >> 2] = 2;
  HEAPF32[$this + 24 >> 2] = +HEAPF32[$shape + 8 >> 2];
  STACKTOP = sp;
  return;
 } else ___assert_fail(18472, 5480, 81, 7120);
}
function __ZN11b2RopeJoint4DumpEv($this) {
 $this = $this | 0;
 var $1 = 0, $3 = 0, $conv10 = 0.0, $conv5 = 0.0, $vararg_buffer20 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer20 = sp;
 $1 = HEAP32[(HEAP32[$this + 48 >> 2] | 0) + 8 >> 2] | 0;
 $3 = HEAP32[(HEAP32[$this + 52 >> 2] | 0) + 8 >> 2] | 0;
 __Z5b2LogPKcz(20208, $vararg_buffer20);
 HEAP32[$vararg_buffer20 >> 2] = $1;
 __Z5b2LogPKcz(20504, $vararg_buffer20);
 HEAP32[$vararg_buffer20 >> 2] = $3;
 __Z5b2LogPKcz(20536, $vararg_buffer20);
 HEAP32[$vararg_buffer20 >> 2] = HEAPU8[$this + 61 >> 0];
 __Z5b2LogPKcz(20568, $vararg_buffer20);
 $conv5 = +HEAPF32[$this + 72 >> 2];
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 68 >> 2];
 HEAP32[$vararg_buffer20 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer20 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 $vararg_ptr12 = $vararg_buffer20 + 8 | 0;
 HEAPF64[tempDoublePtr >> 3] = $conv5;
 HEAP32[$vararg_ptr12 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_ptr12 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(20608, $vararg_buffer20);
 $conv10 = +HEAPF32[$this + 80 >> 2];
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 76 >> 2];
 HEAP32[$vararg_buffer20 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer20 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 $vararg_ptr16 = $vararg_buffer20 + 8 | 0;
 HEAPF64[tempDoublePtr >> 3] = $conv10;
 HEAP32[$vararg_ptr16 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_ptr16 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(20656, $vararg_buffer20);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 84 >> 2];
 HEAP32[$vararg_buffer20 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer20 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(20232, $vararg_buffer20);
 HEAP32[$vararg_buffer20 >> 2] = HEAP32[$this + 56 >> 2];
 __Z5b2LogPKcz(20904, $vararg_buffer20);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2Body_SetActive_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0, $2 = 0, $3 = 0, $ce$015$i = 0, $conv8$i = 0, $f$011$i = 0, $f$013$i = 0, $f19$016$i = 0, $f19$018$i = 0, $m_broadPhase$i = 0, $m_broadPhase18$i = 0, $m_contactList$i = 0, $m_flags$i8$i = 0, $m_world$i = 0, $m_xf$i = 0, sp = 0, $ce$015$i$looptemp = 0;
 sp = STACKTOP;
 $m_world$i = $self + 88 | 0;
 $0 = HEAP32[$m_world$i >> 2] | 0;
 if ((HEAP32[$0 + 102868 >> 2] & 2 | 0) != 0) ___assert_fail(11672, 11408, 443, 11896);
 $m_flags$i8$i = $self + 4 | 0;
 $2 = HEAP16[$m_flags$i8$i >> 1] | 0;
 if (!(($2 & 32) != 0 ^ $arg0)) {
  STACKTOP = sp;
  return;
 }
 $conv8$i = $2 & 65535;
 if ($arg0) {
  HEAP16[$m_flags$i8$i >> 1] = $conv8$i | 32;
  $m_broadPhase$i = $0 + 102872 | 0;
  $f$011$i = HEAP32[$self + 100 >> 2] | 0;
  if (($f$011$i | 0) == 0) {
   STACKTOP = sp;
   return;
  }
  $m_xf$i = $self + 12 | 0;
  $f$013$i = $f$011$i;
  do {
   __ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform($f$013$i, $m_broadPhase$i, $m_xf$i);
   $f$013$i = HEAP32[$f$013$i + 4 >> 2] | 0;
  } while (($f$013$i | 0) != 0);
  STACKTOP = sp;
  return;
 }
 HEAP16[$m_flags$i8$i >> 1] = $conv8$i & 65503;
 $m_broadPhase18$i = $0 + 102872 | 0;
 $f19$016$i = HEAP32[$self + 100 >> 2] | 0;
 if (($f19$016$i | 0) != 0) {
  $f19$018$i = $f19$016$i;
  do {
   __ZN9b2Fixture14DestroyProxiesEP12b2BroadPhase($f19$018$i, $m_broadPhase18$i);
   $f19$018$i = HEAP32[$f19$018$i + 4 >> 2] | 0;
  } while (($f19$018$i | 0) != 0);
 }
 $m_contactList$i = $self + 112 | 0;
 $3 = HEAP32[$m_contactList$i >> 2] | 0;
 if (($3 | 0) != 0) {
  $ce$015$i = $3;
  do {
   $ce$015$i$looptemp = $ce$015$i;
   $ce$015$i = HEAP32[$ce$015$i + 12 >> 2] | 0;
   __ZN16b2ContactManager7DestroyEP9b2Contact((HEAP32[$m_world$i >> 2] | 0) + 102872 | 0, HEAP32[$ce$015$i$looptemp + 4 >> 2] | 0);
  } while (($ce$015$i | 0) != 0);
 }
 HEAP32[$m_contactList$i >> 2] = 0;
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2PrismaticJoint_GetJointSpeed_0($self) {
 $self = $self | 0;
 var $0 = 0, $1 = 0, $12 = 0.0, $13 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $26 = 0.0, $27 = 0.0, $28 = 0, $34 = 0.0, $36 = 0.0, $37 = 0.0, $6 = 0.0, $7 = 0.0, $add$i = 0.0, $add$i104$i = 0.0, $add$i124$i = 0.0, $add$i68$i = 0.0, $sub$i$i = 0.0, $sub$i101$i = 0.0, $sub$i109$i = 0.0, $sub$i121$i = 0.0, $sub$i67$i = 0.0, $sub3$i$i = 0.0, $sub3$i112$i = 0.0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self + 48 >> 2] | 0;
 $1 = HEAP32[$self + 52 >> 2] | 0;
 $sub$i$i = +HEAPF32[$self + 68 >> 2] - +HEAPF32[$0 + 28 >> 2];
 $sub3$i$i = +HEAPF32[$self + 72 >> 2] - +HEAPF32[$0 + 32 >> 2];
 $6 = +HEAPF32[$0 + 24 >> 2];
 $7 = +HEAPF32[$0 + 20 >> 2];
 $sub$i121$i = $sub$i$i * $6 - $sub3$i$i * $7;
 $add$i124$i = $6 * $sub3$i$i + $sub$i$i * $7;
 $sub$i109$i = +HEAPF32[$self + 76 >> 2] - +HEAPF32[$1 + 28 >> 2];
 $sub3$i112$i = +HEAPF32[$self + 80 >> 2] - +HEAPF32[$1 + 32 >> 2];
 $12 = +HEAPF32[$1 + 24 >> 2];
 $13 = +HEAPF32[$1 + 20 >> 2];
 $sub$i101$i = $sub$i109$i * $12 - $sub3$i112$i * $13;
 $add$i104$i = $12 * $sub3$i112$i + $sub$i109$i * $13;
 $18 = +HEAPF32[$self + 84 >> 2];
 $19 = +HEAPF32[$self + 88 >> 2];
 $sub$i67$i = $6 * $18 - $7 * $19;
 $add$i68$i = $7 * $18 + $6 * $19;
 $20 = $0 + 64 | 0;
 $26 = +HEAPF32[$20 >> 2];
 $27 = +HEAPF32[$20 + 4 >> 2];
 $28 = $1 + 64 | 0;
 $34 = +HEAPF32[$28 >> 2];
 $36 = +HEAPF32[$0 + 72 >> 2];
 $37 = +HEAPF32[$1 + 72 >> 2];
 $add$i = ($add$i104$i + +HEAPF32[$1 + 48 >> 2] - ($add$i124$i + +HEAPF32[$0 + 48 >> 2])) * $sub$i67$i * $36 - ($sub$i101$i + +HEAPF32[$1 + 44 >> 2] - ($sub$i121$i + +HEAPF32[$0 + 44 >> 2])) * $add$i68$i * $36 + ($sub$i67$i * ($add$i124$i * $36 + ($34 - $add$i104$i * $37 - $26)) + $add$i68$i * (+HEAPF32[$28 + 4 >> 2] + $sub$i101$i * $37 - $27 - $sub$i121$i * $36));
 STACKTOP = sp;
 return +$add$i;
}
function __ZN13b2DynamicTree10RemoveLeafEi($this, $leaf) {
 $this = $this | 0;
 $leaf = $leaf | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $child121 = 0, $index$024 = 0, $m_nodes = 0, $sibling$0 = 0, sp = 0;
 sp = STACKTOP;
 if ((HEAP32[$this >> 2] | 0) == ($leaf | 0)) {
  HEAP32[$this >> 2] = -1;
  STACKTOP = sp;
  return;
 }
 $m_nodes = $this + 4 | 0;
 $1 = HEAP32[$m_nodes >> 2] | 0;
 $2 = HEAP32[$1 + ($leaf * 36 | 0) + 20 >> 2] | 0;
 $3 = HEAP32[$1 + ($2 * 36 | 0) + 20 >> 2] | 0;
 $4 = HEAP32[$1 + ($2 * 36 | 0) + 24 >> 2] | 0;
 if (($4 | 0) == ($leaf | 0)) $sibling$0 = HEAP32[$1 + ($2 * 36 | 0) + 28 >> 2] | 0; else $sibling$0 = $4;
 if (($3 | 0) == -1) {
  HEAP32[$this >> 2] = $sibling$0;
  HEAP32[$1 + ($sibling$0 * 36 | 0) + 20 >> 2] = -1;
  __ZN13b2DynamicTree8FreeNodeEi($this, $2);
  STACKTOP = sp;
  return;
 }
 $child121 = $1 + ($3 * 36 | 0) + 24 | 0;
 if ((HEAP32[$child121 >> 2] | 0) == ($2 | 0)) HEAP32[$child121 >> 2] = $sibling$0; else HEAP32[$1 + ($3 * 36 | 0) + 28 >> 2] = $sibling$0;
 HEAP32[$1 + ($sibling$0 * 36 | 0) + 20 >> 2] = $3;
 __ZN13b2DynamicTree8FreeNodeEi($this, $2);
 $index$024 = $3;
 do {
  $call = __ZN13b2DynamicTree7BalanceEi($this, $index$024) | 0;
  $7 = HEAP32[$m_nodes >> 2] | 0;
  $8 = HEAP32[$7 + ($call * 36 | 0) + 24 >> 2] | 0;
  $9 = HEAP32[$7 + ($call * 36 | 0) + 28 >> 2] | 0;
  __ZN6b2AABB7CombineERKS_S1_($7 + ($call * 36 | 0) | 0, $7 + ($8 * 36 | 0) | 0, $7 + ($9 * 36 | 0) | 0);
  $10 = HEAP32[$m_nodes >> 2] | 0;
  $11 = HEAP32[$10 + ($8 * 36 | 0) + 32 >> 2] | 0;
  $12 = HEAP32[$10 + ($9 * 36 | 0) + 32 >> 2] | 0;
  HEAP32[$10 + ($call * 36 | 0) + 32 >> 2] = (($11 | 0) > ($12 | 0) ? $11 : $12) + 1;
  $index$024 = HEAP32[$10 + ($call * 36 | 0) + 20 >> 2] | 0;
 } while (!(($index$024 | 0) == -1));
 STACKTOP = sp;
 return;
}
function __ZNK12b2ChainShape5CloneEP16b2BlockAllocator($this, $allocator) {
 $this = $this | 0;
 $allocator = $allocator | 0;
 var $13 = 0, $14 = 0, $18 = 0, $2 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $8 = 0, $call = 0, $call$i$i = 0, $m_count$i = 0, $m_hasNextVertex$i = 0, $m_hasPrevVertex$i = 0, $m_vertices$i = 0, sp = 0;
 sp = STACKTOP;
 $call = __ZN16b2BlockAllocator8AllocateEi($allocator, 40) | 0;
 if (($call | 0) == 0) $4 = 0; else {
  HEAP32[$call >> 2] = 6560;
  HEAP32[$call + 4 >> 2] = 3;
  HEAPF32[$call + 8 >> 2] = .009999999776482582;
  HEAP32[$call + 12 >> 2] = 0;
  HEAP32[$call + 16 >> 2] = 0;
  HEAP8[$call + 36 >> 0] = 0;
  HEAP8[$call + 37 >> 0] = 0;
  $4 = $call;
 }
 $2 = HEAP32[$this + 12 >> 2] | 0;
 $3 = HEAP32[$this + 16 >> 2] | 0;
 $m_vertices$i = $4 + 12 | 0;
 if ((HEAP32[$m_vertices$i >> 2] | 0) != 0) ___assert_fail(6592, 6632, 48, 6704);
 $m_count$i = $4 + 16 | 0;
 if ((HEAP32[$m_count$i >> 2] | 0) != 0) ___assert_fail(6592, 6632, 48, 6704);
 if (($3 | 0) > 1) {
  HEAP32[$m_count$i >> 2] = $3;
  $call$i$i = _malloc($3 << 3) | 0;
  HEAP32[$m_vertices$i >> 2] = $call$i$i;
  _memcpy($call$i$i | 0, $2 | 0, HEAP32[$m_count$i >> 2] << 3 | 0) | 0;
  $m_hasPrevVertex$i = $4 + 36 | 0;
  HEAP8[$m_hasPrevVertex$i >> 0] = 0;
  $m_hasNextVertex$i = $4 + 37 | 0;
  HEAP8[$m_hasNextVertex$i >> 0] = 0;
  $8 = $this + 20 | 0;
  $13 = HEAP32[$8 + 4 >> 2] | 0;
  $14 = $4 + 20 | 0;
  HEAP32[$14 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$14 + 4 >> 2] = $13;
  $18 = $this + 28 | 0;
  $23 = HEAP32[$18 + 4 >> 2] | 0;
  $24 = $4 + 28 | 0;
  HEAP32[$24 >> 2] = HEAP32[$18 >> 2];
  HEAP32[$24 + 4 >> 2] = $23;
  HEAP8[$m_hasPrevVertex$i >> 0] = HEAP8[$this + 36 >> 0] | 0;
  HEAP8[$m_hasNextVertex$i >> 0] = HEAP8[$this + 37 >> 0] | 0;
  STACKTOP = sp;
  return $4 | 0;
 } else ___assert_fail(6720, 6632, 49, 6704);
 return 0;
}
function __ZN15b2CircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_($this, $manifold, $xfA, $xfB) {
 $this = $this | 0;
 $manifold = $manifold | 0;
 $xfA = $xfA | 0;
 $xfB = $xfB | 0;
 var $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $20 = 0, $25 = 0, $26 = 0, $3 = 0, $30 = 0, $35 = 0, $36 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $add$i = 0.0, $m_p$i = 0, $m_p1$i = 0, $pointCount$i = 0, $sub$i21$i = 0.0, $sub3$i$i = 0.0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[(HEAP32[$this + 48 >> 2] | 0) + 12 >> 2] | 0;
 $3 = HEAP32[(HEAP32[$this + 52 >> 2] | 0) + 12 >> 2] | 0;
 $pointCount$i = $manifold + 60 | 0;
 HEAP32[$pointCount$i >> 2] = 0;
 $m_p$i = $1 + 12 | 0;
 $4 = +HEAPF32[$xfA + 12 >> 2];
 $5 = +HEAPF32[$m_p$i >> 2];
 $6 = +HEAPF32[$xfA + 8 >> 2];
 $7 = +HEAPF32[$1 + 16 >> 2];
 $m_p1$i = $3 + 12 | 0;
 $10 = +HEAPF32[$xfB + 12 >> 2];
 $11 = +HEAPF32[$m_p1$i >> 2];
 $12 = +HEAPF32[$xfB + 8 >> 2];
 $13 = +HEAPF32[$3 + 16 >> 2];
 $sub$i21$i = +HEAPF32[$xfB >> 2] + ($10 * $11 - $12 * $13) - (+HEAPF32[$xfA >> 2] + ($4 * $5 - $6 * $7));
 $sub3$i$i = $11 * $12 + $10 * $13 + +HEAPF32[$xfB + 4 >> 2] - ($5 * $6 + $4 * $7 + +HEAPF32[$xfA + 4 >> 2]);
 $add$i = +HEAPF32[$1 + 8 >> 2] + +HEAPF32[$3 + 8 >> 2];
 if ($sub$i21$i * $sub$i21$i + $sub3$i$i * $sub3$i$i > $add$i * $add$i) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$manifold + 56 >> 2] = 0;
 $20 = $m_p$i;
 $25 = HEAP32[$20 + 4 >> 2] | 0;
 $26 = $manifold + 48 | 0;
 HEAP32[$26 >> 2] = HEAP32[$20 >> 2];
 HEAP32[$26 + 4 >> 2] = $25;
 HEAPF32[$manifold + 40 >> 2] = 0.0;
 HEAPF32[$manifold + 44 >> 2] = 0.0;
 HEAP32[$pointCount$i >> 2] = 1;
 $30 = $m_p1$i;
 $35 = HEAP32[$30 + 4 >> 2] | 0;
 $36 = $manifold;
 HEAP32[$36 >> 2] = HEAP32[$30 >> 2];
 HEAP32[$36 + 4 >> 2] = $35;
 HEAP32[$manifold + 16 >> 2] = 0;
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2PrismaticJointDef_Initialize_4($self, $arg0, $arg1, $arg2, $arg3) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 $arg1 = $arg1 | 0;
 $arg2 = $arg2 | 0;
 $arg3 = $arg3 | 0;
 var $17 = 0.0, $18 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $4 = 0.0, $5 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, $c$i$i$i = 0, $s$i$i$i = 0, $sub$i$i$i = 0.0, $sub$i$i16$i = 0.0, $sub4$i$i$i = 0.0, $sub4$i$i19$i = 0.0, $y$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$self + 8 >> 2] = $arg0;
 HEAP32[$self + 12 >> 2] = $arg1;
 $sub$i$i$i = +HEAPF32[$arg2 >> 2] - +HEAPF32[$arg0 + 12 >> 2];
 $y$i$i$i = $arg2 + 4 | 0;
 $sub4$i$i$i = +HEAPF32[$y$i$i$i >> 2] - +HEAPF32[$arg0 + 16 >> 2];
 $c$i$i$i = $arg0 + 24 | 0;
 $4 = +HEAPF32[$c$i$i$i >> 2];
 $s$i$i$i = $arg0 + 20 | 0;
 $5 = +HEAPF32[$s$i$i$i >> 2];
 $7 = +($sub$i$i$i * $4 + $sub4$i$i$i * $5);
 $8 = +($4 * $sub4$i$i$i - $sub$i$i$i * $5);
 $9 = $self + 20 | 0;
 HEAPF32[$9 >> 2] = $7;
 HEAPF32[$9 + 4 >> 2] = $8;
 $sub$i$i16$i = +HEAPF32[$arg2 >> 2] - +HEAPF32[$arg1 + 12 >> 2];
 $sub4$i$i19$i = +HEAPF32[$y$i$i$i >> 2] - +HEAPF32[$arg1 + 16 >> 2];
 $17 = +HEAPF32[$arg1 + 24 >> 2];
 $18 = +HEAPF32[$arg1 + 20 >> 2];
 $20 = +($sub$i$i16$i * $17 + $sub4$i$i19$i * $18);
 $21 = +($17 * $sub4$i$i19$i - $sub$i$i16$i * $18);
 $22 = $self + 28 | 0;
 HEAPF32[$22 >> 2] = $20;
 HEAPF32[$22 + 4 >> 2] = $21;
 $26 = +HEAPF32[$c$i$i$i >> 2];
 $27 = +HEAPF32[$arg3 >> 2];
 $28 = +HEAPF32[$s$i$i$i >> 2];
 $29 = +HEAPF32[$arg3 + 4 >> 2];
 $31 = +($26 * $27 + $28 * $29);
 $32 = +($26 * $29 - $27 * $28);
 $33 = $self + 36 | 0;
 HEAPF32[$33 >> 2] = $31;
 HEAPF32[$33 + 4 >> 2] = $32;
 HEAPF32[$self + 44 >> 2] = +HEAPF32[$arg1 + 56 >> 2] - +HEAPF32[$arg0 + 56 >> 2];
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2WheelJointDef_Initialize_4($self, $arg0, $arg1, $arg2, $arg3) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 $arg1 = $arg1 | 0;
 $arg2 = $arg2 | 0;
 $arg3 = $arg3 | 0;
 var $17 = 0.0, $18 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $4 = 0.0, $5 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, $c$i$i$i = 0, $s$i$i$i = 0, $sub$i$i$i = 0.0, $sub$i$i15$i = 0.0, $sub4$i$i$i = 0.0, $sub4$i$i18$i = 0.0, $y$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$self + 8 >> 2] = $arg0;
 HEAP32[$self + 12 >> 2] = $arg1;
 $sub$i$i$i = +HEAPF32[$arg2 >> 2] - +HEAPF32[$arg0 + 12 >> 2];
 $y$i$i$i = $arg2 + 4 | 0;
 $sub4$i$i$i = +HEAPF32[$y$i$i$i >> 2] - +HEAPF32[$arg0 + 16 >> 2];
 $c$i$i$i = $arg0 + 24 | 0;
 $4 = +HEAPF32[$c$i$i$i >> 2];
 $s$i$i$i = $arg0 + 20 | 0;
 $5 = +HEAPF32[$s$i$i$i >> 2];
 $7 = +($sub$i$i$i * $4 + $sub4$i$i$i * $5);
 $8 = +($4 * $sub4$i$i$i - $sub$i$i$i * $5);
 $9 = $self + 20 | 0;
 HEAPF32[$9 >> 2] = $7;
 HEAPF32[$9 + 4 >> 2] = $8;
 $sub$i$i15$i = +HEAPF32[$arg2 >> 2] - +HEAPF32[$arg1 + 12 >> 2];
 $sub4$i$i18$i = +HEAPF32[$y$i$i$i >> 2] - +HEAPF32[$arg1 + 16 >> 2];
 $17 = +HEAPF32[$arg1 + 24 >> 2];
 $18 = +HEAPF32[$arg1 + 20 >> 2];
 $20 = +($sub$i$i15$i * $17 + $sub4$i$i18$i * $18);
 $21 = +($17 * $sub4$i$i18$i - $sub$i$i15$i * $18);
 $22 = $self + 28 | 0;
 HEAPF32[$22 >> 2] = $20;
 HEAPF32[$22 + 4 >> 2] = $21;
 $26 = +HEAPF32[$c$i$i$i >> 2];
 $27 = +HEAPF32[$arg3 >> 2];
 $28 = +HEAPF32[$s$i$i$i >> 2];
 $29 = +HEAPF32[$arg3 + 4 >> 2];
 $31 = +($26 * $27 + $28 * $29);
 $32 = +($26 * $29 - $27 * $28);
 $33 = $self + 36 | 0;
 HEAPF32[$33 >> 2] = $31;
 HEAPF32[$33 + 4 >> 2] = $32;
 STACKTOP = sp;
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $dst_ptr_not_leading_to_static_ptr = 0, $number_to_dst_ptr = 0, $path_dynamic_ptr_to_static_ptr$i = 0, sp = 0;
 sp = STACKTOP;
 if ((HEAP32[$info + 8 >> 2] | 0) == ($this | 0)) {
  if ((HEAP32[$info + 4 >> 2] | 0) != ($current_ptr | 0)) {
   STACKTOP = sp;
   return;
  }
  $path_dynamic_ptr_to_static_ptr$i = $info + 28 | 0;
  if ((HEAP32[$path_dynamic_ptr_to_static_ptr$i >> 2] | 0) == 1) {
   STACKTOP = sp;
   return;
  }
  HEAP32[$path_dynamic_ptr_to_static_ptr$i >> 2] = $path_below;
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[$info >> 2] | 0) != ($this | 0)) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[$info + 16 >> 2] | 0) != ($current_ptr | 0)) {
  $dst_ptr_not_leading_to_static_ptr = $info + 20 | 0;
  if ((HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] | 0) != ($current_ptr | 0)) {
   HEAP32[$info + 32 >> 2] = $path_below;
   HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] = $current_ptr;
   $number_to_dst_ptr = $info + 40 | 0;
   HEAP32[$number_to_dst_ptr >> 2] = (HEAP32[$number_to_dst_ptr >> 2] | 0) + 1;
   if ((HEAP32[$info + 36 >> 2] | 0) == 1) if ((HEAP32[$info + 24 >> 2] | 0) == 2) HEAP8[$info + 54 >> 0] = 1;
   HEAP32[$info + 44 >> 2] = 4;
   STACKTOP = sp;
   return;
  }
 }
 if (($path_below | 0) != 1) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$info + 32 >> 2] = 1;
 STACKTOP = sp;
 return;
}
function __ZL25default_terminate_handlerv() {
 var $1 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $4 = 0, $7 = 0, $call1$i = 0, $call14 = 0, $cond = 0, $thrown_object = 0, $vararg_buffer12 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer12 = sp;
 $thrown_object = sp + 12 | 0;
 if ((_pthread_once(21168, 44) | 0) != 0) _abort_message(21176, $vararg_buffer12);
 $call1$i = _pthread_getspecific(HEAP32[5290] | 0) | 0;
 if (($call1$i | 0) == 0) _abort_message(21144, $vararg_buffer12);
 $1 = HEAP32[$call1$i >> 2] | 0;
 if (($1 | 0) == 0) _abort_message(21144, $vararg_buffer12);
 $2 = $1 + 48 | 0;
 $4 = HEAP32[$2 >> 2] | 0;
 $7 = HEAP32[$2 + 4 >> 2] | 0;
 if (!(($4 & -256 | 0) == 1126902528 & ($7 | 0) == 1129074247)) {
  HEAP32[$vararg_buffer12 >> 2] = 20992;
  _abort_message(21104, $vararg_buffer12);
 }
 if (($4 | 0) == 1126902529 & ($7 | 0) == 1129074247) $cond = HEAP32[$1 + 44 >> 2] | 0; else $cond = $1 + 80 | 0;
 HEAP32[$thrown_object >> 2] = $cond;
 $16 = HEAP32[$1 >> 2] | 0;
 $17 = HEAP32[$16 + 4 >> 2] | 0;
 if (__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv(21536, $16, $thrown_object) | 0) {
  $18 = HEAP32[$thrown_object >> 2] | 0;
  $call14 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$18 >> 2] | 0) + 8 >> 2] & 63]($18) | 0;
  HEAP32[$vararg_buffer12 >> 2] = 20992;
  HEAP32[$vararg_buffer12 + 4 >> 2] = $17;
  HEAP32[$vararg_buffer12 + 8 >> 2] = $call14;
  _abort_message(21008, $vararg_buffer12);
 } else {
  HEAP32[$vararg_buffer12 >> 2] = 20992;
  HEAP32[$vararg_buffer12 + 4 >> 2] = $17;
  _abort_message(21056, $vararg_buffer12);
 }
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($info, $dst_ptr, $current_ptr, $path_below) {
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 var $1 = 0, $3 = 0, $5 = 0, $dst_ptr_leading_to_static_ptr = 0, $number_to_static_ptr26 = 0, $path_dst_ptr_to_static_ptr12 = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$info + 53 >> 0] = 1;
 if ((HEAP32[$info + 4 >> 2] | 0) != ($current_ptr | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP8[$info + 52 >> 0] = 1;
 $dst_ptr_leading_to_static_ptr = $info + 16 | 0;
 $1 = HEAP32[$dst_ptr_leading_to_static_ptr >> 2] | 0;
 if (($1 | 0) == 0) {
  HEAP32[$dst_ptr_leading_to_static_ptr >> 2] = $dst_ptr;
  HEAP32[$info + 24 >> 2] = $path_below;
  HEAP32[$info + 36 >> 2] = 1;
  if (!(($path_below | 0) == 1 ? (HEAP32[$info + 48 >> 2] | 0) == 1 : 0)) {
   STACKTOP = sp;
   return;
  }
  HEAP8[$info + 54 >> 0] = 1;
  STACKTOP = sp;
  return;
 }
 if (($1 | 0) != ($dst_ptr | 0)) {
  $number_to_static_ptr26 = $info + 36 | 0;
  HEAP32[$number_to_static_ptr26 >> 2] = (HEAP32[$number_to_static_ptr26 >> 2] | 0) + 1;
  HEAP8[$info + 54 >> 0] = 1;
  STACKTOP = sp;
  return;
 }
 $path_dst_ptr_to_static_ptr12 = $info + 24 | 0;
 $3 = HEAP32[$path_dst_ptr_to_static_ptr12 >> 2] | 0;
 if (($3 | 0) == 2) {
  HEAP32[$path_dst_ptr_to_static_ptr12 >> 2] = $path_below;
  $5 = $path_below;
 } else $5 = $3;
 if (!(($5 | 0) == 1 ? (HEAP32[$info + 48 >> 2] | 0) == 1 : 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP8[$info + 54 >> 0] = 1;
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2DistanceJointDef_Initialize_4($self, $arg0, $arg1, $arg2, $arg3) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 $arg1 = $arg1 | 0;
 $arg2 = $arg2 | 0;
 $arg3 = $arg3 | 0;
 var $17 = 0.0, $18 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $4 = 0.0, $5 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, $sub$i$i = 0.0, $sub$i$i$i = 0.0, $sub$i$i6$i = 0.0, $sub3$i$i = 0.0, $sub4$i$i$i = 0.0, $sub4$i$i9$i = 0.0, $y$i$i$i = 0, $y$i$i7$i = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$self + 8 >> 2] = $arg0;
 HEAP32[$self + 12 >> 2] = $arg1;
 $sub$i$i$i = +HEAPF32[$arg2 >> 2] - +HEAPF32[$arg0 + 12 >> 2];
 $y$i$i$i = $arg2 + 4 | 0;
 $sub4$i$i$i = +HEAPF32[$y$i$i$i >> 2] - +HEAPF32[$arg0 + 16 >> 2];
 $4 = +HEAPF32[$arg0 + 24 >> 2];
 $5 = +HEAPF32[$arg0 + 20 >> 2];
 $7 = +($sub$i$i$i * $4 + $sub4$i$i$i * $5);
 $8 = +($4 * $sub4$i$i$i - $sub$i$i$i * $5);
 $9 = $self + 20 | 0;
 HEAPF32[$9 >> 2] = $7;
 HEAPF32[$9 + 4 >> 2] = $8;
 $sub$i$i6$i = +HEAPF32[$arg3 >> 2] - +HEAPF32[$arg1 + 12 >> 2];
 $y$i$i7$i = $arg3 + 4 | 0;
 $sub4$i$i9$i = +HEAPF32[$y$i$i7$i >> 2] - +HEAPF32[$arg1 + 16 >> 2];
 $17 = +HEAPF32[$arg1 + 24 >> 2];
 $18 = +HEAPF32[$arg1 + 20 >> 2];
 $20 = +($sub$i$i6$i * $17 + $sub4$i$i9$i * $18);
 $21 = +($17 * $sub4$i$i9$i - $sub$i$i6$i * $18);
 $22 = $self + 28 | 0;
 HEAPF32[$22 >> 2] = $20;
 HEAPF32[$22 + 4 >> 2] = $21;
 $sub$i$i = +HEAPF32[$arg3 >> 2] - +HEAPF32[$arg2 >> 2];
 $sub3$i$i = +HEAPF32[$y$i$i7$i >> 2] - +HEAPF32[$y$i$i$i >> 2];
 HEAPF32[$self + 36 >> 2] = +Math_sqrt(+($sub$i$i * $sub$i$i + $sub3$i$i * $sub3$i$i));
 STACKTOP = sp;
 return;
}
function __ZNK12b2ChainShape11ComputeAABBEP6b2AABBRK11b2Transformi($this, $aabb, $xf, $childIndex) {
 $this = $this | 0;
 $aabb = $aabb | 0;
 $xf = $xf | 0;
 $childIndex = $childIndex | 0;
 var $$add = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $add = 0, $add$i = 0.0, $add$i29 = 0.0, $add17$i = 0.0, $add17$i34 = 0.0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this + 16 >> 2] | 0;
 if (($0 | 0) > ($childIndex | 0)) {
  $add = $childIndex + 1 | 0;
  $$add = ($add | 0) == ($0 | 0) ? 0 : $add;
  $1 = HEAP32[$this + 12 >> 2] | 0;
  $2 = +HEAPF32[$xf + 12 >> 2];
  $3 = +HEAPF32[$1 + ($childIndex << 3) >> 2];
  $4 = +HEAPF32[$xf + 8 >> 2];
  $5 = +HEAPF32[$1 + ($childIndex << 3) + 4 >> 2];
  $6 = +HEAPF32[$xf >> 2];
  $add$i = $6 + ($2 * $3 - $4 * $5);
  $7 = +HEAPF32[$xf + 4 >> 2];
  $add17$i = $3 * $4 + $2 * $5 + $7;
  $8 = +HEAPF32[$1 + ($$add << 3) >> 2];
  $9 = +HEAPF32[$1 + ($$add << 3) + 4 >> 2];
  $add$i29 = $6 + ($2 * $8 - $4 * $9);
  $add17$i34 = $7 + ($4 * $8 + $2 * $9);
  $10 = +($add$i < $add$i29 ? $add$i : $add$i29);
  $11 = +($add17$i < $add17$i34 ? $add17$i : $add17$i34);
  $12 = $aabb;
  HEAPF32[$12 >> 2] = $10;
  HEAPF32[$12 + 4 >> 2] = $11;
  $16 = +($add$i > $add$i29 ? $add$i : $add$i29);
  $17 = +($add17$i > $add17$i34 ? $add17$i : $add17$i34);
  $18 = $aabb + 8 | 0;
  HEAPF32[$18 >> 2] = $16;
  HEAPF32[$18 + 4 >> 2] = $17;
  STACKTOP = sp;
  return;
 } else ___assert_fail(6792, 6632, 148, 6816);
}
function _emscripten_bind_b2World___destroy___0($self) {
 $self = $self | 0;
 var $$lcssa$i = 0, $0 = 0, $10 = 0, $11 = 0, $14 = 0, $3 = 0, $b$09$i = 0, $f$0$i = 0, $i$04$i = 0, $m_chunkCount$i = 0, sp = 0, $b$09$i$looptemp = 0;
 sp = STACKTOP;
 if (($self | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 $0 = HEAP32[$self + 102952 >> 2] | 0;
 if (($0 | 0) != 0) {
  $b$09$i = $0;
  do {
   $b$09$i$looptemp = $b$09$i;
   $b$09$i = HEAP32[$b$09$i + 96 >> 2] | 0;
   $f$0$i = HEAP32[$b$09$i$looptemp + 100 >> 2] | 0;
   while (1) {
    if (($f$0$i | 0) == 0) break;
    $3 = HEAP32[$f$0$i + 4 >> 2] | 0;
    HEAP32[$f$0$i + 28 >> 2] = 0;
    __ZN9b2Fixture7DestroyEP16b2BlockAllocator($f$0$i, $self);
    $f$0$i = $3;
   }
  } while (($b$09$i | 0) != 0);
 }
 _free(HEAP32[$self + 102904 >> 2] | 0);
 _free(HEAP32[$self + 102916 >> 2] | 0);
 _free(HEAP32[$self + 102876 >> 2] | 0);
 if ((HEAP32[$self + 102468 >> 2] | 0) != 0) ___assert_fail(11160, 11176, 32, 11224);
 if ((HEAP32[$self + 102864 >> 2] | 0) != 0) ___assert_fail(11248, 11176, 33, 11224);
 $m_chunkCount$i = $self + 4 | 0;
 $10 = HEAP32[$self >> 2] | 0;
 if ((HEAP32[$m_chunkCount$i >> 2] | 0) > 0) {
  $11 = $10;
  $i$04$i = 0;
  while (1) {
   _free(HEAP32[$11 + ($i$04$i << 3) + 4 >> 2] | 0);
   $i$04$i = $i$04$i + 1 | 0;
   $14 = HEAP32[$self >> 2] | 0;
   if (($i$04$i | 0) >= (HEAP32[$m_chunkCount$i >> 2] | 0)) {
    $$lcssa$i = $14;
    break;
   } else $11 = $14;
  }
 } else $$lcssa$i = $10;
 _free($$lcssa$i);
 _free($self);
 STACKTOP = sp;
 return;
}
function __ZN9b2Fixture7DestroyEP16b2BlockAllocator($this, $allocator) {
 $this = $this | 0;
 $allocator = $allocator | 0;
 var $1 = 0, $4 = 0, $5 = 0, $call = 0, $m_proxies = 0, $m_shape = 0, sp = 0;
 sp = STACKTOP;
 if ((HEAP32[$this + 28 >> 2] | 0) != 0) ___assert_fail(12552, 12576, 72, 18536);
 $m_shape = $this + 12 | 0;
 $1 = HEAP32[$m_shape >> 2] | 0;
 $call = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 12 >> 2] & 63]($1) | 0;
 $m_proxies = $this + 24 | 0;
 __ZN16b2BlockAllocator4FreeEPvi($allocator, HEAP32[$m_proxies >> 2] | 0, $call * 28 | 0);
 HEAP32[$m_proxies >> 2] = 0;
 $4 = HEAP32[$m_shape >> 2] | 0;
 $5 = HEAP32[$4 + 4 >> 2] | 0;
 if (($5 | 0) == 1) {
  FUNCTION_TABLE_vi[HEAP32[HEAP32[$4 >> 2] >> 2] & 127]($4);
  __ZN16b2BlockAllocator4FreeEPvi($allocator, $4, 48);
  HEAP32[$m_shape >> 2] = 0;
  STACKTOP = sp;
  return;
 } else if (($5 | 0) == 0) {
  FUNCTION_TABLE_vi[HEAP32[HEAP32[$4 >> 2] >> 2] & 127]($4);
  __ZN16b2BlockAllocator4FreeEPvi($allocator, $4, 20);
  HEAP32[$m_shape >> 2] = 0;
  STACKTOP = sp;
  return;
 } else if (($5 | 0) == 3) {
  FUNCTION_TABLE_vi[HEAP32[HEAP32[$4 >> 2] >> 2] & 127]($4);
  __ZN16b2BlockAllocator4FreeEPvi($allocator, $4, 40);
  HEAP32[$m_shape >> 2] = 0;
  STACKTOP = sp;
  return;
 } else if (($5 | 0) == 2) {
  FUNCTION_TABLE_vi[HEAP32[HEAP32[$4 >> 2] >> 2] & 127]($4);
  __ZN16b2BlockAllocator4FreeEPvi($allocator, $4, 152);
  HEAP32[$m_shape >> 2] = 0;
  STACKTOP = sp;
  return;
 } else ___assert_fail(18472, 12576, 115, 18536);
}
function _emscripten_bind_b2PrismaticJointDef_b2PrismaticJointDef_0() {
 var $0 = 0, $call$i = 0, $call$lcssa$i = 0, $call4$i = 0, $exception$i = 0, $x$i$i$i = 0, $x$i3$i$i = 0, sp = 0;
 sp = STACKTOP;
 $call4$i = _malloc(72) | 0;
 L1 : do if (($call4$i | 0) == 0) {
  while (1) {
   $0 = HEAP32[5378] | 0;
   HEAP32[5378] = $0 + 0;
   if (($0 | 0) == 0) break;
   FUNCTION_TABLE_v[$0 & 63]();
   $call$i = _malloc(72) | 0;
   if (($call$i | 0) != 0) {
    $call$lcssa$i = $call$i;
    break L1;
   }
  }
  $exception$i = ___cxa_allocate_exception(4) | 0;
  HEAP32[$exception$i >> 2] = 21352;
  ___cxa_throw($exception$i | 0, 21400, 111);
 } else $call$lcssa$i = $call4$i; while (0);
 HEAP32[$call$lcssa$i + 0 >> 2] = 0;
 HEAP32[$call$lcssa$i + 4 >> 2] = 0;
 HEAP32[$call$lcssa$i + 8 >> 2] = 0;
 HEAP32[$call$lcssa$i + 12 >> 2] = 0;
 HEAP8[$call$lcssa$i + 16 >> 0] = 0;
 HEAP32[$call$lcssa$i >> 2] = 2;
 $x$i3$i$i = $call$lcssa$i + 20 | 0;
 $x$i$i$i = $call$lcssa$i + 36 | 0;
 HEAP32[$x$i3$i$i + 0 >> 2] = 0;
 HEAP32[$x$i3$i$i + 4 >> 2] = 0;
 HEAP32[$x$i3$i$i + 8 >> 2] = 0;
 HEAP32[$x$i3$i$i + 12 >> 2] = 0;
 HEAPF32[$x$i$i$i >> 2] = 1.0;
 HEAPF32[$call$lcssa$i + 40 >> 2] = 0.0;
 HEAPF32[$call$lcssa$i + 44 >> 2] = 0.0;
 HEAP8[$call$lcssa$i + 48 >> 0] = 0;
 HEAPF32[$call$lcssa$i + 52 >> 2] = 0.0;
 HEAPF32[$call$lcssa$i + 56 >> 2] = 0.0;
 HEAP8[$call$lcssa$i + 60 >> 0] = 0;
 HEAPF32[$call$lcssa$i + 64 >> 2] = 0.0;
 HEAPF32[$call$lcssa$i + 68 >> 2] = 0.0;
 STACKTOP = sp;
 return $call$lcssa$i | 0;
}
function __ZNK11b2EdgeShape5CloneEP16b2BlockAllocator($this, $allocator) {
 $this = $this | 0;
 $allocator = $allocator | 0;
 var $0 = 0, $1 = 0, $6 = 0, $7 = 0, $call = 0, $m_vertex1$i = 0, $m_vertex12$i = 0, $x$i$i = 0, sp = 0;
 sp = STACKTOP;
 $call = __ZN16b2BlockAllocator8AllocateEi($allocator, 48) | 0;
 if (($call | 0) == 0) $0 = 0; else {
  HEAP32[$call >> 2] = 6968;
  HEAP32[$call + 4 >> 2] = 1;
  HEAPF32[$call + 8 >> 2] = .009999999776482582;
  $x$i$i = $call + 28 | 0;
  HEAP32[$x$i$i + 0 >> 2] = 0;
  HEAP32[$x$i$i + 4 >> 2] = 0;
  HEAP32[$x$i$i + 8 >> 2] = 0;
  HEAP32[$x$i$i + 12 >> 2] = 0;
  HEAP16[$x$i$i + 16 >> 1] = 0;
  $0 = $call;
 }
 $1 = $this + 4 | 0;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = $0 + 4 | 0;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 $m_vertex1$i = $0 + 12 | 0;
 $m_vertex12$i = $this + 12 | 0;
 HEAP32[$m_vertex1$i + 0 >> 2] = HEAP32[$m_vertex12$i + 0 >> 2];
 HEAP32[$m_vertex1$i + 4 >> 2] = HEAP32[$m_vertex12$i + 4 >> 2];
 HEAP32[$m_vertex1$i + 8 >> 2] = HEAP32[$m_vertex12$i + 8 >> 2];
 HEAP32[$m_vertex1$i + 12 >> 2] = HEAP32[$m_vertex12$i + 12 >> 2];
 HEAP32[$m_vertex1$i + 16 >> 2] = HEAP32[$m_vertex12$i + 16 >> 2];
 HEAP32[$m_vertex1$i + 20 >> 2] = HEAP32[$m_vertex12$i + 20 >> 2];
 HEAP32[$m_vertex1$i + 24 >> 2] = HEAP32[$m_vertex12$i + 24 >> 2];
 HEAP32[$m_vertex1$i + 28 >> 2] = HEAP32[$m_vertex12$i + 28 >> 2];
 HEAP16[$m_vertex1$i + 32 >> 1] = HEAP16[$m_vertex12$i + 32 >> 1] | 0;
 STACKTOP = sp;
 return $0 | 0;
}
function __ZN24b2ChainAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA, $indexA, $fixtureB, $indexB, $allocator) {
 $fixtureA = $fixtureA | 0;
 $indexA = $indexA | 0;
 $fixtureB = $fixtureB | 0;
 $indexB = $indexB | 0;
 $allocator = $allocator | 0;
 var $2 = 0.0, $3 = 0.0, $8 = 0, $call = 0, $m_friction$i$i = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $call = __ZN16b2BlockAllocator8AllocateEi($allocator, 144) | 0;
 if (($call | 0) == 0) {
  $8 = 0;
  STACKTOP = sp;
  return $8 | 0;
 }
 HEAP32[$call + 4 >> 2] = 4;
 HEAP32[$call + 48 >> 2] = $fixtureA;
 HEAP32[$call + 52 >> 2] = $fixtureB;
 HEAP32[$call + 56 >> 2] = $indexA;
 HEAP32[$call + 60 >> 2] = $indexB;
 HEAP32[$call + 124 >> 2] = 0;
 HEAP32[$call + 128 >> 2] = 0;
 $m_friction$i$i = $fixtureA + 16 | 0;
 dest = $call + 8 | 0;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAPF32[$call + 136 >> 2] = +Math_sqrt(+(+HEAPF32[$m_friction$i$i >> 2] * +HEAPF32[$fixtureB + 16 >> 2]));
 $2 = +HEAPF32[$fixtureA + 20 >> 2];
 $3 = +HEAPF32[$fixtureB + 20 >> 2];
 HEAPF32[$call + 140 >> 2] = $2 > $3 ? $2 : $3;
 HEAP32[$call >> 2] = 15104;
 if ((HEAP32[(HEAP32[$fixtureA + 12 >> 2] | 0) + 4 >> 2] | 0) != 3) ___assert_fail(15120, 15168, 43, 15240);
 if ((HEAP32[(HEAP32[$fixtureB + 12 >> 2] | 0) + 4 >> 2] | 0) == 2) {
  $8 = $call;
  STACKTOP = sp;
  return $8 | 0;
 } else ___assert_fail(17456, 15168, 44, 15240);
 return 0;
}
function __ZNK12b2ChainShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi($this, $output, $input, $xf, $childIndex) {
 $this = $this | 0;
 $output = $output | 0;
 $input = $input | 0;
 $xf = $xf | 0;
 $childIndex = $childIndex | 0;
 var $0 = 0, $1 = 0, $12 = 0, $17 = 0, $18 = 0, $2 = 0, $7 = 0, $8 = 0, $add = 0, $call = 0, $edgeShape = 0, $x$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $edgeShape = sp;
 $0 = HEAP32[$this + 16 >> 2] | 0;
 if (($0 | 0) > ($childIndex | 0)) {
  HEAP32[$edgeShape >> 2] = 6968;
  HEAP32[$edgeShape + 4 >> 2] = 1;
  HEAPF32[$edgeShape + 8 >> 2] = .009999999776482582;
  $x$i$i = $edgeShape + 28 | 0;
  HEAP32[$x$i$i + 0 >> 2] = 0;
  HEAP32[$x$i$i + 4 >> 2] = 0;
  HEAP32[$x$i$i + 8 >> 2] = 0;
  HEAP32[$x$i$i + 12 >> 2] = 0;
  HEAP16[$x$i$i + 16 >> 1] = 0;
  $add = $childIndex + 1 | 0;
  $1 = HEAP32[$this + 12 >> 2] | 0;
  $2 = $1 + ($childIndex << 3) | 0;
  $7 = HEAP32[$2 + 4 >> 2] | 0;
  $8 = $edgeShape + 12 | 0;
  HEAP32[$8 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$8 + 4 >> 2] = $7;
  $12 = $1 + ((($add | 0) == ($0 | 0) ? 0 : $add) << 3) | 0;
  $17 = HEAP32[$12 + 4 >> 2] | 0;
  $18 = $edgeShape + 20 | 0;
  HEAP32[$18 >> 2] = HEAP32[$12 >> 2];
  HEAP32[$18 + 4 >> 2] = $17;
  $call = __ZNK11b2EdgeShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi($edgeShape, $output, $input, $xf, 0) | 0;
  STACKTOP = sp;
  return $call | 0;
 } else ___assert_fail(6792, 6632, 129, 14560);
 return 0;
}
function __ZN23b2ChainAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA, $indexA, $fixtureB, $indexB, $allocator) {
 $fixtureA = $fixtureA | 0;
 $indexA = $indexA | 0;
 $fixtureB = $fixtureB | 0;
 $indexB = $indexB | 0;
 $allocator = $allocator | 0;
 var $2 = 0.0, $3 = 0.0, $8 = 0, $call = 0, $m_friction$i$i = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $call = __ZN16b2BlockAllocator8AllocateEi($allocator, 144) | 0;
 if (($call | 0) == 0) {
  $8 = 0;
  STACKTOP = sp;
  return $8 | 0;
 }
 HEAP32[$call + 4 >> 2] = 4;
 HEAP32[$call + 48 >> 2] = $fixtureA;
 HEAP32[$call + 52 >> 2] = $fixtureB;
 HEAP32[$call + 56 >> 2] = $indexA;
 HEAP32[$call + 60 >> 2] = $indexB;
 HEAP32[$call + 124 >> 2] = 0;
 HEAP32[$call + 128 >> 2] = 0;
 $m_friction$i$i = $fixtureA + 16 | 0;
 dest = $call + 8 | 0;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAPF32[$call + 136 >> 2] = +Math_sqrt(+(+HEAPF32[$m_friction$i$i >> 2] * +HEAPF32[$fixtureB + 16 >> 2]));
 $2 = +HEAPF32[$fixtureA + 20 >> 2];
 $3 = +HEAPF32[$fixtureB + 20 >> 2];
 HEAPF32[$call + 140 >> 2] = $2 > $3 ? $2 : $3;
 HEAP32[$call >> 2] = 14912;
 if ((HEAP32[(HEAP32[$fixtureA + 12 >> 2] | 0) + 4 >> 2] | 0) != 3) ___assert_fail(15120, 14928, 43, 15e3);
 if ((HEAP32[(HEAP32[$fixtureB + 12 >> 2] | 0) + 4 >> 2] | 0) == 0) {
  $8 = $call;
  STACKTOP = sp;
  return $8 | 0;
 } else ___assert_fail(17200, 14928, 44, 15e3);
 return 0;
}
function _emscripten_bind_b2ChainShape_CreateLoop_2($self, $arg0, $arg1) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 $arg1 = $arg1 | 0;
 var $14 = 0, $15 = 0, $2 = 0, $20 = 0, $21 = 0, $25 = 0, $3 = 0, $30 = 0, $31 = 0, $8 = 0, $9 = 0, $add$i = 0, $call$i$i = 0, $m_count$i = 0, $m_vertices$i = 0, sp = 0;
 sp = STACKTOP;
 $m_vertices$i = $self + 12 | 0;
 if ((HEAP32[$m_vertices$i >> 2] | 0) != 0) ___assert_fail(6592, 6632, 34, 6688);
 $m_count$i = $self + 16 | 0;
 if ((HEAP32[$m_count$i >> 2] | 0) != 0) ___assert_fail(6592, 6632, 34, 6688);
 if (($arg1 | 0) > 2) {
  $add$i = $arg1 + 1 | 0;
  HEAP32[$m_count$i >> 2] = $add$i;
  $call$i$i = _malloc($add$i << 3) | 0;
  HEAP32[$m_vertices$i >> 2] = $call$i$i;
  _memcpy($call$i$i | 0, $arg0 | 0, $arg1 << 3 | 0) | 0;
  $2 = HEAP32[$m_vertices$i >> 2] | 0;
  $3 = $2;
  $8 = HEAP32[$3 + 4 >> 2] | 0;
  $9 = $2 + ($arg1 << 3) | 0;
  HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$9 + 4 >> 2] = $8;
  $14 = HEAP32[$m_vertices$i >> 2] | 0;
  $15 = $14 + ((HEAP32[$m_count$i >> 2] | 0) + -2 << 3) | 0;
  $20 = HEAP32[$15 + 4 >> 2] | 0;
  $21 = $self + 20 | 0;
  HEAP32[$21 >> 2] = HEAP32[$15 >> 2];
  HEAP32[$21 + 4 >> 2] = $20;
  $25 = $14 + 8 | 0;
  $30 = HEAP32[$25 + 4 >> 2] | 0;
  $31 = $self + 28 | 0;
  HEAP32[$31 >> 2] = HEAP32[$25 >> 2];
  HEAP32[$31 + 4 >> 2] = $30;
  HEAP8[$self + 36 >> 0] = 1;
  HEAP8[$self + 37 >> 0] = 1;
  STACKTOP = sp;
  return;
 } else ___assert_fail(7408, 6632, 35, 6688);
}
function __ZN25b2PolygonAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA, $0, $fixtureB, $1, $allocator) {
 $fixtureA = $fixtureA | 0;
 $0 = $0 | 0;
 $fixtureB = $fixtureB | 0;
 $1 = $1 | 0;
 $allocator = $allocator | 0;
 var $10 = 0, $4 = 0.0, $5 = 0.0, $call = 0, $m_friction$i$i = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $call = __ZN16b2BlockAllocator8AllocateEi($allocator, 144) | 0;
 if (($call | 0) == 0) {
  $10 = 0;
  STACKTOP = sp;
  return $10 | 0;
 }
 HEAP32[$call + 4 >> 2] = 4;
 HEAP32[$call + 48 >> 2] = $fixtureA;
 HEAP32[$call + 52 >> 2] = $fixtureB;
 HEAP32[$call + 56 >> 2] = 0;
 HEAP32[$call + 60 >> 2] = 0;
 HEAP32[$call + 124 >> 2] = 0;
 HEAP32[$call + 128 >> 2] = 0;
 $m_friction$i$i = $fixtureA + 16 | 0;
 dest = $call + 8 | 0;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAPF32[$call + 136 >> 2] = +Math_sqrt(+(+HEAPF32[$m_friction$i$i >> 2] * +HEAPF32[$fixtureB + 16 >> 2]));
 $4 = +HEAPF32[$fixtureA + 20 >> 2];
 $5 = +HEAPF32[$fixtureB + 20 >> 2];
 HEAPF32[$call + 140 >> 2] = $4 > $5 ? $4 : $5;
 HEAP32[$call >> 2] = 17080;
 if ((HEAP32[(HEAP32[$fixtureA + 12 >> 2] | 0) + 4 >> 2] | 0) != 2) ___assert_fail(17320, 17096, 41, 17168);
 if ((HEAP32[(HEAP32[$fixtureB + 12 >> 2] | 0) + 4 >> 2] | 0) == 0) {
  $10 = $call;
  STACKTOP = sp;
  return $10 | 0;
 } else ___assert_fail(17200, 17096, 42, 17168);
 return 0;
}
function __ZN22b2EdgeAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA, $0, $fixtureB, $1, $allocator) {
 $fixtureA = $fixtureA | 0;
 $0 = $0 | 0;
 $fixtureB = $fixtureB | 0;
 $1 = $1 | 0;
 $allocator = $allocator | 0;
 var $10 = 0, $4 = 0.0, $5 = 0.0, $call = 0, $m_friction$i$i = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $call = __ZN16b2BlockAllocator8AllocateEi($allocator, 144) | 0;
 if (($call | 0) == 0) {
  $10 = 0;
  STACKTOP = sp;
  return $10 | 0;
 }
 HEAP32[$call + 4 >> 2] = 4;
 HEAP32[$call + 48 >> 2] = $fixtureA;
 HEAP32[$call + 52 >> 2] = $fixtureB;
 HEAP32[$call + 56 >> 2] = 0;
 HEAP32[$call + 60 >> 2] = 0;
 HEAP32[$call + 124 >> 2] = 0;
 HEAP32[$call + 128 >> 2] = 0;
 $m_friction$i$i = $fixtureA + 16 | 0;
 dest = $call + 8 | 0;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAPF32[$call + 136 >> 2] = +Math_sqrt(+(+HEAPF32[$m_friction$i$i >> 2] * +HEAPF32[$fixtureB + 16 >> 2]));
 $4 = +HEAPF32[$fixtureA + 20 >> 2];
 $5 = +HEAPF32[$fixtureB + 20 >> 2];
 HEAPF32[$call + 140 >> 2] = $4 > $5 ? $4 : $5;
 HEAP32[$call >> 2] = 16704;
 if ((HEAP32[(HEAP32[$fixtureA + 12 >> 2] | 0) + 4 >> 2] | 0) != 1) ___assert_fail(16880, 16720, 41, 16784);
 if ((HEAP32[(HEAP32[$fixtureB + 12 >> 2] | 0) + 4 >> 2] | 0) == 0) {
  $10 = $call;
  STACKTOP = sp;
  return $10 | 0;
 } else ___assert_fail(17200, 16720, 42, 16784);
 return 0;
}
function __ZN23b2EdgeAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA, $0, $fixtureB, $1, $allocator) {
 $fixtureA = $fixtureA | 0;
 $0 = $0 | 0;
 $fixtureB = $fixtureB | 0;
 $1 = $1 | 0;
 $allocator = $allocator | 0;
 var $10 = 0, $4 = 0.0, $5 = 0.0, $call = 0, $m_friction$i$i = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $call = __ZN16b2BlockAllocator8AllocateEi($allocator, 144) | 0;
 if (($call | 0) == 0) {
  $10 = 0;
  STACKTOP = sp;
  return $10 | 0;
 }
 HEAP32[$call + 4 >> 2] = 4;
 HEAP32[$call + 48 >> 2] = $fixtureA;
 HEAP32[$call + 52 >> 2] = $fixtureB;
 HEAP32[$call + 56 >> 2] = 0;
 HEAP32[$call + 60 >> 2] = 0;
 HEAP32[$call + 124 >> 2] = 0;
 HEAP32[$call + 128 >> 2] = 0;
 $m_friction$i$i = $fixtureA + 16 | 0;
 dest = $call + 8 | 0;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAPF32[$call + 136 >> 2] = +Math_sqrt(+(+HEAPF32[$m_friction$i$i >> 2] * +HEAPF32[$fixtureB + 16 >> 2]));
 $4 = +HEAPF32[$fixtureA + 20 >> 2];
 $5 = +HEAPF32[$fixtureB + 20 >> 2];
 HEAPF32[$call + 140 >> 2] = $4 > $5 ? $4 : $5;
 HEAP32[$call >> 2] = 16864;
 if ((HEAP32[(HEAP32[$fixtureA + 12 >> 2] | 0) + 4 >> 2] | 0) != 1) ___assert_fail(16880, 16928, 41, 17e3);
 if ((HEAP32[(HEAP32[$fixtureB + 12 >> 2] | 0) + 4 >> 2] | 0) == 2) {
  $10 = $call;
  STACKTOP = sp;
  return $10 | 0;
 } else ___assert_fail(17456, 16928, 42, 17e3);
 return 0;
}
function __ZN16b2PolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA, $0, $fixtureB, $1, $allocator) {
 $fixtureA = $fixtureA | 0;
 $0 = $0 | 0;
 $fixtureB = $fixtureB | 0;
 $1 = $1 | 0;
 $allocator = $allocator | 0;
 var $10 = 0, $4 = 0.0, $5 = 0.0, $call = 0, $m_friction$i$i = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $call = __ZN16b2BlockAllocator8AllocateEi($allocator, 144) | 0;
 if (($call | 0) == 0) {
  $10 = 0;
  STACKTOP = sp;
  return $10 | 0;
 }
 HEAP32[$call + 4 >> 2] = 4;
 HEAP32[$call + 48 >> 2] = $fixtureA;
 HEAP32[$call + 52 >> 2] = $fixtureB;
 HEAP32[$call + 56 >> 2] = 0;
 HEAP32[$call + 60 >> 2] = 0;
 HEAP32[$call + 124 >> 2] = 0;
 HEAP32[$call + 128 >> 2] = 0;
 $m_friction$i$i = $fixtureA + 16 | 0;
 dest = $call + 8 | 0;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAPF32[$call + 136 >> 2] = +Math_sqrt(+(+HEAPF32[$m_friction$i$i >> 2] * +HEAPF32[$fixtureB + 16 >> 2]));
 $4 = +HEAPF32[$fixtureA + 20 >> 2];
 $5 = +HEAPF32[$fixtureB + 20 >> 2];
 HEAPF32[$call + 140 >> 2] = $4 > $5 ? $4 : $5;
 HEAP32[$call >> 2] = 17304;
 if ((HEAP32[(HEAP32[$fixtureA + 12 >> 2] | 0) + 4 >> 2] | 0) != 2) ___assert_fail(17320, 17368, 44, 17432);
 if ((HEAP32[(HEAP32[$fixtureB + 12 >> 2] | 0) + 4 >> 2] | 0) == 2) {
  $10 = $call;
  STACKTOP = sp;
  return $10 | 0;
 } else ___assert_fail(17456, 17368, 45, 17432);
 return 0;
}
function _emscripten_bind_b2World_GetTreeBalance_0($self) {
 $self = $self | 0;
 var $0 = 0, $1 = 0, $3 = 0, $cond$i9$i$i = 0, $i$012$i$i = 0, $maxBalance$0$lcssa$i$i = 0, $maxBalance$013$i$i = 0, $maxBalance$1$i$i = 0, $sub$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self + 102884 >> 2] | 0;
 if (($0 | 0) <= 0) {
  $maxBalance$0$lcssa$i$i = 0;
  STACKTOP = sp;
  return $maxBalance$0$lcssa$i$i | 0;
 }
 $1 = HEAP32[$self + 102876 >> 2] | 0;
 $i$012$i$i = 0;
 $maxBalance$013$i$i = 0;
 while (1) {
  if ((HEAP32[$1 + ($i$012$i$i * 36 | 0) + 32 >> 2] | 0) < 2) $maxBalance$1$i$i = $maxBalance$013$i$i; else {
   $3 = HEAP32[$1 + ($i$012$i$i * 36 | 0) + 24 >> 2] | 0;
   if (($3 | 0) == -1) {
    label = 5;
    break;
   }
   $sub$i$i = (HEAP32[$1 + ((HEAP32[$1 + ($i$012$i$i * 36 | 0) + 28 >> 2] | 0) * 36 | 0) + 32 >> 2] | 0) - (HEAP32[$1 + ($3 * 36 | 0) + 32 >> 2] | 0) | 0;
   $cond$i9$i$i = ($sub$i$i | 0) > 0 ? $sub$i$i : 0 - $sub$i$i | 0;
   $maxBalance$1$i$i = ($maxBalance$013$i$i | 0) > ($cond$i9$i$i | 0) ? $maxBalance$013$i$i : $cond$i9$i$i;
  }
  $i$012$i$i = $i$012$i$i + 1 | 0;
  if (($i$012$i$i | 0) >= ($0 | 0)) {
   $maxBalance$0$lcssa$i$i = $maxBalance$1$i$i;
   label = 8;
   break;
  } else $maxBalance$013$i$i = $maxBalance$1$i$i;
 }
 if ((label | 0) == 5) ___assert_fail(6224, 5696, 686, 6248); else if ((label | 0) == 8) {
  STACKTOP = sp;
  return $maxBalance$0$lcssa$i$i | 0;
 }
 return 0;
}
function __ZN15b2CircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA, $0, $fixtureB, $1, $allocator) {
 $fixtureA = $fixtureA | 0;
 $0 = $0 | 0;
 $fixtureB = $fixtureB | 0;
 $1 = $1 | 0;
 $allocator = $allocator | 0;
 var $10 = 0, $4 = 0.0, $5 = 0.0, $call = 0, $m_friction$i$i = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $call = __ZN16b2BlockAllocator8AllocateEi($allocator, 144) | 0;
 if (($call | 0) == 0) {
  $10 = 0;
  STACKTOP = sp;
  return $10 | 0;
 }
 HEAP32[$call + 4 >> 2] = 4;
 HEAP32[$call + 48 >> 2] = $fixtureA;
 HEAP32[$call + 52 >> 2] = $fixtureB;
 HEAP32[$call + 56 >> 2] = 0;
 HEAP32[$call + 60 >> 2] = 0;
 HEAP32[$call + 124 >> 2] = 0;
 HEAP32[$call + 128 >> 2] = 0;
 $m_friction$i$i = $fixtureA + 16 | 0;
 dest = $call + 8 | 0;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAPF32[$call + 136 >> 2] = +Math_sqrt(+(+HEAPF32[$m_friction$i$i >> 2] * +HEAPF32[$fixtureB + 16 >> 2]));
 $4 = +HEAPF32[$fixtureA + 20 >> 2];
 $5 = +HEAPF32[$fixtureB + 20 >> 2];
 HEAPF32[$call + 140 >> 2] = $4 > $5 ? $4 : $5;
 HEAP32[$call >> 2] = 15328;
 if ((HEAP32[(HEAP32[$fixtureA + 12 >> 2] | 0) + 4 >> 2] | 0) != 0) ___assert_fail(15344, 15392, 44, 15456);
 if ((HEAP32[(HEAP32[$fixtureB + 12 >> 2] | 0) + 4 >> 2] | 0) == 0) {
  $10 = $call;
  STACKTOP = sp;
  return $10 | 0;
 } else ___assert_fail(17200, 15392, 45, 15456);
 return 0;
}
function _emscripten_bind_b2WheelJointDef_b2WheelJointDef_0() {
 var $0 = 0, $call$i = 0, $call$lcssa$i = 0, $call4$i = 0, $exception$i = 0, $x$i$i$i = 0, $x$i3$i$i = 0, sp = 0;
 sp = STACKTOP;
 $call4$i = _malloc(64) | 0;
 L1 : do if (($call4$i | 0) == 0) {
  while (1) {
   $0 = HEAP32[5378] | 0;
   HEAP32[5378] = $0 + 0;
   if (($0 | 0) == 0) break;
   FUNCTION_TABLE_v[$0 & 63]();
   $call$i = _malloc(64) | 0;
   if (($call$i | 0) != 0) {
    $call$lcssa$i = $call$i;
    break L1;
   }
  }
  $exception$i = ___cxa_allocate_exception(4) | 0;
  HEAP32[$exception$i >> 2] = 21352;
  ___cxa_throw($exception$i | 0, 21400, 111);
 } else $call$lcssa$i = $call4$i; while (0);
 HEAP32[$call$lcssa$i + 0 >> 2] = 0;
 HEAP32[$call$lcssa$i + 4 >> 2] = 0;
 HEAP32[$call$lcssa$i + 8 >> 2] = 0;
 HEAP32[$call$lcssa$i + 12 >> 2] = 0;
 HEAP8[$call$lcssa$i + 16 >> 0] = 0;
 HEAP32[$call$lcssa$i >> 2] = 7;
 $x$i3$i$i = $call$lcssa$i + 20 | 0;
 $x$i$i$i = $call$lcssa$i + 36 | 0;
 HEAP32[$x$i3$i$i + 0 >> 2] = 0;
 HEAP32[$x$i3$i$i + 4 >> 2] = 0;
 HEAP32[$x$i3$i$i + 8 >> 2] = 0;
 HEAP32[$x$i3$i$i + 12 >> 2] = 0;
 HEAPF32[$x$i$i$i >> 2] = 1.0;
 HEAPF32[$call$lcssa$i + 40 >> 2] = 0.0;
 HEAP8[$call$lcssa$i + 44 >> 0] = 0;
 HEAPF32[$call$lcssa$i + 48 >> 2] = 0.0;
 HEAPF32[$call$lcssa$i + 52 >> 2] = 0.0;
 HEAPF32[$call$lcssa$i + 56 >> 2] = 2.0;
 HEAPF32[$call$lcssa$i + 60 >> 2] = .699999988079071;
 STACKTOP = sp;
 return $call$lcssa$i | 0;
}
function __ZN8b2Island6ReportEPK27b2ContactVelocityConstraint($this, $constraints) {
 $this = $this | 0;
 $constraints = $constraints | 0;
 var $3 = 0, $4 = 0, $7 = 0, $count = 0, $i$015 = 0, $impulse = 0, $j$013 = 0, $m_contactCount = 0, $m_contacts = 0, $m_listener = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $impulse = sp;
 $m_listener = $this + 4 | 0;
 if ((HEAP32[$m_listener >> 2] | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 $m_contactCount = $this + 36 | 0;
 if ((HEAP32[$m_contactCount >> 2] | 0) <= 0) {
  STACKTOP = sp;
  return;
 }
 $m_contacts = $this + 12 | 0;
 $count = $impulse + 16 | 0;
 $i$015 = 0;
 do {
  $3 = HEAP32[(HEAP32[$m_contacts >> 2] | 0) + ($i$015 << 2) >> 2] | 0;
  $4 = HEAP32[$constraints + ($i$015 * 152 | 0) + 144 >> 2] | 0;
  HEAP32[$count >> 2] = $4;
  if (($4 | 0) > 0) {
   $j$013 = 0;
   do {
    HEAPF32[$impulse + ($j$013 << 2) >> 2] = +HEAPF32[$constraints + ($i$015 * 152 | 0) + ($j$013 * 36 | 0) + 16 >> 2];
    HEAPF32[$impulse + ($j$013 << 2) + 8 >> 2] = +HEAPF32[$constraints + ($i$015 * 152 | 0) + ($j$013 * 36 | 0) + 20 >> 2];
    $j$013 = $j$013 + 1 | 0;
   } while (($j$013 | 0) < ($4 | 0));
  }
  $7 = HEAP32[$m_listener >> 2] | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$7 >> 2] | 0) + 20 >> 2] & 63]($7, $3, $impulse);
  $i$015 = $i$015 + 1 | 0;
 } while (($i$015 | 0) < (HEAP32[$m_contactCount >> 2] | 0));
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2World_GetTreeQuality_0($self) {
 $self = $self | 0;
 var $0 = 0, $1 = 0, $6 = 0, $i$015$i$i = 0, $mul$i$i$i = 0.0, $retval$0$i$i = 0.0, $totalArea$0$lcssa$i$i = 0.0, $totalArea$014$i$i = 0.0, $totalArea$1$i$i = 0.0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self + 102872 >> 2] | 0;
 if (($0 | 0) == -1) {
  $retval$0$i$i = 0.0;
  STACKTOP = sp;
  return +$retval$0$i$i;
 }
 $1 = HEAP32[$self + 102876 >> 2] | 0;
 $mul$i$i$i = (+HEAPF32[$1 + ($0 * 36 | 0) + 8 >> 2] - +HEAPF32[$1 + ($0 * 36 | 0) >> 2] + (+HEAPF32[$1 + ($0 * 36 | 0) + 12 >> 2] - +HEAPF32[$1 + ($0 * 36 | 0) + 4 >> 2])) * 2.0;
 $6 = HEAP32[$self + 102884 >> 2] | 0;
 if (($6 | 0) > 0) {
  $i$015$i$i = 0;
  $totalArea$014$i$i = 0.0;
  while (1) {
   if ((HEAP32[$1 + ($i$015$i$i * 36 | 0) + 32 >> 2] | 0) < 0) $totalArea$1$i$i = $totalArea$014$i$i; else $totalArea$1$i$i = $totalArea$014$i$i + (+HEAPF32[$1 + ($i$015$i$i * 36 | 0) + 8 >> 2] - +HEAPF32[$1 + ($i$015$i$i * 36 | 0) >> 2] + (+HEAPF32[$1 + ($i$015$i$i * 36 | 0) + 12 >> 2] - +HEAPF32[$1 + ($i$015$i$i * 36 | 0) + 4 >> 2])) * 2.0;
   $i$015$i$i = $i$015$i$i + 1 | 0;
   if (($i$015$i$i | 0) >= ($6 | 0)) {
    $totalArea$0$lcssa$i$i = $totalArea$1$i$i;
    break;
   } else $totalArea$014$i$i = $totalArea$1$i$i;
  }
 } else $totalArea$0$lcssa$i$i = 0.0;
 $retval$0$i$i = $totalArea$0$lcssa$i$i / $mul$i$i$i;
 STACKTOP = sp;
 return +$retval$0$i$i;
}
function _emscripten_bind_b2RevoluteJointDef_b2RevoluteJointDef_0() {
 var $0 = 0, $call$i = 0, $call$lcssa$i = 0, $call4$i = 0, $exception$i = 0, $x$i1$i$i = 0, sp = 0;
 sp = STACKTOP;
 $call4$i = _malloc(64) | 0;
 L1 : do if (($call4$i | 0) == 0) {
  while (1) {
   $0 = HEAP32[5378] | 0;
   HEAP32[5378] = $0 + 0;
   if (($0 | 0) == 0) break;
   FUNCTION_TABLE_v[$0 & 63]();
   $call$i = _malloc(64) | 0;
   if (($call$i | 0) != 0) {
    $call$lcssa$i = $call$i;
    break L1;
   }
  }
  $exception$i = ___cxa_allocate_exception(4) | 0;
  HEAP32[$exception$i >> 2] = 21352;
  ___cxa_throw($exception$i | 0, 21400, 111);
 } else $call$lcssa$i = $call4$i; while (0);
 HEAP32[$call$lcssa$i + 0 >> 2] = 0;
 HEAP32[$call$lcssa$i + 4 >> 2] = 0;
 HEAP32[$call$lcssa$i + 8 >> 2] = 0;
 HEAP32[$call$lcssa$i + 12 >> 2] = 0;
 HEAP8[$call$lcssa$i + 16 >> 0] = 0;
 HEAP32[$call$lcssa$i >> 2] = 1;
 $x$i1$i$i = $call$lcssa$i + 20 | 0;
 HEAPF32[$call$lcssa$i + 44 >> 2] = 0.0;
 HEAPF32[$call$lcssa$i + 48 >> 2] = 0.0;
 HEAPF32[$call$lcssa$i + 60 >> 2] = 0.0;
 HEAPF32[$call$lcssa$i + 56 >> 2] = 0.0;
 HEAP8[$call$lcssa$i + 52 >> 0] = 0;
 HEAP32[$x$i1$i$i + 0 >> 2] = 0;
 HEAP32[$x$i1$i$i + 4 >> 2] = 0;
 HEAP32[$x$i1$i$i + 8 >> 2] = 0;
 HEAP32[$x$i1$i$i + 12 >> 2] = 0;
 HEAP32[$x$i1$i$i + 16 >> 2] = 0;
 HEAP8[$x$i1$i$i + 20 >> 0] = 0;
 STACKTOP = sp;
 return $call$lcssa$i | 0;
}
function _emscripten_bind_b2PulleyJointDef_b2PulleyJointDef_0() {
 var $0 = 0, $call$i = 0, $call$lcssa$i = 0, $call4$i = 0, $exception$i = 0, sp = 0;
 sp = STACKTOP;
 $call4$i = _malloc(64) | 0;
 L1 : do if (($call4$i | 0) == 0) {
  while (1) {
   $0 = HEAP32[5378] | 0;
   HEAP32[5378] = $0 + 0;
   if (($0 | 0) == 0) break;
   FUNCTION_TABLE_v[$0 & 63]();
   $call$i = _malloc(64) | 0;
   if (($call$i | 0) != 0) {
    $call$lcssa$i = $call$i;
    break L1;
   }
  }
  $exception$i = ___cxa_allocate_exception(4) | 0;
  HEAP32[$exception$i >> 2] = 21352;
  ___cxa_throw($exception$i | 0, 21400, 111);
 } else $call$lcssa$i = $call4$i; while (0);
 HEAP32[$call$lcssa$i + 0 >> 2] = 0;
 HEAP32[$call$lcssa$i + 4 >> 2] = 0;
 HEAP32[$call$lcssa$i + 8 >> 2] = 0;
 HEAP32[$call$lcssa$i + 12 >> 2] = 0;
 HEAP32[$call$lcssa$i >> 2] = 4;
 HEAPF32[$call$lcssa$i + 20 >> 2] = -1.0;
 HEAPF32[$call$lcssa$i + 24 >> 2] = 1.0;
 HEAPF32[$call$lcssa$i + 28 >> 2] = 1.0;
 HEAPF32[$call$lcssa$i + 32 >> 2] = 1.0;
 HEAPF32[$call$lcssa$i + 36 >> 2] = -1.0;
 HEAPF32[$call$lcssa$i + 40 >> 2] = 0.0;
 HEAPF32[$call$lcssa$i + 44 >> 2] = 1.0;
 HEAPF32[$call$lcssa$i + 48 >> 2] = 0.0;
 HEAPF32[$call$lcssa$i + 52 >> 2] = 0.0;
 HEAPF32[$call$lcssa$i + 56 >> 2] = 0.0;
 HEAPF32[$call$lcssa$i + 60 >> 2] = 1.0;
 HEAP8[$call$lcssa$i + 16 >> 0] = 1;
 STACKTOP = sp;
 return $call$lcssa$i | 0;
}
function __ZN8b2IslandC2EiiiP16b2StackAllocatorP17b2ContactListener($this, $bodyCapacity, $contactCapacity, $jointCapacity, $allocator, $listener) {
 $this = $this | 0;
 $bodyCapacity = $bodyCapacity | 0;
 $contactCapacity = $contactCapacity | 0;
 $jointCapacity = $jointCapacity | 0;
 $allocator = $allocator | 0;
 $listener = $listener | 0;
 var $m_bodyCapacity = 0, sp = 0;
 sp = STACKTOP;
 $m_bodyCapacity = $this + 40 | 0;
 HEAP32[$m_bodyCapacity >> 2] = $bodyCapacity;
 HEAP32[$this + 44 >> 2] = $contactCapacity;
 HEAP32[$this + 48 >> 2] = $jointCapacity;
 HEAP32[$this + 28 >> 2] = 0;
 HEAP32[$this + 36 >> 2] = 0;
 HEAP32[$this + 32 >> 2] = 0;
 HEAP32[$this >> 2] = $allocator;
 HEAP32[$this + 4 >> 2] = $listener;
 HEAP32[$this + 8 >> 2] = __ZN16b2StackAllocator8AllocateEi($allocator, $bodyCapacity << 2) | 0;
 HEAP32[$this + 12 >> 2] = __ZN16b2StackAllocator8AllocateEi(HEAP32[$this >> 2] | 0, $contactCapacity << 2) | 0;
 HEAP32[$this + 16 >> 2] = __ZN16b2StackAllocator8AllocateEi(HEAP32[$this >> 2] | 0, $jointCapacity << 2) | 0;
 HEAP32[$this + 24 >> 2] = __ZN16b2StackAllocator8AllocateEi(HEAP32[$this >> 2] | 0, (HEAP32[$m_bodyCapacity >> 2] | 0) * 12 | 0) | 0;
 HEAP32[$this + 20 >> 2] = __ZN16b2StackAllocator8AllocateEi(HEAP32[$this >> 2] | 0, (HEAP32[$m_bodyCapacity >> 2] | 0) * 12 | 0) | 0;
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2Mat33_b2Mat33_3($arg0, $arg1, $arg2) {
 $arg0 = $arg0 | 0;
 $arg1 = $arg1 | 0;
 $arg2 = $arg2 | 0;
 var $0 = 0, $call$i = 0, $call$lcssa$i = 0, $call4$i = 0, $exception$i = 0, $ey$i$i = 0, $ez$i$i = 0, sp = 0;
 sp = STACKTOP;
 $call4$i = _malloc(36) | 0;
 L1 : do if (($call4$i | 0) == 0) {
  while (1) {
   $0 = HEAP32[5378] | 0;
   HEAP32[5378] = $0 + 0;
   if (($0 | 0) == 0) break;
   FUNCTION_TABLE_v[$0 & 63]();
   $call$i = _malloc(36) | 0;
   if (($call$i | 0) != 0) {
    $call$lcssa$i = $call$i;
    break L1;
   }
  }
  $exception$i = ___cxa_allocate_exception(4) | 0;
  HEAP32[$exception$i >> 2] = 21352;
  ___cxa_throw($exception$i | 0, 21400, 111);
 } else $call$lcssa$i = $call4$i; while (0);
 $ey$i$i = $call$lcssa$i + 12 | 0;
 $ez$i$i = $call$lcssa$i + 24 | 0;
 HEAP32[$call$lcssa$i + 0 >> 2] = HEAP32[$arg0 + 0 >> 2];
 HEAP32[$call$lcssa$i + 4 >> 2] = HEAP32[$arg0 + 4 >> 2];
 HEAP32[$call$lcssa$i + 8 >> 2] = HEAP32[$arg0 + 8 >> 2];
 HEAP32[$ey$i$i + 0 >> 2] = HEAP32[$arg1 + 0 >> 2];
 HEAP32[$ey$i$i + 4 >> 2] = HEAP32[$arg1 + 4 >> 2];
 HEAP32[$ey$i$i + 8 >> 2] = HEAP32[$arg1 + 8 >> 2];
 HEAP32[$ez$i$i + 0 >> 2] = HEAP32[$arg2 + 0 >> 2];
 HEAP32[$ez$i$i + 4 >> 2] = HEAP32[$arg2 + 4 >> 2];
 HEAP32[$ez$i$i + 8 >> 2] = HEAP32[$arg2 + 8 >> 2];
 STACKTOP = sp;
 return $call$lcssa$i | 0;
}
function _emscripten_bind_b2RevoluteJointDef_Initialize_3($self, $arg0, $arg1, $arg2) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 $arg1 = $arg1 | 0;
 $arg2 = $arg2 | 0;
 var $17 = 0.0, $18 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $4 = 0.0, $5 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, $sub$i$i$i = 0.0, $sub$i$i6$i = 0.0, $sub4$i$i$i = 0.0, $sub4$i$i9$i = 0.0, $y$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$self + 8 >> 2] = $arg0;
 HEAP32[$self + 12 >> 2] = $arg1;
 $sub$i$i$i = +HEAPF32[$arg2 >> 2] - +HEAPF32[$arg0 + 12 >> 2];
 $y$i$i$i = $arg2 + 4 | 0;
 $sub4$i$i$i = +HEAPF32[$y$i$i$i >> 2] - +HEAPF32[$arg0 + 16 >> 2];
 $4 = +HEAPF32[$arg0 + 24 >> 2];
 $5 = +HEAPF32[$arg0 + 20 >> 2];
 $7 = +($sub$i$i$i * $4 + $sub4$i$i$i * $5);
 $8 = +($4 * $sub4$i$i$i - $sub$i$i$i * $5);
 $9 = $self + 20 | 0;
 HEAPF32[$9 >> 2] = $7;
 HEAPF32[$9 + 4 >> 2] = $8;
 $sub$i$i6$i = +HEAPF32[$arg2 >> 2] - +HEAPF32[$arg1 + 12 >> 2];
 $sub4$i$i9$i = +HEAPF32[$y$i$i$i >> 2] - +HEAPF32[$arg1 + 16 >> 2];
 $17 = +HEAPF32[$arg1 + 24 >> 2];
 $18 = +HEAPF32[$arg1 + 20 >> 2];
 $20 = +($sub$i$i6$i * $17 + $sub4$i$i9$i * $18);
 $21 = +($17 * $sub4$i$i9$i - $sub$i$i6$i * $18);
 $22 = $self + 28 | 0;
 HEAPF32[$22 >> 2] = $20;
 HEAPF32[$22 + 4 >> 2] = $21;
 HEAPF32[$self + 36 >> 2] = +HEAPF32[$arg1 + 56 >> 2] - +HEAPF32[$arg0 + 56 >> 2];
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2WeldJointDef_Initialize_3($self, $arg0, $arg1, $arg2) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 $arg1 = $arg1 | 0;
 $arg2 = $arg2 | 0;
 var $17 = 0.0, $18 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $4 = 0.0, $5 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, $sub$i$i$i = 0.0, $sub$i$i6$i = 0.0, $sub4$i$i$i = 0.0, $sub4$i$i9$i = 0.0, $y$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$self + 8 >> 2] = $arg0;
 HEAP32[$self + 12 >> 2] = $arg1;
 $sub$i$i$i = +HEAPF32[$arg2 >> 2] - +HEAPF32[$arg0 + 12 >> 2];
 $y$i$i$i = $arg2 + 4 | 0;
 $sub4$i$i$i = +HEAPF32[$y$i$i$i >> 2] - +HEAPF32[$arg0 + 16 >> 2];
 $4 = +HEAPF32[$arg0 + 24 >> 2];
 $5 = +HEAPF32[$arg0 + 20 >> 2];
 $7 = +($sub$i$i$i * $4 + $sub4$i$i$i * $5);
 $8 = +($4 * $sub4$i$i$i - $sub$i$i$i * $5);
 $9 = $self + 20 | 0;
 HEAPF32[$9 >> 2] = $7;
 HEAPF32[$9 + 4 >> 2] = $8;
 $sub$i$i6$i = +HEAPF32[$arg2 >> 2] - +HEAPF32[$arg1 + 12 >> 2];
 $sub4$i$i9$i = +HEAPF32[$y$i$i$i >> 2] - +HEAPF32[$arg1 + 16 >> 2];
 $17 = +HEAPF32[$arg1 + 24 >> 2];
 $18 = +HEAPF32[$arg1 + 20 >> 2];
 $20 = +($sub$i$i6$i * $17 + $sub4$i$i9$i * $18);
 $21 = +($17 * $sub4$i$i9$i - $sub$i$i6$i * $18);
 $22 = $self + 28 | 0;
 HEAPF32[$22 >> 2] = $20;
 HEAPF32[$22 + 4 >> 2] = $21;
 HEAPF32[$self + 36 >> 2] = +HEAPF32[$arg1 + 56 >> 2] - +HEAPF32[$arg0 + 56 >> 2];
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2BodyDef_b2BodyDef_0() {
 var $0 = 0, $2 = 0, $call$i = 0, $call$lcssa$i = 0, $call4$i = 0, $exception$i = 0, $x$i1$i$i = 0, sp = 0;
 sp = STACKTOP;
 $call4$i = _malloc(52) | 0;
 L1 : do if (($call4$i | 0) == 0) {
  while (1) {
   $0 = HEAP32[5378] | 0;
   HEAP32[5378] = $0 + 0;
   if (($0 | 0) == 0) break;
   FUNCTION_TABLE_v[$0 & 63]();
   $call$i = _malloc(52) | 0;
   if (($call$i | 0) != 0) {
    $call$lcssa$i = $call$i;
    break L1;
   }
  }
  $exception$i = ___cxa_allocate_exception(4) | 0;
  HEAP32[$exception$i >> 2] = 21352;
  ___cxa_throw($exception$i | 0, 21400, 111);
 } else $call$lcssa$i = $call4$i; while (0);
 HEAP32[$call$lcssa$i + 44 >> 2] = 0;
 $x$i1$i$i = $call$lcssa$i + 4 | 0;
 $2 = $call$lcssa$i + 36 | 0;
 HEAP32[$x$i1$i$i + 0 >> 2] = 0;
 HEAP32[$x$i1$i$i + 4 >> 2] = 0;
 HEAP32[$x$i1$i$i + 8 >> 2] = 0;
 HEAP32[$x$i1$i$i + 12 >> 2] = 0;
 HEAP32[$x$i1$i$i + 16 >> 2] = 0;
 HEAP32[$x$i1$i$i + 20 >> 2] = 0;
 HEAP32[$x$i1$i$i + 24 >> 2] = 0;
 HEAP32[$x$i1$i$i + 28 >> 2] = 0;
 HEAP8[$2 >> 0] = 1;
 HEAP8[$call$lcssa$i + 37 >> 0] = 1;
 HEAP8[$call$lcssa$i + 38 >> 0] = 0;
 HEAP8[$call$lcssa$i + 39 >> 0] = 0;
 HEAP32[$call$lcssa$i >> 2] = 0;
 HEAP8[$call$lcssa$i + 40 >> 0] = 1;
 HEAPF32[$call$lcssa$i + 48 >> 2] = 1.0;
 STACKTOP = sp;
 return $call$lcssa$i | 0;
}
function __ZNK7b2Mat337Solve33ERK6b2Vec3($agg$result, $this, $b) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $b = $b | 0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $add6$i100 = 0.0, $det$0 = 0.0, $sub$i = 0.0, $sub16$i = 0.0, $sub9$i = 0.0;
 $0 = +HEAPF32[$this + 16 >> 2];
 $1 = +HEAPF32[$this + 32 >> 2];
 $2 = +HEAPF32[$this + 20 >> 2];
 $3 = +HEAPF32[$this + 28 >> 2];
 $sub$i = $0 * $1 - $2 * $3;
 $4 = +HEAPF32[$this + 24 >> 2];
 $5 = +HEAPF32[$this + 12 >> 2];
 $sub9$i = $2 * $4 - $1 * $5;
 $sub16$i = $3 * $5 - $0 * $4;
 $6 = +HEAPF32[$this >> 2];
 $7 = +HEAPF32[$this + 4 >> 2];
 $8 = +HEAPF32[$this + 8 >> 2];
 $add6$i100 = $sub$i * $6 + $7 * $sub9$i + $sub16$i * $8;
 if ($add6$i100 != 0.0) $det$0 = 1.0 / $add6$i100; else $det$0 = $add6$i100;
 $9 = +HEAPF32[$b >> 2];
 $10 = +HEAPF32[$b + 4 >> 2];
 $11 = +HEAPF32[$b + 8 >> 2];
 HEAPF32[$agg$result >> 2] = $det$0 * ($sub$i * $9 + $10 * $sub9$i + $sub16$i * $11);
 HEAPF32[$agg$result + 4 >> 2] = $det$0 * (($10 * $1 - $11 * $3) * $6 + $7 * ($11 * $4 - $1 * $9) + ($3 * $9 - $10 * $4) * $8);
 HEAPF32[$agg$result + 8 >> 2] = $det$0 * (($0 * $11 - $2 * $10) * $6 + $7 * ($2 * $9 - $11 * $5) + ($10 * $5 - $0 * $9) * $8);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $1 = 0, $add$ptr = 0, $p$0 = 0, $search_done = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($info, $adjustedPtr, $path_below);
  STACKTOP = sp;
  return;
 }
 $1 = HEAP32[$this + 12 >> 2] | 0;
 $add$ptr = $this + ($1 << 3) + 16 | 0;
 __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this + 16 | 0, $info, $adjustedPtr, $path_below);
 if (($1 | 0) <= 1) {
  STACKTOP = sp;
  return;
 }
 $search_done = $info + 54 | 0;
 $p$0 = $this + 24 | 0;
 while (1) {
  __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($p$0, $info, $adjustedPtr, $path_below);
  if ((HEAP8[$search_done >> 0] | 0) != 0) {
   label = 7;
   break;
  }
  $p$0 = $p$0 + 8 | 0;
  if (!($p$0 >>> 0 < $add$ptr >>> 0)) {
   label = 7;
   break;
  }
 }
 if ((label | 0) == 7) {
  STACKTOP = sp;
  return;
 }
}
function __ZNK11b2EdgeShape11ComputeAABBEP6b2AABBRK11b2Transformi($this, $aabb, $xf, $childIndex) {
 $this = $this | 0;
 $aabb = $aabb | 0;
 $xf = $xf | 0;
 $childIndex = $childIndex | 0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $add$i = 0.0, $add$i40 = 0.0, $add17$i = 0.0, $add17$i45 = 0.0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF32[$xf + 12 >> 2];
 $1 = +HEAPF32[$this + 12 >> 2];
 $2 = +HEAPF32[$xf + 8 >> 2];
 $3 = +HEAPF32[$this + 16 >> 2];
 $4 = +HEAPF32[$xf >> 2];
 $add$i = $4 + ($0 * $1 - $2 * $3);
 $5 = +HEAPF32[$xf + 4 >> 2];
 $add17$i = $1 * $2 + $0 * $3 + $5;
 $6 = +HEAPF32[$this + 20 >> 2];
 $7 = +HEAPF32[$this + 24 >> 2];
 $add$i40 = $4 + ($0 * $6 - $2 * $7);
 $add17$i45 = $5 + ($2 * $6 + $0 * $7);
 $8 = +HEAPF32[$this + 8 >> 2];
 $9 = +(($add$i < $add$i40 ? $add$i : $add$i40) - $8);
 $10 = +(($add17$i < $add17$i45 ? $add17$i : $add17$i45) - $8);
 $11 = $aabb;
 HEAPF32[$11 >> 2] = $9;
 HEAPF32[$11 + 4 >> 2] = $10;
 $15 = +($8 + ($add$i > $add$i40 ? $add$i : $add$i40));
 $16 = +($8 + ($add17$i > $add17$i45 ? $add17$i : $add17$i45));
 $17 = $aabb + 8 | 0;
 HEAPF32[$17 >> 2] = $15;
 HEAPF32[$17 + 4 >> 2] = $16;
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2DistanceJointDef_b2DistanceJointDef_0() {
 var $0 = 0, $call$i = 0, $call$lcssa$i = 0, $call4$i = 0, $exception$i = 0, $length$i$i = 0, $x$i1$i$i = 0, sp = 0;
 sp = STACKTOP;
 $call4$i = _malloc(48) | 0;
 L1 : do if (($call4$i | 0) == 0) {
  while (1) {
   $0 = HEAP32[5378] | 0;
   HEAP32[5378] = $0 + 0;
   if (($0 | 0) == 0) break;
   FUNCTION_TABLE_v[$0 & 63]();
   $call$i = _malloc(48) | 0;
   if (($call$i | 0) != 0) {
    $call$lcssa$i = $call$i;
    break L1;
   }
  }
  $exception$i = ___cxa_allocate_exception(4) | 0;
  HEAP32[$exception$i >> 2] = 21352;
  ___cxa_throw($exception$i | 0, 21400, 111);
 } else $call$lcssa$i = $call4$i; while (0);
 HEAP32[$call$lcssa$i + 0 >> 2] = 0;
 HEAP32[$call$lcssa$i + 4 >> 2] = 0;
 HEAP32[$call$lcssa$i + 8 >> 2] = 0;
 HEAP32[$call$lcssa$i + 12 >> 2] = 0;
 HEAP8[$call$lcssa$i + 16 >> 0] = 0;
 HEAP32[$call$lcssa$i >> 2] = 3;
 $x$i1$i$i = $call$lcssa$i + 20 | 0;
 $length$i$i = $call$lcssa$i + 36 | 0;
 HEAP32[$x$i1$i$i + 0 >> 2] = 0;
 HEAP32[$x$i1$i$i + 4 >> 2] = 0;
 HEAP32[$x$i1$i$i + 8 >> 2] = 0;
 HEAP32[$x$i1$i$i + 12 >> 2] = 0;
 HEAPF32[$length$i$i >> 2] = 1.0;
 HEAPF32[$call$lcssa$i + 40 >> 2] = 0.0;
 HEAPF32[$call$lcssa$i + 44 >> 2] = 0.0;
 STACKTOP = sp;
 return $call$lcssa$i | 0;
}
function __ZN16b2StackAllocator8AllocateEi($this, $size) {
 $this = $this | 0;
 $size = $size | 0;
 var $0 = 0, $1 = 0, $4 = 0, $add$ptr = 0, $add13 = 0, $m_allocation = 0, $m_entryCount = 0, $m_index = 0, $m_maxAllocation = 0, sp = 0;
 sp = STACKTOP;
 $m_entryCount = $this + 102796 | 0;
 $0 = HEAP32[$m_entryCount >> 2] | 0;
 if (($0 | 0) >= 32) ___assert_fail(11272, 11176, 38, 11312);
 $add$ptr = $this + ($0 * 12 | 0) + 102412 | 0;
 HEAP32[$this + ($0 * 12 | 0) + 102416 >> 2] = $size;
 $m_index = $this + 102400 | 0;
 $1 = HEAP32[$m_index >> 2] | 0;
 if (($1 + $size | 0) > 102400) {
  HEAP32[$add$ptr >> 2] = _malloc($size) | 0;
  HEAP8[$this + ($0 * 12 | 0) + 102420 >> 0] = 1;
 } else {
  HEAP32[$add$ptr >> 2] = $this + $1;
  HEAP8[$this + ($0 * 12 | 0) + 102420 >> 0] = 0;
  HEAP32[$m_index >> 2] = (HEAP32[$m_index >> 2] | 0) + $size;
 }
 $m_allocation = $this + 102404 | 0;
 $add13 = (HEAP32[$m_allocation >> 2] | 0) + $size | 0;
 HEAP32[$m_allocation >> 2] = $add13;
 $m_maxAllocation = $this + 102408 | 0;
 $4 = HEAP32[$m_maxAllocation >> 2] | 0;
 HEAP32[$m_maxAllocation >> 2] = ($4 | 0) > ($add13 | 0) ? $4 : $add13;
 HEAP32[$m_entryCount >> 2] = (HEAP32[$m_entryCount >> 2] | 0) + 1;
 STACKTOP = sp;
 return HEAP32[$add$ptr >> 2] | 0;
}
function _emscripten_bind_b2FrictionJointDef_Initialize_3($self, $arg0, $arg1, $arg2) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 $arg1 = $arg1 | 0;
 $arg2 = $arg2 | 0;
 var $17 = 0.0, $18 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $4 = 0.0, $5 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, $sub$i$i$i = 0.0, $sub$i$i5$i = 0.0, $sub4$i$i$i = 0.0, $sub4$i$i8$i = 0.0, $y$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$self + 8 >> 2] = $arg0;
 HEAP32[$self + 12 >> 2] = $arg1;
 $sub$i$i$i = +HEAPF32[$arg2 >> 2] - +HEAPF32[$arg0 + 12 >> 2];
 $y$i$i$i = $arg2 + 4 | 0;
 $sub4$i$i$i = +HEAPF32[$y$i$i$i >> 2] - +HEAPF32[$arg0 + 16 >> 2];
 $4 = +HEAPF32[$arg0 + 24 >> 2];
 $5 = +HEAPF32[$arg0 + 20 >> 2];
 $7 = +($sub$i$i$i * $4 + $sub4$i$i$i * $5);
 $8 = +($4 * $sub4$i$i$i - $sub$i$i$i * $5);
 $9 = $self + 20 | 0;
 HEAPF32[$9 >> 2] = $7;
 HEAPF32[$9 + 4 >> 2] = $8;
 $sub$i$i5$i = +HEAPF32[$arg2 >> 2] - +HEAPF32[$arg1 + 12 >> 2];
 $sub4$i$i8$i = +HEAPF32[$y$i$i$i >> 2] - +HEAPF32[$arg1 + 16 >> 2];
 $17 = +HEAPF32[$arg1 + 24 >> 2];
 $18 = +HEAPF32[$arg1 + 20 >> 2];
 $20 = +($sub$i$i5$i * $17 + $sub4$i$i8$i * $18);
 $21 = +($17 * $sub4$i$i8$i - $sub$i$i5$i * $18);
 $22 = $self + 28 | 0;
 HEAPF32[$22 >> 2] = $20;
 HEAPF32[$22 + 4 >> 2] = $21;
 STACKTOP = sp;
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this, $thrown_type, $adjustedPtr) {
 $this = $this | 0;
 $thrown_type = $thrown_type | 0;
 $adjustedPtr = $adjustedPtr | 0;
 var $1 = 0, $info = 0, $retval$1 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $info = sp;
 if (($this | 0) == ($thrown_type | 0)) {
  $retval$1 = 1;
  STACKTOP = sp;
  return $retval$1 | 0;
 }
 if (($thrown_type | 0) == 0) {
  $retval$1 = 0;
  STACKTOP = sp;
  return $retval$1 | 0;
 }
 $1 = ___dynamic_cast($thrown_type, 21664) | 0;
 if (($1 | 0) == 0) {
  $retval$1 = 0;
  STACKTOP = sp;
  return $retval$1 | 0;
 }
 dest = $info + 0 | 0;
 stop = dest + 56 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$info >> 2] = $1;
 HEAP32[$info + 8 >> 2] = $this;
 HEAP32[$info + 12 >> 2] = -1;
 HEAP32[$info + 48 >> 2] = 1;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$1 >> 2] | 0) + 28 >> 2] & 63]($1, $info, HEAP32[$adjustedPtr >> 2] | 0, 1);
 if ((HEAP32[$info + 24 >> 2] | 0) != 1) {
  $retval$1 = 0;
  STACKTOP = sp;
  return $retval$1 | 0;
 }
 HEAP32[$adjustedPtr >> 2] = HEAP32[$info + 16 >> 2];
 $retval$1 = 1;
 STACKTOP = sp;
 return $retval$1 | 0;
}
function __ZNK7b2Mat3315GetSymInverse33EPS_($this, $M) {
 $this = $this | 0;
 $M = $M | 0;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $add6$i = 0.0, $det$0 = 0.0, $mul$i = 0.0, $mul18 = 0.0, $mul24 = 0.0, $mul40 = 0.0, $mul8$i = 0.0, $sub16$i = 0.0;
 $0 = +HEAPF32[$this + 16 >> 2];
 $1 = +HEAPF32[$this + 32 >> 2];
 $mul$i = $0 * $1;
 $2 = +HEAPF32[$this + 20 >> 2];
 $3 = +HEAPF32[$this + 28 >> 2];
 $4 = +HEAPF32[$this + 24 >> 2];
 $5 = +HEAPF32[$this + 12 >> 2];
 $mul8$i = $1 * $5;
 $sub16$i = $3 * $5 - $0 * $4;
 $6 = +HEAPF32[$this >> 2];
 $add6$i = ($mul$i - $2 * $3) * $6 + +HEAPF32[$this + 4 >> 2] * ($2 * $4 - $mul8$i) + $sub16$i * +HEAPF32[$this + 8 >> 2];
 if ($add6$i != 0.0) $det$0 = 1.0 / $add6$i; else $det$0 = $add6$i;
 HEAPF32[$M >> 2] = $det$0 * ($mul$i - $3 * $3);
 $mul18 = $det$0 * ($4 * $3 - $mul8$i);
 HEAPF32[$M + 4 >> 2] = $mul18;
 $mul24 = $det$0 * $sub16$i;
 HEAPF32[$M + 8 >> 2] = $mul24;
 HEAPF32[$M + 12 >> 2] = $mul18;
 HEAPF32[$M + 16 >> 2] = $det$0 * ($6 * $1 - $4 * $4);
 $mul40 = $det$0 * ($5 * $4 - $6 * $3);
 HEAPF32[$M + 20 >> 2] = $mul40;
 HEAPF32[$M + 24 >> 2] = $mul24;
 HEAPF32[$M + 28 >> 2] = $mul40;
 HEAPF32[$M + 32 >> 2] = $det$0 * ($6 * $0 - $5 * $5);
 return;
}
function __ZN11b2GearJoint4DumpEv($this) {
 $this = $this | 0;
 var $1 = 0, $3 = 0, $5 = 0, $7 = 0, $vararg_buffer18 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer18 = sp;
 $1 = HEAP32[(HEAP32[$this + 48 >> 2] | 0) + 8 >> 2] | 0;
 $3 = HEAP32[(HEAP32[$this + 52 >> 2] | 0) + 8 >> 2] | 0;
 $5 = HEAP32[(HEAP32[$this + 68 >> 2] | 0) + 56 >> 2] | 0;
 $7 = HEAP32[(HEAP32[$this + 72 >> 2] | 0) + 56 >> 2] | 0;
 __Z5b2LogPKcz(18352, $vararg_buffer18);
 HEAP32[$vararg_buffer18 >> 2] = $1;
 __Z5b2LogPKcz(20504, $vararg_buffer18);
 HEAP32[$vararg_buffer18 >> 2] = $3;
 __Z5b2LogPKcz(20536, $vararg_buffer18);
 HEAP32[$vararg_buffer18 >> 2] = HEAPU8[$this + 61 >> 0];
 __Z5b2LogPKcz(20568, $vararg_buffer18);
 HEAP32[$vararg_buffer18 >> 2] = $5;
 __Z5b2LogPKcz(18376, $vararg_buffer18);
 HEAP32[$vararg_buffer18 >> 2] = $7;
 __Z5b2LogPKcz(18408, $vararg_buffer18);
 HEAPF64[tempDoublePtr >> 3] = +HEAPF32[$this + 152 >> 2];
 HEAP32[$vararg_buffer18 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$vararg_buffer18 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 __Z5b2LogPKcz(19800, $vararg_buffer18);
 HEAP32[$vararg_buffer18 >> 2] = HEAP32[$this + 56 >> 2];
 __Z5b2LogPKcz(20904, $vararg_buffer18);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2Body_ApplyLinearImpulse_2($self, $arg0, $arg1) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 $arg1 = $arg1 | 0;
 var $1 = 0, $2 = 0.0, $conv$i$i = 0, $m_angularVelocity$i = 0, $m_flags$i$i = 0, $mul1$i$i = 0.0, $x2$i6$i = 0, $y$i10$i = 0, $y3$i$i = 0, sp = 0;
 sp = STACKTOP;
 if ((HEAP32[$self >> 2] | 0) != 2) {
  STACKTOP = sp;
  return;
 }
 $m_flags$i$i = $self + 4 | 0;
 $1 = HEAP16[$m_flags$i$i >> 1] | 0;
 if (($1 & 2) == 0) {
  $conv$i$i = $1 & 65535;
  if (($conv$i$i & 2 | 0) == 0) {
   HEAP16[$m_flags$i$i >> 1] = $conv$i$i | 2;
   HEAPF32[$self + 144 >> 2] = 0.0;
  }
 }
 $2 = +HEAPF32[$self + 120 >> 2];
 $y$i10$i = $arg0 + 4 | 0;
 $mul1$i$i = $2 * +HEAPF32[$y$i10$i >> 2];
 $x2$i6$i = $self + 64 | 0;
 HEAPF32[$x2$i6$i >> 2] = $2 * +HEAPF32[$arg0 >> 2] + +HEAPF32[$x2$i6$i >> 2];
 $y3$i$i = $self + 68 | 0;
 HEAPF32[$y3$i$i >> 2] = $mul1$i$i + +HEAPF32[$y3$i$i >> 2];
 $m_angularVelocity$i = $self + 72 | 0;
 HEAPF32[$m_angularVelocity$i >> 2] = +HEAPF32[$m_angularVelocity$i >> 2] + +HEAPF32[$self + 128 >> 2] * ((+HEAPF32[$arg1 >> 2] - +HEAPF32[$self + 44 >> 2]) * +HEAPF32[$y$i10$i >> 2] - (+HEAPF32[$arg1 + 4 >> 2] - +HEAPF32[$self + 48 >> 2]) * +HEAPF32[$arg0 >> 2]);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2WeldJointDef_b2WeldJointDef_0() {
 var $0 = 0, $call$i = 0, $call$lcssa$i = 0, $call4$i = 0, $exception$i = 0, $x$i1$i$i = 0, sp = 0;
 sp = STACKTOP;
 $call4$i = _malloc(48) | 0;
 L1 : do if (($call4$i | 0) == 0) {
  while (1) {
   $0 = HEAP32[5378] | 0;
   HEAP32[5378] = $0 + 0;
   if (($0 | 0) == 0) break;
   FUNCTION_TABLE_v[$0 & 63]();
   $call$i = _malloc(48) | 0;
   if (($call$i | 0) != 0) {
    $call$lcssa$i = $call$i;
    break L1;
   }
  }
  $exception$i = ___cxa_allocate_exception(4) | 0;
  HEAP32[$exception$i >> 2] = 21352;
  ___cxa_throw($exception$i | 0, 21400, 111);
 } else $call$lcssa$i = $call4$i; while (0);
 HEAP32[$call$lcssa$i + 0 >> 2] = 0;
 HEAP32[$call$lcssa$i + 4 >> 2] = 0;
 HEAP32[$call$lcssa$i + 8 >> 2] = 0;
 HEAP32[$call$lcssa$i + 12 >> 2] = 0;
 HEAP8[$call$lcssa$i + 16 >> 0] = 0;
 HEAP32[$call$lcssa$i >> 2] = 8;
 $x$i1$i$i = $call$lcssa$i + 20 | 0;
 HEAP32[$x$i1$i$i + 0 >> 2] = 0;
 HEAP32[$x$i1$i$i + 4 >> 2] = 0;
 HEAP32[$x$i1$i$i + 8 >> 2] = 0;
 HEAP32[$x$i1$i$i + 12 >> 2] = 0;
 HEAP32[$x$i1$i$i + 16 >> 2] = 0;
 HEAP32[$x$i1$i$i + 20 >> 2] = 0;
 HEAP32[$x$i1$i$i + 24 >> 2] = 0;
 STACKTOP = sp;
 return $call$lcssa$i | 0;
}
function __ZN15b2ContactSolver12IndexOverlapEPiS0_($indexA, $indexB) {
 $indexA = $indexA | 0;
 $indexB = $indexB | 0;
 var $0 = 0, $9 = 0, $i$014 = 0, $j$012 = 0, $retval$0 = 0, $values = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $values = sp;
 $0 = HEAP32[$indexA >> 2] | 0;
 HEAP32[$values >> 2] = $0;
 HEAP32[$values + 4 >> 2] = HEAP32[$indexA + 4 >> 2];
 HEAP32[$values + 8 >> 2] = HEAP32[$indexA + 8 >> 2];
 HEAP32[$values + 12 >> 2] = HEAP32[$indexA + 12 >> 2];
 HEAP32[$values + 16 >> 2] = HEAP32[$indexB >> 2];
 HEAP32[$values + 20 >> 2] = HEAP32[$indexB + 4 >> 2];
 HEAP32[$values + 24 >> 2] = HEAP32[$indexB + 8 >> 2];
 HEAP32[$values + 28 >> 2] = HEAP32[$indexB + 12 >> 2];
 $9 = $0;
 $i$014 = 1;
 L1 : while (1) {
  $j$012 = $i$014;
  do {
   if (($9 | 0) == (HEAP32[$values + ($j$012 << 2) >> 2] | 0)) {
    $retval$0 = 1;
    label = 7;
    break L1;
   }
   $j$012 = $j$012 + 1 | 0;
  } while (($j$012 | 0) < 8);
  if (($i$014 | 0) >= 7) {
   $retval$0 = 0;
   label = 7;
   break;
  }
  $9 = HEAP32[$values + ($i$014 << 2) >> 2] | 0;
  $i$014 = $i$014 + 1 | 0;
 }
 if ((label | 0) == 7) {
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 return 0;
}
function _emscripten_bind_b2FrictionJointDef_b2FrictionJointDef_0() {
 var $0 = 0, $call$i = 0, $call$lcssa$i = 0, $call4$i = 0, $exception$i = 0, $x$i1$i$i = 0, sp = 0;
 sp = STACKTOP;
 $call4$i = _malloc(44) | 0;
 L1 : do if (($call4$i | 0) == 0) {
  while (1) {
   $0 = HEAP32[5378] | 0;
   HEAP32[5378] = $0 + 0;
   if (($0 | 0) == 0) break;
   FUNCTION_TABLE_v[$0 & 63]();
   $call$i = _malloc(44) | 0;
   if (($call$i | 0) != 0) {
    $call$lcssa$i = $call$i;
    break L1;
   }
  }
  $exception$i = ___cxa_allocate_exception(4) | 0;
  HEAP32[$exception$i >> 2] = 21352;
  ___cxa_throw($exception$i | 0, 21400, 111);
 } else $call$lcssa$i = $call4$i; while (0);
 HEAP32[$call$lcssa$i + 0 >> 2] = 0;
 HEAP32[$call$lcssa$i + 4 >> 2] = 0;
 HEAP32[$call$lcssa$i + 8 >> 2] = 0;
 HEAP32[$call$lcssa$i + 12 >> 2] = 0;
 HEAP8[$call$lcssa$i + 16 >> 0] = 0;
 HEAP32[$call$lcssa$i >> 2] = 9;
 $x$i1$i$i = $call$lcssa$i + 20 | 0;
 HEAP32[$x$i1$i$i + 0 >> 2] = 0;
 HEAP32[$x$i1$i$i + 4 >> 2] = 0;
 HEAP32[$x$i1$i$i + 8 >> 2] = 0;
 HEAP32[$x$i1$i$i + 12 >> 2] = 0;
 HEAP32[$x$i1$i$i + 16 >> 2] = 0;
 HEAP32[$x$i1$i$i + 20 >> 2] = 0;
 STACKTOP = sp;
 return $call$lcssa$i | 0;
}
function __ZN16b2StackAllocator4FreeEPv($this, $p) {
 $this = $this | 0;
 $p = $p | 0;
 var $0 = 0, $7 = 0, $add$ptr$sum = 0, $m_allocation = 0, $m_entryCount = 0, $m_index = 0, $size = 0, $size8$pre$phiZ2D = 0, sp = 0;
 sp = STACKTOP;
 $m_entryCount = $this + 102796 | 0;
 $0 = HEAP32[$m_entryCount >> 2] | 0;
 if (($0 | 0) <= 0) ___assert_fail(11328, 11176, 63, 11352);
 $add$ptr$sum = $0 + -1 | 0;
 if ((HEAP32[$this + ($add$ptr$sum * 12 | 0) + 102412 >> 2] | 0) != ($p | 0)) ___assert_fail(11360, 11176, 65, 11352);
 if ((HEAP8[$this + ($add$ptr$sum * 12 | 0) + 102420 >> 0] | 0) == 0) {
  $size = $this + ($add$ptr$sum * 12 | 0) + 102416 | 0;
  $m_index = $this + 102400 | 0;
  HEAP32[$m_index >> 2] = (HEAP32[$m_index >> 2] | 0) - (HEAP32[$size >> 2] | 0);
  $7 = $0;
  $size8$pre$phiZ2D = $size;
 } else {
  _free($p);
  $7 = HEAP32[$m_entryCount >> 2] | 0;
  $size8$pre$phiZ2D = $this + ($add$ptr$sum * 12 | 0) + 102416 | 0;
 }
 $m_allocation = $this + 102404 | 0;
 HEAP32[$m_allocation >> 2] = (HEAP32[$m_allocation >> 2] | 0) - (HEAP32[$size8$pre$phiZ2D >> 2] | 0);
 HEAP32[$m_entryCount >> 2] = $7 + -1;
 STACKTOP = sp;
 return;
}
function __ZNK14b2PolygonShape9TestPointERK11b2TransformRK6b2Vec2($this, $xf, $p) {
 $this = $this | 0;
 $xf = $xf | 0;
 $p = $p | 0;
 var $4 = 0.0, $5 = 0.0, $7 = 0, $add$i20 = 0.0, $add8$i = 0.0, $i$024 = 0, $retval$0 = 0, $sub$i = 0.0, $sub3$i = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub$i = +HEAPF32[$p >> 2] - +HEAPF32[$xf >> 2];
 $sub3$i = +HEAPF32[$p + 4 >> 2] - +HEAPF32[$xf + 4 >> 2];
 $4 = +HEAPF32[$xf + 12 >> 2];
 $5 = +HEAPF32[$xf + 8 >> 2];
 $add$i20 = $sub$i * $4 + $sub3$i * $5;
 $add8$i = $4 * $sub3$i - $sub$i * $5;
 $7 = HEAP32[$this + 148 >> 2] | 0;
 if (($7 | 0) > 0) $i$024 = 0; else {
  $retval$0 = 1;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 while (1) {
  if (($add$i20 - +HEAPF32[$this + ($i$024 << 3) + 20 >> 2]) * +HEAPF32[$this + ($i$024 << 3) + 84 >> 2] + ($add8$i - +HEAPF32[$this + ($i$024 << 3) + 24 >> 2]) * +HEAPF32[$this + ($i$024 << 3) + 88 >> 2] > 0.0) {
   $retval$0 = 0;
   label = 4;
   break;
  }
  $i$024 = $i$024 + 1 | 0;
  if (($i$024 | 0) >= ($7 | 0)) {
   $retval$0 = 1;
   label = 4;
   break;
  }
 }
 if ((label | 0) == 4) {
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 return 0;
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($info, $adjustedPtr, $path_below) {
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $0 = 0, $dst_ptr_leading_to_static_ptr = 0, $number_to_static_ptr11 = 0, $path_dst_ptr_to_static_ptr6 = 0, sp = 0;
 sp = STACKTOP;
 $dst_ptr_leading_to_static_ptr = $info + 16 | 0;
 $0 = HEAP32[$dst_ptr_leading_to_static_ptr >> 2] | 0;
 if (($0 | 0) == 0) {
  HEAP32[$dst_ptr_leading_to_static_ptr >> 2] = $adjustedPtr;
  HEAP32[$info + 24 >> 2] = $path_below;
  HEAP32[$info + 36 >> 2] = 1;
  STACKTOP = sp;
  return;
 }
 if (($0 | 0) != ($adjustedPtr | 0)) {
  $number_to_static_ptr11 = $info + 36 | 0;
  HEAP32[$number_to_static_ptr11 >> 2] = (HEAP32[$number_to_static_ptr11 >> 2] | 0) + 1;
  HEAP32[$info + 24 >> 2] = 2;
  HEAP8[$info + 54 >> 0] = 1;
  STACKTOP = sp;
  return;
 }
 $path_dst_ptr_to_static_ptr6 = $info + 24 | 0;
 if ((HEAP32[$path_dst_ptr_to_static_ptr6 >> 2] | 0) != 2) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$path_dst_ptr_to_static_ptr6 >> 2] = $path_below;
 STACKTOP = sp;
 return;
}
function __ZN6b2Body19SynchronizeFixturesEv($this) {
 $this = $this | 0;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $call$i = 0.0, $call2$i = 0.0, $f$010 = 0, $f$012 = 0, $m_broadPhase = 0, $m_xf = 0, $xf1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $xf1 = sp;
 $0 = +HEAPF32[$this + 52 >> 2];
 $call$i = +Math_sin(+$0);
 HEAPF32[$xf1 + 8 >> 2] = $call$i;
 $call2$i = +Math_cos(+$0);
 HEAPF32[$xf1 + 12 >> 2] = $call2$i;
 $1 = +HEAPF32[$this + 28 >> 2];
 $2 = +HEAPF32[$this + 32 >> 2];
 $5 = +(+HEAPF32[$this + 36 >> 2] - ($call2$i * $1 - $call$i * $2));
 $6 = +(+HEAPF32[$this + 40 >> 2] - ($1 * $call$i + $call2$i * $2));
 $7 = $xf1;
 HEAPF32[$7 >> 2] = $5;
 HEAPF32[$7 + 4 >> 2] = $6;
 $m_broadPhase = (HEAP32[$this + 88 >> 2] | 0) + 102872 | 0;
 $f$010 = HEAP32[$this + 100 >> 2] | 0;
 if (($f$010 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 $m_xf = $this + 12 | 0;
 $f$012 = $f$010;
 do {
  __ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4_($f$012, $m_broadPhase, $xf1, $m_xf);
  $f$012 = HEAP32[$f$012 + 4 >> 2] | 0;
 } while (($f$012 | 0) != 0);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2MouseJointDef_b2MouseJointDef_0() {
 var $0 = 0, $call$i = 0, $call$lcssa$i = 0, $call4$i = 0, $exception$i = 0, sp = 0;
 sp = STACKTOP;
 $call4$i = _malloc(40) | 0;
 L1 : do if (($call4$i | 0) == 0) {
  while (1) {
   $0 = HEAP32[5378] | 0;
   HEAP32[5378] = $0 + 0;
   if (($0 | 0) == 0) break;
   FUNCTION_TABLE_v[$0 & 63]();
   $call$i = _malloc(40) | 0;
   if (($call$i | 0) != 0) {
    $call$lcssa$i = $call$i;
    break L1;
   }
  }
  $exception$i = ___cxa_allocate_exception(4) | 0;
  HEAP32[$exception$i >> 2] = 21352;
  ___cxa_throw($exception$i | 0, 21400, 111);
 } else $call$lcssa$i = $call4$i; while (0);
 HEAP32[$call$lcssa$i + 0 >> 2] = 0;
 HEAP32[$call$lcssa$i + 4 >> 2] = 0;
 HEAP32[$call$lcssa$i + 8 >> 2] = 0;
 HEAP32[$call$lcssa$i + 12 >> 2] = 0;
 HEAP8[$call$lcssa$i + 16 >> 0] = 0;
 HEAP32[$call$lcssa$i >> 2] = 5;
 HEAPF32[$call$lcssa$i + 20 >> 2] = 0.0;
 HEAPF32[$call$lcssa$i + 24 >> 2] = 0.0;
 HEAPF32[$call$lcssa$i + 28 >> 2] = 0.0;
 HEAPF32[$call$lcssa$i + 32 >> 2] = 5.0;
 HEAPF32[$call$lcssa$i + 36 >> 2] = .699999988079071;
 STACKTOP = sp;
 return $call$lcssa$i | 0;
}
function _emscripten_bind_b2RopeJointDef_b2RopeJointDef_0() {
 var $0 = 0, $call$i = 0, $call$lcssa$i = 0, $call4$i = 0, $exception$i = 0, sp = 0;
 sp = STACKTOP;
 $call4$i = _malloc(40) | 0;
 L1 : do if (($call4$i | 0) == 0) {
  while (1) {
   $0 = HEAP32[5378] | 0;
   HEAP32[5378] = $0 + 0;
   if (($0 | 0) == 0) break;
   FUNCTION_TABLE_v[$0 & 63]();
   $call$i = _malloc(40) | 0;
   if (($call$i | 0) != 0) {
    $call$lcssa$i = $call$i;
    break L1;
   }
  }
  $exception$i = ___cxa_allocate_exception(4) | 0;
  HEAP32[$exception$i >> 2] = 21352;
  ___cxa_throw($exception$i | 0, 21400, 111);
 } else $call$lcssa$i = $call4$i; while (0);
 HEAP32[$call$lcssa$i + 0 >> 2] = 0;
 HEAP32[$call$lcssa$i + 4 >> 2] = 0;
 HEAP32[$call$lcssa$i + 8 >> 2] = 0;
 HEAP32[$call$lcssa$i + 12 >> 2] = 0;
 HEAP8[$call$lcssa$i + 16 >> 0] = 0;
 HEAP32[$call$lcssa$i >> 2] = 10;
 HEAPF32[$call$lcssa$i + 20 >> 2] = -1.0;
 HEAPF32[$call$lcssa$i + 24 >> 2] = 0.0;
 HEAPF32[$call$lcssa$i + 28 >> 2] = 1.0;
 HEAPF32[$call$lcssa$i + 32 >> 2] = 0.0;
 HEAPF32[$call$lcssa$i + 36 >> 2] = 0.0;
 STACKTOP = sp;
 return $call$lcssa$i | 0;
}
function _emscripten_bind_b2PrismaticJoint_SetLimits_2($self, $arg0, $arg1) {
 $self = $self | 0;
 $arg0 = +$arg0;
 $arg1 = +$arg1;
 var $2 = 0, $4 = 0, $conv$i$i = 0, $conv$i6$i = 0, $m_flags$i$i = 0, $m_flags$i5$i = 0, $m_lowerTranslation$i = 0, sp = 0;
 sp = STACKTOP;
 if (!($arg0 <= $arg1)) ___assert_fail(19904, 19184, 575, 19976);
 $m_lowerTranslation$i = $self + 120 | 0;
 if (!(+HEAPF32[$m_lowerTranslation$i >> 2] != $arg0)) if (!(+HEAPF32[$self + 124 >> 2] != $arg1)) {
  STACKTOP = sp;
  return;
 }
 $2 = HEAP32[$self + 48 >> 2] | 0;
 $m_flags$i$i = $2 + 4 | 0;
 $conv$i$i = HEAPU16[$m_flags$i$i >> 1] | 0;
 if (($conv$i$i & 2 | 0) == 0) {
  HEAP16[$m_flags$i$i >> 1] = $conv$i$i | 2;
  HEAPF32[$2 + 144 >> 2] = 0.0;
 }
 $4 = HEAP32[$self + 52 >> 2] | 0;
 $m_flags$i5$i = $4 + 4 | 0;
 $conv$i6$i = HEAPU16[$m_flags$i5$i >> 1] | 0;
 if (($conv$i6$i & 2 | 0) == 0) {
  HEAP16[$m_flags$i5$i >> 1] = $conv$i6$i | 2;
  HEAPF32[$4 + 144 >> 2] = 0.0;
 }
 HEAPF32[$m_lowerTranslation$i >> 2] = $arg0;
 HEAPF32[$self + 124 >> 2] = $arg1;
 HEAPF32[$self + 112 >> 2] = 0.0;
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2RevoluteJoint_SetLimits_2($self, $arg0, $arg1) {
 $self = $self | 0;
 $arg0 = +$arg0;
 $arg1 = +$arg1;
 var $2 = 0, $4 = 0, $conv$i$i = 0, $conv$i6$i = 0, $m_flags$i$i = 0, $m_flags$i5$i = 0, $m_lowerAngle$i = 0, sp = 0;
 sp = STACKTOP;
 if (!($arg0 <= $arg1)) ___assert_fail(19904, 19920, 473, 19976);
 $m_lowerAngle$i = $self + 120 | 0;
 if (!(+HEAPF32[$m_lowerAngle$i >> 2] != $arg0)) if (!(+HEAPF32[$self + 124 >> 2] != $arg1)) {
  STACKTOP = sp;
  return;
 }
 $2 = HEAP32[$self + 48 >> 2] | 0;
 $m_flags$i$i = $2 + 4 | 0;
 $conv$i$i = HEAPU16[$m_flags$i$i >> 1] | 0;
 if (($conv$i$i & 2 | 0) == 0) {
  HEAP16[$m_flags$i$i >> 1] = $conv$i$i | 2;
  HEAPF32[$2 + 144 >> 2] = 0.0;
 }
 $4 = HEAP32[$self + 52 >> 2] | 0;
 $m_flags$i5$i = $4 + 4 | 0;
 $conv$i6$i = HEAPU16[$m_flags$i5$i >> 1] | 0;
 if (($conv$i6$i & 2 | 0) == 0) {
  HEAP16[$m_flags$i5$i >> 1] = $conv$i6$i | 2;
  HEAPF32[$4 + 144 >> 2] = 0.0;
 }
 HEAPF32[$self + 92 >> 2] = 0.0;
 HEAPF32[$m_lowerAngle$i >> 2] = $arg0;
 HEAPF32[$self + 124 >> 2] = $arg1;
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2Body_ApplyForce_2($self, $arg0, $arg1) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 $arg1 = $arg1 | 0;
 var $1 = 0, $conv$i$i = 0, $m_flags$i$i = 0, $m_torque$i = 0, $x2$i6$i = 0, $y$i7$i = 0, $y3$i$i = 0, sp = 0;
 sp = STACKTOP;
 if ((HEAP32[$self >> 2] | 0) != 2) {
  STACKTOP = sp;
  return;
 }
 $m_flags$i$i = $self + 4 | 0;
 $1 = HEAP16[$m_flags$i$i >> 1] | 0;
 if (($1 & 2) == 0) {
  $conv$i$i = $1 & 65535;
  if (($conv$i$i & 2 | 0) == 0) {
   HEAP16[$m_flags$i$i >> 1] = $conv$i$i | 2;
   HEAPF32[$self + 144 >> 2] = 0.0;
  }
 }
 $x2$i6$i = $self + 76 | 0;
 HEAPF32[$x2$i6$i >> 2] = +HEAPF32[$arg0 >> 2] + +HEAPF32[$x2$i6$i >> 2];
 $y$i7$i = $arg0 + 4 | 0;
 $y3$i$i = $self + 80 | 0;
 HEAPF32[$y3$i$i >> 2] = +HEAPF32[$y$i7$i >> 2] + +HEAPF32[$y3$i$i >> 2];
 $m_torque$i = $self + 84 | 0;
 HEAPF32[$m_torque$i >> 2] = +HEAPF32[$m_torque$i >> 2] + ((+HEAPF32[$arg1 >> 2] - +HEAPF32[$self + 44 >> 2]) * +HEAPF32[$y$i7$i >> 2] - (+HEAPF32[$arg1 + 4 >> 2] - +HEAPF32[$self + 48 >> 2]) * +HEAPF32[$arg0 >> 2]);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2Transform_b2Transform_2($arg0, $arg1) {
 $arg0 = $arg0 | 0;
 $arg1 = $arg1 | 0;
 var $0 = 0, $12 = 0, $17 = 0, $18 = 0, $2 = 0, $7 = 0, $8 = 0, $call$i = 0, $call$lcssa$i = 0, $call4$i = 0, $exception$i = 0, sp = 0;
 sp = STACKTOP;
 $call4$i = _malloc(16) | 0;
 L1 : do if (($call4$i | 0) == 0) {
  while (1) {
   $0 = HEAP32[5378] | 0;
   HEAP32[5378] = $0 + 0;
   if (($0 | 0) == 0) break;
   FUNCTION_TABLE_v[$0 & 63]();
   $call$i = _malloc(16) | 0;
   if (($call$i | 0) != 0) {
    $call$lcssa$i = $call$i;
    break L1;
   }
  }
  $exception$i = ___cxa_allocate_exception(4) | 0;
  HEAP32[$exception$i >> 2] = 21352;
  ___cxa_throw($exception$i | 0, 21400, 111);
 } else $call$lcssa$i = $call4$i; while (0);
 $2 = $arg0;
 $7 = HEAP32[$2 + 4 >> 2] | 0;
 $8 = $call$lcssa$i;
 HEAP32[$8 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$8 + 4 >> 2] = $7;
 $12 = $arg1;
 $17 = HEAP32[$12 + 4 >> 2] | 0;
 $18 = $call$lcssa$i + 8 | 0;
 HEAP32[$18 >> 2] = HEAP32[$12 >> 2];
 HEAP32[$18 + 4 >> 2] = $17;
 STACKTOP = sp;
 return $call$lcssa$i | 0;
}
function _emscripten_bind_b2Mat22_b2Mat22_2($arg0, $arg1) {
 $arg0 = $arg0 | 0;
 $arg1 = $arg1 | 0;
 var $0 = 0, $12 = 0, $17 = 0, $18 = 0, $2 = 0, $7 = 0, $8 = 0, $call$i = 0, $call$lcssa$i = 0, $call4$i = 0, $exception$i = 0, sp = 0;
 sp = STACKTOP;
 $call4$i = _malloc(16) | 0;
 L1 : do if (($call4$i | 0) == 0) {
  while (1) {
   $0 = HEAP32[5378] | 0;
   HEAP32[5378] = $0 + 0;
   if (($0 | 0) == 0) break;
   FUNCTION_TABLE_v[$0 & 63]();
   $call$i = _malloc(16) | 0;
   if (($call$i | 0) != 0) {
    $call$lcssa$i = $call$i;
    break L1;
   }
  }
  $exception$i = ___cxa_allocate_exception(4) | 0;
  HEAP32[$exception$i >> 2] = 21352;
  ___cxa_throw($exception$i | 0, 21400, 111);
 } else $call$lcssa$i = $call4$i; while (0);
 $2 = $arg0;
 $7 = HEAP32[$2 + 4 >> 2] | 0;
 $8 = $call$lcssa$i;
 HEAP32[$8 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$8 + 4 >> 2] = $7;
 $12 = $arg1;
 $17 = HEAP32[$12 + 4 >> 2] | 0;
 $18 = $call$lcssa$i + 8 | 0;
 HEAP32[$18 >> 2] = HEAP32[$12 >> 2];
 HEAP32[$18 + 4 >> 2] = $17;
 STACKTOP = sp;
 return $call$lcssa$i | 0;
}
function _emscripten_bind_b2FixtureDef_b2FixtureDef_0() {
 var $0 = 0, $call$i = 0, $call$lcssa$i = 0, $call4$i = 0, $exception$i = 0, sp = 0;
 sp = STACKTOP;
 $call4$i = _malloc(28) | 0;
 L1 : do if (($call4$i | 0) == 0) {
  while (1) {
   $0 = HEAP32[5378] | 0;
   HEAP32[5378] = $0 + 0;
   if (($0 | 0) == 0) break;
   FUNCTION_TABLE_v[$0 & 63]();
   $call$i = _malloc(28) | 0;
   if (($call$i | 0) != 0) {
    $call$lcssa$i = $call$i;
    break L1;
   }
  }
  $exception$i = ___cxa_allocate_exception(4) | 0;
  HEAP32[$exception$i >> 2] = 21352;
  ___cxa_throw($exception$i | 0, 21400, 111);
 } else $call$lcssa$i = $call4$i; while (0);
 HEAP16[$call$lcssa$i + 22 >> 1] = 1;
 HEAP16[$call$lcssa$i + 24 >> 1] = -1;
 HEAP16[$call$lcssa$i + 26 >> 1] = 0;
 HEAP32[$call$lcssa$i >> 2] = 0;
 HEAP32[$call$lcssa$i + 4 >> 2] = 0;
 HEAPF32[$call$lcssa$i + 8 >> 2] = .20000000298023224;
 HEAPF32[$call$lcssa$i + 12 >> 2] = 0.0;
 HEAPF32[$call$lcssa$i + 16 >> 2] = 0.0;
 HEAP8[$call$lcssa$i + 20 >> 0] = 0;
 STACKTOP = sp;
 return $call$lcssa$i | 0;
}
function __ZNK9b2Simplex15GetClosestPointEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $1 = 0, $11 = 0.0, $14 = 0.0, $17 = 0, $6 = 0, $7 = 0, $add3$i = 0.0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this + 108 >> 2] | 0;
 if (($0 | 0) == 1) {
  $1 = $this + 16 | 0;
  $6 = HEAP32[$1 + 4 >> 2] | 0;
  $7 = $agg$result;
  HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$7 + 4 >> 2] = $6;
  STACKTOP = sp;
  return;
 } else if (($0 | 0) == 0) ___assert_fail(18472, 5480, 194, 5608); else if (($0 | 0) == 3) {
  $17 = $agg$result;
  HEAP32[$17 >> 2] = 0;
  HEAP32[$17 + 4 >> 2] = 0;
  STACKTOP = sp;
  return;
 } else if (($0 | 0) == 2) {
  $11 = +HEAPF32[$this + 24 >> 2];
  $14 = +HEAPF32[$this + 60 >> 2];
  $add3$i = $11 * +HEAPF32[$this + 20 >> 2] + $14 * +HEAPF32[$this + 56 >> 2];
  HEAPF32[$agg$result >> 2] = $11 * +HEAPF32[$this + 16 >> 2] + $14 * +HEAPF32[$this + 52 >> 2];
  HEAPF32[$agg$result + 4 >> 2] = $add3$i;
  STACKTOP = sp;
  return;
 } else ___assert_fail(18472, 5480, 207, 5608);
}
function _emscripten_bind_b2GearJointDef_b2GearJointDef_0() {
 var $0 = 0, $call$i = 0, $call$lcssa$i = 0, $call4$i = 0, $exception$i = 0, sp = 0;
 sp = STACKTOP;
 $call4$i = _malloc(32) | 0;
 L1 : do if (($call4$i | 0) == 0) {
  while (1) {
   $0 = HEAP32[5378] | 0;
   HEAP32[5378] = $0 + 0;
   if (($0 | 0) == 0) break;
   FUNCTION_TABLE_v[$0 & 63]();
   $call$i = _malloc(32) | 0;
   if (($call$i | 0) != 0) {
    $call$lcssa$i = $call$i;
    break L1;
   }
  }
  $exception$i = ___cxa_allocate_exception(4) | 0;
  HEAP32[$exception$i >> 2] = 21352;
  ___cxa_throw($exception$i | 0, 21400, 111);
 } else $call$lcssa$i = $call4$i; while (0);
 HEAP32[$call$lcssa$i + 0 >> 2] = 0;
 HEAP32[$call$lcssa$i + 4 >> 2] = 0;
 HEAP32[$call$lcssa$i + 8 >> 2] = 0;
 HEAP32[$call$lcssa$i + 12 >> 2] = 0;
 HEAP8[$call$lcssa$i + 16 >> 0] = 0;
 HEAP32[$call$lcssa$i >> 2] = 6;
 HEAP32[$call$lcssa$i + 20 >> 2] = 0;
 HEAP32[$call$lcssa$i + 24 >> 2] = 0;
 HEAPF32[$call$lcssa$i + 28 >> 2] = 1.0;
 STACKTOP = sp;
 return $call$lcssa$i | 0;
}
function _emscripten_bind_b2EdgeShape_b2EdgeShape_0() {
 var $0 = 0, $call$i = 0, $call$lcssa$i = 0, $call4$i = 0, $exception$i = 0, $x$i$i = 0, sp = 0;
 sp = STACKTOP;
 $call4$i = _malloc(48) | 0;
 L1 : do if (($call4$i | 0) == 0) {
  while (1) {
   $0 = HEAP32[5378] | 0;
   HEAP32[5378] = $0 + 0;
   if (($0 | 0) == 0) break;
   FUNCTION_TABLE_v[$0 & 63]();
   $call$i = _malloc(48) | 0;
   if (($call$i | 0) != 0) {
    $call$lcssa$i = $call$i;
    break L1;
   }
  }
  $exception$i = ___cxa_allocate_exception(4) | 0;
  HEAP32[$exception$i >> 2] = 21352;
  ___cxa_throw($exception$i | 0, 21400, 111);
 } else $call$lcssa$i = $call4$i; while (0);
 HEAP32[$call$lcssa$i >> 2] = 6968;
 HEAP32[$call$lcssa$i + 4 >> 2] = 1;
 HEAPF32[$call$lcssa$i + 8 >> 2] = .009999999776482582;
 $x$i$i = $call$lcssa$i + 28 | 0;
 HEAP32[$x$i$i + 0 >> 2] = 0;
 HEAP32[$x$i$i + 4 >> 2] = 0;
 HEAP32[$x$i$i + 8 >> 2] = 0;
 HEAP32[$x$i$i + 12 >> 2] = 0;
 HEAP16[$x$i$i + 16 >> 1] = 0;
 STACKTOP = sp;
 return $call$lcssa$i | 0;
}
function _emscripten_bind_b2PrismaticJoint_EnableMotor_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0, $2 = 0, $conv$i$i = 0, $conv$i2$i = 0, $frombool2$i = 0, $m_enableMotor$i = 0, $m_flags$i$i = 0, $m_flags$i1$i = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self + 48 >> 2] | 0;
 $m_flags$i$i = $0 + 4 | 0;
 $conv$i$i = HEAPU16[$m_flags$i$i >> 1] | 0;
 if (($conv$i$i & 2 | 0) == 0) {
  HEAP16[$m_flags$i$i >> 1] = $conv$i$i | 2;
  HEAPF32[$0 + 144 >> 2] = 0.0;
 }
 $2 = HEAP32[$self + 52 >> 2] | 0;
 $m_flags$i1$i = $2 + 4 | 0;
 $conv$i2$i = HEAPU16[$m_flags$i1$i >> 1] | 0;
 if (($conv$i2$i & 2 | 0) != 0) {
  $m_enableMotor$i = $self + 137 | 0;
  $frombool2$i = $arg0 & 1;
  HEAP8[$m_enableMotor$i >> 0] = $frombool2$i;
  STACKTOP = sp;
  return;
 }
 HEAP16[$m_flags$i1$i >> 1] = $conv$i2$i | 2;
 HEAPF32[$2 + 144 >> 2] = 0.0;
 $m_enableMotor$i = $self + 137 | 0;
 $frombool2$i = $arg0 & 1;
 HEAP8[$m_enableMotor$i >> 0] = $frombool2$i;
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2RevoluteJoint_EnableMotor_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0, $2 = 0, $conv$i$i = 0, $conv$i2$i = 0, $frombool2$i = 0, $m_enableMotor$i = 0, $m_flags$i$i = 0, $m_flags$i1$i = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self + 48 >> 2] | 0;
 $m_flags$i$i = $0 + 4 | 0;
 $conv$i$i = HEAPU16[$m_flags$i$i >> 1] | 0;
 if (($conv$i$i & 2 | 0) == 0) {
  HEAP16[$m_flags$i$i >> 1] = $conv$i$i | 2;
  HEAPF32[$0 + 144 >> 2] = 0.0;
 }
 $2 = HEAP32[$self + 52 >> 2] | 0;
 $m_flags$i1$i = $2 + 4 | 0;
 $conv$i2$i = HEAPU16[$m_flags$i1$i >> 1] | 0;
 if (($conv$i2$i & 2 | 0) != 0) {
  $m_enableMotor$i = $self + 100 | 0;
  $frombool2$i = $arg0 & 1;
  HEAP8[$m_enableMotor$i >> 0] = $frombool2$i;
  STACKTOP = sp;
  return;
 }
 HEAP16[$m_flags$i1$i >> 1] = $conv$i2$i | 2;
 HEAPF32[$2 + 144 >> 2] = 0.0;
 $m_enableMotor$i = $self + 100 | 0;
 $frombool2$i = $arg0 & 1;
 HEAP8[$m_enableMotor$i >> 0] = $frombool2$i;
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2WheelJoint_EnableMotor_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0, $2 = 0, $conv$i$i = 0, $conv$i2$i = 0, $frombool2$i = 0, $m_enableMotor$i = 0, $m_flags$i$i = 0, $m_flags$i1$i = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self + 48 >> 2] | 0;
 $m_flags$i$i = $0 + 4 | 0;
 $conv$i$i = HEAPU16[$m_flags$i$i >> 1] | 0;
 if (($conv$i$i & 2 | 0) == 0) {
  HEAP16[$m_flags$i$i >> 1] = $conv$i$i | 2;
  HEAPF32[$0 + 144 >> 2] = 0.0;
 }
 $2 = HEAP32[$self + 52 >> 2] | 0;
 $m_flags$i1$i = $2 + 4 | 0;
 $conv$i2$i = HEAPU16[$m_flags$i1$i >> 1] | 0;
 if (($conv$i2$i & 2 | 0) != 0) {
  $m_enableMotor$i = $self + 128 | 0;
  $frombool2$i = $arg0 & 1;
  HEAP8[$m_enableMotor$i >> 0] = $frombool2$i;
  STACKTOP = sp;
  return;
 }
 HEAP16[$m_flags$i1$i >> 1] = $conv$i2$i | 2;
 HEAPF32[$2 + 144 >> 2] = 0.0;
 $m_enableMotor$i = $self + 128 | 0;
 $frombool2$i = $arg0 & 1;
 HEAP8[$m_enableMotor$i >> 0] = $frombool2$i;
 STACKTOP = sp;
 return;
}
function __ZNK9b2Simplex9GetMetricEv($this) {
 $this = $this | 0;
 var $0 = 0, $6 = 0.0, $8 = 0.0, $retval$0 = 0.0, $sub$i$i = 0.0, $sub3$i$i = 0.0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this + 108 >> 2] | 0;
 if (($0 | 0) == 2) {
  $sub$i$i = +HEAPF32[$this + 16 >> 2] - +HEAPF32[$this + 52 >> 2];
  $sub3$i$i = +HEAPF32[$this + 20 >> 2] - +HEAPF32[$this + 56 >> 2];
  $retval$0 = +Math_sqrt(+($sub$i$i * $sub$i$i + $sub3$i$i * $sub3$i$i));
  STACKTOP = sp;
  return +$retval$0;
 } else if (($0 | 0) == 0) ___assert_fail(18472, 5480, 246, 5544); else if (($0 | 0) == 3) {
  $6 = +HEAPF32[$this + 16 >> 2];
  $8 = +HEAPF32[$this + 20 >> 2];
  $retval$0 = (+HEAPF32[$this + 52 >> 2] - $6) * (+HEAPF32[$this + 92 >> 2] - $8) - (+HEAPF32[$this + 56 >> 2] - $8) * (+HEAPF32[$this + 88 >> 2] - $6);
  STACKTOP = sp;
  return +$retval$0;
 } else if (($0 | 0) == 1) {
  $retval$0 = 0.0;
  STACKTOP = sp;
  return +$retval$0;
 } else ___assert_fail(18472, 5480, 259, 5544);
 return 0.0;
}
function _emscripten_bind_b2ChainShape_b2ChainShape_0() {
 var $0 = 0, $call$i = 0, $call$lcssa$i = 0, $call4$i = 0, $exception$i = 0, sp = 0;
 sp = STACKTOP;
 $call4$i = _malloc(40) | 0;
 L1 : do if (($call4$i | 0) == 0) {
  while (1) {
   $0 = HEAP32[5378] | 0;
   HEAP32[5378] = $0 + 0;
   if (($0 | 0) == 0) break;
   FUNCTION_TABLE_v[$0 & 63]();
   $call$i = _malloc(40) | 0;
   if (($call$i | 0) != 0) {
    $call$lcssa$i = $call$i;
    break L1;
   }
  }
  $exception$i = ___cxa_allocate_exception(4) | 0;
  HEAP32[$exception$i >> 2] = 21352;
  ___cxa_throw($exception$i | 0, 21400, 111);
 } else $call$lcssa$i = $call4$i; while (0);
 HEAP32[$call$lcssa$i >> 2] = 6560;
 HEAP32[$call$lcssa$i + 4 >> 2] = 3;
 HEAPF32[$call$lcssa$i + 8 >> 2] = .009999999776482582;
 HEAP32[$call$lcssa$i + 12 >> 2] = 0;
 HEAP32[$call$lcssa$i + 16 >> 2] = 0;
 HEAP8[$call$lcssa$i + 36 >> 0] = 0;
 HEAP8[$call$lcssa$i + 37 >> 0] = 0;
 STACKTOP = sp;
 return $call$lcssa$i | 0;
}
function _emscripten_bind_b2PolygonShape_b2PolygonShape_0() {
 var $0 = 0, $call$i = 0, $call$lcssa$i = 0, $call4$i = 0, $exception$i = 0, sp = 0;
 sp = STACKTOP;
 $call4$i = _malloc(152) | 0;
 L1 : do if (($call4$i | 0) == 0) {
  while (1) {
   $0 = HEAP32[5378] | 0;
   HEAP32[5378] = $0 + 0;
   if (($0 | 0) == 0) break;
   FUNCTION_TABLE_v[$0 & 63]();
   $call$i = _malloc(152) | 0;
   if (($call$i | 0) != 0) {
    $call$lcssa$i = $call$i;
    break L1;
   }
  }
  $exception$i = ___cxa_allocate_exception(4) | 0;
  HEAP32[$exception$i >> 2] = 21352;
  ___cxa_throw($exception$i | 0, 21400, 111);
 } else $call$lcssa$i = $call4$i; while (0);
 HEAP32[$call$lcssa$i >> 2] = 7336;
 HEAP32[$call$lcssa$i + 4 >> 2] = 2;
 HEAPF32[$call$lcssa$i + 8 >> 2] = .009999999776482582;
 HEAP32[$call$lcssa$i + 148 >> 2] = 0;
 HEAPF32[$call$lcssa$i + 12 >> 2] = 0.0;
 HEAPF32[$call$lcssa$i + 16 >> 2] = 0.0;
 STACKTOP = sp;
 return $call$lcssa$i | 0;
}
function __ZN24b2ChainAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_($this, $manifold, $xfA, $xfB) {
 $this = $this | 0;
 $manifold = $manifold | 0;
 $xfA = $xfA | 0;
 $xfB = $xfB | 0;
 var $1 = 0, $edge = 0, $x$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $edge = sp;
 $1 = HEAP32[(HEAP32[$this + 48 >> 2] | 0) + 12 >> 2] | 0;
 HEAP32[$edge >> 2] = 6968;
 HEAP32[$edge + 4 >> 2] = 1;
 HEAPF32[$edge + 8 >> 2] = .009999999776482582;
 $x$i$i = $edge + 28 | 0;
 HEAP32[$x$i$i + 0 >> 2] = 0;
 HEAP32[$x$i$i + 4 >> 2] = 0;
 HEAP32[$x$i$i + 8 >> 2] = 0;
 HEAP32[$x$i$i + 12 >> 2] = 0;
 HEAP16[$x$i$i + 16 >> 1] = 0;
 __ZNK12b2ChainShape12GetChildEdgeEP11b2EdgeShapei($1, $edge, HEAP32[$this + 56 >> 2] | 0);
 __Z23b2CollideEdgeAndPolygonP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS6_($manifold, $edge, $xfA, HEAP32[(HEAP32[$this + 52 >> 2] | 0) + 12 >> 2] | 0, $xfB);
 STACKTOP = sp;
 return;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 $rem = __stackBase__ | 0;
 $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
 $4$1 = tempRet0;
 ___udivmoddi4($4$0, $4$1, _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0, tempRet0, $rem) | 0;
 $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
 $10$1 = tempRet0;
 STACKTOP = __stackBase__;
 return (tempRet0 = $10$1, $10$0) | 0;
}
function __ZN23b2ChainAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_($this, $manifold, $xfA, $xfB) {
 $this = $this | 0;
 $manifold = $manifold | 0;
 $xfA = $xfA | 0;
 $xfB = $xfB | 0;
 var $1 = 0, $edge = 0, $x$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $edge = sp;
 $1 = HEAP32[(HEAP32[$this + 48 >> 2] | 0) + 12 >> 2] | 0;
 HEAP32[$edge >> 2] = 6968;
 HEAP32[$edge + 4 >> 2] = 1;
 HEAPF32[$edge + 8 >> 2] = .009999999776482582;
 $x$i$i = $edge + 28 | 0;
 HEAP32[$x$i$i + 0 >> 2] = 0;
 HEAP32[$x$i$i + 4 >> 2] = 0;
 HEAP32[$x$i$i + 8 >> 2] = 0;
 HEAP32[$x$i$i + 12 >> 2] = 0;
 HEAP16[$x$i$i + 16 >> 1] = 0;
 __ZNK12b2ChainShape12GetChildEdgeEP11b2EdgeShapei($1, $edge, HEAP32[$this + 56 >> 2] | 0);
 __Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6_($manifold, $edge, $xfA, HEAP32[(HEAP32[$this + 52 >> 2] | 0) + 12 >> 2] | 0, $xfB);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2Mat22_b2Mat22_4($arg0, $arg1, $arg2, $arg3) {
 $arg0 = +$arg0;
 $arg1 = +$arg1;
 $arg2 = +$arg2;
 $arg3 = +$arg3;
 var $0 = 0, $call$i = 0, $call$lcssa$i = 0, $call4$i = 0, $exception$i = 0, sp = 0;
 sp = STACKTOP;
 $call4$i = _malloc(16) | 0;
 L1 : do if (($call4$i | 0) == 0) {
  while (1) {
   $0 = HEAP32[5378] | 0;
   HEAP32[5378] = $0 + 0;
   if (($0 | 0) == 0) break;
   FUNCTION_TABLE_v[$0 & 63]();
   $call$i = _malloc(16) | 0;
   if (($call$i | 0) != 0) {
    $call$lcssa$i = $call$i;
    break L1;
   }
  }
  $exception$i = ___cxa_allocate_exception(4) | 0;
  HEAP32[$exception$i >> 2] = 21352;
  ___cxa_throw($exception$i | 0, 21400, 111);
 } else $call$lcssa$i = $call4$i; while (0);
 HEAPF32[$call$lcssa$i >> 2] = $arg0;
 HEAPF32[$call$lcssa$i + 4 >> 2] = $arg2;
 HEAPF32[$call$lcssa$i + 8 >> 2] = $arg1;
 HEAPF32[$call$lcssa$i + 12 >> 2] = $arg3;
 STACKTOP = sp;
 return $call$lcssa$i | 0;
}
function _emscripten_bind_b2PrismaticJoint_EnableLimit_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $1 = 0, $3 = 0, $conv$i$i = 0, $conv$i3$i = 0, $m_enableLimit$i = 0, $m_flags$i$i = 0, $m_flags$i2$i = 0, sp = 0;
 sp = STACKTOP;
 $m_enableLimit$i = $self + 136 | 0;
 if (($arg0 & 1 | 0) == (HEAPU8[$m_enableLimit$i >> 0] | 0 | 0)) {
  STACKTOP = sp;
  return;
 }
 $1 = HEAP32[$self + 48 >> 2] | 0;
 $m_flags$i$i = $1 + 4 | 0;
 $conv$i$i = HEAPU16[$m_flags$i$i >> 1] | 0;
 if (($conv$i$i & 2 | 0) == 0) {
  HEAP16[$m_flags$i$i >> 1] = $conv$i$i | 2;
  HEAPF32[$1 + 144 >> 2] = 0.0;
 }
 $3 = HEAP32[$self + 52 >> 2] | 0;
 $m_flags$i2$i = $3 + 4 | 0;
 $conv$i3$i = HEAPU16[$m_flags$i2$i >> 1] | 0;
 if (($conv$i3$i & 2 | 0) == 0) {
  HEAP16[$m_flags$i2$i >> 1] = $conv$i3$i | 2;
  HEAPF32[$3 + 144 >> 2] = 0.0;
 }
 HEAP8[$m_enableLimit$i >> 0] = $arg0 & 1;
 HEAPF32[$self + 112 >> 2] = 0.0;
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2RevoluteJoint_EnableLimit_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $1 = 0, $3 = 0, $conv$i$i = 0, $conv$i3$i = 0, $m_enableLimit$i = 0, $m_flags$i$i = 0, $m_flags$i2$i = 0, sp = 0;
 sp = STACKTOP;
 $m_enableLimit$i = $self + 112 | 0;
 if (($arg0 & 1 | 0) == (HEAPU8[$m_enableLimit$i >> 0] | 0 | 0)) {
  STACKTOP = sp;
  return;
 }
 $1 = HEAP32[$self + 48 >> 2] | 0;
 $m_flags$i$i = $1 + 4 | 0;
 $conv$i$i = HEAPU16[$m_flags$i$i >> 1] | 0;
 if (($conv$i$i & 2 | 0) == 0) {
  HEAP16[$m_flags$i$i >> 1] = $conv$i$i | 2;
  HEAPF32[$1 + 144 >> 2] = 0.0;
 }
 $3 = HEAP32[$self + 52 >> 2] | 0;
 $m_flags$i2$i = $3 + 4 | 0;
 $conv$i3$i = HEAPU16[$m_flags$i2$i >> 1] | 0;
 if (($conv$i3$i & 2 | 0) == 0) {
  HEAP16[$m_flags$i2$i >> 1] = $conv$i3$i | 2;
  HEAPF32[$3 + 144 >> 2] = 0.0;
 }
 HEAP8[$m_enableLimit$i >> 0] = $arg0 & 1;
 HEAPF32[$self + 92 >> 2] = 0.0;
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2RevoluteJoint_SetMaxMotorTorque_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 var $0 = 0, $2 = 0, $conv$i$i = 0, $conv$i2$i = 0, $m_flags$i$i = 0, $m_flags$i1$i = 0, $m_maxMotorTorque$i = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self + 48 >> 2] | 0;
 $m_flags$i$i = $0 + 4 | 0;
 $conv$i$i = HEAPU16[$m_flags$i$i >> 1] | 0;
 if (($conv$i$i & 2 | 0) == 0) {
  HEAP16[$m_flags$i$i >> 1] = $conv$i$i | 2;
  HEAPF32[$0 + 144 >> 2] = 0.0;
 }
 $2 = HEAP32[$self + 52 >> 2] | 0;
 $m_flags$i1$i = $2 + 4 | 0;
 $conv$i2$i = HEAPU16[$m_flags$i1$i >> 1] | 0;
 if (($conv$i2$i & 2 | 0) != 0) {
  $m_maxMotorTorque$i = $self + 104 | 0;
  HEAPF32[$m_maxMotorTorque$i >> 2] = $arg0;
  STACKTOP = sp;
  return;
 }
 HEAP16[$m_flags$i1$i >> 1] = $conv$i2$i | 2;
 HEAPF32[$2 + 144 >> 2] = 0.0;
 $m_maxMotorTorque$i = $self + 104 | 0;
 HEAPF32[$m_maxMotorTorque$i >> 2] = $arg0;
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2WheelJoint_SetMaxMotorTorque_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 var $0 = 0, $2 = 0, $conv$i$i = 0, $conv$i2$i = 0, $m_flags$i$i = 0, $m_flags$i1$i = 0, $m_maxMotorTorque$i = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self + 48 >> 2] | 0;
 $m_flags$i$i = $0 + 4 | 0;
 $conv$i$i = HEAPU16[$m_flags$i$i >> 1] | 0;
 if (($conv$i$i & 2 | 0) == 0) {
  HEAP16[$m_flags$i$i >> 1] = $conv$i$i | 2;
  HEAPF32[$0 + 144 >> 2] = 0.0;
 }
 $2 = HEAP32[$self + 52 >> 2] | 0;
 $m_flags$i1$i = $2 + 4 | 0;
 $conv$i2$i = HEAPU16[$m_flags$i1$i >> 1] | 0;
 if (($conv$i2$i & 2 | 0) != 0) {
  $m_maxMotorTorque$i = $self + 120 | 0;
  HEAPF32[$m_maxMotorTorque$i >> 2] = $arg0;
  STACKTOP = sp;
  return;
 }
 HEAP16[$m_flags$i1$i >> 1] = $conv$i2$i | 2;
 HEAPF32[$2 + 144 >> 2] = 0.0;
 $m_maxMotorTorque$i = $self + 120 | 0;
 HEAPF32[$m_maxMotorTorque$i >> 2] = $arg0;
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2CircleShape_b2CircleShape_0() {
 var $0 = 0, $call$i = 0, $call$lcssa$i = 0, $call4$i = 0, $exception$i = 0, $m_type$i$i = 0, sp = 0;
 sp = STACKTOP;
 $call4$i = _malloc(20) | 0;
 L1 : do if (($call4$i | 0) == 0) {
  while (1) {
   $0 = HEAP32[5378] | 0;
   HEAP32[5378] = $0 + 0;
   if (($0 | 0) == 0) break;
   FUNCTION_TABLE_v[$0 & 63]();
   $call$i = _malloc(20) | 0;
   if (($call$i | 0) != 0) {
    $call$lcssa$i = $call$i;
    break L1;
   }
  }
  $exception$i = ___cxa_allocate_exception(4) | 0;
  HEAP32[$exception$i >> 2] = 21352;
  ___cxa_throw($exception$i | 0, 21400, 111);
 } else $call$lcssa$i = $call4$i; while (0);
 HEAP32[$call$lcssa$i >> 2] = 6896;
 $m_type$i$i = $call$lcssa$i + 4 | 0;
 HEAP32[$m_type$i$i + 0 >> 2] = 0;
 HEAP32[$m_type$i$i + 4 >> 2] = 0;
 HEAP32[$m_type$i$i + 8 >> 2] = 0;
 HEAP32[$m_type$i$i + 12 >> 2] = 0;
 STACKTOP = sp;
 return $call$lcssa$i | 0;
}
function _emscripten_bind_b2PrismaticJoint_SetMaxMotorForce_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 var $0 = 0, $2 = 0, $conv$i$i = 0, $conv$i2$i = 0, $m_flags$i$i = 0, $m_flags$i1$i = 0, $m_maxMotorForce$i = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self + 48 >> 2] | 0;
 $m_flags$i$i = $0 + 4 | 0;
 $conv$i$i = HEAPU16[$m_flags$i$i >> 1] | 0;
 if (($conv$i$i & 2 | 0) == 0) {
  HEAP16[$m_flags$i$i >> 1] = $conv$i$i | 2;
  HEAPF32[$0 + 144 >> 2] = 0.0;
 }
 $2 = HEAP32[$self + 52 >> 2] | 0;
 $m_flags$i1$i = $2 + 4 | 0;
 $conv$i2$i = HEAPU16[$m_flags$i1$i >> 1] | 0;
 if (($conv$i2$i & 2 | 0) != 0) {
  $m_maxMotorForce$i = $self + 128 | 0;
  HEAPF32[$m_maxMotorForce$i >> 2] = $arg0;
  STACKTOP = sp;
  return;
 }
 HEAP16[$m_flags$i1$i >> 1] = $conv$i2$i | 2;
 HEAPF32[$2 + 144 >> 2] = 0.0;
 $m_maxMotorForce$i = $self + 128 | 0;
 HEAPF32[$m_maxMotorForce$i >> 2] = $arg0;
 STACKTOP = sp;
 return;
}
function _emscripten_bind_JSDestructionListener_JSDestructionListener_0() {
 var $0 = 0, $call$i = 0, $call$lcssa$i = 0, $call4$i = 0, $exception$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call4$i = _malloc(4) | 0;
 if (($call4$i | 0) != 0) {
  $call$lcssa$i = $call4$i;
  HEAP32[$call$lcssa$i >> 2] = 4504;
  STACKTOP = sp;
  return $call$lcssa$i | 0;
 }
 while (1) {
  $0 = HEAP32[5378] | 0;
  HEAP32[5378] = $0 + 0;
  if (($0 | 0) == 0) {
   label = 4;
   break;
  }
  FUNCTION_TABLE_v[$0 & 63]();
  $call$i = _malloc(4) | 0;
  if (($call$i | 0) != 0) {
   $call$lcssa$i = $call$i;
   label = 5;
   break;
  }
 }
 if ((label | 0) == 4) {
  $exception$i = ___cxa_allocate_exception(4) | 0;
  HEAP32[$exception$i >> 2] = 21352;
  ___cxa_throw($exception$i | 0, 21400, 111);
 } else if ((label | 0) == 5) {
  HEAP32[$call$lcssa$i >> 2] = 4504;
  STACKTOP = sp;
  return $call$lcssa$i | 0;
 }
 return 0;
}
function _emscripten_bind_b2Counters_dump_0($self) {
 $self = $self | 0;
 var $vararg_buffer19 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer19 = sp;
 HEAP32[$vararg_buffer19 >> 2] = HEAP32[2102];
 __Z5b2LogPKcz(8480, $vararg_buffer19);
 HEAP32[$vararg_buffer19 >> 2] = HEAP32[2104];
 __Z5b2LogPKcz(8512, $vararg_buffer19);
 HEAP32[$vararg_buffer19 >> 2] = HEAP32[2106];
 __Z5b2LogPKcz(8544, $vararg_buffer19);
 HEAP32[$vararg_buffer19 >> 2] = HEAP32[2108];
 __Z5b2LogPKcz(8576, $vararg_buffer19);
 HEAP32[$vararg_buffer19 >> 2] = HEAP32[2110];
 __Z5b2LogPKcz(8608, $vararg_buffer19);
 HEAP32[$vararg_buffer19 >> 2] = HEAP32[2114];
 __Z5b2LogPKcz(8640, $vararg_buffer19);
 HEAP32[$vararg_buffer19 >> 2] = HEAP32[2116];
 __Z5b2LogPKcz(8672, $vararg_buffer19);
 HEAP32[$vararg_buffer19 >> 2] = HEAP32[2118];
 __Z5b2LogPKcz(8704, $vararg_buffer19);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2PrismaticJoint_SetMotorSpeed_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 var $0 = 0, $2 = 0, $conv$i$i = 0, $conv$i2$i = 0, $m_flags$i$i = 0, $m_flags$i1$i = 0, $m_motorSpeed$i = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self + 48 >> 2] | 0;
 $m_flags$i$i = $0 + 4 | 0;
 $conv$i$i = HEAPU16[$m_flags$i$i >> 1] | 0;
 if (($conv$i$i & 2 | 0) == 0) {
  HEAP16[$m_flags$i$i >> 1] = $conv$i$i | 2;
  HEAPF32[$0 + 144 >> 2] = 0.0;
 }
 $2 = HEAP32[$self + 52 >> 2] | 0;
 $m_flags$i1$i = $2 + 4 | 0;
 $conv$i2$i = HEAPU16[$m_flags$i1$i >> 1] | 0;
 if (($conv$i2$i & 2 | 0) != 0) {
  $m_motorSpeed$i = $self + 132 | 0;
  HEAPF32[$m_motorSpeed$i >> 2] = $arg0;
  STACKTOP = sp;
  return;
 }
 HEAP16[$m_flags$i1$i >> 1] = $conv$i2$i | 2;
 HEAPF32[$2 + 144 >> 2] = 0.0;
 $m_motorSpeed$i = $self + 132 | 0;
 HEAPF32[$m_motorSpeed$i >> 2] = $arg0;
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2RevoluteJoint_SetMotorSpeed_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 var $0 = 0, $2 = 0, $conv$i$i = 0, $conv$i2$i = 0, $m_flags$i$i = 0, $m_flags$i1$i = 0, $m_motorSpeed$i = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self + 48 >> 2] | 0;
 $m_flags$i$i = $0 + 4 | 0;
 $conv$i$i = HEAPU16[$m_flags$i$i >> 1] | 0;
 if (($conv$i$i & 2 | 0) == 0) {
  HEAP16[$m_flags$i$i >> 1] = $conv$i$i | 2;
  HEAPF32[$0 + 144 >> 2] = 0.0;
 }
 $2 = HEAP32[$self + 52 >> 2] | 0;
 $m_flags$i1$i = $2 + 4 | 0;
 $conv$i2$i = HEAPU16[$m_flags$i1$i >> 1] | 0;
 if (($conv$i2$i & 2 | 0) != 0) {
  $m_motorSpeed$i = $self + 108 | 0;
  HEAPF32[$m_motorSpeed$i >> 2] = $arg0;
  STACKTOP = sp;
  return;
 }
 HEAP16[$m_flags$i1$i >> 1] = $conv$i2$i | 2;
 HEAPF32[$2 + 144 >> 2] = 0.0;
 $m_motorSpeed$i = $self + 108 | 0;
 HEAPF32[$m_motorSpeed$i >> 2] = $arg0;
 STACKTOP = sp;
 return;
}
function _emscripten_bind_JSRayCastCallback_JSRayCastCallback_0() {
 var $0 = 0, $call$i = 0, $call$lcssa$i = 0, $call4$i = 0, $exception$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call4$i = _malloc(4) | 0;
 if (($call4$i | 0) != 0) {
  $call$lcssa$i = $call4$i;
  HEAP32[$call$lcssa$i >> 2] = 3656;
  STACKTOP = sp;
  return $call$lcssa$i | 0;
 }
 while (1) {
  $0 = HEAP32[5378] | 0;
  HEAP32[5378] = $0 + 0;
  if (($0 | 0) == 0) {
   label = 4;
   break;
  }
  FUNCTION_TABLE_v[$0 & 63]();
  $call$i = _malloc(4) | 0;
  if (($call$i | 0) != 0) {
   $call$lcssa$i = $call$i;
   label = 5;
   break;
  }
 }
 if ((label | 0) == 4) {
  $exception$i = ___cxa_allocate_exception(4) | 0;
  HEAP32[$exception$i >> 2] = 21352;
  ___cxa_throw($exception$i | 0, 21400, 111);
 } else if ((label | 0) == 5) {
  HEAP32[$call$lcssa$i >> 2] = 3656;
  STACKTOP = sp;
  return $call$lcssa$i | 0;
 }
 return 0;
}
function _emscripten_bind_JSContactListener_JSContactListener_0() {
 var $0 = 0, $call$i = 0, $call$lcssa$i = 0, $call4$i = 0, $exception$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call4$i = _malloc(4) | 0;
 if (($call4$i | 0) != 0) {
  $call$lcssa$i = $call4$i;
  HEAP32[$call$lcssa$i >> 2] = 2616;
  STACKTOP = sp;
  return $call$lcssa$i | 0;
 }
 while (1) {
  $0 = HEAP32[5378] | 0;
  HEAP32[5378] = $0 + 0;
  if (($0 | 0) == 0) {
   label = 4;
   break;
  }
  FUNCTION_TABLE_v[$0 & 63]();
  $call$i = _malloc(4) | 0;
  if (($call$i | 0) != 0) {
   $call$lcssa$i = $call$i;
   label = 5;
   break;
  }
 }
 if ((label | 0) == 4) {
  $exception$i = ___cxa_allocate_exception(4) | 0;
  HEAP32[$exception$i >> 2] = 21352;
  ___cxa_throw($exception$i | 0, 21400, 111);
 } else if ((label | 0) == 5) {
  HEAP32[$call$lcssa$i >> 2] = 2616;
  STACKTOP = sp;
  return $call$lcssa$i | 0;
 }
 return 0;
}
function _emscripten_bind_b2WheelJoint_SetMotorSpeed_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 var $0 = 0, $2 = 0, $conv$i$i = 0, $conv$i2$i = 0, $m_flags$i$i = 0, $m_flags$i1$i = 0, $m_motorSpeed$i = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self + 48 >> 2] | 0;
 $m_flags$i$i = $0 + 4 | 0;
 $conv$i$i = HEAPU16[$m_flags$i$i >> 1] | 0;
 if (($conv$i$i & 2 | 0) == 0) {
  HEAP16[$m_flags$i$i >> 1] = $conv$i$i | 2;
  HEAPF32[$0 + 144 >> 2] = 0.0;
 }
 $2 = HEAP32[$self + 52 >> 2] | 0;
 $m_flags$i1$i = $2 + 4 | 0;
 $conv$i2$i = HEAPU16[$m_flags$i1$i >> 1] | 0;
 if (($conv$i2$i & 2 | 0) != 0) {
  $m_motorSpeed$i = $self + 124 | 0;
  HEAPF32[$m_motorSpeed$i >> 2] = $arg0;
  STACKTOP = sp;
  return;
 }
 HEAP16[$m_flags$i1$i >> 1] = $conv$i2$i | 2;
 HEAPF32[$2 + 144 >> 2] = 0.0;
 $m_motorSpeed$i = $self + 124 | 0;
 HEAPF32[$m_motorSpeed$i >> 2] = $arg0;
 STACKTOP = sp;
 return;
}
function _emscripten_bind_JSQueryCallback_JSQueryCallback_0() {
 var $0 = 0, $call$i = 0, $call$lcssa$i = 0, $call4$i = 0, $exception$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call4$i = _malloc(4) | 0;
 if (($call4$i | 0) != 0) {
  $call$lcssa$i = $call4$i;
  HEAP32[$call$lcssa$i >> 2] = 4008;
  STACKTOP = sp;
  return $call$lcssa$i | 0;
 }
 while (1) {
  $0 = HEAP32[5378] | 0;
  HEAP32[5378] = $0 + 0;
  if (($0 | 0) == 0) {
   label = 4;
   break;
  }
  FUNCTION_TABLE_v[$0 & 63]();
  $call$i = _malloc(4) | 0;
  if (($call$i | 0) != 0) {
   $call$lcssa$i = $call$i;
   label = 5;
   break;
  }
 }
 if ((label | 0) == 4) {
  $exception$i = ___cxa_allocate_exception(4) | 0;
  HEAP32[$exception$i >> 2] = 21352;
  ___cxa_throw($exception$i | 0, 21400, 111);
 } else if ((label | 0) == 5) {
  HEAP32[$call$lcssa$i >> 2] = 4008;
  STACKTOP = sp;
  return $call$lcssa$i | 0;
 }
 return 0;
}
function __ZN12b2BroadPhase10BufferMoveEi($this, $proxyId) {
 $this = $this | 0;
 $proxyId = $proxyId | 0;
 var $0 = 0, $2 = 0, $5 = 0, $call$i = 0, $m_moveBuffer = 0, $m_moveCapacity = 0, $m_moveCount = 0, sp = 0;
 sp = STACKTOP;
 $m_moveCount = $this + 40 | 0;
 $0 = HEAP32[$m_moveCount >> 2] | 0;
 $m_moveCapacity = $this + 36 | 0;
 $m_moveBuffer = $this + 32 | 0;
 if (($0 | 0) == (HEAP32[$m_moveCapacity >> 2] | 0)) {
  $2 = HEAP32[$m_moveBuffer >> 2] | 0;
  HEAP32[$m_moveCapacity >> 2] = $0 << 1;
  $call$i = _malloc($0 << 3) | 0;
  HEAP32[$m_moveBuffer >> 2] = $call$i;
  _memcpy($call$i | 0, $2 | 0, HEAP32[$m_moveCount >> 2] << 2 | 0) | 0;
  _free($2);
  $5 = HEAP32[$m_moveCount >> 2] | 0;
 } else $5 = $0;
 HEAP32[(HEAP32[$m_moveBuffer >> 2] | 0) + ($5 << 2) >> 2] = $proxyId;
 HEAP32[$m_moveCount >> 2] = (HEAP32[$m_moveCount >> 2] | 0) + 1;
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2ManifoldPoint_b2ManifoldPoint_0() {
 var $0 = 0, $call$i = 0, $call$lcssa$i = 0, $call4$i = 0, $exception$i = 0, sp = 0;
 sp = STACKTOP;
 $call4$i = _malloc(20) | 0;
 L1 : do if (($call4$i | 0) == 0) {
  while (1) {
   $0 = HEAP32[5378] | 0;
   HEAP32[5378] = $0 + 0;
   if (($0 | 0) == 0) break;
   FUNCTION_TABLE_v[$0 & 63]();
   $call$i = _malloc(20) | 0;
   if (($call$i | 0) != 0) {
    $call$lcssa$i = $call$i;
    break L1;
   }
  }
  $exception$i = ___cxa_allocate_exception(4) | 0;
  HEAP32[$exception$i >> 2] = 21352;
  ___cxa_throw($exception$i | 0, 21400, 111);
 } else $call$lcssa$i = $call4$i; while (0);
 HEAP32[$call$lcssa$i + 0 >> 2] = 0;
 HEAP32[$call$lcssa$i + 4 >> 2] = 0;
 HEAP32[$call$lcssa$i + 8 >> 2] = 0;
 HEAP32[$call$lcssa$i + 12 >> 2] = 0;
 HEAP32[$call$lcssa$i + 16 >> 2] = 0;
 STACKTOP = sp;
 return $call$lcssa$i | 0;
}
function __ZNK13b2CircleShape5CloneEP16b2BlockAllocator($this, $allocator) {
 $this = $this | 0;
 $allocator = $allocator | 0;
 var $0 = 0, $1 = 0, $11 = 0, $16 = 0, $17 = 0, $6 = 0, $7 = 0, $call = 0, $m_type$i$i = 0, sp = 0;
 sp = STACKTOP;
 $call = __ZN16b2BlockAllocator8AllocateEi($allocator, 20) | 0;
 if (($call | 0) == 0) $0 = 0; else {
  HEAP32[$call >> 2] = 6896;
  $m_type$i$i = $call + 4 | 0;
  HEAP32[$m_type$i$i + 0 >> 2] = 0;
  HEAP32[$m_type$i$i + 4 >> 2] = 0;
  HEAP32[$m_type$i$i + 8 >> 2] = 0;
  HEAP32[$m_type$i$i + 12 >> 2] = 0;
  $0 = $call;
 }
 $1 = $this + 4 | 0;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = $0 + 4 | 0;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 $11 = $this + 12 | 0;
 $16 = HEAP32[$11 + 4 >> 2] | 0;
 $17 = $0 + 12 | 0;
 HEAP32[$17 >> 2] = HEAP32[$11 >> 2];
 HEAP32[$17 + 4 >> 2] = $16;
 STACKTOP = sp;
 return $0 | 0;
}
function _emscripten_bind_b2Cycles_dump_0($self) {
 $self = $self | 0;
 var $0 = 0, $1 = 0, $div$i = 0.0, $i$05$i = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 _puts(11152) | 0;
 $i$05$i = 0;
 do {
  $0 = HEAP32[8736 + ($i$05$i * 24 | 0) >> 2] | 0;
  if (($0 | 0) != 0) {
   $1 = 8752 + ($i$05$i * 24 | 0) | 0;
   $div$i = (+((HEAP32[$1 >> 2] | 0) >>> 0) + 4294967296.0 * +((HEAP32[$1 + 4 >> 2] | 0) >>> 0)) / 1.0e6;
   HEAP32[$vararg_buffer >> 2] = $0;
   $vararg_ptr1 = $vararg_buffer + 4 | 0;
   HEAPF64[tempDoublePtr >> 3] = $div$i;
   HEAP32[$vararg_ptr1 >> 2] = HEAP32[tempDoublePtr >> 2];
   HEAP32[$vararg_ptr1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
   _printf(11136, $vararg_buffer | 0) | 0;
  }
  $i$05$i = $i$05$i + 1 | 0;
 } while (($i$05$i | 0) != 100);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2World_SetAllowSleeping_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $b$04$i = 0, $b$06$i = 0, $conv$i$i = 0, $m_allowSleep$i = 0, $m_flags$i$i = 0, sp = 0;
 sp = STACKTOP;
 $m_allowSleep$i = $self + 102976 | 0;
 if (($arg0 & 1 | 0) == (HEAPU8[$m_allowSleep$i >> 0] | 0 | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP8[$m_allowSleep$i >> 0] = $arg0 & 1;
 if ($arg0) {
  STACKTOP = sp;
  return;
 }
 $b$04$i = HEAP32[$self + 102952 >> 2] | 0;
 if (($b$04$i | 0) == 0) {
  STACKTOP = sp;
  return;
 } else $b$06$i = $b$04$i;
 do {
  $m_flags$i$i = $b$06$i + 4 | 0;
  $conv$i$i = HEAPU16[$m_flags$i$i >> 1] | 0;
  if (($conv$i$i & 2 | 0) == 0) {
   HEAP16[$m_flags$i$i >> 1] = $conv$i$i | 2;
   HEAPF32[$b$06$i + 144 >> 2] = 0.0;
  }
  $b$06$i = HEAP32[$b$06$i + 96 >> 2] | 0;
 } while (($b$06$i | 0) != 0);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2AABB_Combine_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $upperBound$i = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF32[$self >> 2];
 $1 = +HEAPF32[$arg0 >> 2];
 $2 = +HEAPF32[$self + 4 >> 2];
 $3 = +HEAPF32[$arg0 + 4 >> 2];
 $4 = +($0 < $1 ? $0 : $1);
 $5 = +($2 < $3 ? $2 : $3);
 $6 = $self;
 HEAPF32[$6 >> 2] = $4;
 HEAPF32[$6 + 4 >> 2] = $5;
 $upperBound$i = $self + 8 | 0;
 $10 = +HEAPF32[$upperBound$i >> 2];
 $11 = +HEAPF32[$arg0 + 8 >> 2];
 $12 = +HEAPF32[$self + 12 >> 2];
 $13 = +HEAPF32[$arg0 + 12 >> 2];
 $14 = +($10 > $11 ? $10 : $11);
 $15 = +($12 > $13 ? $12 : $13);
 $16 = $upperBound$i;
 HEAPF32[$16 >> 2] = $14;
 HEAPF32[$16 + 4 >> 2] = $15;
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2JointDef_b2JointDef_0() {
 var $0 = 0, $call$i = 0, $call$lcssa$i = 0, $call4$i = 0, $exception$i = 0, sp = 0;
 sp = STACKTOP;
 $call4$i = _malloc(20) | 0;
 L1 : do if (($call4$i | 0) == 0) {
  while (1) {
   $0 = HEAP32[5378] | 0;
   HEAP32[5378] = $0 + 0;
   if (($0 | 0) == 0) break;
   FUNCTION_TABLE_v[$0 & 63]();
   $call$i = _malloc(20) | 0;
   if (($call$i | 0) != 0) {
    $call$lcssa$i = $call$i;
    break L1;
   }
  }
  $exception$i = ___cxa_allocate_exception(4) | 0;
  HEAP32[$exception$i >> 2] = 21352;
  ___cxa_throw($exception$i | 0, 21400, 111);
 } else $call$lcssa$i = $call4$i; while (0);
 HEAP32[$call$lcssa$i + 0 >> 2] = 0;
 HEAP32[$call$lcssa$i + 4 >> 2] = 0;
 HEAP32[$call$lcssa$i + 8 >> 2] = 0;
 HEAP32[$call$lcssa$i + 12 >> 2] = 0;
 HEAP8[$call$lcssa$i + 16 >> 0] = 0;
 STACKTOP = sp;
 return $call$lcssa$i | 0;
}
function _emscripten_bind_b2Color_b2Color_3($arg0, $arg1, $arg2) {
 $arg0 = +$arg0;
 $arg1 = +$arg1;
 $arg2 = +$arg2;
 var $0 = 0, $call$i = 0, $call$lcssa$i = 0, $call4$i = 0, $exception$i = 0, sp = 0;
 sp = STACKTOP;
 $call4$i = _malloc(12) | 0;
 L1 : do if (($call4$i | 0) == 0) {
  while (1) {
   $0 = HEAP32[5378] | 0;
   HEAP32[5378] = $0 + 0;
   if (($0 | 0) == 0) break;
   FUNCTION_TABLE_v[$0 & 63]();
   $call$i = _malloc(12) | 0;
   if (($call$i | 0) != 0) {
    $call$lcssa$i = $call$i;
    break L1;
   }
  }
  $exception$i = ___cxa_allocate_exception(4) | 0;
  HEAP32[$exception$i >> 2] = 21352;
  ___cxa_throw($exception$i | 0, 21400, 111);
 } else $call$lcssa$i = $call4$i; while (0);
 HEAPF32[$call$lcssa$i >> 2] = $arg0;
 HEAPF32[$call$lcssa$i + 4 >> 2] = $arg1;
 HEAPF32[$call$lcssa$i + 8 >> 2] = $arg2;
 STACKTOP = sp;
 return $call$lcssa$i | 0;
}
function _emscripten_bind_b2PrismaticJoint_GetJointTranslation_0($self) {
 $self = $self | 0;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $14 = 0.0, $15 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0;
 $0 = HEAP32[$self + 48 >> 2] | 0;
 $1 = +HEAPF32[$0 + 24 >> 2];
 $2 = +HEAPF32[$self + 68 >> 2];
 $3 = +HEAPF32[$0 + 20 >> 2];
 $4 = +HEAPF32[$self + 72 >> 2];
 $7 = HEAP32[$self + 52 >> 2] | 0;
 $8 = +HEAPF32[$7 + 24 >> 2];
 $9 = +HEAPF32[$self + 76 >> 2];
 $10 = +HEAPF32[$7 + 20 >> 2];
 $11 = +HEAPF32[$self + 80 >> 2];
 $14 = +HEAPF32[$self + 84 >> 2];
 $15 = +HEAPF32[$self + 88 >> 2];
 return +((+HEAPF32[$7 + 12 >> 2] + ($8 * $9 - $10 * $11) - (+HEAPF32[$0 + 12 >> 2] + ($1 * $2 - $3 * $4))) * ($1 * $14 - $3 * $15) + ($9 * $10 + $8 * $11 + +HEAPF32[$7 + 16 >> 2] - ($2 * $3 + $1 * $4 + +HEAPF32[$0 + 16 >> 2])) * ($3 * $14 + $1 * $15));
}
function _emscripten_bind_b2Vec3_b2Vec3_3($arg0, $arg1, $arg2) {
 $arg0 = +$arg0;
 $arg1 = +$arg1;
 $arg2 = +$arg2;
 var $0 = 0, $call$i = 0, $call$lcssa$i = 0, $call4$i = 0, $exception$i = 0, sp = 0;
 sp = STACKTOP;
 $call4$i = _malloc(12) | 0;
 L1 : do if (($call4$i | 0) == 0) {
  while (1) {
   $0 = HEAP32[5378] | 0;
   HEAP32[5378] = $0 + 0;
   if (($0 | 0) == 0) break;
   FUNCTION_TABLE_v[$0 & 63]();
   $call$i = _malloc(12) | 0;
   if (($call$i | 0) != 0) {
    $call$lcssa$i = $call$i;
    break L1;
   }
  }
  $exception$i = ___cxa_allocate_exception(4) | 0;
  HEAP32[$exception$i >> 2] = 21352;
  ___cxa_throw($exception$i | 0, 21400, 111);
 } else $call$lcssa$i = $call4$i; while (0);
 HEAPF32[$call$lcssa$i >> 2] = $arg0;
 HEAPF32[$call$lcssa$i + 4 >> 2] = $arg1;
 HEAPF32[$call$lcssa$i + 8 >> 2] = $arg2;
 STACKTOP = sp;
 return $call$lcssa$i | 0;
}
function _emscripten_bind_b2PolygonShape_SetAsBox_2($self, $arg0, $arg1) {
 $self = $self | 0;
 $arg0 = +$arg0;
 $arg1 = +$arg1;
 var $sub$i = 0.0, $sub2$i = 0.0;
 HEAP32[$self + 148 >> 2] = 4;
 $sub$i = -$arg0;
 $sub2$i = -$arg1;
 HEAPF32[$self + 20 >> 2] = $sub$i;
 HEAPF32[$self + 24 >> 2] = $sub2$i;
 HEAPF32[$self + 28 >> 2] = $arg0;
 HEAPF32[$self + 32 >> 2] = $sub2$i;
 HEAPF32[$self + 36 >> 2] = $arg0;
 HEAPF32[$self + 40 >> 2] = $arg1;
 HEAPF32[$self + 44 >> 2] = $sub$i;
 HEAPF32[$self + 48 >> 2] = $arg1;
 HEAPF32[$self + 84 >> 2] = 0.0;
 HEAPF32[$self + 88 >> 2] = -1.0;
 HEAPF32[$self + 92 >> 2] = 1.0;
 HEAPF32[$self + 96 >> 2] = 0.0;
 HEAPF32[$self + 100 >> 2] = 0.0;
 HEAPF32[$self + 104 >> 2] = 1.0;
 HEAPF32[$self + 108 >> 2] = -1.0;
 HEAPF32[$self + 112 >> 2] = 0.0;
 HEAPF32[$self + 12 >> 2] = 0.0;
 HEAPF32[$self + 16 >> 2] = 0.0;
 return;
}
function _emscripten_bind_b2WheelJoint_GetJointTranslation_0($self) {
 $self = $self | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $14 = 0.0, $15 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $8 = 0.0, $9 = 0.0;
 $0 = HEAP32[$self + 48 >> 2] | 0;
 $1 = HEAP32[$self + 52 >> 2] | 0;
 $2 = +HEAPF32[$0 + 24 >> 2];
 $3 = +HEAPF32[$self + 76 >> 2];
 $4 = +HEAPF32[$0 + 20 >> 2];
 $5 = +HEAPF32[$self + 80 >> 2];
 $8 = +HEAPF32[$1 + 24 >> 2];
 $9 = +HEAPF32[$self + 84 >> 2];
 $10 = +HEAPF32[$1 + 20 >> 2];
 $11 = +HEAPF32[$self + 88 >> 2];
 $14 = +HEAPF32[$self + 92 >> 2];
 $15 = +HEAPF32[$self + 96 >> 2];
 return +((+HEAPF32[$1 + 12 >> 2] + ($8 * $9 - $10 * $11) - (+HEAPF32[$0 + 12 >> 2] + ($2 * $3 - $4 * $5))) * ($2 * $14 - $4 * $15) + ($9 * $10 + $8 * $11 + +HEAPF32[$1 + 16 >> 2] - ($3 * $4 + $2 * $5 + +HEAPF32[$0 + 16 >> 2])) * ($4 * $14 + $2 * $15));
}
function __ZN6b2AABB7CombineERKS_S1_($this, $aabb1, $aabb2) {
 $this = $this | 0;
 $aabb1 = $aabb1 | 0;
 $aabb2 = $aabb2 | 0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF32[$aabb1 >> 2];
 $1 = +HEAPF32[$aabb2 >> 2];
 $2 = +HEAPF32[$aabb1 + 4 >> 2];
 $3 = +HEAPF32[$aabb2 + 4 >> 2];
 $4 = +($0 < $1 ? $0 : $1);
 $5 = +($2 < $3 ? $2 : $3);
 $6 = $this;
 HEAPF32[$6 >> 2] = $4;
 HEAPF32[$6 + 4 >> 2] = $5;
 $10 = +HEAPF32[$aabb1 + 8 >> 2];
 $11 = +HEAPF32[$aabb2 + 8 >> 2];
 $12 = +HEAPF32[$aabb1 + 12 >> 2];
 $13 = +HEAPF32[$aabb2 + 12 >> 2];
 $14 = +($10 > $11 ? $10 : $11);
 $15 = +($12 > $13 ? $12 : $13);
 $16 = $this + 8 | 0;
 HEAPF32[$16 >> 2] = $14;
 HEAPF32[$16 + 4 >> 2] = $15;
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2Mat33_GetInverse22_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $det$0$i = 0.0, $sub$i = 0.0, $sub10$i = 0.0, $z23$i = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF32[$self >> 2];
 $1 = +HEAPF32[$self + 12 >> 2];
 $2 = +HEAPF32[$self + 4 >> 2];
 $3 = +HEAPF32[$self + 16 >> 2];
 $sub$i = $0 * $3 - $1 * $2;
 if ($sub$i != 0.0) $det$0$i = 1.0 / $sub$i; else $det$0$i = $sub$i;
 HEAPF32[$arg0 >> 2] = $3 * $det$0$i;
 $sub10$i = -$det$0$i;
 HEAPF32[$arg0 + 12 >> 2] = $1 * $sub10$i;
 HEAPF32[$arg0 + 8 >> 2] = 0.0;
 HEAPF32[$arg0 + 4 >> 2] = $2 * $sub10$i;
 HEAPF32[$arg0 + 16 >> 2] = $0 * $det$0$i;
 $z23$i = $arg0 + 20 | 0;
 HEAP32[$z23$i + 0 >> 2] = 0;
 HEAP32[$z23$i + 4 >> 2] = 0;
 HEAP32[$z23$i + 8 >> 2] = 0;
 HEAP32[$z23$i + 12 >> 2] = 0;
 STACKTOP = sp;
 return;
}
function __ZNK13b2CircleShape11ComputeAABBEP6b2AABBRK11b2Transformi($this, $aabb, $transform, $childIndex) {
 $this = $this | 0;
 $aabb = $aabb | 0;
 $transform = $transform | 0;
 $childIndex = $childIndex | 0;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $6 = 0.0, $7 = 0.0, $add$i8 = 0.0, $add3$i = 0.0, $m_radius = 0;
 $0 = +HEAPF32[$transform + 12 >> 2];
 $1 = +HEAPF32[$this + 12 >> 2];
 $2 = +HEAPF32[$transform + 8 >> 2];
 $3 = +HEAPF32[$this + 16 >> 2];
 $add$i8 = +HEAPF32[$transform >> 2] + ($0 * $1 - $2 * $3);
 $add3$i = +HEAPF32[$transform + 4 >> 2] + ($1 * $2 + $0 * $3);
 $m_radius = $this + 8 | 0;
 $6 = +HEAPF32[$m_radius >> 2];
 HEAPF32[$aabb >> 2] = $add$i8 - $6;
 HEAPF32[$aabb + 4 >> 2] = $add3$i - $6;
 $7 = +HEAPF32[$m_radius >> 2];
 HEAPF32[$aabb + 8 >> 2] = $add$i8 + $7;
 HEAPF32[$aabb + 12 >> 2] = $add3$i + $7;
 return;
}
function _emscripten_bind_b2Manifold_b2Manifold_0() {
 var $0 = 0, $call$i = 0, $call$lcssa$i = 0, $call4$i = 0, $exception$i = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $call4$i = _malloc(64) | 0;
 L1 : do if (($call4$i | 0) == 0) {
  while (1) {
   $0 = HEAP32[5378] | 0;
   HEAP32[5378] = $0 + 0;
   if (($0 | 0) == 0) break;
   FUNCTION_TABLE_v[$0 & 63]();
   $call$i = _malloc(64) | 0;
   if (($call$i | 0) != 0) {
    $call$lcssa$i = $call$i;
    break L1;
   }
  }
  $exception$i = ___cxa_allocate_exception(4) | 0;
  HEAP32[$exception$i >> 2] = 21352;
  ___cxa_throw($exception$i | 0, 21400, 111);
 } else $call$lcssa$i = $call4$i; while (0);
 dest = $call$lcssa$i + 0 | 0;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 STACKTOP = sp;
 return $call$lcssa$i | 0;
}
function _emscripten_bind_b2AABB_Combine_2($self, $arg0, $arg1) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 $arg1 = $arg1 | 0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF32[$arg0 >> 2];
 $1 = +HEAPF32[$arg1 >> 2];
 $2 = +HEAPF32[$arg0 + 4 >> 2];
 $3 = +HEAPF32[$arg1 + 4 >> 2];
 $4 = +($0 < $1 ? $0 : $1);
 $5 = +($2 < $3 ? $2 : $3);
 $6 = $self;
 HEAPF32[$6 >> 2] = $4;
 HEAPF32[$6 + 4 >> 2] = $5;
 $10 = +HEAPF32[$arg0 + 8 >> 2];
 $11 = +HEAPF32[$arg1 + 8 >> 2];
 $12 = +HEAPF32[$arg0 + 12 >> 2];
 $13 = +HEAPF32[$arg1 + 12 >> 2];
 $14 = +($10 > $11 ? $10 : $11);
 $15 = +($12 > $13 ? $12 : $13);
 $16 = $self + 8 | 0;
 HEAPF32[$16 >> 2] = $14;
 HEAPF32[$16 + 4 >> 2] = $15;
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2ContactEdge_b2ContactEdge_0() {
 var $0 = 0, $call$i = 0, $call$lcssa$i = 0, $call4$i = 0, $exception$i = 0, sp = 0;
 sp = STACKTOP;
 $call4$i = _malloc(16) | 0;
 L1 : do if (($call4$i | 0) == 0) {
  while (1) {
   $0 = HEAP32[5378] | 0;
   HEAP32[5378] = $0 + 0;
   if (($0 | 0) == 0) break;
   FUNCTION_TABLE_v[$0 & 63]();
   $call$i = _malloc(16) | 0;
   if (($call$i | 0) != 0) {
    $call$lcssa$i = $call$i;
    break L1;
   }
  }
  $exception$i = ___cxa_allocate_exception(4) | 0;
  HEAP32[$exception$i >> 2] = 21352;
  ___cxa_throw($exception$i | 0, 21400, 111);
 } else $call$lcssa$i = $call4$i; while (0);
 HEAP32[$call$lcssa$i + 0 >> 2] = 0;
 HEAP32[$call$lcssa$i + 4 >> 2] = 0;
 HEAP32[$call$lcssa$i + 8 >> 2] = 0;
 HEAP32[$call$lcssa$i + 12 >> 2] = 0;
 STACKTOP = sp;
 return $call$lcssa$i | 0;
}
function _emscripten_bind_b2JointEdge_b2JointEdge_0() {
 var $0 = 0, $call$i = 0, $call$lcssa$i = 0, $call4$i = 0, $exception$i = 0, sp = 0;
 sp = STACKTOP;
 $call4$i = _malloc(16) | 0;
 L1 : do if (($call4$i | 0) == 0) {
  while (1) {
   $0 = HEAP32[5378] | 0;
   HEAP32[5378] = $0 + 0;
   if (($0 | 0) == 0) break;
   FUNCTION_TABLE_v[$0 & 63]();
   $call$i = _malloc(16) | 0;
   if (($call$i | 0) != 0) {
    $call$lcssa$i = $call$i;
    break L1;
   }
  }
  $exception$i = ___cxa_allocate_exception(4) | 0;
  HEAP32[$exception$i >> 2] = 21352;
  ___cxa_throw($exception$i | 0, 21400, 111);
 } else $call$lcssa$i = $call4$i; while (0);
 HEAP32[$call$lcssa$i + 0 >> 2] = 0;
 HEAP32[$call$lcssa$i + 4 >> 2] = 0;
 HEAP32[$call$lcssa$i + 8 >> 2] = 0;
 HEAP32[$call$lcssa$i + 12 >> 2] = 0;
 STACKTOP = sp;
 return $call$lcssa$i | 0;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $0 = 0, $3 = 0, $offset_to_base$0 = 0, $shr = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 $shr = $0 >> 8;
 if (($0 & 1 | 0) == 0) $offset_to_base$0 = $shr; else $offset_to_base$0 = HEAP32[(HEAP32[$current_ptr >> 2] | 0) + $shr >> 2] | 0;
 $3 = HEAP32[$this >> 2] | 0;
 FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$3 >> 2] | 0) + 20 >> 2] & 63]($3, $info, $dst_ptr, $current_ptr + $offset_to_base$0 | 0, ($0 & 2 | 0) != 0 ? $path_below : 2, $use_strcmp);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2MassData_b2MassData_0() {
 var $0 = 0, $call$i = 0, $call$lcssa$i = 0, $call4$i = 0, $exception$i = 0, sp = 0;
 sp = STACKTOP;
 $call4$i = _malloc(16) | 0;
 L1 : do if (($call4$i | 0) == 0) {
  while (1) {
   $0 = HEAP32[5378] | 0;
   HEAP32[5378] = $0 + 0;
   if (($0 | 0) == 0) break;
   FUNCTION_TABLE_v[$0 & 63]();
   $call$i = _malloc(16) | 0;
   if (($call$i | 0) != 0) {
    $call$lcssa$i = $call$i;
    break L1;
   }
  }
  $exception$i = ___cxa_allocate_exception(4) | 0;
  HEAP32[$exception$i >> 2] = 21352;
  ___cxa_throw($exception$i | 0, 21400, 111);
 } else $call$lcssa$i = $call4$i; while (0);
 HEAP32[$call$lcssa$i + 0 >> 2] = 0;
 HEAP32[$call$lcssa$i + 4 >> 2] = 0;
 HEAP32[$call$lcssa$i + 8 >> 2] = 0;
 HEAP32[$call$lcssa$i + 12 >> 2] = 0;
 STACKTOP = sp;
 return $call$lcssa$i | 0;
}
function _emscripten_bind_b2Body_GetLinearVelocityFromLocalPoint_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $14 = 0.0, $15 = 0.0, $16 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $8 = 0.0, sp = 0;
 sp = STACKTOP;
 if ((HEAP8[800] | 0) == 0) if ((___cxa_guard_acquire(800) | 0) != 0) ___cxa_guard_release(800);
 $2 = +HEAPF32[$self + 24 >> 2];
 $3 = +HEAPF32[$arg0 >> 2];
 $4 = +HEAPF32[$self + 20 >> 2];
 $5 = +HEAPF32[$arg0 + 4 >> 2];
 $8 = +HEAPF32[$self + 72 >> 2];
 $14 = +(+HEAPF32[$self + 64 >> 2] - $8 * ($3 * $4 + $2 * $5 + +HEAPF32[$self + 16 >> 2] - +HEAPF32[$self + 48 >> 2]));
 $15 = +($8 * (+HEAPF32[$self + 12 >> 2] + ($2 * $3 - $4 * $5) - +HEAPF32[$self + 44 >> 2]) + +HEAPF32[$self + 68 >> 2]);
 $16 = 792;
 HEAPF32[$16 >> 2] = $14;
 HEAPF32[$16 + 4 >> 2] = $15;
 STACKTOP = sp;
 return 792;
}
function _emscripten_bind_b2AABB_b2AABB_0() {
 var $0 = 0, $call$i = 0, $call$lcssa$i = 0, $call4$i = 0, $exception$i = 0, sp = 0;
 sp = STACKTOP;
 $call4$i = _malloc(16) | 0;
 L1 : do if (($call4$i | 0) == 0) {
  while (1) {
   $0 = HEAP32[5378] | 0;
   HEAP32[5378] = $0 + 0;
   if (($0 | 0) == 0) break;
   FUNCTION_TABLE_v[$0 & 63]();
   $call$i = _malloc(16) | 0;
   if (($call$i | 0) != 0) {
    $call$lcssa$i = $call$i;
    break L1;
   }
  }
  $exception$i = ___cxa_allocate_exception(4) | 0;
  HEAP32[$exception$i >> 2] = 21352;
  ___cxa_throw($exception$i | 0, 21400, 111);
 } else $call$lcssa$i = $call4$i; while (0);
 HEAP32[$call$lcssa$i + 0 >> 2] = 0;
 HEAP32[$call$lcssa$i + 4 >> 2] = 0;
 HEAP32[$call$lcssa$i + 8 >> 2] = 0;
 HEAP32[$call$lcssa$i + 12 >> 2] = 0;
 STACKTOP = sp;
 return $call$lcssa$i | 0;
}
function _emscripten_bind_JSDraw_JSDraw_0() {
 var $0 = 0, $2 = 0, $call$i = 0, $call$lcssa$i = 0, $call4$i = 0, $exception$i = 0, sp = 0;
 sp = STACKTOP;
 $call4$i = _malloc(8) | 0;
 L1 : do if (($call4$i | 0) == 0) {
  while (1) {
   $0 = HEAP32[5378] | 0;
   HEAP32[5378] = $0 + 0;
   if (($0 | 0) == 0) break;
   FUNCTION_TABLE_v[$0 & 63]();
   $call$i = _malloc(8) | 0;
   if (($call$i | 0) != 0) {
    $call$lcssa$i = $call$i;
    break L1;
   }
  }
  $exception$i = ___cxa_allocate_exception(4) | 0;
  HEAP32[$exception$i >> 2] = 21352;
  ___cxa_throw($exception$i | 0, 21400, 111);
 } else $call$lcssa$i = $call4$i; while (0);
 $2 = $call$lcssa$i;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$call$lcssa$i + 4 >> 2] = 0;
 HEAP32[$call$lcssa$i >> 2] = 864;
 STACKTOP = sp;
 return $call$lcssa$i | 0;
}
function _emscripten_bind_b2AABB_IsValid_0($self) {
 $self = $self | 0;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF32[$self + 8 >> 2];
 $1 = +HEAPF32[$self >> 2];
 $2 = +HEAPF32[$self + 12 >> 2];
 $3 = +HEAPF32[$self + 4 >> 2];
 if (!($0 - $1 >= 0.0 & $2 - $3 >= 0.0)) {
  $4 = 0;
  STACKTOP = sp;
  return $4 | 0;
 }
 if (!($1 == $1 & 0.0 == 0.0 & $1 > -inf & $1 < inf)) {
  $4 = 0;
  STACKTOP = sp;
  return $4 | 0;
 }
 if (!($3 == $3 & 0.0 == 0.0 & $3 > -inf & $3 < inf)) {
  $4 = 0;
  STACKTOP = sp;
  return $4 | 0;
 }
 if (!($0 == $0 & 0.0 == 0.0 & $0 > -inf & $0 < inf)) {
  $4 = 0;
  STACKTOP = sp;
  return $4 | 0;
 }
 if (!($2 == $2 & 0.0 == 0.0 & $2 > -inf)) {
  $4 = 0;
  STACKTOP = sp;
  return $4 | 0;
 }
 $4 = $2 < inf;
 STACKTOP = sp;
 return $4 | 0;
}
function _emscripten_bind_b2Transform_b2Transform_0() {
 var $0 = 0, $call$i = 0, $call$lcssa$i = 0, $call4$i = 0, $exception$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call4$i = _malloc(16) | 0;
 if (($call4$i | 0) != 0) {
  $call$lcssa$i = $call4$i;
  STACKTOP = sp;
  return $call$lcssa$i | 0;
 }
 while (1) {
  $0 = HEAP32[5378] | 0;
  HEAP32[5378] = $0 + 0;
  if (($0 | 0) == 0) {
   label = 4;
   break;
  }
  FUNCTION_TABLE_v[$0 & 63]();
  $call$i = _malloc(16) | 0;
  if (($call$i | 0) != 0) {
   $call$lcssa$i = $call$i;
   label = 5;
   break;
  }
 }
 if ((label | 0) == 4) {
  $exception$i = ___cxa_allocate_exception(4) | 0;
  HEAP32[$exception$i >> 2] = 21352;
  ___cxa_throw($exception$i | 0, 21400, 111);
 } else if ((label | 0) == 5) {
  STACKTOP = sp;
  return $call$lcssa$i | 0;
 }
 return 0;
}
function _emscripten_bind_b2Counters_b2Counters_0() {
 var $0 = 0, $call$i = 0, $call$lcssa$i = 0, $call4$i = 0, $exception$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call4$i = _malloc(1) | 0;
 if (($call4$i | 0) != 0) {
  $call$lcssa$i = $call4$i;
  STACKTOP = sp;
  return $call$lcssa$i | 0;
 }
 while (1) {
  $0 = HEAP32[5378] | 0;
  HEAP32[5378] = $0 + 0;
  if (($0 | 0) == 0) {
   label = 4;
   break;
  }
  FUNCTION_TABLE_v[$0 & 63]();
  $call$i = _malloc(1) | 0;
  if (($call$i | 0) != 0) {
   $call$lcssa$i = $call$i;
   label = 5;
   break;
  }
 }
 if ((label | 0) == 4) {
  $exception$i = ___cxa_allocate_exception(4) | 0;
  HEAP32[$exception$i >> 2] = 21352;
  ___cxa_throw($exception$i | 0, 21400, 111);
 } else if ((label | 0) == 5) {
  STACKTOP = sp;
  return $call$lcssa$i | 0;
 }
 return 0;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($info, $dst_ptr, $current_ptr, $path_below);
  STACKTOP = sp;
  return;
 } else {
  $1 = HEAP32[$this + 8 >> 2] | 0;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$1 >> 2] | 0) + 20 >> 2] & 63]($1, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp);
  STACKTOP = sp;
  return;
 }
}
function _emscripten_bind_b2Params_b2Params_0() {
 var $0 = 0, $call$i = 0, $call$lcssa$i = 0, $call4$i = 0, $exception$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call4$i = _malloc(1) | 0;
 if (($call4$i | 0) != 0) {
  $call$lcssa$i = $call4$i;
  STACKTOP = sp;
  return $call$lcssa$i | 0;
 }
 while (1) {
  $0 = HEAP32[5378] | 0;
  HEAP32[5378] = $0 + 0;
  if (($0 | 0) == 0) {
   label = 4;
   break;
  }
  FUNCTION_TABLE_v[$0 & 63]();
  $call$i = _malloc(1) | 0;
  if (($call$i | 0) != 0) {
   $call$lcssa$i = $call$i;
   label = 5;
   break;
  }
 }
 if ((label | 0) == 4) {
  $exception$i = ___cxa_allocate_exception(4) | 0;
  HEAP32[$exception$i >> 2] = 21352;
  ___cxa_throw($exception$i | 0, 21400, 111);
 } else if ((label | 0) == 5) {
  STACKTOP = sp;
  return $call$lcssa$i | 0;
 }
 return 0;
}
function _emscripten_bind_b2Mat33_b2Mat33_0() {
 var $0 = 0, $call$i = 0, $call$lcssa$i = 0, $call4$i = 0, $exception$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call4$i = _malloc(36) | 0;
 if (($call4$i | 0) != 0) {
  $call$lcssa$i = $call4$i;
  STACKTOP = sp;
  return $call$lcssa$i | 0;
 }
 while (1) {
  $0 = HEAP32[5378] | 0;
  HEAP32[5378] = $0 + 0;
  if (($0 | 0) == 0) {
   label = 4;
   break;
  }
  FUNCTION_TABLE_v[$0 & 63]();
  $call$i = _malloc(36) | 0;
  if (($call$i | 0) != 0) {
   $call$lcssa$i = $call$i;
   label = 5;
   break;
  }
 }
 if ((label | 0) == 4) {
  $exception$i = ___cxa_allocate_exception(4) | 0;
  HEAP32[$exception$i >> 2] = 21352;
  ___cxa_throw($exception$i | 0, 21400, 111);
 } else if ((label | 0) == 5) {
  STACKTOP = sp;
  return $call$lcssa$i | 0;
 }
 return 0;
}
function _emscripten_bind_b2Mat22_b2Mat22_0() {
 var $0 = 0, $call$i = 0, $call$lcssa$i = 0, $call4$i = 0, $exception$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call4$i = _malloc(16) | 0;
 if (($call4$i | 0) != 0) {
  $call$lcssa$i = $call4$i;
  STACKTOP = sp;
  return $call$lcssa$i | 0;
 }
 while (1) {
  $0 = HEAP32[5378] | 0;
  HEAP32[5378] = $0 + 0;
  if (($0 | 0) == 0) {
   label = 4;
   break;
  }
  FUNCTION_TABLE_v[$0 & 63]();
  $call$i = _malloc(16) | 0;
  if (($call$i | 0) != 0) {
   $call$lcssa$i = $call$i;
   label = 5;
   break;
  }
 }
 if ((label | 0) == 4) {
  $exception$i = ___cxa_allocate_exception(4) | 0;
  HEAP32[$exception$i >> 2] = 21352;
  ___cxa_throw($exception$i | 0, 21400, 111);
 } else if ((label | 0) == 5) {
  STACKTOP = sp;
  return $call$lcssa$i | 0;
 }
 return 0;
}
function _emscripten_bind_b2Cycles_b2Cycles_0() {
 var $0 = 0, $call$i = 0, $call$lcssa$i = 0, $call4$i = 0, $exception$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call4$i = _malloc(4) | 0;
 if (($call4$i | 0) != 0) {
  $call$lcssa$i = $call4$i;
  STACKTOP = sp;
  return $call$lcssa$i | 0;
 }
 while (1) {
  $0 = HEAP32[5378] | 0;
  HEAP32[5378] = $0 + 0;
  if (($0 | 0) == 0) {
   label = 4;
   break;
  }
  FUNCTION_TABLE_v[$0 & 63]();
  $call$i = _malloc(4) | 0;
  if (($call$i | 0) != 0) {
   $call$lcssa$i = $call$i;
   label = 5;
   break;
  }
 }
 if ((label | 0) == 4) {
  $exception$i = ___cxa_allocate_exception(4) | 0;
  HEAP32[$exception$i >> 2] = 21352;
  ___cxa_throw($exception$i | 0, 21400, 111);
 } else if ((label | 0) == 5) {
  STACKTOP = sp;
  return $call$lcssa$i | 0;
 }
 return 0;
}
function _emscripten_bind_b2Color_b2Color_0() {
 var $0 = 0, $call$i = 0, $call$lcssa$i = 0, $call4$i = 0, $exception$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call4$i = _malloc(12) | 0;
 if (($call4$i | 0) != 0) {
  $call$lcssa$i = $call4$i;
  STACKTOP = sp;
  return $call$lcssa$i | 0;
 }
 while (1) {
  $0 = HEAP32[5378] | 0;
  HEAP32[5378] = $0 + 0;
  if (($0 | 0) == 0) {
   label = 4;
   break;
  }
  FUNCTION_TABLE_v[$0 & 63]();
  $call$i = _malloc(12) | 0;
  if (($call$i | 0) != 0) {
   $call$lcssa$i = $call$i;
   label = 5;
   break;
  }
 }
 if ((label | 0) == 4) {
  $exception$i = ___cxa_allocate_exception(4) | 0;
  HEAP32[$exception$i >> 2] = 21352;
  ___cxa_throw($exception$i | 0, 21400, 111);
 } else if ((label | 0) == 5) {
  STACKTOP = sp;
  return $call$lcssa$i | 0;
 }
 return 0;
}
function _emscripten_bind_b2Mat22_Solve_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $10 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $det$0$i = 0.0, $sub$i = 0.0, sp = 0;
 sp = STACKTOP;
 if ((HEAP8[320] | 0) == 0) if ((___cxa_guard_acquire(320) | 0) != 0) ___cxa_guard_release(320);
 $2 = +HEAPF32[$self >> 2];
 $3 = +HEAPF32[$self + 8 >> 2];
 $4 = +HEAPF32[$self + 4 >> 2];
 $5 = +HEAPF32[$self + 12 >> 2];
 $sub$i = $2 * $5 - $3 * $4;
 if ($sub$i != 0.0) $det$0$i = 1.0 / $sub$i; else $det$0$i = $sub$i;
 $6 = +HEAPF32[$arg0 >> 2];
 $7 = +HEAPF32[$arg0 + 4 >> 2];
 $8 = +($det$0$i * ($5 * $6 - $3 * $7));
 $9 = +($det$0$i * ($2 * $7 - $4 * $6));
 $10 = 312;
 HEAPF32[$10 >> 2] = $8;
 HEAPF32[$10 + 4 >> 2] = $9;
 STACKTOP = sp;
 return 312;
}
function _emscripten_bind_b2Vec3_b2Vec3_0() {
 var $0 = 0, $call$i = 0, $call$lcssa$i = 0, $call4$i = 0, $exception$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call4$i = _malloc(12) | 0;
 if (($call4$i | 0) != 0) {
  $call$lcssa$i = $call4$i;
  STACKTOP = sp;
  return $call$lcssa$i | 0;
 }
 while (1) {
  $0 = HEAP32[5378] | 0;
  HEAP32[5378] = $0 + 0;
  if (($0 | 0) == 0) {
   label = 4;
   break;
  }
  FUNCTION_TABLE_v[$0 & 63]();
  $call$i = _malloc(12) | 0;
  if (($call$i | 0) != 0) {
   $call$lcssa$i = $call$i;
   label = 5;
   break;
  }
 }
 if ((label | 0) == 4) {
  $exception$i = ___cxa_allocate_exception(4) | 0;
  HEAP32[$exception$i >> 2] = 21352;
  ___cxa_throw($exception$i | 0, 21400, 111);
 } else if ((label | 0) == 5) {
  STACKTOP = sp;
  return $call$lcssa$i | 0;
 }
 return 0;
}
function _emscripten_bind_b2Mat33_Solve22_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $10 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $det$0$i = 0.0, $sub$i = 0.0, sp = 0;
 sp = STACKTOP;
 if ((HEAP8[88] | 0) == 0) if ((___cxa_guard_acquire(88) | 0) != 0) ___cxa_guard_release(88);
 $2 = +HEAPF32[$self >> 2];
 $3 = +HEAPF32[$self + 12 >> 2];
 $4 = +HEAPF32[$self + 4 >> 2];
 $5 = +HEAPF32[$self + 16 >> 2];
 $sub$i = $2 * $5 - $3 * $4;
 if ($sub$i != 0.0) $det$0$i = 1.0 / $sub$i; else $det$0$i = $sub$i;
 $6 = +HEAPF32[$arg0 >> 2];
 $7 = +HEAPF32[$arg0 + 4 >> 2];
 $8 = +($det$0$i * ($5 * $6 - $3 * $7));
 $9 = +($det$0$i * ($2 * $7 - $4 * $6));
 $10 = 80;
 HEAPF32[$10 >> 2] = $8;
 HEAPF32[$10 + 4 >> 2] = $9;
 STACKTOP = sp;
 return 80;
}
function _emscripten_bind_b2Vec2_b2Vec2_0() {
 var $0 = 0, $call$i = 0, $call$lcssa$i = 0, $call4$i = 0, $exception$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call4$i = _malloc(8) | 0;
 if (($call4$i | 0) != 0) {
  $call$lcssa$i = $call4$i;
  STACKTOP = sp;
  return $call$lcssa$i | 0;
 }
 while (1) {
  $0 = HEAP32[5378] | 0;
  HEAP32[5378] = $0 + 0;
  if (($0 | 0) == 0) {
   label = 4;
   break;
  }
  FUNCTION_TABLE_v[$0 & 63]();
  $call$i = _malloc(8) | 0;
  if (($call$i | 0) != 0) {
   $call$lcssa$i = $call$i;
   label = 5;
   break;
  }
 }
 if ((label | 0) == 4) {
  $exception$i = ___cxa_allocate_exception(4) | 0;
  HEAP32[$exception$i >> 2] = 21352;
  ___cxa_throw($exception$i | 0, 21400, 111);
 } else if ((label | 0) == 5) {
  STACKTOP = sp;
  return $call$lcssa$i | 0;
 }
 return 0;
}
function _emscripten_bind_b2Rot_b2Rot_0() {
 var $0 = 0, $call$i = 0, $call$lcssa$i = 0, $call4$i = 0, $exception$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call4$i = _malloc(8) | 0;
 if (($call4$i | 0) != 0) {
  $call$lcssa$i = $call4$i;
  STACKTOP = sp;
  return $call$lcssa$i | 0;
 }
 while (1) {
  $0 = HEAP32[5378] | 0;
  HEAP32[5378] = $0 + 0;
  if (($0 | 0) == 0) {
   label = 4;
   break;
  }
  FUNCTION_TABLE_v[$0 & 63]();
  $call$i = _malloc(8) | 0;
  if (($call$i | 0) != 0) {
   $call$lcssa$i = $call$i;
   label = 5;
   break;
  }
 }
 if ((label | 0) == 4) {
  $exception$i = ___cxa_allocate_exception(4) | 0;
  HEAP32[$exception$i >> 2] = 21352;
  ___cxa_throw($exception$i | 0, 21400, 111);
 } else if ((label | 0) == 5) {
  STACKTOP = sp;
  return $call$lcssa$i | 0;
 }
 return 0;
}
function _emscripten_bind_b2Vec2_b2Vec2_2($arg0, $arg1) {
 $arg0 = +$arg0;
 $arg1 = +$arg1;
 var $0 = 0, $call$i = 0, $call$lcssa$i = 0, $call4$i = 0, $exception$i = 0, sp = 0;
 sp = STACKTOP;
 $call4$i = _malloc(8) | 0;
 L1 : do if (($call4$i | 0) == 0) {
  while (1) {
   $0 = HEAP32[5378] | 0;
   HEAP32[5378] = $0 + 0;
   if (($0 | 0) == 0) break;
   FUNCTION_TABLE_v[$0 & 63]();
   $call$i = _malloc(8) | 0;
   if (($call$i | 0) != 0) {
    $call$lcssa$i = $call$i;
    break L1;
   }
  }
  $exception$i = ___cxa_allocate_exception(4) | 0;
  HEAP32[$exception$i >> 2] = 21352;
  ___cxa_throw($exception$i | 0, 21400, 111);
 } else $call$lcssa$i = $call4$i; while (0);
 HEAPF32[$call$lcssa$i >> 2] = $arg0;
 HEAPF32[$call$lcssa$i + 4 >> 2] = $arg1;
 STACKTOP = sp;
 return $call$lcssa$i | 0;
}
function _emscripten_bind_b2Rot_b2Rot_1($arg0) {
 $arg0 = +$arg0;
 var $0 = 0, $call$i = 0, $call$lcssa$i = 0, $call4$i = 0, $exception$i = 0, sp = 0;
 sp = STACKTOP;
 $call4$i = _malloc(8) | 0;
 L1 : do if (($call4$i | 0) == 0) {
  while (1) {
   $0 = HEAP32[5378] | 0;
   HEAP32[5378] = $0 + 0;
   if (($0 | 0) == 0) break;
   FUNCTION_TABLE_v[$0 & 63]();
   $call$i = _malloc(8) | 0;
   if (($call$i | 0) != 0) {
    $call$lcssa$i = $call$i;
    break L1;
   }
  }
  $exception$i = ___cxa_allocate_exception(4) | 0;
  HEAP32[$exception$i >> 2] = 21352;
  ___cxa_throw($exception$i | 0, 21400, 111);
 } else $call$lcssa$i = $call4$i; while (0);
 HEAPF32[$call$lcssa$i >> 2] = +Math_sin(+$arg0);
 HEAPF32[$call$lcssa$i + 4 >> 2] = +Math_cos(+$arg0);
 STACKTOP = sp;
 return $call$lcssa$i | 0;
}
function _emscripten_bind_b2ChainShape_CreateChain_2($self, $arg0, $arg1) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 $arg1 = $arg1 | 0;
 var $call$i$i = 0, $m_count$i = 0, $m_vertices$i = 0, sp = 0;
 sp = STACKTOP;
 $m_vertices$i = $self + 12 | 0;
 if ((HEAP32[$m_vertices$i >> 2] | 0) != 0) ___assert_fail(6592, 6632, 48, 6704);
 $m_count$i = $self + 16 | 0;
 if ((HEAP32[$m_count$i >> 2] | 0) != 0) ___assert_fail(6592, 6632, 48, 6704);
 if (($arg1 | 0) > 1) {
  HEAP32[$m_count$i >> 2] = $arg1;
  $call$i$i = _malloc($arg1 << 3) | 0;
  HEAP32[$m_vertices$i >> 2] = $call$i$i;
  _memcpy($call$i$i | 0, $arg0 | 0, HEAP32[$m_count$i >> 2] << 3 | 0) | 0;
  HEAP8[$self + 36 >> 0] = 0;
  HEAP8[$self + 37 >> 0] = 0;
  STACKTOP = sp;
  return;
 } else ___assert_fail(6720, 6632, 49, 6704);
}
function __ZNK6b2Body13ShouldCollideEPKS_($this, $other) {
 $this = $this | 0;
 $other = $other | 0;
 var $jn$05 = 0, $jn$07 = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if ((HEAP32[$this >> 2] | 0) == 2) label = 3; else if ((HEAP32[$other >> 2] | 0) == 2) label = 3; else $retval$0 = 0;
 L3 : do if ((label | 0) == 3) {
  $jn$05 = HEAP32[$this + 108 >> 2] | 0;
  if (($jn$05 | 0) == 0) $retval$0 = 1; else {
   $jn$07 = $jn$05;
   while (1) {
    if ((HEAP32[$jn$07 >> 2] | 0) == ($other | 0)) if ((HEAP8[(HEAP32[$jn$07 + 4 >> 2] | 0) + 61 >> 0] | 0) == 0) {
     $retval$0 = 0;
     break L3;
    }
    $jn$07 = HEAP32[$jn$07 + 12 >> 2] | 0;
    if (($jn$07 | 0) == 0) {
     $retval$0 = 1;
     break;
    }
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}
function _emscripten_bind_b2Filter_b2Filter_0() {
 var $0 = 0, $call$i = 0, $call$lcssa$i = 0, $call4$i = 0, $exception$i = 0, sp = 0;
 sp = STACKTOP;
 $call4$i = _malloc(6) | 0;
 L1 : do if (($call4$i | 0) == 0) {
  while (1) {
   $0 = HEAP32[5378] | 0;
   HEAP32[5378] = $0 + 0;
   if (($0 | 0) == 0) break;
   FUNCTION_TABLE_v[$0 & 63]();
   $call$i = _malloc(6) | 0;
   if (($call$i | 0) != 0) {
    $call$lcssa$i = $call$i;
    break L1;
   }
  }
  $exception$i = ___cxa_allocate_exception(4) | 0;
  HEAP32[$exception$i >> 2] = 21352;
  ___cxa_throw($exception$i | 0, 21400, 111);
 } else $call$lcssa$i = $call4$i; while (0);
 HEAP16[$call$lcssa$i >> 1] = 1;
 HEAP16[$call$lcssa$i + 2 >> 1] = -1;
 HEAP16[$call$lcssa$i + 4 >> 1] = 0;
 STACKTOP = sp;
 return $call$lcssa$i | 0;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $0 = 0, $3 = 0, $offset_to_base$0 = 0, $shr = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 $shr = $0 >> 8;
 if (($0 & 1 | 0) == 0) $offset_to_base$0 = $shr; else $offset_to_base$0 = HEAP32[(HEAP32[$current_ptr >> 2] | 0) + $shr >> 2] | 0;
 $3 = HEAP32[$this >> 2] | 0;
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$3 >> 2] | 0) + 24 >> 2] & 63]($3, $info, $current_ptr + $offset_to_base$0 | 0, ($0 & 2 | 0) != 0 ? $path_below : 2, $use_strcmp);
 STACKTOP = sp;
 return;
}
function __ZN15b2GrowableStackIiLi256EE4PushERKi($this, $element) {
 $this = $this | 0;
 $element = $element | 0;
 var $0 = 0, $2 = 0, $call$i = 0, $m_capacity = 0, $m_count = 0, sp = 0;
 sp = STACKTOP;
 $m_count = $this + 1028 | 0;
 $0 = HEAP32[$m_count >> 2] | 0;
 $m_capacity = $this + 1032 | 0;
 if (($0 | 0) == (HEAP32[$m_capacity >> 2] | 0)) {
  $2 = HEAP32[$this >> 2] | 0;
  HEAP32[$m_capacity >> 2] = $0 << 1;
  $call$i = _malloc($0 << 3) | 0;
  HEAP32[$this >> 2] = $call$i;
  _memcpy($call$i | 0, $2 | 0, HEAP32[$m_count >> 2] << 2 | 0) | 0;
  if (($2 | 0) != ($this + 4 | 0)) _free($2);
 }
 HEAP32[(HEAP32[$this >> 2] | 0) + (HEAP32[$m_count >> 2] << 2) >> 2] = HEAP32[$element >> 2];
 HEAP32[$m_count >> 2] = (HEAP32[$m_count >> 2] | 0) + 1;
 STACKTOP = sp;
 return;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $7$0 = 0, $7$1 = 0, $10$0 = 0;
 $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
 $4$1 = tempRet0;
 $7$0 = $2$0 ^ $1$0;
 $7$1 = $2$1 ^ $1$1;
 $10$0 = _i64Subtract((___udivmoddi4($4$0, $4$1, _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0, tempRet0, 0) | 0) ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
 return $10$0 | 0;
}
function __ZN13b2DynamicTree8FreeNodeEi($this, $nodeId) {
 $this = $this | 0;
 $nodeId = $nodeId | 0;
 var $3 = 0, $m_freeList = 0, $m_nodeCount = 0, sp = 0;
 sp = STACKTOP;
 if (!(($nodeId | 0) > -1)) ___assert_fail(5760, 5696, 97, 5800);
 if ((HEAP32[$this + 12 >> 2] | 0) <= ($nodeId | 0)) ___assert_fail(5760, 5696, 97, 5800);
 $m_nodeCount = $this + 8 | 0;
 if ((HEAP32[$m_nodeCount >> 2] | 0) > 0) {
  $m_freeList = $this + 16 | 0;
  $3 = HEAP32[$this + 4 >> 2] | 0;
  HEAP32[$3 + ($nodeId * 36 | 0) + 20 >> 2] = HEAP32[$m_freeList >> 2];
  HEAP32[$3 + ($nodeId * 36 | 0) + 32 >> 2] = -1;
  HEAP32[$m_freeList >> 2] = $nodeId;
  HEAP32[$m_nodeCount >> 2] = (HEAP32[$m_nodeCount >> 2] | 0) + -1;
  STACKTOP = sp;
  return;
 } else ___assert_fail(5816, 5696, 98, 5800);
}
function __ZNK13b2CircleShape11ComputeMassEP10b2MassDataf($this, $massData, $density) {
 $this = $this | 0;
 $massData = $massData | 0;
 $density = +$density;
 var $0 = 0.0, $1 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $6 = 0, $7 = 0, $m_p = 0, $m_radius = 0, $mul4 = 0.0;
 $m_radius = $this + 8 | 0;
 $0 = +HEAPF32[$m_radius >> 2];
 $mul4 = $0 * $density * 3.1415927410125732 * $0;
 HEAPF32[$massData >> 2] = $mul4;
 $m_p = $this + 12 | 0;
 $1 = $m_p;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = $massData + 4 | 0;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 $11 = +HEAPF32[$m_radius >> 2];
 $12 = +HEAPF32[$m_p >> 2];
 $13 = +HEAPF32[$this + 16 >> 2];
 HEAPF32[$massData + 12 >> 2] = $mul4 * ($11 * $11 * .5 + ($12 * $12 + $13 * $13));
 return;
}
function _emscripten_bind_b2Body_SetAwake_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $conv$i = 0, $m_flags$i = 0, $x$i$i = 0, sp = 0;
 sp = STACKTOP;
 $m_flags$i = $self + 4 | 0;
 $conv$i = HEAPU16[$m_flags$i >> 1] | 0;
 if (!$arg0) {
  HEAP16[$m_flags$i >> 1] = $conv$i & 65533;
  HEAPF32[$self + 144 >> 2] = 0.0;
  $x$i$i = $self + 64 | 0;
  HEAP32[$x$i$i + 0 >> 2] = 0;
  HEAP32[$x$i$i + 4 >> 2] = 0;
  HEAP32[$x$i$i + 8 >> 2] = 0;
  HEAP32[$x$i$i + 12 >> 2] = 0;
  HEAP32[$x$i$i + 16 >> 2] = 0;
  HEAP32[$x$i$i + 20 >> 2] = 0;
  STACKTOP = sp;
  return;
 }
 if (($conv$i & 2 | 0) != 0) {
  STACKTOP = sp;
  return;
 }
 HEAP16[$m_flags$i >> 1] = $conv$i | 2;
 HEAPF32[$self + 144 >> 2] = 0.0;
 STACKTOP = sp;
 return;
}
function __ZNK14b2PolygonShape5CloneEP16b2BlockAllocator($this, $allocator) {
 $this = $this | 0;
 $allocator = $allocator | 0;
 var $0 = 0, $1 = 0, $6 = 0, $7 = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 $call = __ZN16b2BlockAllocator8AllocateEi($allocator, 152) | 0;
 if (($call | 0) == 0) $0 = 0; else {
  HEAP32[$call >> 2] = 7336;
  HEAP32[$call + 4 >> 2] = 2;
  HEAPF32[$call + 8 >> 2] = .009999999776482582;
  HEAP32[$call + 148 >> 2] = 0;
  HEAPF32[$call + 12 >> 2] = 0.0;
  HEAPF32[$call + 16 >> 2] = 0.0;
  $0 = $call;
 }
 $1 = $this + 4 | 0;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = $0 + 4 | 0;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 _memcpy($0 + 12 | 0, $this + 12 | 0, 140) | 0;
 STACKTOP = sp;
 return $0 | 0;
}
function _emscripten_bind_b2Body_ApplyForceToCenter_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $1 = 0, $conv$i$i = 0, $m_flags$i$i = 0, $x2$i$i = 0, $y3$i$i = 0, sp = 0;
 sp = STACKTOP;
 if ((HEAP32[$self >> 2] | 0) != 2) {
  STACKTOP = sp;
  return;
 }
 $m_flags$i$i = $self + 4 | 0;
 $1 = HEAP16[$m_flags$i$i >> 1] | 0;
 if (($1 & 2) == 0) {
  $conv$i$i = $1 & 65535;
  if (($conv$i$i & 2 | 0) == 0) {
   HEAP16[$m_flags$i$i >> 1] = $conv$i$i | 2;
   HEAPF32[$self + 144 >> 2] = 0.0;
  }
 }
 $x2$i$i = $self + 76 | 0;
 HEAPF32[$x2$i$i >> 2] = +HEAPF32[$arg0 >> 2] + +HEAPF32[$x2$i$i >> 2];
 $y3$i$i = $self + 80 | 0;
 HEAPF32[$y3$i$i >> 2] = +HEAPF32[$arg0 + 4 >> 2] + +HEAPF32[$y3$i$i >> 2];
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2Body_SetLinearVelocity_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $1 = 0.0, $10 = 0, $2 = 0.0, $4 = 0, $9 = 0, $conv$i$i = 0, $m_flags$i$i = 0, sp = 0;
 sp = STACKTOP;
 if ((HEAP32[$self >> 2] | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 $1 = +HEAPF32[$arg0 >> 2];
 $2 = +HEAPF32[$arg0 + 4 >> 2];
 if ($1 * $1 + $2 * $2 > 0.0) {
  $m_flags$i$i = $self + 4 | 0;
  $conv$i$i = HEAPU16[$m_flags$i$i >> 1] | 0;
  if (($conv$i$i & 2 | 0) == 0) {
   HEAP16[$m_flags$i$i >> 1] = $conv$i$i | 2;
   HEAPF32[$self + 144 >> 2] = 0.0;
  }
 }
 $4 = $arg0;
 $9 = HEAP32[$4 + 4 >> 2] | 0;
 $10 = $self + 64 | 0;
 HEAP32[$10 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$10 + 4 >> 2] = $9;
 STACKTOP = sp;
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $0 = 0, $3 = 0, $offset_to_base$0 = 0, $shr = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 $shr = $0 >> 8;
 if (($0 & 1 | 0) == 0) $offset_to_base$0 = $shr; else $offset_to_base$0 = HEAP32[(HEAP32[$adjustedPtr >> 2] | 0) + $shr >> 2] | 0;
 $3 = HEAP32[$this >> 2] | 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$3 >> 2] | 0) + 28 >> 2] & 63]($3, $info, $adjustedPtr + $offset_to_base$0 | 0, ($0 & 2 | 0) != 0 ? $path_below : 2);
 STACKTOP = sp;
 return;
}
function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((num | 0) >= 4096) return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0;
 ret = dest | 0;
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if ((num | 0) == 0) return ret | 0;
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
   num = num - 1 | 0;
  }
  while ((num | 0) >= 4) {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
   num = num - 4 | 0;
  }
 }
 while ((num | 0) > 0) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
  num = num - 1 | 0;
 }
 return ret | 0;
}
function __ZN15b2ContactFilter13ShouldCollideEP9b2FixtureS1_($this, $fixtureA, $fixtureB) {
 $this = $this | 0;
 $fixtureA = $fixtureA | 0;
 $fixtureB = $fixtureB | 0;
 var $0 = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP16[$fixtureA + 36 >> 1] | 0;
 if (!($0 << 16 >> 16 == 0 ? 1 : $0 << 16 >> 16 != (HEAP16[$fixtureB + 36 >> 1] | 0))) {
  $retval$0 = $0 << 16 >> 16 > 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 if ((HEAP16[$fixtureB + 32 >> 1] & HEAP16[$fixtureA + 34 >> 1]) << 16 >> 16 == 0) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $retval$0 = (HEAP16[$fixtureB + 34 >> 1] & HEAP16[$fixtureA + 32 >> 1]) << 16 >> 16 != 0;
 STACKTOP = sp;
 return $retval$0 | 0;
}
function _emscripten_bind_b2PulleyJoint_GetLengthB_0($self) {
 $self = $self | 0;
 var $0 = 0, $1 = 0.0, $13 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $7 = 0, $call$i$i$i = 0.0, $sub$i$i = 0.0, $sub3$i$i = 0.0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self + 52 >> 2] | 0;
 $1 = +HEAPF32[$0 + 24 >> 2];
 $2 = +HEAPF32[$self + 100 >> 2];
 $3 = +HEAPF32[$0 + 20 >> 2];
 $4 = +HEAPF32[$self + 104 >> 2];
 $7 = $self + 76 | 0;
 $13 = +HEAPF32[$7 >> 2];
 $sub$i$i = +HEAPF32[$0 + 12 >> 2] + ($1 * $2 - $3 * $4) - $13;
 $sub3$i$i = $2 * $3 + $1 * $4 + +HEAPF32[$0 + 16 >> 2] - +HEAPF32[$7 + 4 >> 2];
 $call$i$i$i = +Math_sqrt(+($sub$i$i * $sub$i$i + $sub3$i$i * $sub3$i$i));
 STACKTOP = sp;
 return +$call$i$i$i;
}
function _emscripten_bind_b2PulleyJoint_GetLengthA_0($self) {
 $self = $self | 0;
 var $0 = 0, $1 = 0.0, $13 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $7 = 0, $call$i$i$i = 0.0, $sub$i$i = 0.0, $sub3$i$i = 0.0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self + 48 >> 2] | 0;
 $1 = +HEAPF32[$0 + 24 >> 2];
 $2 = +HEAPF32[$self + 92 >> 2];
 $3 = +HEAPF32[$0 + 20 >> 2];
 $4 = +HEAPF32[$self + 96 >> 2];
 $7 = $self + 68 | 0;
 $13 = +HEAPF32[$7 >> 2];
 $sub$i$i = +HEAPF32[$0 + 12 >> 2] + ($1 * $2 - $3 * $4) - $13;
 $sub3$i$i = $2 * $3 + $1 * $4 + +HEAPF32[$0 + 16 >> 2] - +HEAPF32[$7 + 4 >> 2];
 $call$i$i$i = +Math_sqrt(+($sub$i$i * $sub$i$i + $sub3$i$i * $sub3$i$i));
 STACKTOP = sp;
 return +$call$i$i$i;
}
function _emscripten_bind_b2Body_GetLocalPoint_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $10 = 0.0, $11 = 0, $6 = 0.0, $7 = 0.0, $9 = 0.0, $sub$i$i = 0.0, $sub4$i$i = 0.0, sp = 0;
 sp = STACKTOP;
 if ((HEAP8[752] | 0) == 0) if ((___cxa_guard_acquire(752) | 0) != 0) ___cxa_guard_release(752);
 $sub$i$i = +HEAPF32[$arg0 >> 2] - +HEAPF32[$self + 12 >> 2];
 $sub4$i$i = +HEAPF32[$arg0 + 4 >> 2] - +HEAPF32[$self + 16 >> 2];
 $6 = +HEAPF32[$self + 24 >> 2];
 $7 = +HEAPF32[$self + 20 >> 2];
 $9 = +($sub$i$i * $6 + $sub4$i$i * $7);
 $10 = +($6 * $sub4$i$i - $sub$i$i * $7);
 $11 = 744;
 HEAPF32[$11 >> 2] = $9;
 HEAPF32[$11 + 4 >> 2] = $10;
 STACKTOP = sp;
 return 744;
}
function _emscripten_bind_b2Body_ApplyAngularImpulse_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 var $1 = 0, $conv$i$i = 0, $m_angularVelocity$i = 0, $m_flags$i$i = 0, sp = 0;
 sp = STACKTOP;
 if ((HEAP32[$self >> 2] | 0) != 2) {
  STACKTOP = sp;
  return;
 }
 $m_flags$i$i = $self + 4 | 0;
 $1 = HEAP16[$m_flags$i$i >> 1] | 0;
 if (($1 & 2) == 0) {
  $conv$i$i = $1 & 65535;
  if (($conv$i$i & 2 | 0) == 0) {
   HEAP16[$m_flags$i$i >> 1] = $conv$i$i | 2;
   HEAPF32[$self + 144 >> 2] = 0.0;
  }
 }
 $m_angularVelocity$i = $self + 72 | 0;
 HEAPF32[$m_angularVelocity$i >> 2] = +HEAPF32[$m_angularVelocity$i >> 2] + +HEAPF32[$self + 128 >> 2] * $arg0;
 STACKTOP = sp;
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($info, $adjustedPtr, $path_below);
  STACKTOP = sp;
  return;
 } else {
  $1 = HEAP32[$this + 8 >> 2] | 0;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$1 >> 2] | 0) + 28 >> 2] & 63]($1, $info, $adjustedPtr, $path_below);
  STACKTOP = sp;
  return;
 }
}
function _emscripten_bind_b2Mat22_GetInverse_0($self) {
 $self = $self | 0;
 var $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $det$0$i = 0.0, $sub$i = 0.0, $sub10$i = 0.0, sp = 0;
 sp = STACKTOP;
 if ((HEAP8[304] | 0) == 0) if ((___cxa_guard_acquire(304) | 0) != 0) ___cxa_guard_release(304);
 $2 = +HEAPF32[$self >> 2];
 $3 = +HEAPF32[$self + 8 >> 2];
 $4 = +HEAPF32[$self + 4 >> 2];
 $5 = +HEAPF32[$self + 12 >> 2];
 $sub$i = $2 * $5 - $3 * $4;
 if ($sub$i != 0.0) $det$0$i = 1.0 / $sub$i; else $det$0$i = $sub$i;
 $sub10$i = -$det$0$i;
 HEAPF32[72] = $5 * $det$0$i;
 HEAPF32[73] = $4 * $sub10$i;
 HEAPF32[74] = $3 * $sub10$i;
 HEAPF32[75] = $2 * $det$0$i;
 STACKTOP = sp;
 return 288;
}
function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
 stop = ptr + num | 0;
 if ((num | 0) >= 20) {
  value = value & 255;
  unaligned = ptr & 3;
  value4 = value | value << 8 | value << 16 | value << 24;
  stop4 = stop & ~3;
  if (unaligned) {
   unaligned = ptr + 4 - unaligned | 0;
   while ((ptr | 0) < (unaligned | 0)) {
    HEAP8[ptr >> 0] = value;
    ptr = ptr + 1 | 0;
   }
  }
  while ((ptr | 0) < (stop4 | 0)) {
   HEAP32[ptr >> 2] = value4;
   ptr = ptr + 4 | 0;
  }
 }
 while ((ptr | 0) < (stop | 0)) {
  HEAP8[ptr >> 0] = value;
  ptr = ptr + 1 | 0;
 }
 return ptr - num | 0;
}
function __ZNK13b2CircleShape9TestPointERK11b2TransformRK6b2Vec2($this, $transform, $p) {
 $this = $this | 0;
 $transform = $transform | 0;
 $p = $p | 0;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $8 = 0.0, $sub$i8 = 0.0, $sub3$i = 0.0;
 $0 = +HEAPF32[$transform + 12 >> 2];
 $1 = +HEAPF32[$this + 12 >> 2];
 $2 = +HEAPF32[$transform + 8 >> 2];
 $3 = +HEAPF32[$this + 16 >> 2];
 $sub$i8 = +HEAPF32[$p >> 2] - (+HEAPF32[$transform >> 2] + ($0 * $1 - $2 * $3));
 $sub3$i = +HEAPF32[$p + 4 >> 2] - (+HEAPF32[$transform + 4 >> 2] + ($1 * $2 + $0 * $3));
 $8 = +HEAPF32[$this + 8 >> 2];
 return $sub$i8 * $sub$i8 + $sub3$i * $sub3$i <= $8 * $8 | 0;
}
function _emscripten_bind_b2Body_CreateFixture_2($self, $arg0, $arg1) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 $arg1 = +$arg1;
 var $call$i = 0, $def$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $def$i = sp;
 HEAP16[$def$i + 22 >> 1] = 1;
 HEAP16[$def$i + 24 >> 1] = -1;
 HEAP16[$def$i + 26 >> 1] = 0;
 HEAP32[$def$i + 4 >> 2] = 0;
 HEAPF32[$def$i + 8 >> 2] = .20000000298023224;
 HEAPF32[$def$i + 12 >> 2] = 0.0;
 HEAP8[$def$i + 20 >> 0] = 0;
 HEAP32[$def$i >> 2] = $arg0;
 HEAPF32[$def$i + 16 >> 2] = $arg1;
 $call$i = __ZN6b2Body13CreateFixtureEPK12b2FixtureDef($self, $def$i) | 0;
 STACKTOP = sp;
 return $call$i | 0;
}
function __ZNK7b2Mat337Solve22ERK6b2Vec2($agg$result, $this, $b$0$0$val, $b$0$1$val) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $b$0$0$val = +$b$0$0$val;
 $b$0$1$val = +$b$0$1$val;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $det$0 = 0.0, $sub = 0.0;
 $0 = +HEAPF32[$this >> 2];
 $1 = +HEAPF32[$this + 12 >> 2];
 $2 = +HEAPF32[$this + 4 >> 2];
 $3 = +HEAPF32[$this + 16 >> 2];
 $sub = $0 * $3 - $1 * $2;
 if ($sub != 0.0) $det$0 = 1.0 / $sub; else $det$0 = $sub;
 HEAPF32[$agg$result >> 2] = $det$0 * ($3 * $b$0$0$val - $1 * $b$0$1$val);
 HEAPF32[$agg$result + 4 >> 2] = $det$0 * ($0 * $b$0$1$val - $2 * $b$0$0$val);
 return;
}
function _emscripten_bind_b2Body_GetWorldPoint_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $10 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $8 = 0.0, $9 = 0.0, sp = 0;
 sp = STACKTOP;
 if ((HEAP8[720] | 0) == 0) if ((___cxa_guard_acquire(720) | 0) != 0) ___cxa_guard_release(720);
 $2 = +HEAPF32[$self + 24 >> 2];
 $3 = +HEAPF32[$arg0 >> 2];
 $4 = +HEAPF32[$self + 20 >> 2];
 $5 = +HEAPF32[$arg0 + 4 >> 2];
 $8 = +(+HEAPF32[$self + 12 >> 2] + ($2 * $3 - $4 * $5));
 $9 = +($3 * $4 + $2 * $5 + +HEAPF32[$self + 16 >> 2]);
 $10 = 712;
 HEAPF32[$10 >> 2] = $8;
 HEAPF32[$10 + 4 >> 2] = $9;
 STACKTOP = sp;
 return 712;
}
function _emscripten_bind_b2MouseJoint_SetTarget_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0, $1 = 0, $2 = 0, $7 = 0, $8 = 0, $conv$i$i = 0, $m_flags$i$i = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self + 52 >> 2] | 0;
 $m_flags$i$i = $0 + 4 | 0;
 $1 = HEAP16[$m_flags$i$i >> 1] | 0;
 if (($1 & 2) == 0) {
  $conv$i$i = $1 & 65535;
  if (($conv$i$i & 2 | 0) == 0) {
   HEAP16[$m_flags$i$i >> 1] = $conv$i$i | 2;
   HEAPF32[$0 + 144 >> 2] = 0.0;
  }
 }
 $2 = $arg0;
 $7 = HEAP32[$2 + 4 >> 2] | 0;
 $8 = $self + 76 | 0;
 HEAP32[$8 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$8 + 4 >> 2] = $7;
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2Body_GetMassData_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $10 = 0, $11 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $localCenter$i = 0, $m_mass$i = 0;
 $m_mass$i = $self + 116 | 0;
 HEAPF32[$arg0 >> 2] = +HEAPF32[$m_mass$i >> 2];
 $localCenter$i = $self + 28 | 0;
 $3 = +HEAPF32[$localCenter$i >> 2];
 $4 = +HEAPF32[$self + 32 >> 2];
 HEAPF32[$arg0 + 12 >> 2] = +HEAPF32[$self + 124 >> 2] + +HEAPF32[$m_mass$i >> 2] * ($3 * $3 + $4 * $4);
 $5 = $localCenter$i;
 $10 = HEAP32[$5 + 4 >> 2] | 0;
 $11 = $arg0 + 4 | 0;
 HEAP32[$11 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$11 + 4 >> 2] = $10;
 return;
}
function _emscripten_bind_b2Body_ApplyTorque_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 var $1 = 0, $conv$i$i = 0, $m_flags$i$i = 0, $m_torque$i = 0, sp = 0;
 sp = STACKTOP;
 if ((HEAP32[$self >> 2] | 0) != 2) {
  STACKTOP = sp;
  return;
 }
 $m_flags$i$i = $self + 4 | 0;
 $1 = HEAP16[$m_flags$i$i >> 1] | 0;
 if (($1 & 2) == 0) {
  $conv$i$i = $1 & 65535;
  if (($conv$i$i & 2 | 0) == 0) {
   HEAP16[$m_flags$i$i >> 1] = $conv$i$i | 2;
   HEAPF32[$self + 144 >> 2] = 0.0;
  }
 }
 $m_torque$i = $self + 84 | 0;
 HEAPF32[$m_torque$i >> 2] = +HEAPF32[$m_torque$i >> 2] + $arg0;
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2Body_GetLinearVelocityFromWorldPoint_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $2 = 0.0, sp = 0;
 sp = STACKTOP;
 if ((HEAP8[784] | 0) == 0) if ((___cxa_guard_acquire(784) | 0) != 0) ___cxa_guard_release(784);
 $2 = +HEAPF32[$self + 72 >> 2];
 $10 = +(+HEAPF32[$self + 64 >> 2] - $2 * (+HEAPF32[$arg0 + 4 >> 2] - +HEAPF32[$self + 48 >> 2]));
 $11 = +($2 * (+HEAPF32[$arg0 >> 2] - +HEAPF32[$self + 44 >> 2]) + +HEAPF32[$self + 68 >> 2]);
 $12 = 776;
 HEAPF32[$12 >> 2] = $10;
 HEAPF32[$12 + 4 >> 2] = $11;
 STACKTOP = sp;
 return 776;
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var sp = 0;
 sp = STACKTOP;
 if ((HEAP32[$info + 8 >> 2] | 0) != ($this | 0)) {
  STACKTOP = sp;
  return;
 }
 __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($info, $dst_ptr, $current_ptr, $path_below);
 STACKTOP = sp;
 return;
}
function __ZN16b2BlockAllocator4FreeEPvi($this, $p, $size) {
 $this = $this | 0;
 $p = $p | 0;
 $size = $size | 0;
 var $0 = 0, $arrayidx10 = 0, sp = 0;
 sp = STACKTOP;
 if (($size | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 if (($size | 0) <= 0) ___assert_fail(8248, 8176, 164, 11352);
 if (($size | 0) > 640) {
  _free($p);
  STACKTOP = sp;
  return;
 }
 $0 = HEAP8[7496 + $size >> 0] | 0;
 if (!(($0 & 255) < 14)) ___assert_fail(8264, 8176, 173, 11352);
 $arrayidx10 = $this + (($0 & 255) << 2) + 12 | 0;
 HEAP32[$p >> 2] = HEAP32[$arrayidx10 >> 2];
 HEAP32[$arrayidx10 >> 2] = $p;
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2Fixture_SetSensor_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $1 = 0, $conv$i$i = 0, $m_flags$i$i = 0, $m_isSensor$i = 0, sp = 0;
 sp = STACKTOP;
 $m_isSensor$i = $self + 38 | 0;
 if (($arg0 & 1 | 0) == (HEAPU8[$m_isSensor$i >> 0] | 0 | 0)) {
  STACKTOP = sp;
  return;
 }
 $1 = HEAP32[$self + 8 >> 2] | 0;
 $m_flags$i$i = $1 + 4 | 0;
 $conv$i$i = HEAPU16[$m_flags$i$i >> 1] | 0;
 if (($conv$i$i & 2 | 0) == 0) {
  HEAP16[$m_flags$i$i >> 1] = $conv$i$i | 2;
  HEAPF32[$1 + 144 >> 2] = 0.0;
 }
 HEAP8[$m_isSensor$i >> 0] = $arg0 & 1;
 STACKTOP = sp;
 return;
}
function __ZSt9terminatev() {
 var $1 = 0, $13 = 0, $2 = 0, $call1$i2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((_pthread_once(21168, 44) | 0) != 0) _abort_message(21176, sp);
 $call1$i2 = _pthread_getspecific(HEAP32[5290] | 0) | 0;
 if (($call1$i2 | 0) != 0) {
  $1 = HEAP32[$call1$i2 >> 2] | 0;
  if (($1 | 0) != 0) {
   $2 = $1 + 48 | 0;
   if ((HEAP32[$2 >> 2] & -256 | 0) == 1126902528 ? (HEAP32[$2 + 4 >> 2] | 0) == 1129074247 : 0) __ZSt11__terminatePFvvE(HEAP32[$1 + 12 >> 2] | 0);
  }
 }
 $13 = HEAP32[5246] | 0;
 HEAP32[5246] = $13 + 0;
 __ZSt11__terminatePFvvE($13);
}
function _emscripten_bind_b2Vec2_Normalize_0($self) {
 $self = $self | 0;
 var $0 = 0.0, $1 = 0.0, $call$i$i$i = 0.0, $div$i = 0.0, $retval$0$i = 0.0, $y$i$i = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF32[$self >> 2];
 $y$i$i = $self + 4 | 0;
 $1 = +HEAPF32[$y$i$i >> 2];
 $call$i$i$i = +Math_sqrt(+($0 * $0 + $1 * $1));
 if ($call$i$i$i < 1.1920928955078125e-7) {
  $retval$0$i = 0.0;
  STACKTOP = sp;
  return +$retval$0$i;
 }
 $div$i = 1.0 / $call$i$i$i;
 HEAPF32[$self >> 2] = $0 * $div$i;
 HEAPF32[$y$i$i >> 2] = $1 * $div$i;
 $retval$0$i = $call$i$i$i;
 STACKTOP = sp;
 return +$retval$0$i;
}
function _emscripten_bind_b2Body_GetWorldVector_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, sp = 0;
 sp = STACKTOP;
 if ((HEAP8[736] | 0) == 0) if ((___cxa_guard_acquire(736) | 0) != 0) ___cxa_guard_release(736);
 $2 = +HEAPF32[$self + 24 >> 2];
 $3 = +HEAPF32[$arg0 >> 2];
 $4 = +HEAPF32[$self + 20 >> 2];
 $5 = +HEAPF32[$arg0 + 4 >> 2];
 $6 = +($2 * $3 - $4 * $5);
 $7 = +($3 * $4 + $2 * $5);
 $8 = 728;
 HEAPF32[$8 >> 2] = $6;
 HEAPF32[$8 + 4 >> 2] = $7;
 STACKTOP = sp;
 return 728;
}
function _emscripten_bind_b2Body_GetLocalVector_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, sp = 0;
 sp = STACKTOP;
 if ((HEAP8[768] | 0) == 0) if ((___cxa_guard_acquire(768) | 0) != 0) ___cxa_guard_release(768);
 $2 = +HEAPF32[$self + 24 >> 2];
 $3 = +HEAPF32[$arg0 >> 2];
 $4 = +HEAPF32[$self + 20 >> 2];
 $5 = +HEAPF32[$arg0 + 4 >> 2];
 $7 = +($2 * $3 + $4 * $5);
 $8 = +($2 * $5 - $3 * $4);
 $9 = 760;
 HEAPF32[$9 >> 2] = $7;
 HEAPF32[$9 + 4 >> 2] = $8;
 STACKTOP = sp;
 return 760;
}
function _emscripten_bind_b2PrismaticJoint_GetReactionForce_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 var $3 = 0, $8 = 0, $9 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp;
 if ((HEAP8[280] | 0) == 0) if ((___cxa_guard_acquire(280) | 0) != 0) ___cxa_guard_release(280);
 FUNCTION_TABLE_viid[HEAP32[(HEAP32[$self >> 2] | 0) + 8 >> 2] & 63]($ref$tmp, $self, $arg0);
 $3 = $ref$tmp;
 $8 = HEAP32[$3 + 4 >> 2] | 0;
 $9 = 272;
 HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$9 + 4 >> 2] = $8;
 STACKTOP = sp;
 return 272;
}
function _emscripten_bind_b2RevoluteJoint_GetReactionForce_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 var $3 = 0, $8 = 0, $9 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp;
 if ((HEAP8[560] | 0) == 0) if ((___cxa_guard_acquire(560) | 0) != 0) ___cxa_guard_release(560);
 FUNCTION_TABLE_viid[HEAP32[(HEAP32[$self >> 2] | 0) + 8 >> 2] & 63]($ref$tmp, $self, $arg0);
 $3 = $ref$tmp;
 $8 = HEAP32[$3 + 4 >> 2] | 0;
 $9 = 552;
 HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$9 + 4 >> 2] = $8;
 STACKTOP = sp;
 return 552;
}
function _emscripten_bind_b2FrictionJoint_GetReactionForce_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 var $3 = 0, $8 = 0, $9 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp;
 if ((HEAP8[848] | 0) == 0) if ((___cxa_guard_acquire(848) | 0) != 0) ___cxa_guard_release(848);
 FUNCTION_TABLE_viid[HEAP32[(HEAP32[$self >> 2] | 0) + 8 >> 2] & 63]($ref$tmp, $self, $arg0);
 $3 = $ref$tmp;
 $8 = HEAP32[$3 + 4 >> 2] | 0;
 $9 = 840;
 HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$9 + 4 >> 2] = $8;
 STACKTOP = sp;
 return 840;
}
function _emscripten_bind_b2PulleyJoint_GetReactionForce_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 var $3 = 0, $8 = 0, $9 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp;
 if ((HEAP8[688] | 0) == 0) if ((___cxa_guard_acquire(688) | 0) != 0) ___cxa_guard_release(688);
 FUNCTION_TABLE_viid[HEAP32[(HEAP32[$self >> 2] | 0) + 8 >> 2] & 63]($ref$tmp, $self, $arg0);
 $3 = $ref$tmp;
 $8 = HEAP32[$3 + 4 >> 2] | 0;
 $9 = 680;
 HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$9 + 4 >> 2] = $8;
 STACKTOP = sp;
 return 680;
}
function _emscripten_bind_b2WheelJoint_GetReactionForce_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 var $3 = 0, $8 = 0, $9 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp;
 if ((HEAP8[608] | 0) == 0) if ((___cxa_guard_acquire(608) | 0) != 0) ___cxa_guard_release(608);
 FUNCTION_TABLE_viid[HEAP32[(HEAP32[$self >> 2] | 0) + 8 >> 2] & 63]($ref$tmp, $self, $arg0);
 $3 = $ref$tmp;
 $8 = HEAP32[$3 + 4 >> 2] | 0;
 $9 = 600;
 HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$9 + 4 >> 2] = $8;
 STACKTOP = sp;
 return 600;
}
function _emscripten_bind_b2MouseJoint_GetReactionForce_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 var $3 = 0, $8 = 0, $9 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp;
 if ((HEAP8[136] | 0) == 0) if ((___cxa_guard_acquire(136) | 0) != 0) ___cxa_guard_release(136);
 FUNCTION_TABLE_viid[HEAP32[(HEAP32[$self >> 2] | 0) + 8 >> 2] & 63]($ref$tmp, $self, $arg0);
 $3 = $ref$tmp;
 $8 = HEAP32[$3 + 4 >> 2] | 0;
 $9 = 128;
 HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$9 + 4 >> 2] = $8;
 STACKTOP = sp;
 return 128;
}
function _emscripten_bind_b2WeldJoint_GetReactionForce_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 var $3 = 0, $8 = 0, $9 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp;
 if ((HEAP8[464] | 0) == 0) if ((___cxa_guard_acquire(464) | 0) != 0) ___cxa_guard_release(464);
 FUNCTION_TABLE_viid[HEAP32[(HEAP32[$self >> 2] | 0) + 8 >> 2] & 63]($ref$tmp, $self, $arg0);
 $3 = $ref$tmp;
 $8 = HEAP32[$3 + 4 >> 2] | 0;
 $9 = 456;
 HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$9 + 4 >> 2] = $8;
 STACKTOP = sp;
 return 456;
}
function _emscripten_bind_b2RopeJoint_GetReactionForce_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 var $3 = 0, $8 = 0, $9 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp;
 if ((HEAP8[512] | 0) == 0) if ((___cxa_guard_acquire(512) | 0) != 0) ___cxa_guard_release(512);
 FUNCTION_TABLE_viid[HEAP32[(HEAP32[$self >> 2] | 0) + 8 >> 2] & 63]($ref$tmp, $self, $arg0);
 $3 = $ref$tmp;
 $8 = HEAP32[$3 + 4 >> 2] | 0;
 $9 = 504;
 HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$9 + 4 >> 2] = $8;
 STACKTOP = sp;
 return 504;
}
function _emscripten_bind_b2GearJoint_GetReactionForce_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 var $3 = 0, $8 = 0, $9 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp;
 if ((HEAP8[416] | 0) == 0) if ((___cxa_guard_acquire(416) | 0) != 0) ___cxa_guard_release(416);
 FUNCTION_TABLE_viid[HEAP32[(HEAP32[$self >> 2] | 0) + 8 >> 2] & 63]($ref$tmp, $self, $arg0);
 $3 = $ref$tmp;
 $8 = HEAP32[$3 + 4 >> 2] | 0;
 $9 = 408;
 HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$9 + 4 >> 2] = $8;
 STACKTOP = sp;
 return 408;
}
function _emscripten_bind_b2DistanceJoint_GetReactionForce_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 var $3 = 0, $8 = 0, $9 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp;
 if ((HEAP8[48] | 0) == 0) if ((___cxa_guard_acquire(48) | 0) != 0) ___cxa_guard_release(48);
 FUNCTION_TABLE_viid[HEAP32[(HEAP32[$self >> 2] | 0) + 8 >> 2] & 63]($ref$tmp, $self, $arg0);
 $3 = $ref$tmp;
 $8 = HEAP32[$3 + 4 >> 2] | 0;
 $9 = 40;
 HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$9 + 4 >> 2] = $8;
 STACKTOP = sp;
 return 40;
}
function ___cxa_can_catch($catchType, $excpType, $thrown) {
 $catchType = $catchType | 0;
 $excpType = $excpType | 0;
 $thrown = $thrown | 0;
 var $call = 0, $conv = 0, $temp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $temp = sp;
 HEAP32[$temp >> 2] = HEAP32[$thrown >> 2];
 $call = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$catchType >> 2] | 0) + 16 >> 2] & 63]($catchType, $excpType, $temp) | 0;
 $conv = $call & 1;
 if (!$call) {
  STACKTOP = sp;
  return $conv | 0;
 }
 HEAP32[$thrown >> 2] = HEAP32[$temp >> 2];
 STACKTOP = sp;
 return $conv | 0;
}
function _emscripten_bind_b2Joint_GetReactionForce_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 var $3 = 0, $8 = 0, $9 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp;
 if ((HEAP8[368] | 0) == 0) if ((___cxa_guard_acquire(368) | 0) != 0) ___cxa_guard_release(368);
 FUNCTION_TABLE_viid[HEAP32[(HEAP32[$self >> 2] | 0) + 8 >> 2] & 63]($ref$tmp, $self, $arg0);
 $3 = $ref$tmp;
 $8 = HEAP32[$3 + 4 >> 2] | 0;
 $9 = 360;
 HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$9 + 4 >> 2] = $8;
 STACKTOP = sp;
 return 360;
}
function _emscripten_bind_b2Body_SetSleepingAllowed_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $and$i = 0, $conv$i = 0, $m_flags$i = 0, sp = 0;
 sp = STACKTOP;
 $m_flags$i = $self + 4 | 0;
 $conv$i = HEAPU16[$m_flags$i >> 1] | 0;
 if ($arg0) {
  HEAP16[$m_flags$i >> 1] = $conv$i | 4;
  STACKTOP = sp;
  return;
 }
 $and$i = $conv$i & 65531;
 HEAP16[$m_flags$i >> 1] = $and$i;
 if (($conv$i & 2 | 0) != 0) {
  STACKTOP = sp;
  return;
 }
 HEAP16[$m_flags$i >> 1] = $and$i | 2;
 HEAPF32[$self + 144 >> 2] = 0.0;
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2AABB_Contains_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $8 = 0, sp = 0;
 sp = STACKTOP;
 if (!(+HEAPF32[$self >> 2] <= +HEAPF32[$arg0 >> 2])) {
  $8 = 0;
  STACKTOP = sp;
  return $8 | 0;
 }
 if (!(+HEAPF32[$self + 4 >> 2] <= +HEAPF32[$arg0 + 4 >> 2])) {
  $8 = 0;
  STACKTOP = sp;
  return $8 | 0;
 }
 if (!(+HEAPF32[$arg0 + 8 >> 2] <= +HEAPF32[$self + 8 >> 2])) {
  $8 = 0;
  STACKTOP = sp;
  return $8 | 0;
 }
 $8 = +HEAPF32[$arg0 + 12 >> 2] <= +HEAPF32[$self + 12 >> 2];
 STACKTOP = sp;
 return $8 | 0;
}
function __ZNK16b2PrismaticJoint16GetReactionForceEf($agg$result, $this, $inv_dt) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $inv_dt = +$inv_dt;
 var $0 = 0.0, $add = 0.0, $mul1$i4 = 0.0;
 $0 = +HEAPF32[$this + 104 >> 2];
 $add = +HEAPF32[$this + 116 >> 2] + +HEAPF32[$this + 112 >> 2];
 $mul1$i4 = ($0 * +HEAPF32[$this + 196 >> 2] + $add * +HEAPF32[$this + 188 >> 2]) * $inv_dt;
 HEAPF32[$agg$result >> 2] = ($0 * +HEAPF32[$this + 192 >> 2] + +HEAPF32[$this + 184 >> 2] * $add) * $inv_dt;
 HEAPF32[$agg$result + 4 >> 2] = $mul1$i4;
 return;
}
function __ZNK16b2PrismaticJoint10GetAnchorBEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $add17$i$i = 0.0;
 $0 = HEAP32[$this + 52 >> 2] | 0;
 $1 = +HEAPF32[$0 + 24 >> 2];
 $2 = +HEAPF32[$this + 76 >> 2];
 $3 = +HEAPF32[$0 + 20 >> 2];
 $4 = +HEAPF32[$this + 80 >> 2];
 $add17$i$i = $2 * $3 + $1 * $4 + +HEAPF32[$0 + 16 >> 2];
 HEAPF32[$agg$result >> 2] = +HEAPF32[$0 + 12 >> 2] + ($1 * $2 - $3 * $4);
 HEAPF32[$agg$result + 4 >> 2] = $add17$i$i;
 return;
}
function __ZNK16b2PrismaticJoint10GetAnchorAEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $add17$i$i = 0.0;
 $0 = HEAP32[$this + 48 >> 2] | 0;
 $1 = +HEAPF32[$0 + 24 >> 2];
 $2 = +HEAPF32[$this + 68 >> 2];
 $3 = +HEAPF32[$0 + 20 >> 2];
 $4 = +HEAPF32[$this + 72 >> 2];
 $add17$i$i = $2 * $3 + $1 * $4 + +HEAPF32[$0 + 16 >> 2];
 HEAPF32[$agg$result >> 2] = +HEAPF32[$0 + 12 >> 2] + ($1 * $2 - $3 * $4);
 HEAPF32[$agg$result + 4 >> 2] = $add17$i$i;
 return;
}
function __ZNK15b2RevoluteJoint10GetAnchorBEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $add17$i$i = 0.0;
 $0 = HEAP32[$this + 52 >> 2] | 0;
 $1 = +HEAPF32[$0 + 24 >> 2];
 $2 = +HEAPF32[$this + 76 >> 2];
 $3 = +HEAPF32[$0 + 20 >> 2];
 $4 = +HEAPF32[$this + 80 >> 2];
 $add17$i$i = $2 * $3 + $1 * $4 + +HEAPF32[$0 + 16 >> 2];
 HEAPF32[$agg$result >> 2] = +HEAPF32[$0 + 12 >> 2] + ($1 * $2 - $3 * $4);
 HEAPF32[$agg$result + 4 >> 2] = $add17$i$i;
 return;
}
function __ZNK15b2RevoluteJoint10GetAnchorAEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $add17$i$i = 0.0;
 $0 = HEAP32[$this + 48 >> 2] | 0;
 $1 = +HEAPF32[$0 + 24 >> 2];
 $2 = +HEAPF32[$this + 68 >> 2];
 $3 = +HEAPF32[$0 + 20 >> 2];
 $4 = +HEAPF32[$this + 72 >> 2];
 $add17$i$i = $2 * $3 + $1 * $4 + +HEAPF32[$0 + 16 >> 2];
 HEAPF32[$agg$result >> 2] = +HEAPF32[$0 + 12 >> 2] + ($1 * $2 - $3 * $4);
 HEAPF32[$agg$result + 4 >> 2] = $add17$i$i;
 return;
}
function __ZNK15b2FrictionJoint10GetAnchorBEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $add17$i$i = 0.0;
 $0 = HEAP32[$this + 52 >> 2] | 0;
 $1 = +HEAPF32[$0 + 24 >> 2];
 $2 = +HEAPF32[$this + 76 >> 2];
 $3 = +HEAPF32[$0 + 20 >> 2];
 $4 = +HEAPF32[$this + 80 >> 2];
 $add17$i$i = $2 * $3 + $1 * $4 + +HEAPF32[$0 + 16 >> 2];
 HEAPF32[$agg$result >> 2] = +HEAPF32[$0 + 12 >> 2] + ($1 * $2 - $3 * $4);
 HEAPF32[$agg$result + 4 >> 2] = $add17$i$i;
 return;
}
function __ZNK15b2FrictionJoint10GetAnchorAEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $add17$i$i = 0.0;
 $0 = HEAP32[$this + 48 >> 2] | 0;
 $1 = +HEAPF32[$0 + 24 >> 2];
 $2 = +HEAPF32[$this + 68 >> 2];
 $3 = +HEAPF32[$0 + 20 >> 2];
 $4 = +HEAPF32[$this + 72 >> 2];
 $add17$i$i = $2 * $3 + $1 * $4 + +HEAPF32[$0 + 16 >> 2];
 HEAPF32[$agg$result >> 2] = +HEAPF32[$0 + 12 >> 2] + ($1 * $2 - $3 * $4);
 HEAPF32[$agg$result + 4 >> 2] = $add17$i$i;
 return;
}
function __ZNK15b2DistanceJoint10GetAnchorBEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $add17$i$i = 0.0;
 $0 = HEAP32[$this + 52 >> 2] | 0;
 $1 = +HEAPF32[$0 + 24 >> 2];
 $2 = +HEAPF32[$this + 88 >> 2];
 $3 = +HEAPF32[$0 + 20 >> 2];
 $4 = +HEAPF32[$this + 92 >> 2];
 $add17$i$i = $2 * $3 + $1 * $4 + +HEAPF32[$0 + 16 >> 2];
 HEAPF32[$agg$result >> 2] = +HEAPF32[$0 + 12 >> 2] + ($1 * $2 - $3 * $4);
 HEAPF32[$agg$result + 4 >> 2] = $add17$i$i;
 return;
}
function __ZNK15b2DistanceJoint10GetAnchorAEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $add17$i$i = 0.0;
 $0 = HEAP32[$this + 48 >> 2] | 0;
 $1 = +HEAPF32[$0 + 24 >> 2];
 $2 = +HEAPF32[$this + 80 >> 2];
 $3 = +HEAPF32[$0 + 20 >> 2];
 $4 = +HEAPF32[$this + 84 >> 2];
 $add17$i$i = $2 * $3 + $1 * $4 + +HEAPF32[$0 + 16 >> 2];
 HEAPF32[$agg$result >> 2] = +HEAPF32[$0 + 12 >> 2] + ($1 * $2 - $3 * $4);
 HEAPF32[$agg$result + 4 >> 2] = $add17$i$i;
 return;
}
function __ZNK13b2PulleyJoint10GetAnchorBEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $add17$i$i = 0.0;
 $0 = HEAP32[$this + 52 >> 2] | 0;
 $1 = +HEAPF32[$0 + 24 >> 2];
 $2 = +HEAPF32[$this + 100 >> 2];
 $3 = +HEAPF32[$0 + 20 >> 2];
 $4 = +HEAPF32[$this + 104 >> 2];
 $add17$i$i = $2 * $3 + $1 * $4 + +HEAPF32[$0 + 16 >> 2];
 HEAPF32[$agg$result >> 2] = +HEAPF32[$0 + 12 >> 2] + ($1 * $2 - $3 * $4);
 HEAPF32[$agg$result + 4 >> 2] = $add17$i$i;
 return;
}
function __ZN8b2IslandD2Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZN16b2StackAllocator4FreeEPv(HEAP32[$this >> 2] | 0, HEAP32[$this + 20 >> 2] | 0);
 __ZN16b2StackAllocator4FreeEPv(HEAP32[$this >> 2] | 0, HEAP32[$this + 24 >> 2] | 0);
 __ZN16b2StackAllocator4FreeEPv(HEAP32[$this >> 2] | 0, HEAP32[$this + 16 >> 2] | 0);
 __ZN16b2StackAllocator4FreeEPv(HEAP32[$this >> 2] | 0, HEAP32[$this + 12 >> 2] | 0);
 __ZN16b2StackAllocator4FreeEPv(HEAP32[$this >> 2] | 0, HEAP32[$this + 8 >> 2] | 0);
 STACKTOP = sp;
 return;
}
function __ZNK13b2PulleyJoint10GetAnchorAEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $add17$i$i = 0.0;
 $0 = HEAP32[$this + 48 >> 2] | 0;
 $1 = +HEAPF32[$0 + 24 >> 2];
 $2 = +HEAPF32[$this + 92 >> 2];
 $3 = +HEAPF32[$0 + 20 >> 2];
 $4 = +HEAPF32[$this + 96 >> 2];
 $add17$i$i = $2 * $3 + $1 * $4 + +HEAPF32[$0 + 16 >> 2];
 HEAPF32[$agg$result >> 2] = +HEAPF32[$0 + 12 >> 2] + ($1 * $2 - $3 * $4);
 HEAPF32[$agg$result + 4 >> 2] = $add17$i$i;
 return;
}
function __ZNK11b2GearJoint10GetAnchorBEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $add17$i$i = 0.0;
 $0 = HEAP32[$this + 52 >> 2] | 0;
 $1 = +HEAPF32[$0 + 24 >> 2];
 $2 = +HEAPF32[$this + 100 >> 2];
 $3 = +HEAPF32[$0 + 20 >> 2];
 $4 = +HEAPF32[$this + 104 >> 2];
 $add17$i$i = $2 * $3 + $1 * $4 + +HEAPF32[$0 + 16 >> 2];
 HEAPF32[$agg$result >> 2] = +HEAPF32[$0 + 12 >> 2] + ($1 * $2 - $3 * $4);
 HEAPF32[$agg$result + 4 >> 2] = $add17$i$i;
 return;
}
function __ZNK12b2WheelJoint10GetAnchorBEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $add17$i$i = 0.0;
 $0 = HEAP32[$this + 52 >> 2] | 0;
 $1 = +HEAPF32[$0 + 24 >> 2];
 $2 = +HEAPF32[$this + 84 >> 2];
 $3 = +HEAPF32[$0 + 20 >> 2];
 $4 = +HEAPF32[$this + 88 >> 2];
 $add17$i$i = $2 * $3 + $1 * $4 + +HEAPF32[$0 + 16 >> 2];
 HEAPF32[$agg$result >> 2] = +HEAPF32[$0 + 12 >> 2] + ($1 * $2 - $3 * $4);
 HEAPF32[$agg$result + 4 >> 2] = $add17$i$i;
 return;
}
function __ZNK12b2WheelJoint10GetAnchorAEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $add17$i$i = 0.0;
 $0 = HEAP32[$this + 48 >> 2] | 0;
 $1 = +HEAPF32[$0 + 24 >> 2];
 $2 = +HEAPF32[$this + 76 >> 2];
 $3 = +HEAPF32[$0 + 20 >> 2];
 $4 = +HEAPF32[$this + 80 >> 2];
 $add17$i$i = $2 * $3 + $1 * $4 + +HEAPF32[$0 + 16 >> 2];
 HEAPF32[$agg$result >> 2] = +HEAPF32[$0 + 12 >> 2] + ($1 * $2 - $3 * $4);
 HEAPF32[$agg$result + 4 >> 2] = $add17$i$i;
 return;
}
function __ZNK12b2MouseJoint10GetAnchorBEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $add17$i$i = 0.0;
 $0 = HEAP32[$this + 52 >> 2] | 0;
 $1 = +HEAPF32[$0 + 24 >> 2];
 $2 = +HEAPF32[$this + 68 >> 2];
 $3 = +HEAPF32[$0 + 20 >> 2];
 $4 = +HEAPF32[$this + 72 >> 2];
 $add17$i$i = $2 * $3 + $1 * $4 + +HEAPF32[$0 + 16 >> 2];
 HEAPF32[$agg$result >> 2] = +HEAPF32[$0 + 12 >> 2] + ($1 * $2 - $3 * $4);
 HEAPF32[$agg$result + 4 >> 2] = $add17$i$i;
 return;
}
function __ZNK11b2WeldJoint10GetAnchorBEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $add17$i$i = 0.0;
 $0 = HEAP32[$this + 52 >> 2] | 0;
 $1 = +HEAPF32[$0 + 24 >> 2];
 $2 = +HEAPF32[$this + 88 >> 2];
 $3 = +HEAPF32[$0 + 20 >> 2];
 $4 = +HEAPF32[$this + 92 >> 2];
 $add17$i$i = $2 * $3 + $1 * $4 + +HEAPF32[$0 + 16 >> 2];
 HEAPF32[$agg$result >> 2] = +HEAPF32[$0 + 12 >> 2] + ($1 * $2 - $3 * $4);
 HEAPF32[$agg$result + 4 >> 2] = $add17$i$i;
 return;
}
function __ZNK11b2WeldJoint10GetAnchorAEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $add17$i$i = 0.0;
 $0 = HEAP32[$this + 48 >> 2] | 0;
 $1 = +HEAPF32[$0 + 24 >> 2];
 $2 = +HEAPF32[$this + 80 >> 2];
 $3 = +HEAPF32[$0 + 20 >> 2];
 $4 = +HEAPF32[$this + 84 >> 2];
 $add17$i$i = $2 * $3 + $1 * $4 + +HEAPF32[$0 + 16 >> 2];
 HEAPF32[$agg$result >> 2] = +HEAPF32[$0 + 12 >> 2] + ($1 * $2 - $3 * $4);
 HEAPF32[$agg$result + 4 >> 2] = $add17$i$i;
 return;
}
function __ZNK11b2RopeJoint10GetAnchorBEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $add17$i$i = 0.0;
 $0 = HEAP32[$this + 52 >> 2] | 0;
 $1 = +HEAPF32[$0 + 24 >> 2];
 $2 = +HEAPF32[$this + 76 >> 2];
 $3 = +HEAPF32[$0 + 20 >> 2];
 $4 = +HEAPF32[$this + 80 >> 2];
 $add17$i$i = $2 * $3 + $1 * $4 + +HEAPF32[$0 + 16 >> 2];
 HEAPF32[$agg$result >> 2] = +HEAPF32[$0 + 12 >> 2] + ($1 * $2 - $3 * $4);
 HEAPF32[$agg$result + 4 >> 2] = $add17$i$i;
 return;
}
function __ZNK11b2RopeJoint10GetAnchorAEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $add17$i$i = 0.0;
 $0 = HEAP32[$this + 48 >> 2] | 0;
 $1 = +HEAPF32[$0 + 24 >> 2];
 $2 = +HEAPF32[$this + 68 >> 2];
 $3 = +HEAPF32[$0 + 20 >> 2];
 $4 = +HEAPF32[$this + 72 >> 2];
 $add17$i$i = $2 * $3 + $1 * $4 + +HEAPF32[$0 + 16 >> 2];
 HEAPF32[$agg$result >> 2] = +HEAPF32[$0 + 12 >> 2] + ($1 * $2 - $3 * $4);
 HEAPF32[$agg$result + 4 >> 2] = $add17$i$i;
 return;
}
function __ZNK11b2GearJoint10GetAnchorAEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $add17$i$i = 0.0;
 $0 = HEAP32[$this + 48 >> 2] | 0;
 $1 = +HEAPF32[$0 + 24 >> 2];
 $2 = +HEAPF32[$this + 92 >> 2];
 $3 = +HEAPF32[$0 + 20 >> 2];
 $4 = +HEAPF32[$this + 96 >> 2];
 $add17$i$i = $2 * $3 + $1 * $4 + +HEAPF32[$0 + 16 >> 2];
 HEAPF32[$agg$result >> 2] = +HEAPF32[$0 + 12 >> 2] + ($1 * $2 - $3 * $4);
 HEAPF32[$agg$result + 4 >> 2] = $add17$i$i;
 return;
}
function _emscripten_bind_b2PrismaticJoint_GetAnchorB_0($self) {
 $self = $self | 0;
 var $3 = 0, $8 = 0, $9 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp;
 if ((HEAP8[264] | 0) == 0) if ((___cxa_guard_acquire(264) | 0) != 0) ___cxa_guard_release(264);
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$self >> 2] | 0) + 4 >> 2] & 127]($ref$tmp, $self);
 $3 = $ref$tmp;
 $8 = HEAP32[$3 + 4 >> 2] | 0;
 $9 = 256;
 HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$9 + 4 >> 2] = $8;
 STACKTOP = sp;
 return 256;
}
function _emscripten_bind_b2RevoluteJoint_GetAnchorB_0($self) {
 $self = $self | 0;
 var $3 = 0, $8 = 0, $9 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp;
 if ((HEAP8[544] | 0) == 0) if ((___cxa_guard_acquire(544) | 0) != 0) ___cxa_guard_release(544);
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$self >> 2] | 0) + 4 >> 2] & 127]($ref$tmp, $self);
 $3 = $ref$tmp;
 $8 = HEAP32[$3 + 4 >> 2] | 0;
 $9 = 536;
 HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$9 + 4 >> 2] = $8;
 STACKTOP = sp;
 return 536;
}
function _emscripten_bind_b2FrictionJoint_GetAnchorB_0($self) {
 $self = $self | 0;
 var $3 = 0, $8 = 0, $9 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp;
 if ((HEAP8[832] | 0) == 0) if ((___cxa_guard_acquire(832) | 0) != 0) ___cxa_guard_release(832);
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$self >> 2] | 0) + 4 >> 2] & 127]($ref$tmp, $self);
 $3 = $ref$tmp;
 $8 = HEAP32[$3 + 4 >> 2] | 0;
 $9 = 824;
 HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$9 + 4 >> 2] = $8;
 STACKTOP = sp;
 return 824;
}
function _emscripten_bind_b2PulleyJoint_GetAnchorB_0($self) {
 $self = $self | 0;
 var $3 = 0, $8 = 0, $9 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp;
 if ((HEAP8[672] | 0) == 0) if ((___cxa_guard_acquire(672) | 0) != 0) ___cxa_guard_release(672);
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$self >> 2] | 0) + 4 >> 2] & 127]($ref$tmp, $self);
 $3 = $ref$tmp;
 $8 = HEAP32[$3 + 4 >> 2] | 0;
 $9 = 664;
 HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$9 + 4 >> 2] = $8;
 STACKTOP = sp;
 return 664;
}
function _emscripten_bind_b2WheelJoint_GetAnchorB_0($self) {
 $self = $self | 0;
 var $3 = 0, $8 = 0, $9 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp;
 if ((HEAP8[592] | 0) == 0) if ((___cxa_guard_acquire(592) | 0) != 0) ___cxa_guard_release(592);
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$self >> 2] | 0) + 4 >> 2] & 127]($ref$tmp, $self);
 $3 = $ref$tmp;
 $8 = HEAP32[$3 + 4 >> 2] | 0;
 $9 = 584;
 HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$9 + 4 >> 2] = $8;
 STACKTOP = sp;
 return 584;
}
function _emscripten_bind_b2MouseJoint_GetAnchorB_0($self) {
 $self = $self | 0;
 var $3 = 0, $8 = 0, $9 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp;
 if ((HEAP8[120] | 0) == 0) if ((___cxa_guard_acquire(120) | 0) != 0) ___cxa_guard_release(120);
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$self >> 2] | 0) + 4 >> 2] & 127]($ref$tmp, $self);
 $3 = $ref$tmp;
 $8 = HEAP32[$3 + 4 >> 2] | 0;
 $9 = 112;
 HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$9 + 4 >> 2] = $8;
 STACKTOP = sp;
 return 112;
}
function _emscripten_bind_b2WeldJoint_GetAnchorB_0($self) {
 $self = $self | 0;
 var $3 = 0, $8 = 0, $9 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp;
 if ((HEAP8[448] | 0) == 0) if ((___cxa_guard_acquire(448) | 0) != 0) ___cxa_guard_release(448);
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$self >> 2] | 0) + 4 >> 2] & 127]($ref$tmp, $self);
 $3 = $ref$tmp;
 $8 = HEAP32[$3 + 4 >> 2] | 0;
 $9 = 440;
 HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$9 + 4 >> 2] = $8;
 STACKTOP = sp;
 return 440;
}
function _emscripten_bind_b2RopeJoint_GetAnchorB_0($self) {
 $self = $self | 0;
 var $3 = 0, $8 = 0, $9 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp;
 if ((HEAP8[496] | 0) == 0) if ((___cxa_guard_acquire(496) | 0) != 0) ___cxa_guard_release(496);
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$self >> 2] | 0) + 4 >> 2] & 127]($ref$tmp, $self);
 $3 = $ref$tmp;
 $8 = HEAP32[$3 + 4 >> 2] | 0;
 $9 = 488;
 HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$9 + 4 >> 2] = $8;
 STACKTOP = sp;
 return 488;
}
function _emscripten_bind_b2GearJoint_GetAnchorB_0($self) {
 $self = $self | 0;
 var $3 = 0, $8 = 0, $9 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp;
 if ((HEAP8[400] | 0) == 0) if ((___cxa_guard_acquire(400) | 0) != 0) ___cxa_guard_release(400);
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$self >> 2] | 0) + 4 >> 2] & 127]($ref$tmp, $self);
 $3 = $ref$tmp;
 $8 = HEAP32[$3 + 4 >> 2] | 0;
 $9 = 392;
 HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$9 + 4 >> 2] = $8;
 STACKTOP = sp;
 return 392;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
 $x_sroa_0_0_extract_trunc = $a$0;
 $y_sroa_0_0_extract_trunc = $b$0;
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
 $1$1 = tempRet0;
 return (tempRet0 = (Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0) + (Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0, $1$0 | 0 | 0) | 0;
}
function _emscripten_bind_b2DistanceJoint_GetAnchorB_0($self) {
 $self = $self | 0;
 var $3 = 0, $8 = 0, $9 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp;
 if ((HEAP8[32] | 0) == 0) if ((___cxa_guard_acquire(32) | 0) != 0) ___cxa_guard_release(32);
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$self >> 2] | 0) + 4 >> 2] & 127]($ref$tmp, $self);
 $3 = $ref$tmp;
 $8 = HEAP32[$3 + 4 >> 2] | 0;
 $9 = 24;
 HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$9 + 4 >> 2] = $8;
 STACKTOP = sp;
 return 24;
}
function __ZNK11b2EdgeShape11ComputeMassEP10b2MassDataf($this, $massData, $density) {
 $this = $this | 0;
 $massData = $massData | 0;
 $density = +$density;
 var $4 = 0.0, $5 = 0.0, $6 = 0, sp = 0;
 sp = STACKTOP;
 HEAPF32[$massData >> 2] = 0.0;
 $4 = +((+HEAPF32[$this + 12 >> 2] + +HEAPF32[$this + 20 >> 2]) * .5);
 $5 = +((+HEAPF32[$this + 16 >> 2] + +HEAPF32[$this + 24 >> 2]) * .5);
 $6 = $massData + 4 | 0;
 HEAPF32[$6 >> 2] = $4;
 HEAPF32[$6 + 4 >> 2] = $5;
 HEAPF32[$massData + 12 >> 2] = 0.0;
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2Body_SetAngularVelocity_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 var $conv$i$i = 0, $m_flags$i$i = 0, sp = 0;
 sp = STACKTOP;
 if ((HEAP32[$self >> 2] | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 if ($arg0 * $arg0 > 0.0) {
  $m_flags$i$i = $self + 4 | 0;
  $conv$i$i = HEAPU16[$m_flags$i$i >> 1] | 0;
  if (($conv$i$i & 2 | 0) == 0) {
   HEAP16[$m_flags$i$i >> 1] = $conv$i$i | 2;
   HEAPF32[$self + 144 >> 2] = 0.0;
  }
 }
 HEAPF32[$self + 72 >> 2] = $arg0;
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2Joint_GetAnchorB_0($self) {
 $self = $self | 0;
 var $3 = 0, $8 = 0, $9 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp;
 if ((HEAP8[352] | 0) == 0) if ((___cxa_guard_acquire(352) | 0) != 0) ___cxa_guard_release(352);
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$self >> 2] | 0) + 4 >> 2] & 127]($ref$tmp, $self);
 $3 = $ref$tmp;
 $8 = HEAP32[$3 + 4 >> 2] | 0;
 $9 = 344;
 HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$9 + 4 >> 2] = $8;
 STACKTOP = sp;
 return 344;
}
function _emscripten_bind_b2PrismaticJoint_GetAnchorA_0($self) {
 $self = $self | 0;
 var $3 = 0, $8 = 0, $9 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp;
 if ((HEAP8[248] | 0) == 0) if ((___cxa_guard_acquire(248) | 0) != 0) ___cxa_guard_release(248);
 FUNCTION_TABLE_vii[HEAP32[HEAP32[$self >> 2] >> 2] & 127]($ref$tmp, $self);
 $3 = $ref$tmp;
 $8 = HEAP32[$3 + 4 >> 2] | 0;
 $9 = 240;
 HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$9 + 4 >> 2] = $8;
 STACKTOP = sp;
 return 240;
}
function _emscripten_bind_b2RevoluteJoint_GetAnchorA_0($self) {
 $self = $self | 0;
 var $3 = 0, $8 = 0, $9 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp;
 if ((HEAP8[528] | 0) == 0) if ((___cxa_guard_acquire(528) | 0) != 0) ___cxa_guard_release(528);
 FUNCTION_TABLE_vii[HEAP32[HEAP32[$self >> 2] >> 2] & 127]($ref$tmp, $self);
 $3 = $ref$tmp;
 $8 = HEAP32[$3 + 4 >> 2] | 0;
 $9 = 520;
 HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$9 + 4 >> 2] = $8;
 STACKTOP = sp;
 return 520;
}
function _emscripten_bind_b2FrictionJoint_GetAnchorA_0($self) {
 $self = $self | 0;
 var $3 = 0, $8 = 0, $9 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp;
 if ((HEAP8[816] | 0) == 0) if ((___cxa_guard_acquire(816) | 0) != 0) ___cxa_guard_release(816);
 FUNCTION_TABLE_vii[HEAP32[HEAP32[$self >> 2] >> 2] & 127]($ref$tmp, $self);
 $3 = $ref$tmp;
 $8 = HEAP32[$3 + 4 >> 2] | 0;
 $9 = 808;
 HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$9 + 4 >> 2] = $8;
 STACKTOP = sp;
 return 808;
}
function _emscripten_bind_b2PulleyJoint_GetAnchorA_0($self) {
 $self = $self | 0;
 var $3 = 0, $8 = 0, $9 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp;
 if ((HEAP8[656] | 0) == 0) if ((___cxa_guard_acquire(656) | 0) != 0) ___cxa_guard_release(656);
 FUNCTION_TABLE_vii[HEAP32[HEAP32[$self >> 2] >> 2] & 127]($ref$tmp, $self);
 $3 = $ref$tmp;
 $8 = HEAP32[$3 + 4 >> 2] | 0;
 $9 = 648;
 HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$9 + 4 >> 2] = $8;
 STACKTOP = sp;
 return 648;
}
function _emscripten_bind_b2WheelJoint_GetAnchorA_0($self) {
 $self = $self | 0;
 var $3 = 0, $8 = 0, $9 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp;
 if ((HEAP8[576] | 0) == 0) if ((___cxa_guard_acquire(576) | 0) != 0) ___cxa_guard_release(576);
 FUNCTION_TABLE_vii[HEAP32[HEAP32[$self >> 2] >> 2] & 127]($ref$tmp, $self);
 $3 = $ref$tmp;
 $8 = HEAP32[$3 + 4 >> 2] | 0;
 $9 = 568;
 HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$9 + 4 >> 2] = $8;
 STACKTOP = sp;
 return 568;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var sp = 0;
 sp = STACKTOP;
 if ((HEAP32[$info + 8 >> 2] | 0) != ($this | 0)) {
  STACKTOP = sp;
  return;
 }
 __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($info, $adjustedPtr, $path_below);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2WeldJoint_GetAnchorA_0($self) {
 $self = $self | 0;
 var $3 = 0, $8 = 0, $9 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp;
 if ((HEAP8[432] | 0) == 0) if ((___cxa_guard_acquire(432) | 0) != 0) ___cxa_guard_release(432);
 FUNCTION_TABLE_vii[HEAP32[HEAP32[$self >> 2] >> 2] & 127]($ref$tmp, $self);
 $3 = $ref$tmp;
 $8 = HEAP32[$3 + 4 >> 2] | 0;
 $9 = 424;
 HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$9 + 4 >> 2] = $8;
 STACKTOP = sp;
 return 424;
}
function _emscripten_bind_b2RopeJoint_GetAnchorA_0($self) {
 $self = $self | 0;
 var $3 = 0, $8 = 0, $9 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp;
 if ((HEAP8[480] | 0) == 0) if ((___cxa_guard_acquire(480) | 0) != 0) ___cxa_guard_release(480);
 FUNCTION_TABLE_vii[HEAP32[HEAP32[$self >> 2] >> 2] & 127]($ref$tmp, $self);
 $3 = $ref$tmp;
 $8 = HEAP32[$3 + 4 >> 2] | 0;
 $9 = 472;
 HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$9 + 4 >> 2] = $8;
 STACKTOP = sp;
 return 472;
}
function _emscripten_bind_b2GearJoint_GetAnchorA_0($self) {
 $self = $self | 0;
 var $3 = 0, $8 = 0, $9 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp;
 if ((HEAP8[384] | 0) == 0) if ((___cxa_guard_acquire(384) | 0) != 0) ___cxa_guard_release(384);
 FUNCTION_TABLE_vii[HEAP32[HEAP32[$self >> 2] >> 2] & 127]($ref$tmp, $self);
 $3 = $ref$tmp;
 $8 = HEAP32[$3 + 4 >> 2] | 0;
 $9 = 376;
 HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$9 + 4 >> 2] = $8;
 STACKTOP = sp;
 return 376;
}
function _emscripten_bind_b2MouseJoint_GetAnchorA_0($self) {
 $self = $self | 0;
 var $3 = 0, $8 = 0, $9 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp;
 if ((HEAP8[104] | 0) == 0) if ((___cxa_guard_acquire(104) | 0) != 0) ___cxa_guard_release(104);
 FUNCTION_TABLE_vii[HEAP32[HEAP32[$self >> 2] >> 2] & 127]($ref$tmp, $self);
 $3 = $ref$tmp;
 $8 = HEAP32[$3 + 4 >> 2] | 0;
 $9 = 96;
 HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$9 + 4 >> 2] = $8;
 STACKTOP = sp;
 return 96;
}
function _emscripten_bind_b2EdgeShape_Set_2($self, $arg0, $arg1) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 $arg1 = $arg1 | 0;
 var $0 = 0, $10 = 0, $15 = 0, $16 = 0, $5 = 0, $6 = 0;
 $0 = $arg0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $self + 12 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 $10 = $arg1;
 $15 = HEAP32[$10 + 4 >> 2] | 0;
 $16 = $self + 20 | 0;
 HEAP32[$16 >> 2] = HEAP32[$10 >> 2];
 HEAP32[$16 + 4 >> 2] = $15;
 HEAP8[$self + 44 >> 0] = 0;
 HEAP8[$self + 45 >> 0] = 0;
 return;
}
function _emscripten_bind_b2DistanceJoint_GetAnchorA_0($self) {
 $self = $self | 0;
 var $3 = 0, $8 = 0, $9 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp;
 if ((HEAP8[16] | 0) == 0) if ((___cxa_guard_acquire(16) | 0) != 0) ___cxa_guard_release(16);
 FUNCTION_TABLE_vii[HEAP32[HEAP32[$self >> 2] >> 2] & 127]($ref$tmp, $self);
 $3 = $ref$tmp;
 $8 = HEAP32[$3 + 4 >> 2] | 0;
 $9 = 8;
 HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$9 + 4 >> 2] = $8;
 STACKTOP = sp;
 return 8;
}
function _emscripten_bind_b2Joint_GetAnchorA_0($self) {
 $self = $self | 0;
 var $3 = 0, $8 = 0, $9 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp;
 if ((HEAP8[336] | 0) == 0) if ((___cxa_guard_acquire(336) | 0) != 0) ___cxa_guard_release(336);
 FUNCTION_TABLE_vii[HEAP32[HEAP32[$self >> 2] >> 2] & 127]($ref$tmp, $self);
 $3 = $ref$tmp;
 $8 = HEAP32[$3 + 4 >> 2] | 0;
 $9 = 328;
 HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$9 + 4 >> 2] = $8;
 STACKTOP = sp;
 return 328;
}
function __ZNK12b2WheelJoint16GetReactionForceEf($agg$result, $this, $inv_dt) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $inv_dt = +$inv_dt;
 var $0 = 0.0, $3 = 0.0, $mul1$i4 = 0.0;
 $0 = +HEAPF32[$this + 108 >> 2];
 $3 = +HEAPF32[$this + 116 >> 2];
 $mul1$i4 = ($0 * +HEAPF32[$this + 184 >> 2] + $3 * +HEAPF32[$this + 176 >> 2]) * $inv_dt;
 HEAPF32[$agg$result >> 2] = ($0 * +HEAPF32[$this + 180 >> 2] + $3 * +HEAPF32[$this + 172 >> 2]) * $inv_dt;
 HEAPF32[$agg$result + 4 >> 2] = $mul1$i4;
 return;
}
function _emscripten_bind_b2World_ClearForces_0($self) {
 $self = $self | 0;
 var $body$04$i = 0, $body$06$i = 0, sp = 0;
 sp = STACKTOP;
 $body$04$i = HEAP32[$self + 102952 >> 2] | 0;
 if (($body$04$i | 0) == 0) {
  STACKTOP = sp;
  return;
 } else $body$06$i = $body$04$i;
 do {
  HEAPF32[$body$06$i + 76 >> 2] = 0.0;
  HEAPF32[$body$06$i + 80 >> 2] = 0.0;
  HEAPF32[$body$06$i + 84 >> 2] = 0.0;
  $body$06$i = HEAP32[$body$06$i + 96 >> 2] | 0;
 } while (($body$06$i | 0) != 0);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2Mat33_Solve33_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ref$tmp = sp;
 if ((HEAP8[72] | 0) == 0) if ((___cxa_guard_acquire(72) | 0) != 0) ___cxa_guard_release(72);
 __ZNK7b2Mat337Solve33ERK6b2Vec3($ref$tmp, $self, $arg0);
 HEAP32[14] = HEAP32[$ref$tmp + 0 >> 2];
 HEAP32[15] = HEAP32[$ref$tmp + 4 >> 2];
 HEAP32[16] = HEAP32[$ref$tmp + 8 >> 2];
 STACKTOP = sp;
 return 56;
}
function __ZN8b2Island3AddEP6b2Body($this, $body) {
 $this = $this | 0;
 $body = $body | 0;
 var $0 = 0, $2 = 0, $m_bodyCount = 0;
 $m_bodyCount = $this + 28 | 0;
 $0 = HEAP32[$m_bodyCount >> 2] | 0;
 if (($0 | 0) < (HEAP32[$this + 40 >> 2] | 0)) {
  HEAP32[$body + 8 >> 2] = $0;
  $2 = HEAP32[$m_bodyCount >> 2] | 0;
  HEAP32[(HEAP32[$this + 8 >> 2] | 0) + ($2 << 2) >> 2] = $body;
  HEAP32[$m_bodyCount >> 2] = $2 + 1;
  return;
 } else ___assert_fail(14816, 14728, 54, 14768);
}
function __ZN23b2EdgeAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_($this, $manifold, $xfA, $xfB) {
 $this = $this | 0;
 $manifold = $manifold | 0;
 $xfA = $xfA | 0;
 $xfB = $xfB | 0;
 var sp = 0;
 sp = STACKTOP;
 __Z23b2CollideEdgeAndPolygonP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS6_($manifold, HEAP32[(HEAP32[$this + 48 >> 2] | 0) + 12 >> 2] | 0, $xfA, HEAP32[(HEAP32[$this + 52 >> 2] | 0) + 12 >> 2] | 0, $xfB);
 STACKTOP = sp;
 return;
}
function copyTempDouble(ptr) {
 ptr = ptr | 0;
 HEAP8[tempDoublePtr >> 0] = HEAP8[ptr >> 0];
 HEAP8[tempDoublePtr + 1 >> 0] = HEAP8[ptr + 1 >> 0];
 HEAP8[tempDoublePtr + 2 >> 0] = HEAP8[ptr + 2 >> 0];
 HEAP8[tempDoublePtr + 3 >> 0] = HEAP8[ptr + 3 >> 0];
 HEAP8[tempDoublePtr + 4 >> 0] = HEAP8[ptr + 4 >> 0];
 HEAP8[tempDoublePtr + 5 >> 0] = HEAP8[ptr + 5 >> 0];
 HEAP8[tempDoublePtr + 6 >> 0] = HEAP8[ptr + 6 >> 0];
 HEAP8[tempDoublePtr + 7 >> 0] = HEAP8[ptr + 7 >> 0];
}
function __ZN22b2EdgeAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_($this, $manifold, $xfA, $xfB) {
 $this = $this | 0;
 $manifold = $manifold | 0;
 $xfA = $xfA | 0;
 $xfB = $xfB | 0;
 var sp = 0;
 sp = STACKTOP;
 __Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6_($manifold, HEAP32[(HEAP32[$this + 48 >> 2] | 0) + 12 >> 2] | 0, $xfA, HEAP32[(HEAP32[$this + 52 >> 2] | 0) + 12 >> 2] | 0, $xfB);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2AABB_GetExtents_0($self) {
 $self = $self | 0;
 var $6 = 0.0, $7 = 0.0, $8 = 0, sp = 0;
 sp = STACKTOP;
 if ((HEAP8[216] | 0) == 0) if ((___cxa_guard_acquire(216) | 0) != 0) ___cxa_guard_release(216);
 $6 = +((+HEAPF32[$self + 8 >> 2] - +HEAPF32[$self >> 2]) * .5);
 $7 = +((+HEAPF32[$self + 12 >> 2] - +HEAPF32[$self + 4 >> 2]) * .5);
 $8 = 208;
 HEAPF32[$8 >> 2] = $6;
 HEAPF32[$8 + 4 >> 2] = $7;
 STACKTOP = sp;
 return 208;
}
function _emscripten_bind_b2AABB_GetCenter_0($self) {
 $self = $self | 0;
 var $6 = 0.0, $7 = 0.0, $8 = 0, sp = 0;
 sp = STACKTOP;
 if ((HEAP8[200] | 0) == 0) if ((___cxa_guard_acquire(200) | 0) != 0) ___cxa_guard_release(200);
 $6 = +((+HEAPF32[$self >> 2] + +HEAPF32[$self + 8 >> 2]) * .5);
 $7 = +((+HEAPF32[$self + 4 >> 2] + +HEAPF32[$self + 12 >> 2]) * .5);
 $8 = 192;
 HEAPF32[$8 >> 2] = $6;
 HEAPF32[$8 + 4 >> 2] = $7;
 STACKTOP = sp;
 return 192;
}
function _emscripten_bind_b2Mat22_Set_2($self, $arg0, $arg1) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 $arg1 = $arg1 | 0;
 var $0 = 0, $10 = 0, $15 = 0, $16 = 0, $5 = 0, $6 = 0;
 $0 = $arg0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $self;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 $10 = $arg1;
 $15 = HEAP32[$10 + 4 >> 2] | 0;
 $16 = $self + 8 | 0;
 HEAP32[$16 >> 2] = HEAP32[$10 >> 2];
 HEAP32[$16 + 4 >> 2] = $15;
 return;
}
function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535;
 $2 = $b & 65535;
 $3 = Math_imul($2, $1) | 0;
 $6 = $a >>> 16;
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
 $11 = $b >>> 16;
 $12 = Math_imul($11, $1) | 0;
 return (tempRet0 = ($8 >>> 16) + (Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, $8 + $12 << 16 | $3 & 65535 | 0) | 0;
}
function _emscripten_bind_b2Vec2_IsValid_0($self) {
 $self = $self | 0;
 var $0 = 0.0, $1 = 0.0, $2 = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF32[$self >> 2];
 if (!($0 == $0 & 0.0 == 0.0 & $0 > -inf & $0 < inf)) {
  $2 = 0;
  STACKTOP = sp;
  return $2 | 0;
 }
 $1 = +HEAPF32[$self + 4 >> 2];
 if (!($1 == $1 & 0.0 == 0.0 & $1 > -inf)) {
  $2 = 0;
  STACKTOP = sp;
  return $2 | 0;
 }
 $2 = $1 < inf;
 STACKTOP = sp;
 return $2 | 0;
}
function __ZN8b2Island3AddEP9b2Contact($this, $contact) {
 $this = $this | 0;
 $contact = $contact | 0;
 var $0 = 0, $m_contactCount = 0;
 $m_contactCount = $this + 36 | 0;
 $0 = HEAP32[$m_contactCount >> 2] | 0;
 if (($0 | 0) < (HEAP32[$this + 44 >> 2] | 0)) {
  HEAP32[$m_contactCount >> 2] = $0 + 1;
  HEAP32[(HEAP32[$this + 12 >> 2] | 0) + ($0 << 2) >> 2] = $contact;
  return;
 } else ___assert_fail(14776, 14728, 62, 14768);
}
function __Z14b2PairLessThanRK6b2PairS1_($pair1, $pair2) {
 $pair1 = $pair1 | 0;
 $pair2 = $pair2 | 0;
 var $0 = 0, $1 = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pair1 >> 2] | 0;
 $1 = HEAP32[$pair2 >> 2] | 0;
 if (($0 | 0) < ($1 | 0)) $retval$0 = 1; else if (($0 | 0) == ($1 | 0)) $retval$0 = (HEAP32[$pair1 + 4 >> 2] | 0) < (HEAP32[$pair2 + 4 >> 2] | 0); else $retval$0 = 0;
 STACKTOP = sp;
 return $retval$0 | 0;
}
function _emscripten_bind_b2Fixture_RayCast_3($self, $arg0, $arg1, $arg2) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 $arg1 = $arg1 | 0;
 $arg2 = $arg2 | 0;
 var $0 = 0, $call2$i = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self + 12 >> 2] | 0;
 $call2$i = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] & 63]($0, $arg0, $arg1, (HEAP32[$self + 8 >> 2] | 0) + 12 | 0, $arg2) | 0;
 STACKTOP = sp;
 return $call2$i | 0;
}
function _emscripten_bind_b2World_GetTreeHeight_0($self) {
 $self = $self | 0;
 var $0 = 0, $retval$0$i$i = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self + 102872 >> 2] | 0;
 if (($0 | 0) == -1) {
  $retval$0$i$i = 0;
  STACKTOP = sp;
  return $retval$0$i$i | 0;
 }
 $retval$0$i$i = HEAP32[(HEAP32[$self + 102876 >> 2] | 0) + ($0 * 36 | 0) + 32 >> 2] | 0;
 STACKTOP = sp;
 return $retval$0$i$i | 0;
}
function __ZNK13b2PulleyJoint16GetReactionForceEf($agg$result, $this, $inv_dt) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $inv_dt = +$inv_dt;
 var $0 = 0.0, $mul1$i4 = 0.0;
 $0 = +HEAPF32[$this + 116 >> 2];
 $mul1$i4 = $0 * +HEAPF32[$this + 140 >> 2] * $inv_dt;
 HEAPF32[$agg$result >> 2] = $0 * +HEAPF32[$this + 136 >> 2] * $inv_dt;
 HEAPF32[$agg$result + 4 >> 2] = $mul1$i4;
 return;
}
function __ZNK11b2GearJoint16GetReactionForceEf($agg$result, $this, $inv_dt) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $inv_dt = +$inv_dt;
 var $0 = 0.0, $mul1$i4 = 0.0;
 $0 = +HEAPF32[$this + 156 >> 2];
 $mul1$i4 = $0 * +HEAPF32[$this + 244 >> 2] * $inv_dt;
 HEAPF32[$agg$result >> 2] = $0 * +HEAPF32[$this + 240 >> 2] * $inv_dt;
 HEAPF32[$agg$result + 4 >> 2] = $mul1$i4;
 return;
}
function __ZNK15b2DistanceJoint16GetReactionForceEf($agg$result, $this, $inv_dt) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $inv_dt = +$inv_dt;
 var $mul = 0.0, $mul1$i = 0.0;
 $mul = +HEAPF32[$this + 100 >> 2] * $inv_dt;
 $mul1$i = $mul * +HEAPF32[$this + 120 >> 2];
 HEAPF32[$agg$result >> 2] = +HEAPF32[$this + 116 >> 2] * $mul;
 HEAPF32[$agg$result + 4 >> 2] = $mul1$i;
 return;
}
function _emscripten_bind_b2Vec3_op_sub_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $y3$i = 0, $z5$i = 0;
 HEAPF32[$self >> 2] = +HEAPF32[$self >> 2] - +HEAPF32[$arg0 >> 2];
 $y3$i = $self + 4 | 0;
 HEAPF32[$y3$i >> 2] = +HEAPF32[$y3$i >> 2] - +HEAPF32[$arg0 + 4 >> 2];
 $z5$i = $self + 8 | 0;
 HEAPF32[$z5$i >> 2] = +HEAPF32[$z5$i >> 2] - +HEAPF32[$arg0 + 8 >> 2];
 return;
}
function _emscripten_bind_b2Vec3_op_add_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $y3$i = 0, $z5$i = 0;
 HEAPF32[$self >> 2] = +HEAPF32[$arg0 >> 2] + +HEAPF32[$self >> 2];
 $y3$i = $self + 4 | 0;
 HEAPF32[$y3$i >> 2] = +HEAPF32[$arg0 + 4 >> 2] + +HEAPF32[$y3$i >> 2];
 $z5$i = $self + 8 | 0;
 HEAPF32[$z5$i >> 2] = +HEAPF32[$arg0 + 8 >> 2] + +HEAPF32[$z5$i >> 2];
 return;
}
function _emscripten_bind_b2PulleyJoint_GetGroundAnchorB_0($self) {
 $self = $self | 0;
 var $2 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 if ((HEAP8[640] | 0) == 0) if ((___cxa_guard_acquire(640) | 0) != 0) ___cxa_guard_release(640);
 $2 = $self + 76 | 0;
 $7 = HEAP32[$2 + 4 >> 2] | 0;
 $8 = 632;
 HEAP32[$8 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$8 + 4 >> 2] = $7;
 STACKTOP = sp;
 return 632;
}
function _emscripten_bind_b2PulleyJoint_GetGroundAnchorA_0($self) {
 $self = $self | 0;
 var $2 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 if ((HEAP8[624] | 0) == 0) if ((___cxa_guard_acquire(624) | 0) != 0) ___cxa_guard_release(624);
 $2 = $self + 68 | 0;
 $7 = HEAP32[$2 + 4 >> 2] | 0;
 $8 = 616;
 HEAP32[$8 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$8 + 4 >> 2] = $7;
 STACKTOP = sp;
 return 616;
}
function __ZNK11b2RopeJoint16GetReactionForceEf($agg$result, $this, $inv_dt) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $inv_dt = +$inv_dt;
 var $mul = 0.0, $mul1$i = 0.0;
 $mul = +HEAPF32[$this + 92 >> 2] * $inv_dt;
 $mul1$i = $mul * +HEAPF32[$this + 108 >> 2];
 HEAPF32[$agg$result >> 2] = +HEAPF32[$this + 104 >> 2] * $mul;
 HEAPF32[$agg$result + 4 >> 2] = $mul1$i;
 return;
}
function _emscripten_bind_b2Body_GetLinearVelocity_0($self) {
 $self = $self | 0;
 var $2 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 if ((HEAP8[704] | 0) == 0) if ((___cxa_guard_acquire(704) | 0) != 0) ___cxa_guard_release(704);
 $2 = $self + 64 | 0;
 $7 = HEAP32[$2 + 4 >> 2] | 0;
 $8 = 696;
 HEAP32[$8 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$8 + 4 >> 2] = $7;
 STACKTOP = sp;
 return 696;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 $rem = __stackBase__ | 0;
 ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
 STACKTOP = __stackBase__;
 return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function _emscripten_bind_b2World_GetGravity_0($self) {
 $self = $self | 0;
 var $2 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 if ((HEAP8[232] | 0) == 0) if ((___cxa_guard_acquire(232) | 0) != 0) ___cxa_guard_release(232);
 $2 = $self + 102968 | 0;
 $7 = HEAP32[$2 + 4 >> 2] | 0;
 $8 = 224;
 HEAP32[$8 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$8 + 4 >> 2] = $7;
 STACKTOP = sp;
 return 224;
}
function _emscripten_bind_b2Fixture_GetAABB_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var sp = 0;
 sp = STACKTOP;
 if (!(($arg0 | 0) > -1)) ___assert_fail(4344, 4392, 341, 4432);
 if ((HEAP32[$self + 28 >> 2] | 0) > ($arg0 | 0)) {
  STACKTOP = sp;
  return (HEAP32[$self + 24 >> 2] | 0) + ($arg0 * 28 | 0) | 0;
 } else ___assert_fail(4344, 4392, 341, 4432);
 return 0;
}
function _emscripten_bind_b2Rot_GetXAxis_0($self) {
 $self = $self | 0;
 var $4 = 0.0, $5 = 0.0, $6 = 0, sp = 0;
 sp = STACKTOP;
 if ((HEAP8[152] | 0) == 0) if ((___cxa_guard_acquire(152) | 0) != 0) ___cxa_guard_release(152);
 $4 = +(+HEAPF32[$self + 4 >> 2]);
 $5 = +(+HEAPF32[$self >> 2]);
 $6 = 144;
 HEAPF32[$6 >> 2] = $4;
 HEAPF32[$6 + 4 >> 2] = $5;
 STACKTOP = sp;
 return 144;
}
function _emscripten_bind_JSRayCastCallback_ReportFixture_4($self, $arg0, $arg1, $arg2, $arg3) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 $arg1 = $arg1 | 0;
 $arg2 = $arg2 | 0;
 $arg3 = +$arg3;
 var $call = 0.0, sp = 0;
 sp = STACKTOP;
 $call = +FUNCTION_TABLE_diiiid[HEAP32[(HEAP32[$self >> 2] | 0) + 8 >> 2] & 63]($self, $arg0, $arg1, $arg2, $arg3);
 STACKTOP = sp;
 return +$call;
}
function _emscripten_bind_b2Rot_GetYAxis_0($self) {
 $self = $self | 0;
 var $4 = 0.0, $5 = 0.0, $6 = 0, sp = 0;
 sp = STACKTOP;
 if ((HEAP8[168] | 0) == 0) if ((___cxa_guard_acquire(168) | 0) != 0) ___cxa_guard_release(168);
 $4 = +-+HEAPF32[$self >> 2];
 $5 = +(+HEAPF32[$self + 4 >> 2]);
 $6 = 160;
 HEAPF32[$6 >> 2] = $4;
 HEAPF32[$6 + 4 >> 2] = $5;
 STACKTOP = sp;
 return 160;
}
function _emscripten_bind_b2PolygonShape_RayCast_4($self, $arg0, $arg1, $arg2, $arg3) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 $arg1 = $arg1 | 0;
 $arg2 = $arg2 | 0;
 $arg3 = $arg3 | 0;
 var $call = 0, sp = 0;
 sp = STACKTOP;
 $call = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[$self >> 2] | 0) + 20 >> 2] & 63]($self, $arg0, $arg1, $arg2, $arg3) | 0;
 STACKTOP = sp;
 return $call | 0;
}
function _emscripten_bind_b2FrictionJoint_SetMaxTorque_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 var sp = 0;
 sp = STACKTOP;
 if (!($arg0 == $arg0 & 0.0 == 0.0 & $arg0 > -inf)) ___assert_fail(17872, 17800, 228, 17912);
 if ($arg0 < inf & $arg0 >= 0.0) {
  HEAPF32[$self + 100 >> 2] = $arg0;
  STACKTOP = sp;
  return;
 } else ___assert_fail(17872, 17800, 228, 17912);
}
function _emscripten_bind_b2CircleShape_RayCast_4($self, $arg0, $arg1, $arg2, $arg3) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 $arg1 = $arg1 | 0;
 $arg2 = $arg2 | 0;
 $arg3 = $arg3 | 0;
 var $call = 0, sp = 0;
 sp = STACKTOP;
 $call = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[$self >> 2] | 0) + 20 >> 2] & 63]($self, $arg0, $arg1, $arg2, $arg3) | 0;
 STACKTOP = sp;
 return $call | 0;
}
function __ZN17JSRayCastCallback13ReportFixtureEP9b2FixtureRK6b2Vec2S4_f($this, $arg0, $arg1, $arg2, $arg3) {
 $this = $this | 0;
 $arg0 = $arg0 | 0;
 $arg1 = $arg1 | 0;
 $arg2 = $arg2 | 0;
 $arg3 = +$arg3;
 var $conv2 = 0.0, sp = 0;
 sp = STACKTOP;
 $conv2 = +_emscripten_asm_const_double(3744, $this | 0, $arg0 | 0, $arg1 | 0, $arg2 | 0, +$arg3);
 STACKTOP = sp;
 return +$conv2;
}
function _emscripten_bind_b2ChainShape_RayCast_4($self, $arg0, $arg1, $arg2, $arg3) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 $arg1 = $arg1 | 0;
 $arg2 = $arg2 | 0;
 $arg3 = $arg3 | 0;
 var $call = 0, sp = 0;
 sp = STACKTOP;
 $call = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[$self >> 2] | 0) + 20 >> 2] & 63]($self, $arg0, $arg1, $arg2, $arg3) | 0;
 STACKTOP = sp;
 return $call | 0;
}
function _emscripten_bind_b2Vec2_Skew_0($self) {
 $self = $self | 0;
 var $4 = 0.0, $5 = 0.0, $6 = 0, sp = 0;
 sp = STACKTOP;
 if ((HEAP8[184] | 0) == 0) if ((___cxa_guard_acquire(184) | 0) != 0) ___cxa_guard_release(184);
 $4 = +-+HEAPF32[$self + 4 >> 2];
 $5 = +(+HEAPF32[$self >> 2]);
 $6 = 176;
 HEAPF32[$6 >> 2] = $4;
 HEAPF32[$6 + 4 >> 2] = $5;
 STACKTOP = sp;
 return 176;
}
function _emscripten_bind_b2FrictionJoint_SetMaxForce_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 var sp = 0;
 sp = STACKTOP;
 if (!($arg0 == $arg0 & 0.0 == 0.0 & $arg0 > -inf)) ___assert_fail(17760, 17800, 217, 17856);
 if ($arg0 < inf & $arg0 >= 0.0) {
  HEAPF32[$self + 96 >> 2] = $arg0;
  STACKTOP = sp;
  return;
 } else ___assert_fail(17760, 17800, 217, 17856);
}
function _emscripten_bind_b2EdgeShape_RayCast_4($self, $arg0, $arg1, $arg2, $arg3) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 $arg1 = $arg1 | 0;
 $arg2 = $arg2 | 0;
 $arg3 = $arg3 | 0;
 var $call = 0, sp = 0;
 sp = STACKTOP;
 $call = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[$self >> 2] | 0) + 20 >> 2] & 63]($self, $arg0, $arg1, $arg2, $arg3) | 0;
 STACKTOP = sp;
 return $call | 0;
}
function _emscripten_bind_b2Shape_RayCast_4($self, $arg0, $arg1, $arg2, $arg3) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 $arg1 = $arg1 | 0;
 $arg2 = $arg2 | 0;
 $arg3 = $arg3 | 0;
 var $call = 0, sp = 0;
 sp = STACKTOP;
 $call = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[$self >> 2] | 0) + 20 >> 2] & 63]($self, $arg0, $arg1, $arg2, $arg3) | 0;
 STACKTOP = sp;
 return $call | 0;
}
function __ZN15b2GrowableStackIiLi256EE3PopEv($this) {
 $this = $this | 0;
 var $0 = 0, $dec = 0, $m_count = 0;
 $m_count = $this + 1028 | 0;
 $0 = HEAP32[$m_count >> 2] | 0;
 if (($0 | 0) > 0) {
  $dec = $0 + -1 | 0;
  HEAP32[$m_count >> 2] = $dec;
  return HEAP32[(HEAP32[$this >> 2] | 0) + ($dec << 2) >> 2] | 0;
 } else ___assert_fail(12448, 12464, 67, 12512);
 return 0;
}
function _emscripten_bind_b2Transform_Set_2($self, $arg0, $arg1) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 $arg1 = +$arg1;
 var $0 = 0, $5 = 0, $6 = 0;
 $0 = $arg0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $self;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAPF32[$self + 8 >> 2] = +Math_sin(+$arg1);
 HEAPF32[$self + 12 >> 2] = +Math_cos(+$arg1);
 return;
}
function _llvm_cttz_i32(x) {
 x = x | 0;
 var ret = 0;
 ret = HEAP8[cttz_i8 + (x & 255) >> 0] | 0;
 if ((ret | 0) < 8) return ret | 0;
 ret = HEAP8[cttz_i8 + (x >> 8 & 255) >> 0] | 0;
 if ((ret | 0) < 8) return ret + 8 | 0;
 ret = HEAP8[cttz_i8 + (x >> 16 & 255) >> 0] | 0;
 if ((ret | 0) < 8) return ret + 16 | 0;
 return (HEAP8[cttz_i8 + (x >>> 24) >> 0] | 0) + 24 | 0;
}
function _llvm_ctlz_i32(x) {
 x = x | 0;
 var ret = 0;
 ret = HEAP8[ctlz_i8 + (x >>> 24) >> 0] | 0;
 if ((ret | 0) < 8) return ret | 0;
 ret = HEAP8[ctlz_i8 + (x >> 16 & 255) >> 0] | 0;
 if ((ret | 0) < 8) return ret + 8 | 0;
 ret = HEAP8[ctlz_i8 + (x >> 8 & 255) >> 0] | 0;
 if ((ret | 0) < 8) return ret + 16 | 0;
 return (HEAP8[ctlz_i8 + (x & 255) >> 0] | 0) + 24 | 0;
}
function _emscripten_bind_b2ContactID_set_cf_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0;
 $0 = HEAPU8[$arg0 >> 0] | HEAPU8[$arg0 + 1 >> 0] << 8 | HEAPU8[$arg0 + 2 >> 0] << 16 | HEAPU8[$arg0 + 3 >> 0] << 24;
 HEAP8[$self >> 0] = $0;
 HEAP8[$self + 1 >> 0] = $0 >> 8;
 HEAP8[$self + 2 >> 0] = $0 >> 16;
 HEAP8[$self + 3 >> 0] = $0 >> 24;
 return;
}
function _emscripten_bind_b2FixtureDef_set_filter_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $filter = 0, sp = 0;
 sp = STACKTOP;
 $filter = $self + 22 | 0;
 HEAP16[$filter + 0 >> 1] = HEAP16[$arg0 + 0 >> 1] | 0;
 HEAP16[$filter + 2 >> 1] = HEAP16[$arg0 + 2 >> 1] | 0;
 HEAP16[$filter + 4 >> 1] = HEAP16[$arg0 + 4 >> 1] | 0;
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2Body_SetFixedRotation_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $conv$i = 0, $m_flags$i = 0, sp = 0;
 sp = STACKTOP;
 $m_flags$i = $self + 4 | 0;
 $conv$i = HEAPU16[$m_flags$i >> 1] | 0;
 HEAP16[$m_flags$i >> 1] = $arg0 ? $conv$i | 16 : $conv$i & 65519;
 __ZN6b2Body13ResetMassDataEv($self);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2Fixture_TestPoint_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0, $call2$i = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self + 12 >> 2] | 0;
 $call2$i = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] & 63]($0, (HEAP32[$self + 8 >> 2] | 0) + 12 | 0, $arg0) | 0;
 STACKTOP = sp;
 return $call2$i | 0;
}
function __ZN25b2PolygonAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator($contact, $allocator) {
 $contact = $contact | 0;
 $allocator = $allocator | 0;
 var sp = 0;
 sp = STACKTOP;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$contact >> 2] | 0) + 4 >> 2] & 127]($contact);
 __ZN16b2BlockAllocator4FreeEPvi($allocator, $contact, 144);
 STACKTOP = sp;
 return;
}
function __ZN24b2ChainAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator($contact, $allocator) {
 $contact = $contact | 0;
 $allocator = $allocator | 0;
 var sp = 0;
 sp = STACKTOP;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$contact >> 2] | 0) + 4 >> 2] & 127]($contact);
 __ZN16b2BlockAllocator4FreeEPvi($allocator, $contact, 144);
 STACKTOP = sp;
 return;
}
function __ZN23b2EdgeAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator($contact, $allocator) {
 $contact = $contact | 0;
 $allocator = $allocator | 0;
 var sp = 0;
 sp = STACKTOP;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$contact >> 2] | 0) + 4 >> 2] & 127]($contact);
 __ZN16b2BlockAllocator4FreeEPvi($allocator, $contact, 144);
 STACKTOP = sp;
 return;
}
function __ZN23b2ChainAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator($contact, $allocator) {
 $contact = $contact | 0;
 $allocator = $allocator | 0;
 var sp = 0;
 sp = STACKTOP;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$contact >> 2] | 0) + 4 >> 2] & 127]($contact);
 __ZN16b2BlockAllocator4FreeEPvi($allocator, $contact, 144);
 STACKTOP = sp;
 return;
}
function __ZN22b2EdgeAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator($contact, $allocator) {
 $contact = $contact | 0;
 $allocator = $allocator | 0;
 var sp = 0;
 sp = STACKTOP;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$contact >> 2] | 0) + 4 >> 2] & 127]($contact);
 __ZN16b2BlockAllocator4FreeEPvi($allocator, $contact, 144);
 STACKTOP = sp;
 return;
}
function __ZN16b2PolygonContact7DestroyEP9b2ContactP16b2BlockAllocator($contact, $allocator) {
 $contact = $contact | 0;
 $allocator = $allocator | 0;
 var sp = 0;
 sp = STACKTOP;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$contact >> 2] | 0) + 4 >> 2] & 127]($contact);
 __ZN16b2BlockAllocator4FreeEPvi($allocator, $contact, 144);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_JSDraw_DrawSolidCircle_4($self, $arg0, $arg1, $arg2, $arg3) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 $arg1 = +$arg1;
 $arg2 = $arg2 | 0;
 $arg3 = $arg3 | 0;
 var sp = 0;
 sp = STACKTOP;
 FUNCTION_TABLE_viidii[HEAP32[(HEAP32[$self >> 2] | 0) + 20 >> 2] & 63]($self, $arg0, $arg1, $arg2, $arg3);
 STACKTOP = sp;
 return;
}
function __ZN15b2CircleContact7DestroyEP9b2ContactP16b2BlockAllocator($contact, $allocator) {
 $contact = $contact | 0;
 $allocator = $allocator | 0;
 var sp = 0;
 sp = STACKTOP;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$contact >> 2] | 0) + 4 >> 2] & 127]($contact);
 __ZN16b2BlockAllocator4FreeEPvi($allocator, $contact, 144);
 STACKTOP = sp;
 return;
}
function __ZNK12b2ChainShape11ComputeMassEP10b2MassDataf($this, $massData, $density) {
 $this = $this | 0;
 $massData = $massData | 0;
 $density = +$density;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$massData + 0 >> 2] = 0;
 HEAP32[$massData + 4 >> 2] = 0;
 HEAP32[$massData + 8 >> 2] = 0;
 HEAP32[$massData + 12 >> 2] = 0;
 STACKTOP = sp;
 return;
}
function __ZNK15b2RevoluteJoint16GetReactionForceEf($agg$result, $this, $inv_dt) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $inv_dt = +$inv_dt;
 var $mul1$i = 0.0;
 $mul1$i = +HEAPF32[$this + 88 >> 2] * $inv_dt;
 HEAPF32[$agg$result >> 2] = +HEAPF32[$this + 84 >> 2] * $inv_dt;
 HEAPF32[$agg$result + 4 >> 2] = $mul1$i;
 return;
}
function __ZNK15b2FrictionJoint16GetReactionForceEf($agg$result, $this, $inv_dt) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $inv_dt = +$inv_dt;
 var $mul1$i = 0.0;
 $mul1$i = +HEAPF32[$this + 88 >> 2] * $inv_dt;
 HEAPF32[$agg$result >> 2] = +HEAPF32[$this + 84 >> 2] * $inv_dt;
 HEAPF32[$agg$result + 4 >> 2] = $mul1$i;
 return;
}
function __ZN6JSDraw15DrawSolidCircleERK6b2Vec2fS2_RK7b2Color($this, $arg0, $arg1, $arg2, $arg3) {
 $this = $this | 0;
 $arg0 = $arg0 | 0;
 $arg1 = +$arg1;
 $arg2 = $arg2 | 0;
 $arg3 = $arg3 | 0;
 var sp = 0;
 sp = STACKTOP;
 _emscripten_asm_const_int(1368, $this | 0, $arg0 | 0, +$arg1, $arg2 | 0, $arg3 | 0) | 0;
 STACKTOP = sp;
 return;
}
function __ZNK12b2MouseJoint16GetReactionForceEf($agg$result, $this, $inv_dt) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $inv_dt = +$inv_dt;
 var $mul1$i = 0.0;
 $mul1$i = +HEAPF32[$this + 100 >> 2] * $inv_dt;
 HEAPF32[$agg$result >> 2] = +HEAPF32[$this + 96 >> 2] * $inv_dt;
 HEAPF32[$agg$result + 4 >> 2] = $mul1$i;
 return;
}
function __ZNK11b2WeldJoint16GetReactionForceEf($agg$result, $this, $inv_dt) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $inv_dt = +$inv_dt;
 var $mul1$i = 0.0;
 $mul1$i = +HEAPF32[$this + 108 >> 2] * $inv_dt;
 HEAPF32[$agg$result >> 2] = +HEAPF32[$this + 104 >> 2] * $inv_dt;
 HEAPF32[$agg$result + 4 >> 2] = $mul1$i;
 return;
}
function _abort_message($format, $varargs) {
 $format = $format | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $list = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $list = sp;
 HEAP32[$list >> 2] = $varargs;
 $0 = HEAP32[_stderr >> 2] | 0;
 _vfprintf($0 | 0, $format | 0, $list | 0) | 0;
 _fputc(10, $0 | 0) | 0;
 _abort();
}
function _emscripten_bind_b2PrismaticJoint_IsActive_0($self) {
 $self = $self | 0;
 var $4 = 0, sp = 0;
 sp = STACKTOP;
 if ((HEAP16[(HEAP32[$self + 48 >> 2] | 0) + 4 >> 1] & 32) == 0) {
  $4 = 0;
  STACKTOP = sp;
  return $4 | 0;
 }
 $4 = (HEAP16[(HEAP32[$self + 52 >> 2] | 0) + 4 >> 1] & 32) != 0;
 STACKTOP = sp;
 return $4 | 0;
}
function _emscripten_bind_b2RevoluteJoint_IsActive_0($self) {
 $self = $self | 0;
 var $4 = 0, sp = 0;
 sp = STACKTOP;
 if ((HEAP16[(HEAP32[$self + 48 >> 2] | 0) + 4 >> 1] & 32) == 0) {
  $4 = 0;
  STACKTOP = sp;
  return $4 | 0;
 }
 $4 = (HEAP16[(HEAP32[$self + 52 >> 2] | 0) + 4 >> 1] & 32) != 0;
 STACKTOP = sp;
 return $4 | 0;
}
function _emscripten_bind_b2FrictionJoint_IsActive_0($self) {
 $self = $self | 0;
 var $4 = 0, sp = 0;
 sp = STACKTOP;
 if ((HEAP16[(HEAP32[$self + 48 >> 2] | 0) + 4 >> 1] & 32) == 0) {
  $4 = 0;
  STACKTOP = sp;
  return $4 | 0;
 }
 $4 = (HEAP16[(HEAP32[$self + 52 >> 2] | 0) + 4 >> 1] & 32) != 0;
 STACKTOP = sp;
 return $4 | 0;
}
function _emscripten_bind_b2DistanceJoint_IsActive_0($self) {
 $self = $self | 0;
 var $4 = 0, sp = 0;
 sp = STACKTOP;
 if ((HEAP16[(HEAP32[$self + 48 >> 2] | 0) + 4 >> 1] & 32) == 0) {
  $4 = 0;
  STACKTOP = sp;
  return $4 | 0;
 }
 $4 = (HEAP16[(HEAP32[$self + 52 >> 2] | 0) + 4 >> 1] & 32) != 0;
 STACKTOP = sp;
 return $4 | 0;
}
function _emscripten_bind_b2Vec3_op_mul_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 var $y$i = 0, $z$i = 0;
 HEAPF32[$self >> 2] = +HEAPF32[$self >> 2] * $arg0;
 $y$i = $self + 4 | 0;
 HEAPF32[$y$i >> 2] = +HEAPF32[$y$i >> 2] * $arg0;
 $z$i = $self + 8 | 0;
 HEAPF32[$z$i >> 2] = +HEAPF32[$z$i >> 2] * $arg0;
 return;
}
function _emscripten_bind_b2PulleyJoint_IsActive_0($self) {
 $self = $self | 0;
 var $4 = 0, sp = 0;
 sp = STACKTOP;
 if ((HEAP16[(HEAP32[$self + 48 >> 2] | 0) + 4 >> 1] & 32) == 0) {
  $4 = 0;
  STACKTOP = sp;
  return $4 | 0;
 }
 $4 = (HEAP16[(HEAP32[$self + 52 >> 2] | 0) + 4 >> 1] & 32) != 0;
 STACKTOP = sp;
 return $4 | 0;
}
function _emscripten_bind_b2Mat33_set_ez_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $ez = 0, sp = 0;
 sp = STACKTOP;
 $ez = $self + 24 | 0;
 HEAP32[$ez + 0 >> 2] = HEAP32[$arg0 + 0 >> 2];
 HEAP32[$ez + 4 >> 2] = HEAP32[$arg0 + 4 >> 2];
 HEAP32[$ez + 8 >> 2] = HEAP32[$arg0 + 8 >> 2];
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2Mat33_set_ey_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $ey = 0, sp = 0;
 sp = STACKTOP;
 $ey = $self + 12 | 0;
 HEAP32[$ey + 0 >> 2] = HEAP32[$arg0 + 0 >> 2];
 HEAP32[$ey + 4 >> 2] = HEAP32[$arg0 + 4 >> 2];
 HEAP32[$ey + 8 >> 2] = HEAP32[$arg0 + 8 >> 2];
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2WheelJoint_IsActive_0($self) {
 $self = $self | 0;
 var $4 = 0, sp = 0;
 sp = STACKTOP;
 if ((HEAP16[(HEAP32[$self + 48 >> 2] | 0) + 4 >> 1] & 32) == 0) {
  $4 = 0;
  STACKTOP = sp;
  return $4 | 0;
 }
 $4 = (HEAP16[(HEAP32[$self + 52 >> 2] | 0) + 4 >> 1] & 32) != 0;
 STACKTOP = sp;
 return $4 | 0;
}
function _emscripten_bind_b2MouseJoint_IsActive_0($self) {
 $self = $self | 0;
 var $4 = 0, sp = 0;
 sp = STACKTOP;
 if ((HEAP16[(HEAP32[$self + 48 >> 2] | 0) + 4 >> 1] & 32) == 0) {
  $4 = 0;
  STACKTOP = sp;
  return $4 | 0;
 }
 $4 = (HEAP16[(HEAP32[$self + 52 >> 2] | 0) + 4 >> 1] & 32) != 0;
 STACKTOP = sp;
 return $4 | 0;
}
function _emscripten_bind_b2WeldJoint_IsActive_0($self) {
 $self = $self | 0;
 var $4 = 0, sp = 0;
 sp = STACKTOP;
 if ((HEAP16[(HEAP32[$self + 48 >> 2] | 0) + 4 >> 1] & 32) == 0) {
  $4 = 0;
  STACKTOP = sp;
  return $4 | 0;
 }
 $4 = (HEAP16[(HEAP32[$self + 52 >> 2] | 0) + 4 >> 1] & 32) != 0;
 STACKTOP = sp;
 return $4 | 0;
}
function _emscripten_bind_b2RopeJoint_IsActive_0($self) {
 $self = $self | 0;
 var $4 = 0, sp = 0;
 sp = STACKTOP;
 if ((HEAP16[(HEAP32[$self + 48 >> 2] | 0) + 4 >> 1] & 32) == 0) {
  $4 = 0;
  STACKTOP = sp;
  return $4 | 0;
 }
 $4 = (HEAP16[(HEAP32[$self + 52 >> 2] | 0) + 4 >> 1] & 32) != 0;
 STACKTOP = sp;
 return $4 | 0;
}
function _emscripten_bind_b2GearJoint_IsActive_0($self) {
 $self = $self | 0;
 var $4 = 0, sp = 0;
 sp = STACKTOP;
 if ((HEAP16[(HEAP32[$self + 48 >> 2] | 0) + 4 >> 1] & 32) == 0) {
  $4 = 0;
  STACKTOP = sp;
  return $4 | 0;
 }
 $4 = (HEAP16[(HEAP32[$self + 52 >> 2] | 0) + 4 >> 1] & 32) != 0;
 STACKTOP = sp;
 return $4 | 0;
}
function _emscripten_bind_b2PolygonShape_GetVertex_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($arg0 | 0) > -1) if ((HEAP32[$self + 148 >> 2] | 0) > ($arg0 | 0)) {
  STACKTOP = sp;
  return $self + ($arg0 << 3) + 20 | 0;
 }
 ___assert_fail(2512, 2552, 91, 6488);
 return 0;
}
function _emscripten_bind_b2Joint_IsActive_0($self) {
 $self = $self | 0;
 var $4 = 0, sp = 0;
 sp = STACKTOP;
 if ((HEAP16[(HEAP32[$self + 48 >> 2] | 0) + 4 >> 1] & 32) == 0) {
  $4 = 0;
  STACKTOP = sp;
  return $4 | 0;
 }
 $4 = (HEAP16[(HEAP32[$self + 52 >> 2] | 0) + 4 >> 1] & 32) != 0;
 STACKTOP = sp;
 return $4 | 0;
}
function _emscripten_bind_b2PolygonShape_ComputeAABB_3($self, $arg0, $arg1, $arg2) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 $arg1 = $arg1 | 0;
 $arg2 = $arg2 | 0;
 var sp = 0;
 sp = STACKTOP;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$self >> 2] | 0) + 24 >> 2] & 63]($self, $arg0, $arg1, $arg2);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_JSContactFilter_ShouldCollide_2($self, $arg0, $arg1) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 $arg1 = $arg1 | 0;
 var $call = 0, sp = 0;
 sp = STACKTOP;
 $call = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$self >> 2] | 0) + 8 >> 2] & 63]($self, $arg0, $arg1) | 0;
 STACKTOP = sp;
 return $call | 0;
}
function _emscripten_bind_b2CircleShape_ComputeAABB_3($self, $arg0, $arg1, $arg2) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 $arg1 = $arg1 | 0;
 $arg2 = $arg2 | 0;
 var sp = 0;
 sp = STACKTOP;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$self >> 2] | 0) + 24 >> 2] & 63]($self, $arg0, $arg1, $arg2);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2ChainShape_ComputeAABB_3($self, $arg0, $arg1, $arg2) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 $arg1 = $arg1 | 0;
 $arg2 = $arg2 | 0;
 var sp = 0;
 sp = STACKTOP;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$self >> 2] | 0) + 24 >> 2] & 63]($self, $arg0, $arg1, $arg2);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2EdgeShape_ComputeAABB_3($self, $arg0, $arg1, $arg2) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 $arg1 = $arg1 | 0;
 $arg2 = $arg2 | 0;
 var sp = 0;
 sp = STACKTOP;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$self >> 2] | 0) + 24 >> 2] & 63]($self, $arg0, $arg1, $arg2);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_JSDraw_DrawSolidPolygon_3($self, $arg0, $arg1, $arg2) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 $arg1 = $arg1 | 0;
 $arg2 = $arg2 | 0;
 var sp = 0;
 sp = STACKTOP;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$self >> 2] | 0) + 12 >> 2] & 63]($self, $arg0, $arg1, $arg2);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2PolygonShape_TestPoint_2($self, $arg0, $arg1) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 $arg1 = $arg1 | 0;
 var $call = 0, sp = 0;
 sp = STACKTOP;
 $call = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$self >> 2] | 0) + 16 >> 2] & 63]($self, $arg0, $arg1) | 0;
 STACKTOP = sp;
 return $call | 0;
}
function _emscripten_bind_b2Fixture_SetDensity_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 var sp = 0;
 sp = STACKTOP;
 if ($arg0 == $arg0 & 0.0 == 0.0 & $arg0 > -inf) if ($arg0 < inf & $arg0 >= 0.0) {
  HEAPF32[$self >> 2] = $arg0;
  STACKTOP = sp;
  return;
 }
 ___assert_fail(4440, 4392, 295, 4480);
}
function _emscripten_bind_b2CircleShape_TestPoint_2($self, $arg0, $arg1) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 $arg1 = $arg1 | 0;
 var $call = 0, sp = 0;
 sp = STACKTOP;
 $call = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$self >> 2] | 0) + 16 >> 2] & 63]($self, $arg0, $arg1) | 0;
 STACKTOP = sp;
 return $call | 0;
}
function _emscripten_bind_b2ChainShape_TestPoint_2($self, $arg0, $arg1) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 $arg1 = $arg1 | 0;
 var $call = 0, sp = 0;
 sp = STACKTOP;
 $call = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$self >> 2] | 0) + 16 >> 2] & 63]($self, $arg0, $arg1) | 0;
 STACKTOP = sp;
 return $call | 0;
}
function _emscripten_bind_b2Shape_ComputeAABB_3($self, $arg0, $arg1, $arg2) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 $arg1 = $arg1 | 0;
 $arg2 = $arg2 | 0;
 var sp = 0;
 sp = STACKTOP;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$self >> 2] | 0) + 24 >> 2] & 63]($self, $arg0, $arg1, $arg2);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2EdgeShape_TestPoint_2($self, $arg0, $arg1) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 $arg1 = $arg1 | 0;
 var $call = 0, sp = 0;
 sp = STACKTOP;
 $call = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$self >> 2] | 0) + 16 >> 2] & 63]($self, $arg0, $arg1) | 0;
 STACKTOP = sp;
 return $call | 0;
}
function _emscripten_bind_JSDraw_DrawSegment_3($self, $arg0, $arg1, $arg2) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 $arg1 = $arg1 | 0;
 $arg2 = $arg2 | 0;
 var sp = 0;
 sp = STACKTOP;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$self >> 2] | 0) + 24 >> 2] & 63]($self, $arg0, $arg1, $arg2);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_JSDraw_DrawPolygon_3($self, $arg0, $arg1, $arg2) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 $arg1 = $arg1 | 0;
 $arg2 = $arg2 | 0;
 var sp = 0;
 sp = STACKTOP;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$self >> 2] | 0) + 8 >> 2] & 63]($self, $arg0, $arg1, $arg2);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2Shape_TestPoint_2($self, $arg0, $arg1) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 $arg1 = $arg1 | 0;
 var $call = 0, sp = 0;
 sp = STACKTOP;
 $call = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$self >> 2] | 0) + 16 >> 2] & 63]($self, $arg0, $arg1) | 0;
 STACKTOP = sp;
 return $call | 0;
}
function _emscripten_bind_b2ChainShape_SetPrevVertex_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 $0 = $arg0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $self + 20 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP8[$self + 36 >> 0] = 1;
 return;
}
function _emscripten_bind_b2ChainShape_SetNextVertex_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 $0 = $arg0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $self + 28 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP8[$self + 37 >> 0] = 1;
 return;
}
function _emscripten_bind_JSDraw_DrawCircle_3($self, $arg0, $arg1, $arg2) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 $arg1 = +$arg1;
 $arg2 = $arg2 | 0;
 var sp = 0;
 sp = STACKTOP;
 FUNCTION_TABLE_viidi[HEAP32[(HEAP32[$self >> 2] | 0) + 16 >> 2] & 63]($self, $arg0, $arg1, $arg2);
 STACKTOP = sp;
 return;
}
function __ZN6JSDraw16DrawSolidPolygonEPK6b2Vec2iRK7b2Color($this, $arg0, $arg1, $arg2) {
 $this = $this | 0;
 $arg0 = $arg0 | 0;
 $arg1 = $arg1 | 0;
 $arg2 = $arg2 | 0;
 var sp = 0;
 sp = STACKTOP;
 _emscripten_asm_const_int(1816, $this | 0, $arg0 | 0, $arg1 | 0, $arg2 | 0) | 0;
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2Fixture_GetMassData_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$self + 12 >> 2] | 0;
 FUNCTION_TABLE_viid[HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] & 63]($0, $arg0, +HEAPF32[$self >> 2]);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2Mat33_set_ex_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$self + 0 >> 2] = HEAP32[$arg0 + 0 >> 2];
 HEAP32[$self + 4 >> 2] = HEAP32[$arg0 + 4 >> 2];
 HEAP32[$self + 8 >> 2] = HEAP32[$arg0 + 8 >> 2];
 STACKTOP = sp;
 return;
}
function __ZN6JSDraw11DrawSegmentERK6b2Vec2S2_RK7b2Color($this, $arg0, $arg1, $arg2) {
 $this = $this | 0;
 $arg0 = $arg0 | 0;
 $arg1 = $arg1 | 0;
 $arg2 = $arg2 | 0;
 var sp = 0;
 sp = STACKTOP;
 _emscripten_asm_const_int(1152, $this | 0, $arg0 | 0, $arg1 | 0, $arg2 | 0) | 0;
 STACKTOP = sp;
 return;
}
function __ZN6JSDraw11DrawPolygonEPK6b2Vec2iRK7b2Color($this, $arg0, $arg1, $arg2) {
 $this = $this | 0;
 $arg0 = $arg0 | 0;
 $arg1 = $arg1 | 0;
 $arg2 = $arg2 | 0;
 var sp = 0;
 sp = STACKTOP;
 _emscripten_asm_const_int(2048, $this | 0, $arg0 | 0, $arg1 | 0, $arg2 | 0) | 0;
 STACKTOP = sp;
 return;
}
function __ZN6JSDraw10DrawCircleERK6b2Vec2fRK7b2Color($this, $arg0, $arg1, $arg2) {
 $this = $this | 0;
 $arg0 = $arg0 | 0;
 $arg1 = +$arg1;
 $arg2 = $arg2 | 0;
 var sp = 0;
 sp = STACKTOP;
 _emscripten_asm_const_int(1600, $this | 0, $arg0 | 0, +$arg1, $arg2 | 0) | 0;
 STACKTOP = sp;
 return;
}
function __ZNK12b2MouseJoint10GetAnchorAEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 $0 = $this + 76 | 0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $agg$result;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}
function __ZN12b2ChainShapeD2Ev($this) {
 $this = $this | 0;
 var $m_vertices = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 6560;
 $m_vertices = $this + 12 | 0;
 _free(HEAP32[$m_vertices >> 2] | 0);
 HEAP32[$m_vertices >> 2] = 0;
 HEAP32[$this + 16 >> 2] = 0;
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2PrismaticJointDef_set_localAnchorB_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 $0 = $arg0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $self + 28 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}
function _emscripten_bind_b2PrismaticJointDef_set_localAnchorA_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 $0 = $arg0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $self + 20 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}
function _emscripten_bind_b2Vec2_op_sub_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $y3$i = 0;
 HEAPF32[$self >> 2] = +HEAPF32[$self >> 2] - +HEAPF32[$arg0 >> 2];
 $y3$i = $self + 4 | 0;
 HEAPF32[$y3$i >> 2] = +HEAPF32[$y3$i >> 2] - +HEAPF32[$arg0 + 4 >> 2];
 return;
}
function _emscripten_bind_b2Vec2_op_add_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $y3$i = 0;
 HEAPF32[$self >> 2] = +HEAPF32[$arg0 >> 2] + +HEAPF32[$self >> 2];
 $y3$i = $self + 4 | 0;
 HEAPF32[$y3$i >> 2] = +HEAPF32[$arg0 + 4 >> 2] + +HEAPF32[$y3$i >> 2];
 return;
}
function _emscripten_bind_b2RevoluteJointDef_set_localAnchorB_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 $0 = $arg0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $self + 28 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}
function _emscripten_bind_b2RevoluteJointDef_set_localAnchorA_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 $0 = $arg0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $self + 20 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}
function _emscripten_bind_b2FrictionJointDef_set_localAnchorB_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 $0 = $arg0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $self + 28 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}
function _emscripten_bind_b2FrictionJointDef_set_localAnchorA_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 $0 = $arg0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $self + 20 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}
function _emscripten_bind_b2DistanceJointDef_set_localAnchorB_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 $0 = $arg0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $self + 28 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}
function _emscripten_bind_b2DistanceJointDef_set_localAnchorA_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 $0 = $arg0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $self + 20 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}
function _emscripten_bind_b2PulleyJointDef_set_groundAnchorB_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 $0 = $arg0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $self + 28 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}
function _emscripten_bind_b2PulleyJointDef_set_groundAnchorA_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 $0 = $arg0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $self + 20 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}
function _emscripten_bind_b2PrismaticJointDef_set_localAxisA_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 $0 = $arg0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $self + 36 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}
function _emscripten_bind_b2PulleyJointDef_set_localAnchorB_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 $0 = $arg0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $self + 44 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}
function _emscripten_bind_b2PulleyJointDef_set_localAnchorA_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 $0 = $arg0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $self + 36 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}
function _emscripten_bind_JSContactListener_PostSolve_2($self, $arg0, $arg1) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 $arg1 = $arg1 | 0;
 var sp = 0;
 sp = STACKTOP;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[$self >> 2] | 0) + 20 >> 2] & 63]($self, $arg0, $arg1);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2WheelJointDef_set_localAnchorB_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 $0 = $arg0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $self + 28 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}
function _emscripten_bind_b2WheelJointDef_set_localAnchorA_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 $0 = $arg0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $self + 20 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}
function _emscripten_bind_JSQueryCallback_ReportFixture_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $call = 0, sp = 0;
 sp = STACKTOP;
 $call = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$self >> 2] | 0) + 8 >> 2] & 63]($self, $arg0) | 0;
 STACKTOP = sp;
 return $call | 0;
}
function _emscripten_bind_JSContactListener_PreSolve_2($self, $arg0, $arg1) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 $arg1 = $arg1 | 0;
 var sp = 0;
 sp = STACKTOP;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[$self >> 2] | 0) + 16 >> 2] & 63]($self, $arg0, $arg1);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2WeldJointDef_set_localAnchorB_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 $0 = $arg0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $self + 28 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}
function _emscripten_bind_b2WeldJointDef_set_localAnchorA_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 $0 = $arg0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $self + 20 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}
function _emscripten_bind_b2RopeJointDef_set_localAnchorB_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 $0 = $arg0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $self + 28 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}
function _emscripten_bind_b2RopeJointDef_set_localAnchorA_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 $0 = $arg0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $self + 20 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}
function _emscripten_bind_b2PrismaticJoint_GetReactionTorque_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 var $call = 0.0, sp = 0;
 sp = STACKTOP;
 $call = +FUNCTION_TABLE_did[HEAP32[(HEAP32[$self >> 2] | 0) + 12 >> 2] & 63]($self, $arg0);
 STACKTOP = sp;
 return +$call;
}
function _emscripten_bind_b2Mat33_SetZero_0($self) {
 $self = $self | 0;
 var dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 dest = $self + 0 | 0;
 stop = dest + 36 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2DestructionListenerWrapper___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$self >> 2] | 0) + 4 >> 2] & 127]($self);
 STACKTOP = sp;
 return;
}
function __ZN17JSContactListener9PostSolveEP9b2ContactPK16b2ContactImpulse($this, $arg0, $arg1) {
 $this = $this | 0;
 $arg0 = $arg0 | 0;
 $arg1 = $arg1 | 0;
 var sp = 0;
 sp = STACKTOP;
 _emscripten_asm_const_int(2712, $this | 0, $arg0 | 0, $arg1 | 0) | 0;
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2WheelJointDef_set_localAxisA_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 $0 = $arg0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $self + 36 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}
function _emscripten_bind_b2RevoluteJoint_GetReactionTorque_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 var $call = 0.0, sp = 0;
 sp = STACKTOP;
 $call = +FUNCTION_TABLE_did[HEAP32[(HEAP32[$self >> 2] | 0) + 12 >> 2] & 63]($self, $arg0);
 STACKTOP = sp;
 return +$call;
}
function _emscripten_bind_b2FrictionJoint_GetReactionTorque_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 var $call = 0.0, sp = 0;
 sp = STACKTOP;
 $call = +FUNCTION_TABLE_did[HEAP32[(HEAP32[$self >> 2] | 0) + 12 >> 2] & 63]($self, $arg0);
 STACKTOP = sp;
 return +$call;
}
function _emscripten_bind_b2DistanceJoint_GetReactionTorque_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 var $call = 0.0, sp = 0;
 sp = STACKTOP;
 $call = +FUNCTION_TABLE_did[HEAP32[(HEAP32[$self >> 2] | 0) + 12 >> 2] & 63]($self, $arg0);
 STACKTOP = sp;
 return +$call;
}
function _emscripten_bind_b2PolygonShape_set_m_centroid_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 $0 = $arg0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $self + 12 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}
function _emscripten_bind_b2PolygonShape_ComputeMass_2($self, $arg0, $arg1) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 $arg1 = +$arg1;
 var sp = 0;
 sp = STACKTOP;
 FUNCTION_TABLE_viid[HEAP32[(HEAP32[$self >> 2] | 0) + 28 >> 2] & 63]($self, $arg0, $arg1);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2ChainShape_set_m_prevVertex_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 $0 = $arg0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $self + 20 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}
function _emscripten_bind_b2ChainShape_set_m_nextVertex_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 $0 = $arg0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $self + 28 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}
function _bitshift64Ashr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >> bits;
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits;
 }
 tempRet0 = (high | 0) < 0 ? -1 : 0;
 return high >> bits - 32 | 0;
}
function _emscripten_bind_b2PulleyJoint_GetReactionTorque_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 var $call = 0.0, sp = 0;
 sp = STACKTOP;
 $call = +FUNCTION_TABLE_did[HEAP32[(HEAP32[$self >> 2] | 0) + 12 >> 2] & 63]($self, $arg0);
 STACKTOP = sp;
 return +$call;
}
function _emscripten_bind_b2Contact_ResetRestitution_0($self) {
 $self = $self | 0;
 var $1 = 0.0, $3 = 0.0;
 $1 = +HEAPF32[(HEAP32[$self + 48 >> 2] | 0) + 20 >> 2];
 $3 = +HEAPF32[(HEAP32[$self + 52 >> 2] | 0) + 20 >> 2];
 HEAPF32[$self + 140 >> 2] = $1 > $3 ? $1 : $3;
 return;
}
function _emscripten_bind_b2CircleShape_ComputeMass_2($self, $arg0, $arg1) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 $arg1 = +$arg1;
 var sp = 0;
 sp = STACKTOP;
 FUNCTION_TABLE_viid[HEAP32[(HEAP32[$self >> 2] | 0) + 28 >> 2] & 63]($self, $arg0, $arg1);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2Body_SetBullet_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $conv$i = 0, $m_flags$i = 0;
 $m_flags$i = $self + 4 | 0;
 $conv$i = HEAPU16[$m_flags$i >> 1] | 0;
 HEAP16[$m_flags$i >> 1] = $arg0 ? $conv$i | 8 : $conv$i & 65527;
 return;
}
function _emscripten_bind_b2BodyDef_set_linearVelocity_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 $0 = $arg0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $self + 16 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}
function _emscripten_bind_b2WheelJoint_GetReactionTorque_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 var $call = 0.0, sp = 0;
 sp = STACKTOP;
 $call = +FUNCTION_TABLE_did[HEAP32[(HEAP32[$self >> 2] | 0) + 12 >> 2] & 63]($self, $arg0);
 STACKTOP = sp;
 return +$call;
}
function _emscripten_bind_b2MouseJoint_GetReactionTorque_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 var $call = 0.0, sp = 0;
 sp = STACKTOP;
 $call = +FUNCTION_TABLE_did[HEAP32[(HEAP32[$self >> 2] | 0) + 12 >> 2] & 63]($self, $arg0);
 STACKTOP = sp;
 return +$call;
}
function _emscripten_bind_b2ChainShape_ComputeMass_2($self, $arg0, $arg1) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 $arg1 = +$arg1;
 var sp = 0;
 sp = STACKTOP;
 FUNCTION_TABLE_viid[HEAP32[(HEAP32[$self >> 2] | 0) + 28 >> 2] & 63]($self, $arg0, $arg1);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2WeldJoint_GetReactionTorque_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 var $call = 0.0, sp = 0;
 sp = STACKTOP;
 $call = +FUNCTION_TABLE_did[HEAP32[(HEAP32[$self >> 2] | 0) + 12 >> 2] & 63]($self, $arg0);
 STACKTOP = sp;
 return +$call;
}
function _emscripten_bind_b2RopeJoint_GetReactionTorque_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 var $call = 0.0, sp = 0;
 sp = STACKTOP;
 $call = +FUNCTION_TABLE_did[HEAP32[(HEAP32[$self >> 2] | 0) + 12 >> 2] & 63]($self, $arg0);
 STACKTOP = sp;
 return +$call;
}
function _emscripten_bind_b2MouseJointDef_set_target_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 $0 = $arg0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $self + 20 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}
function _emscripten_bind_b2Manifold_set_localNormal_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 $0 = $arg0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $self + 40 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}
function _emscripten_bind_b2GearJoint_GetReactionTorque_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 var $call = 0.0, sp = 0;
 sp = STACKTOP;
 $call = +FUNCTION_TABLE_did[HEAP32[(HEAP32[$self >> 2] | 0) + 12 >> 2] & 63]($self, $arg0);
 STACKTOP = sp;
 return +$call;
}
function _emscripten_bind_b2EdgeShape_ComputeMass_2($self, $arg0, $arg1) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 $arg1 = +$arg1;
 var sp = 0;
 sp = STACKTOP;
 FUNCTION_TABLE_viid[HEAP32[(HEAP32[$self >> 2] | 0) + 28 >> 2] & 63]($self, $arg0, $arg1);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2Manifold_set_localPoint_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 $0 = $arg0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $self + 48 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}
function _emscripten_bind_b2EdgeShape_set_m_vertex3_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 $0 = $arg0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $self + 36 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}
function _emscripten_bind_b2EdgeShape_set_m_vertex2_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 $0 = $arg0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $self + 20 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}
function _emscripten_bind_b2EdgeShape_set_m_vertex1_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 $0 = $arg0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $self + 12 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}
function _emscripten_bind_b2EdgeShape_set_m_vertex0_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 $0 = $arg0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $self + 28 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}
function _emscripten_bind_b2DestructionListener___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$self >> 2] | 0) + 4 >> 2] & 127]($self);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_JSDestructionListener___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$self >> 2] | 0) + 4 >> 2] & 127]($self);
 STACKTOP = sp;
 return;
}
function __ZN17JSContactListener8PreSolveEP9b2ContactPK10b2Manifold($this, $arg0, $arg1) {
 $this = $this | 0;
 $arg0 = $arg0 | 0;
 $arg1 = $arg1 | 0;
 var sp = 0;
 sp = STACKTOP;
 _emscripten_asm_const_int(2944, $this | 0, $arg0 | 0, $arg1 | 0) | 0;
 STACKTOP = sp;
 return;
}
function __ZN28b2DestructionListenerWrapper10SayGoodbyeEP9b2Fixture($this, $fixture) {
 $this = $this | 0;
 $fixture = $fixture | 0;
 var sp = 0;
 sp = STACKTOP;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$this >> 2] | 0) + 20 >> 2] & 127]($this, $fixture);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2World_SetGravity_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 $0 = $arg0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $self + 102968 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}
function _emscripten_bind_b2Shape_ComputeMass_2($self, $arg0, $arg1) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 $arg1 = +$arg1;
 var sp = 0;
 sp = STACKTOP;
 FUNCTION_TABLE_viid[HEAP32[(HEAP32[$self >> 2] | 0) + 28 >> 2] & 63]($self, $arg0, $arg1);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2Joint_GetReactionTorque_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 var $call = 0.0, sp = 0;
 sp = STACKTOP;
 $call = +FUNCTION_TABLE_did[HEAP32[(HEAP32[$self >> 2] | 0) + 12 >> 2] & 63]($self, $arg0);
 STACKTOP = sp;
 return +$call;
}
function __Z5b2LogPKcz($string, $varargs) {
 $string = $string | 0;
 $varargs = $varargs | 0;
 var $args = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $args = sp;
 HEAP32[$args >> 2] = $varargs;
 _vprintf($string | 0, $args | 0) | 0;
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2ManifoldPoint_set_localPoint_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 $0 = $arg0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $self;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}
function _emscripten_bind_b2CircleShape_set_m_p_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 $0 = $arg0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $self + 12 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}
function _emscripten_bind_b2BodyDef_set_position_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 $0 = $arg0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $self + 4 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}
function _emscripten_bind_b2RayCastInput_set_p2_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 $0 = $arg0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $self + 8 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}
function _emscripten_bind_b2RayCastCallback___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$self >> 2] | 0) + 4 >> 2] & 127]($self);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2PrismaticJoint___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$self >> 2] | 0) + 24 >> 2] & 127]($self);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2MassData_set_center_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 $0 = $arg0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $self + 4 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}
function _emscripten_bind_b2ContactListener___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$self >> 2] | 0) + 4 >> 2] & 127]($self);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2AABB_set_upperBound_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 $0 = $arg0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $self + 8 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}
function _emscripten_bind_JSRayCastCallback___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$self >> 2] | 0) + 4 >> 2] & 127]($self);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_JSContactListener___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$self >> 2] | 0) + 4 >> 2] & 127]($self);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2World_SetAutoClearForces_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0, $m_flags$i = 0;
 $m_flags$i = $self + 102868 | 0;
 $0 = HEAP32[$m_flags$i >> 2] | 0;
 HEAP32[$m_flags$i >> 2] = $arg0 ? $0 | 4 : $0 & -5;
 return;
}
function _emscripten_bind_b2RevoluteJoint___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$self >> 2] | 0) + 24 >> 2] & 127]($self);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2FrictionJoint___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$self >> 2] | 0) + 24 >> 2] & 127]($self);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2DistanceJoint___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$self >> 2] | 0) + 24 >> 2] & 127]($self);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2QueryCallback___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$self >> 2] | 0) + 4 >> 2] & 127]($self);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2ContactFilter___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$self >> 2] | 0) + 4 >> 2] & 127]($self);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_JSQueryCallback___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$self >> 2] | 0) + 4 >> 2] & 127]($self);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_JSContactFilter___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$self >> 2] | 0) + 4 >> 2] & 127]($self);
 STACKTOP = sp;
 return;
}
function __ZN15JSQueryCallback13ReportFixtureEP9b2Fixture($this, $arg0) {
 $this = $this | 0;
 $arg0 = $arg0 | 0;
 var $tobool = 0, sp = 0;
 sp = STACKTOP;
 $tobool = (_emscripten_asm_const_int(4096, $this | 0, $arg0 | 0) | 0) != 0;
 STACKTOP = sp;
 return $tobool | 0;
}
function _emscripten_bind_b2RayCastOutput_set_normal_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 $0 = $arg0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $self;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}
function _emscripten_bind_b2PulleyJoint___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$self >> 2] | 0) + 24 >> 2] & 127]($self);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2PolygonShape___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$self >> 2] | 0) + 4 >> 2] & 127]($self);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2WheelJoint___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$self >> 2] | 0) + 24 >> 2] & 127]($self);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2Transform_set_q_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 $0 = $arg0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $self + 8 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}
function _emscripten_bind_b2MouseJoint___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$self >> 2] | 0) + 24 >> 2] & 127]($self);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2CircleShape___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$self >> 2] | 0) + 4 >> 2] & 127]($self);
 STACKTOP = sp;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($p) {
 $p = $p | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 _free($p);
 if ((_pthread_setspecific(HEAP32[5290] | 0, 0) | 0) == 0) {
  STACKTOP = sp;
  return;
 } else _abort_message(21288, sp);
}
function _emscripten_bind_b2WeldJoint___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$self >> 2] | 0) + 24 >> 2] & 127]($self);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2RopeJoint___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$self >> 2] | 0) + 24 >> 2] & 127]($self);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2GearJoint___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$self >> 2] | 0) + 24 >> 2] & 127]($self);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2ChainShape___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$self >> 2] | 0) + 4 >> 2] & 127]($self);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2EdgeShape___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$self >> 2] | 0) + 4 >> 2] & 127]($self);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2Mat22_set_ey_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 $0 = $arg0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $self + 8 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}
function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits;
  return low << bits;
 }
 tempRet0 = low << bits - 32;
 return 0;
}
function __ZN28b2DestructionListenerWrapper10SayGoodbyeEP7b2Joint($this, $joint) {
 $this = $this | 0;
 $joint = $joint | 0;
 var sp = 0;
 sp = STACKTOP;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$this >> 2] | 0) + 16 >> 2] & 127]($this, $joint);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2RayCastInput_set_p1_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 $0 = $arg0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $self;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}
function _emscripten_bind_b2GearJoint_SetRatio_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 if ($arg0 == $arg0 & 0.0 == 0.0 & $arg0 > -inf & $arg0 < inf) {
  HEAPF32[$self + 152 >> 2] = $arg0;
  return;
 } else ___assert_fail(18312, 18176, 398, 18336);
}
function _emscripten_bind_b2ChainShape_GetChildEdge_2($self, $arg0, $arg1) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 $arg1 = $arg1 | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNK12b2ChainShape12GetChildEdgeEP11b2EdgeShapei($self, $arg0, $arg1);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2AABB_set_lowerBound_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 $0 = $arg0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $self;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}
function _emscripten_bind_JSDestructionListener_SayGoodbyeFixture_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var sp = 0;
 sp = STACKTOP;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$self >> 2] | 0) + 20 >> 2] & 127]($self, $arg0);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2Shape___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$self >> 2] | 0) + 4 >> 2] & 127]($self);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2Draw___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$self >> 2] | 0) + 4 >> 2] & 127]($self);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_JSDraw___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$self >> 2] | 0) + 4 >> 2] & 127]($self);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_JSDestructionListener_SayGoodbyeJoint_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var sp = 0;
 sp = STACKTOP;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$self >> 2] | 0) + 16 >> 2] & 127]($self, $arg0);
 STACKTOP = sp;
 return;
}
function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >>> bits;
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits;
 }
 tempRet0 = 0;
 return high >>> bits - 32 | 0;
}
function _emscripten_bind_b2Transform_set_p_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 $0 = $arg0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $self;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}
function _emscripten_bind_b2Contact_SetEnabled_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0, $m_flags$i = 0;
 $m_flags$i = $self + 4 | 0;
 $0 = HEAP32[$m_flags$i >> 2] | 0;
 HEAP32[$m_flags$i >> 2] = $arg0 ? $0 | 4 : $0 & -5;
 return;
}
function _emscripten_bind_b2Mat22_set_ex_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $0 = 0, $5 = 0, $6 = 0;
 $0 = $arg0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $self;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 return;
}
function _emscripten_bind_b2Body_GetInertia_0($self) {
 $self = $self | 0;
 var $2 = 0.0, $3 = 0.0;
 $2 = +HEAPF32[$self + 28 >> 2];
 $3 = +HEAPF32[$self + 32 >> 2];
 return +(+HEAPF32[$self + 124 >> 2] + +HEAPF32[$self + 116 >> 2] * ($2 * $2 + $3 * $3));
}
function copyTempFloat(ptr) {
 ptr = ptr | 0;
 HEAP8[tempDoublePtr >> 0] = HEAP8[ptr >> 0];
 HEAP8[tempDoublePtr + 1 >> 0] = HEAP8[ptr + 1 >> 0];
 HEAP8[tempDoublePtr + 2 >> 0] = HEAP8[ptr + 2 >> 0];
 HEAP8[tempDoublePtr + 3 >> 0] = HEAP8[ptr + 3 >> 0];
}
function _emscripten_bind_b2World_Step_3($self, $arg0, $arg1, $arg2) {
 $self = $self | 0;
 $arg0 = +$arg0;
 $arg1 = $arg1 | 0;
 $arg2 = $arg2 | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZN7b2World4StepEfii($self, $arg0, $arg1, $arg2);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_JSContactListener_BeginContact_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var sp = 0;
 sp = STACKTOP;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$self >> 2] | 0) + 8 >> 2] & 127]($self, $arg0);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2Body_CreateFixture_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $call = 0, sp = 0;
 sp = STACKTOP;
 $call = __ZN6b2Body13CreateFixtureEPK12b2FixtureDef($self, $arg0) | 0;
 STACKTOP = sp;
 return $call | 0;
}
function _emscripten_bind_JSContactListener_EndContact_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var sp = 0;
 sp = STACKTOP;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$self >> 2] | 0) + 12 >> 2] & 127]($self, $arg0);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2PolygonShape_GetChildCount_0($self) {
 $self = $self | 0;
 var $call = 0, sp = 0;
 sp = STACKTOP;
 $call = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$self >> 2] | 0) + 12 >> 2] & 63]($self) | 0;
 STACKTOP = sp;
 return $call | 0;
}
function _emscripten_bind_b2Color_Set_3($self, $arg0, $arg1, $arg2) {
 $self = $self | 0;
 $arg0 = +$arg0;
 $arg1 = +$arg1;
 $arg2 = +$arg2;
 HEAPF32[$self >> 2] = $arg0;
 HEAPF32[$self + 4 >> 2] = $arg1;
 HEAPF32[$self + 8 >> 2] = $arg2;
 return;
}
function _emscripten_bind_b2CircleShape_GetChildCount_0($self) {
 $self = $self | 0;
 var $call = 0, sp = 0;
 sp = STACKTOP;
 $call = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$self >> 2] | 0) + 12 >> 2] & 63]($self) | 0;
 STACKTOP = sp;
 return $call | 0;
}
function dynCall_viiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 FUNCTION_TABLE_viiiiii[index & 63](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}
function _emscripten_bind_b2Vec3_Set_3($self, $arg0, $arg1, $arg2) {
 $self = $self | 0;
 $arg0 = +$arg0;
 $arg1 = +$arg1;
 $arg2 = +$arg2;
 HEAPF32[$self >> 2] = $arg0;
 HEAPF32[$self + 4 >> 2] = $arg1;
 HEAPF32[$self + 8 >> 2] = $arg2;
 return;
}
function _emscripten_bind_b2ChainShape_GetChildCount_0($self) {
 $self = $self | 0;
 var $call = 0, sp = 0;
 sp = STACKTOP;
 $call = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$self >> 2] | 0) + 12 >> 2] & 63]($self) | 0;
 STACKTOP = sp;
 return $call | 0;
}
function _emscripten_bind_b2Vec2_op_mul_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 var $y$i = 0;
 HEAPF32[$self >> 2] = +HEAPF32[$self >> 2] * $arg0;
 $y$i = $self + 4 | 0;
 HEAPF32[$y$i >> 2] = +HEAPF32[$y$i >> 2] * $arg0;
 return;
}
function _emscripten_bind_b2EdgeShape_GetChildCount_0($self) {
 $self = $self | 0;
 var $call = 0, sp = 0;
 sp = STACKTOP;
 $call = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$self >> 2] | 0) + 12 >> 2] & 63]($self) | 0;
 STACKTOP = sp;
 return $call | 0;
}
function _emscripten_bind_b2Mat22_SetZero_0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$self + 0 >> 2] = 0;
 HEAP32[$self + 4 >> 2] = 0;
 HEAP32[$self + 8 >> 2] = 0;
 HEAP32[$self + 12 >> 2] = 0;
 STACKTOP = sp;
 return;
}
function _emscripten_bind_JSDraw_DrawTransform_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var sp = 0;
 sp = STACKTOP;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$self >> 2] | 0) + 28 >> 2] & 127]($self, $arg0);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2Shape_GetChildCount_0($self) {
 $self = $self | 0;
 var $call = 0, sp = 0;
 sp = STACKTOP;
 $call = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$self >> 2] | 0) + 12 >> 2] & 63]($self) | 0;
 STACKTOP = sp;
 return $call | 0;
}
function _emscripten_bind_b2Vec2_Length_0($self) {
 $self = $self | 0;
 var $0 = 0.0, $1 = 0.0, $call$i$i = 0.0;
 $0 = +HEAPF32[$self >> 2];
 $1 = +HEAPF32[$self + 4 >> 2];
 $call$i$i = +Math_sqrt(+($0 * $0 + $1 * $1));
 return +$call$i$i;
}
function _emscripten_bind_b2Draw_ClearFlags_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $m_drawFlags$i = 0;
 $m_drawFlags$i = $self + 4 | 0;
 HEAP32[$m_drawFlags$i >> 2] = HEAP32[$m_drawFlags$i >> 2] & ~$arg0;
 return;
}
function _emscripten_bind_b2Draw_AppendFlags_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var $m_drawFlags$i = 0;
 $m_drawFlags$i = $self + 4 | 0;
 HEAP32[$m_drawFlags$i >> 2] = HEAP32[$m_drawFlags$i >> 2] | $arg0;
 return;
}
function __ZN21JSDestructionListener17SayGoodbyeFixtureEP9b2Fixture($this, $arg0) {
 $this = $this | 0;
 $arg0 = $arg0 | 0;
 var sp = 0;
 sp = STACKTOP;
 _emscripten_asm_const_int(4656, $this | 0, $arg0 | 0) | 0;
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2Contact_ResetFriction_0($self) {
 $self = $self | 0;
 HEAPF32[$self + 136 >> 2] = +Math_sqrt(+(+HEAPF32[(HEAP32[$self + 48 >> 2] | 0) + 16 >> 2] * +HEAPF32[(HEAP32[$self + 52 >> 2] | 0) + 16 >> 2]));
 return;
}
function __ZN21JSDestructionListener15SayGoodbyeJointEP7b2Joint($this, $arg0) {
 $this = $this | 0;
 $arg0 = $arg0 | 0;
 var sp = 0;
 sp = STACKTOP;
 _emscripten_asm_const_int(4920, $this | 0, $arg0 | 0) | 0;
 STACKTOP = sp;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((_pthread_key_create(21160, 119) | 0) == 0) {
  STACKTOP = sp;
  return;
 } else _abort_message(21232, sp);
}
function dynCall_iiiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return FUNCTION_TABLE_iiiiii[index & 63](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}
function _emscripten_bind_b2RevoluteJoint_GetJointAngle_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[(HEAP32[$self + 52 >> 2] | 0) + 56 >> 2] - +HEAPF32[(HEAP32[$self + 48 >> 2] | 0) + 56 >> 2] - +HEAPF32[$self + 116 >> 2]);
}
function runPostSets() {}
function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var h = 0;
 h = b - d >>> 0;
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0;
 return (tempRet0 = h, a - c >>> 0 | 0) | 0;
}
function __ZN17JSContactListener12BeginContactEP9b2Contact($this, $arg0) {
 $this = $this | 0;
 $arg0 = $arg0 | 0;
 var sp = 0;
 sp = STACKTOP;
 _emscripten_asm_const_int(3408, $this | 0, $arg0 | 0) | 0;
 STACKTOP = sp;
 return;
}
function __ZN17JSContactListener10EndContactEP9b2Contact($this, $arg0) {
 $this = $this | 0;
 $arg0 = $arg0 | 0;
 var sp = 0;
 sp = STACKTOP;
 _emscripten_asm_const_int(3176, $this | 0, $arg0 | 0) | 0;
 STACKTOP = sp;
 return;
}
function dynCall_diiiid(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = +a5;
 return +FUNCTION_TABLE_diiiid[index & 63](a1 | 0, a2 | 0, a3 | 0, a4 | 0, +a5);
}
function __ZN6JSDraw13DrawTransformERK11b2Transform($this, $arg0) {
 $this = $this | 0;
 $arg0 = $arg0 | 0;
 var sp = 0;
 sp = STACKTOP;
 _emscripten_asm_const_int(936, $this | 0, $arg0 | 0) | 0;
 STACKTOP = sp;
 return;
}
function dynCall_viiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 FUNCTION_TABLE_viiiii[index & 63](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}
function ___cxa_is_pointer_type($type) {
 $type = $type | 0;
 var $2 = 0, sp = 0;
 sp = STACKTOP;
 if (($type | 0) == 0) $2 = 0; else $2 = (___dynamic_cast($type, 21776) | 0) != 0;
 STACKTOP = sp;
 return $2 & 1 | 0;
}
function _emscripten_bind_b2Transform_SetIdentity_0($self) {
 $self = $self | 0;
 HEAPF32[$self >> 2] = 0.0;
 HEAPF32[$self + 4 >> 2] = 0.0;
 HEAPF32[$self + 8 >> 2] = 0.0;
 HEAPF32[$self + 12 >> 2] = 1.0;
 return;
}
function dynCall_viidii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 a4 = a4 | 0;
 a5 = a5 | 0;
 FUNCTION_TABLE_viidii[index & 63](a1 | 0, a2 | 0, +a3, a4 | 0, a5 | 0);
}
function _emscripten_bind_b2Mat33_GetSymInverse33_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNK7b2Mat3315GetSymInverse33EPS_($self, $arg0);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2World_DestroyJoint_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZN7b2World12DestroyJointEP7b2Joint($self, $arg0);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2Mat22_SetIdentity_0($self) {
 $self = $self | 0;
 HEAPF32[$self >> 2] = 1.0;
 HEAPF32[$self + 8 >> 2] = 0.0;
 HEAPF32[$self + 4 >> 2] = 0.0;
 HEAPF32[$self + 12 >> 2] = 1.0;
 return;
}
function _emscripten_bind_b2WeldJoint_Dump_0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$self >> 2] | 0) + 16 >> 2] & 127]($self);
 STACKTOP = sp;
 return;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $1$0 = 0;
 $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
 return $1$0 | 0;
}
function _emscripten_bind_b2AABB_GetPerimeter_0($self) {
 $self = $self | 0;
 return +((+HEAPF32[$self + 8 >> 2] - +HEAPF32[$self >> 2] + (+HEAPF32[$self + 12 >> 2] - +HEAPF32[$self + 4 >> 2])) * 2.0);
}
function _emscripten_bind_b2RevoluteJoint_GetJointSpeed_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[(HEAP32[$self + 52 >> 2] | 0) + 72 >> 2] - +HEAPF32[(HEAP32[$self + 48 >> 2] | 0) + 72 >> 2]);
}
function _emscripten_bind_b2Joint_Dump_0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$self >> 2] | 0) + 16 >> 2] & 127]($self);
 STACKTOP = sp;
 return;
}
function jsCall_viiiiii_19(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 jsCall(19, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}
function jsCall_viiiiii_18(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 jsCall(18, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}
function jsCall_viiiiii_17(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 jsCall(17, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}
function jsCall_viiiiii_16(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 jsCall(16, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}
function jsCall_viiiiii_15(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 jsCall(15, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}
function jsCall_viiiiii_14(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 jsCall(14, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}
function jsCall_viiiiii_13(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 jsCall(13, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}
function jsCall_viiiiii_12(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 jsCall(12, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}
function jsCall_viiiiii_11(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 jsCall(11, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}
function jsCall_viiiiii_10(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 jsCall(10, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}
function _emscripten_bind_b2WheelJoint_GetJointSpeed_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[(HEAP32[$self + 52 >> 2] | 0) + 72 >> 2] - +HEAPF32[(HEAP32[$self + 48 >> 2] | 0) + 72 >> 2]);
}
function jsCall_viiiiii_9(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 jsCall(9, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}
function jsCall_viiiiii_8(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 jsCall(8, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}
function jsCall_viiiiii_7(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 jsCall(7, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}
function jsCall_viiiiii_6(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 jsCall(6, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}
function jsCall_viiiiii_5(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 jsCall(5, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}
function jsCall_viiiiii_4(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 jsCall(4, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}
function jsCall_viiiiii_3(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 jsCall(3, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}
function jsCall_viiiiii_2(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 jsCall(2, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}
function jsCall_viiiiii_1(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 jsCall(1, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}
function jsCall_viiiiii_0(a1, a2, a3, a4, a5, a6) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 jsCall(0, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}
function __ZN12b2ChainShapeD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 6560;
 _free(HEAP32[$this + 12 >> 2] | 0);
 _free($this);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2Rot_GetAngle_0($self) {
 $self = $self | 0;
 var $call$i$i = 0.0;
 $call$i$i = +Math_atan2(+(+HEAPF32[$self >> 2]), +(+HEAPF32[$self + 4 >> 2]));
 return +$call$i$i;
}
function _emscripten_bind_JSContactFilter_JSContactListener_0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 _emscripten_asm_const_int(2264, $self | 0) | 0;
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2Vec2_LengthSquared_0($self) {
 $self = $self | 0;
 var $0 = 0.0, $1 = 0.0;
 $0 = +HEAPF32[$self >> 2];
 $1 = +HEAPF32[$self + 4 >> 2];
 return +($0 * $0 + $1 * $1);
}
function dynCall_viiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 FUNCTION_TABLE_viiii[index & 63](a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}
function _emscripten_bind_b2Fixture_Dump_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZN9b2Fixture4DumpEi($self, $arg0);
 STACKTOP = sp;
 return;
}
function __ZN17b2ContactListener8PreSolveEP9b2ContactPK10b2Manifold($this, $contact, $oldManifold) {
 $this = $this | 0;
 $contact = $contact | 0;
 $oldManifold = $oldManifold | 0;
 return;
}
function _emscripten_bind_b2Vec2_Set_2($self, $arg0, $arg1) {
 $self = $self | 0;
 $arg0 = +$arg0;
 $arg1 = +$arg1;
 HEAPF32[$self >> 2] = $arg0;
 HEAPF32[$self + 4 >> 2] = $arg1;
 return;
}
function _emscripten_bind_b2Rot_Set_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self >> 2] = +Math_sin(+$arg0);
 HEAPF32[$self + 4 >> 2] = +Math_cos(+$arg0);
 return;
}
function __ZNK11b2GearJoint17GetReactionTorqueEf($this, $inv_dt) {
 $this = $this | 0;
 $inv_dt = +$inv_dt;
 return +(+HEAPF32[$this + 156 >> 2] * +HEAPF32[$this + 256 >> 2] * $inv_dt);
}
function dynCall_viidi(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 a4 = a4 | 0;
 FUNCTION_TABLE_viidi[index & 63](a1 | 0, a2 | 0, +a3, a4 | 0);
}
function __ZN17b2ContactListener9PostSolveEP9b2ContactPK16b2ContactImpulse($this, $contact, $impulse) {
 $this = $this | 0;
 $contact = $contact | 0;
 $impulse = $impulse | 0;
 return;
}
function __ZSt11__terminatePFvvE($func) {
 $func = $func | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 FUNCTION_TABLE_v[$func & 63]();
 _abort_message(21416, sp);
}
function jsCall_iiiiii_19(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall(19, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}
function jsCall_iiiiii_18(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall(18, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}
function jsCall_iiiiii_17(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall(17, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}
function jsCall_iiiiii_16(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall(16, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}
function jsCall_iiiiii_15(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall(15, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}
function jsCall_iiiiii_14(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall(14, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}
function jsCall_iiiiii_13(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall(13, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}
function jsCall_iiiiii_12(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall(12, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}
function jsCall_iiiiii_11(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall(11, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}
function jsCall_iiiiii_10(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall(10, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}
function jsCall_iiiiii_9(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall(9, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}
function jsCall_iiiiii_8(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall(8, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}
function jsCall_iiiiii_7(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall(7, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}
function jsCall_iiiiii_6(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall(6, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}
function jsCall_iiiiii_5(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall(5, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}
function jsCall_iiiiii_4(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall(4, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}
function jsCall_iiiiii_3(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall(3, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}
function jsCall_iiiiii_2(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall(2, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}
function jsCall_iiiiii_1(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall(1, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}
function jsCall_iiiiii_0(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return jsCall(0, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}
function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0;
 l = a + c >>> 0;
 return (tempRet0 = b + d + (l >>> 0 < a >>> 0 | 0) >>> 0, l | 0) | 0;
}
function _emscripten_bind_b2PrismaticJointDef___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) != 0) _free($self);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2RevoluteJointDef___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) != 0) _free($self);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2FrictionJointDef___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) != 0) _free($self);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2DistanceJointDef___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) != 0) _free($self);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2PulleyJointDef___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) != 0) _free($self);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2ContactImpulse___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) != 0) _free($self);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2ContactFeature___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) != 0) _free($self);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2WheelJointDef___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) != 0) _free($self);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2RayCastOutput___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) != 0) _free($self);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2MouseJointDef___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) != 0) _free($self);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2ManifoldPoint___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) != 0) _free($self);
 STACKTOP = sp;
 return;
}
function __ZN12b2MouseJoint4DumpEv($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 __Z5b2LogPKcz(19096, sp);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2WeldJointDef___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) != 0) _free($self);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2RopeJointDef___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) != 0) _free($self);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2RayCastInput___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) != 0) _free($self);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2GearJointDef___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) != 0) _free($self);
 STACKTOP = sp;
 return;
}
function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 63](a1 | 0, a2 | 0, a3 | 0) | 0;
}
function _emscripten_bind_b2ContactEdge___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) != 0) _free($self);
 STACKTOP = sp;
 return;
}
function jsCall_diiiid_19(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = +a5;
 return +jsCall(19, a1 | 0, a2 | 0, a3 | 0, a4 | 0, +a5);
}
function jsCall_diiiid_18(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = +a5;
 return +jsCall(18, a1 | 0, a2 | 0, a3 | 0, a4 | 0, +a5);
}
function jsCall_diiiid_17(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = +a5;
 return +jsCall(17, a1 | 0, a2 | 0, a3 | 0, a4 | 0, +a5);
}
function jsCall_diiiid_16(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = +a5;
 return +jsCall(16, a1 | 0, a2 | 0, a3 | 0, a4 | 0, +a5);
}
function jsCall_diiiid_15(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = +a5;
 return +jsCall(15, a1 | 0, a2 | 0, a3 | 0, a4 | 0, +a5);
}
function jsCall_diiiid_14(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = +a5;
 return +jsCall(14, a1 | 0, a2 | 0, a3 | 0, a4 | 0, +a5);
}
function jsCall_diiiid_13(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = +a5;
 return +jsCall(13, a1 | 0, a2 | 0, a3 | 0, a4 | 0, +a5);
}
function jsCall_diiiid_12(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = +a5;
 return +jsCall(12, a1 | 0, a2 | 0, a3 | 0, a4 | 0, +a5);
}
function jsCall_diiiid_11(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = +a5;
 return +jsCall(11, a1 | 0, a2 | 0, a3 | 0, a4 | 0, +a5);
}
function jsCall_diiiid_10(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = +a5;
 return +jsCall(10, a1 | 0, a2 | 0, a3 | 0, a4 | 0, +a5);
}
function _emscripten_bind_b2Vec3_SetZero_0($self) {
 $self = $self | 0;
 HEAPF32[$self >> 2] = 0.0;
 HEAPF32[$self + 4 >> 2] = 0.0;
 HEAPF32[$self + 8 >> 2] = 0.0;
 return;
}
function _emscripten_bind_b2FixtureDef___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) != 0) _free($self);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2Transform___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) != 0) _free($self);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2JointEdge___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) != 0) _free($self);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2ContactID___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) != 0) _free($self);
 STACKTOP = sp;
 return;
}
function jsCall_viiiii_19(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall(19, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}
function jsCall_viiiii_18(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall(18, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}
function jsCall_viiiii_17(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall(17, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}
function jsCall_viiiii_16(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall(16, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}
function jsCall_viiiii_15(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall(15, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}
function jsCall_viiiii_14(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall(14, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}
function jsCall_viiiii_13(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall(13, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}
function jsCall_viiiii_12(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall(12, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}
function jsCall_viiiii_11(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall(11, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}
function jsCall_viiiii_10(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall(10, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}
function jsCall_diiiid_9(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = +a5;
 return +jsCall(9, a1 | 0, a2 | 0, a3 | 0, a4 | 0, +a5);
}
function jsCall_diiiid_8(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = +a5;
 return +jsCall(8, a1 | 0, a2 | 0, a3 | 0, a4 | 0, +a5);
}
function jsCall_diiiid_7(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = +a5;
 return +jsCall(7, a1 | 0, a2 | 0, a3 | 0, a4 | 0, +a5);
}
function jsCall_diiiid_6(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = +a5;
 return +jsCall(6, a1 | 0, a2 | 0, a3 | 0, a4 | 0, +a5);
}
function jsCall_diiiid_5(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = +a5;
 return +jsCall(5, a1 | 0, a2 | 0, a3 | 0, a4 | 0, +a5);
}
function jsCall_diiiid_4(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = +a5;
 return +jsCall(4, a1 | 0, a2 | 0, a3 | 0, a4 | 0, +a5);
}
function jsCall_diiiid_3(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = +a5;
 return +jsCall(3, a1 | 0, a2 | 0, a3 | 0, a4 | 0, +a5);
}
function jsCall_diiiid_2(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = +a5;
 return +jsCall(2, a1 | 0, a2 | 0, a3 | 0, a4 | 0, +a5);
}
function jsCall_diiiid_1(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = +a5;
 return +jsCall(1, a1 | 0, a2 | 0, a3 | 0, a4 | 0, +a5);
}
function jsCall_diiiid_0(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = +a5;
 return +jsCall(0, a1 | 0, a2 | 0, a3 | 0, a4 | 0, +a5);
}
function _emscripten_bind_b2PrismaticJointDef_set_collideConnected_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP8[$self + 16 >> 0] = $arg0 & 1;
 return;
}
function _emscripten_bind_b2MassData___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) != 0) _free($self);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2Manifold___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) != 0) _free($self);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2JointDef___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) != 0) _free($self);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2RevoluteJointDef_set_collideConnected_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP8[$self + 16 >> 0] = $arg0 & 1;
 return;
}
function _emscripten_bind_b2Profile___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) != 0) _free($self);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2FrictionJointDef_set_collideConnected_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP8[$self + 16 >> 0] = $arg0 & 1;
 return;
}
function _emscripten_bind_b2Fixture___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) != 0) _free($self);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2DistanceJointDef_set_collideConnected_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP8[$self + 16 >> 0] = $arg0 & 1;
 return;
}
function _emscripten_bind_b2Body_ResetMassData_0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZN6b2Body13ResetMassDataEv($self);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2BodyDef___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) != 0) _free($self);
 STACKTOP = sp;
 return;
}
function __ZN7b2Joint4DumpEv($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 __Z5b2LogPKcz(18632, sp);
 STACKTOP = sp;
 return;
}
function jsCall_viiiii_9(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall(9, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}
function jsCall_viiiii_8(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall(8, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}
function jsCall_viiiii_7(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall(7, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}
function jsCall_viiiii_6(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall(6, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}
function jsCall_viiiii_5(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall(5, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}
function jsCall_viiiii_4(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall(4, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}
function jsCall_viiiii_3(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall(3, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}
function jsCall_viiiii_2(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall(2, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}
function jsCall_viiiii_1(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall(1, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}
function jsCall_viiiii_0(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall(0, a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}
function _emscripten_bind_b2Filter___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) != 0) _free($self);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2PulleyJointDef_set_collideConnected_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP8[$self + 16 >> 0] = $arg0 & 1;
 return;
}
function _emscripten_bind_b2Mat33___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) != 0) _free($self);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2Mat22___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) != 0) _free($self);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2Color___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) != 0) _free($self);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_VoidPtr___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) != 0) _free($self);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2WheelJointDef_set_collideConnected_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP8[$self + 16 >> 0] = $arg0 & 1;
 return;
}
function _emscripten_bind_b2Vec3___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) != 0) _free($self);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2Vec2___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) != 0) _free($self);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2MouseJointDef_set_collideConnected_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP8[$self + 16 >> 0] = $arg0 & 1;
 return;
}
function _emscripten_bind_b2AABB___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) != 0) _free($self);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2WeldJointDef_set_collideConnected_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP8[$self + 16 >> 0] = $arg0 & 1;
 return;
}
function _emscripten_bind_b2Rot___destroy___0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($self | 0) != 0) _free($self);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2RopeJointDef_set_collideConnected_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP8[$self + 16 >> 0] = $arg0 & 1;
 return;
}
function _emscripten_bind_b2PrismaticJointDef_set_upperTranslation_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 56 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2PrismaticJointDef_set_lowerTranslation_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 52 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2PrismaticJointDef_set_enableMotor_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP8[$self + 60 >> 0] = $arg0 & 1;
 return;
}
function _emscripten_bind_b2PrismaticJointDef_set_enableLimit_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP8[$self + 48 >> 0] = $arg0 & 1;
 return;
}
function _emscripten_bind_b2GearJointDef_set_collideConnected_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP8[$self + 16 >> 0] = $arg0 & 1;
 return;
}
function jsCall_viidii_19(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall(19, a1 | 0, a2 | 0, +a3, a4 | 0, a5 | 0);
}
function jsCall_viidii_18(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall(18, a1 | 0, a2 | 0, +a3, a4 | 0, a5 | 0);
}
function jsCall_viidii_17(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall(17, a1 | 0, a2 | 0, +a3, a4 | 0, a5 | 0);
}
function jsCall_viidii_16(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall(16, a1 | 0, a2 | 0, +a3, a4 | 0, a5 | 0);
}
function jsCall_viidii_15(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall(15, a1 | 0, a2 | 0, +a3, a4 | 0, a5 | 0);
}
function jsCall_viidii_14(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall(14, a1 | 0, a2 | 0, +a3, a4 | 0, a5 | 0);
}
function jsCall_viidii_13(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall(13, a1 | 0, a2 | 0, +a3, a4 | 0, a5 | 0);
}
function jsCall_viidii_12(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall(12, a1 | 0, a2 | 0, +a3, a4 | 0, a5 | 0);
}
function jsCall_viidii_11(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall(11, a1 | 0, a2 | 0, +a3, a4 | 0, a5 | 0);
}
function jsCall_viidii_10(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall(10, a1 | 0, a2 | 0, +a3, a4 | 0, a5 | 0);
}
function _emscripten_bind_b2RevoluteJointDef_set_enableMotor_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP8[$self + 52 >> 0] = $arg0 & 1;
 return;
}
function _emscripten_bind_b2RevoluteJointDef_set_enableLimit_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP8[$self + 40 >> 0] = $arg0 & 1;
 return;
}
function _emscripten_bind_b2PrismaticJointDef_set_referenceAngle_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 44 >> 2] = $arg0;
 return;
}
function jsCall_viidii_9(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall(9, a1 | 0, a2 | 0, +a3, a4 | 0, a5 | 0);
}
function jsCall_viidii_8(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall(8, a1 | 0, a2 | 0, +a3, a4 | 0, a5 | 0);
}
function jsCall_viidii_7(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall(7, a1 | 0, a2 | 0, +a3, a4 | 0, a5 | 0);
}
function jsCall_viidii_6(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall(6, a1 | 0, a2 | 0, +a3, a4 | 0, a5 | 0);
}
function jsCall_viidii_5(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall(5, a1 | 0, a2 | 0, +a3, a4 | 0, a5 | 0);
}
function jsCall_viidii_4(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall(4, a1 | 0, a2 | 0, +a3, a4 | 0, a5 | 0);
}
function jsCall_viidii_3(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall(3, a1 | 0, a2 | 0, +a3, a4 | 0, a5 | 0);
}
function jsCall_viidii_2(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall(2, a1 | 0, a2 | 0, +a3, a4 | 0, a5 | 0);
}
function jsCall_viidii_1(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall(1, a1 | 0, a2 | 0, +a3, a4 | 0, a5 | 0);
}
function jsCall_viidii_0(a1, a2, a3, a4, a5) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 a4 = a4 | 0;
 a5 = a5 | 0;
 jsCall(0, a1 | 0, a2 | 0, +a3, a4 | 0, a5 | 0);
}
function dynCall_viii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 FUNCTION_TABLE_viii[index & 63](a1 | 0, a2 | 0, a3 | 0);
}
function _emscripten_bind_b2World_SetContinuousPhysics_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP8[$self + 102993 >> 0] = $arg0 & 1;
 return;
}
function _emscripten_bind_b2RevoluteJointDef_set_referenceAngle_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 36 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2RevoluteJointDef_set_maxMotorTorque_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 60 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2PrismaticJointDef_set_maxMotorForce_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 64 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2ManifoldPoint_set_id_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 16 >> 2] = HEAP32[$arg0 >> 2];
 return;
}
function _emscripten_bind_b2ChainShape_set_m_hasPrevVertex_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP8[$self + 36 >> 0] = $arg0 & 1;
 return;
}
function _emscripten_bind_b2ChainShape_set_m_hasNextVertex_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP8[$self + 37 >> 0] = $arg0 & 1;
 return;
}
function _emscripten_bind_b2World_SetDestructionListener_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 102980 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2WheelJointDef_set_enableMotor_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP8[$self + 44 >> 0] = $arg0 & 1;
 return;
}
function _emscripten_bind_b2JointDef_set_collideConnected_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP8[$self + 16 >> 0] = $arg0 & 1;
 return;
}
function __ZNK16b2PrismaticJoint17GetReactionTorqueEf($this, $inv_dt) {
 $this = $this | 0;
 $inv_dt = +$inv_dt;
 return +(+HEAPF32[$this + 108 >> 2] * $inv_dt);
}
function _emscripten_bind_b2PolygonShape_set_m_vertexCount_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 148 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2DistanceJointDef_set_dampingRatio_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 44 >> 2] = $arg0;
 return;
}
function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP;
 STACKTOP = STACKTOP + size | 0;
 STACKTOP = STACKTOP + 15 & -16;
 return ret | 0;
}
function _emscripten_bind_b2WheelJoint_SetSpringDampingRatio_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 72 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2WheelJointDef_set_maxMotorTorque_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 48 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2PrismaticJointDef_set_motorSpeed_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 68 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2ManifoldPoint_set_tangentImpulse_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 12 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2DistanceJointDef_set_frequencyHz_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 40 >> 2] = $arg0;
 return;
}
function __ZNK15b2RevoluteJoint17GetReactionTorqueEf($this, $inv_dt) {
 $this = $this | 0;
 $inv_dt = +$inv_dt;
 return +(+HEAPF32[$this + 92 >> 2] * $inv_dt);
}
function __ZNK15b2FrictionJoint17GetReactionTorqueEf($this, $inv_dt) {
 $this = $this | 0;
 $inv_dt = +$inv_dt;
 return +(+HEAPF32[$this + 92 >> 2] * $inv_dt);
}
function _emscripten_bind_b2WheelJoint_SetSpringFrequencyHz_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 68 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2WeldJointDef_set_referenceAngle_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 36 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2RevoluteJointDef_set_upperAngle_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 48 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2RevoluteJointDef_set_motorSpeed_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 56 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2RevoluteJointDef_set_lowerAngle_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 44 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2PrismaticJoint_GetMotorForce_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 return +(+HEAPF32[$self + 116 >> 2] * $arg0);
}
function _emscripten_bind_b2PrismaticJointDef_set_userData_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 4 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2EdgeShape_set_m_hasVertex3_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP8[$self + 45 >> 0] = $arg0 & 1;
 return;
}
function _emscripten_bind_b2EdgeShape_set_m_hasVertex0_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP8[$self + 44 >> 0] = $arg0 & 1;
 return;
}
function _emscripten_bind_b2World_SetWarmStarting_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP8[$self + 102992 >> 0] = $arg0 & 1;
 return;
}
function _emscripten_bind_b2World_SetContactListener_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 102944 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2WheelJointDef_set_dampingRatio_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 60 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2RevoluteJoint_GetMotorTorque_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 return +(+HEAPF32[$self + 96 >> 2] * $arg0);
}
function _emscripten_bind_b2RevoluteJointDef_set_userData_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 4 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2MouseJointDef_set_dampingRatio_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 36 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2ManifoldPoint_set_normalImpulse_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 8 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2FrictionJointDef_set_userData_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 4 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2FrictionJointDef_set_maxTorque_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 40 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2DistanceJointDef_set_userData_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 4 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2BodyDef_set_fixedRotation_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP8[$self + 38 >> 0] = $arg0 & 1;
 return;
}
function __ZNK12b2WheelJoint17GetReactionTorqueEf($this, $inv_dt) {
 $this = $this | 0;
 $inv_dt = +$inv_dt;
 return +(+HEAPF32[$this + 112 >> 2] * $inv_dt);
}
function dynCall_viid(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 FUNCTION_TABLE_viid[index & 63](a1 | 0, a2 | 0, +a3);
}
function _emscripten_bind_b2World_SetSubStepping_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP8[$self + 102994 >> 0] = $arg0 & 1;
 return;
}
function _emscripten_bind_b2WheelJointDef_set_frequencyHz_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 56 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2WeldJointDef_set_dampingRatio_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 44 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2PrismaticJointDef_set_bodyB_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 12 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2MouseJointDef_set_frequencyHz_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 32 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2FrictionJointDef_set_maxForce_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 36 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2DistanceJoint_SetDampingRatio_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 72 >> 2] = $arg0;
 return;
}
function __ZNK11b2WeldJoint17GetReactionTorqueEf($this, $inv_dt) {
 $this = $this | 0;
 $inv_dt = +$inv_dt;
 return +(+HEAPF32[$this + 112 >> 2] * $inv_dt);
}
function _emscripten_bind_b2WheelJoint_GetMotorTorque_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 return +(+HEAPF32[$self + 112 >> 2] * $arg0);
}
function _emscripten_bind_b2WheelJointDef_set_motorSpeed_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 52 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2WeldJointDef_set_frequencyHz_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 40 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2RevoluteJointDef_set_bodyB_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 12 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2RayCastInput_set_maxFraction_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 16 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2PulleyJointDef_set_userData_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 4 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2PrismaticJoint_SetUserData_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 64 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2PrismaticJointDef_set_bodyA_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 8 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2FrictionJointDef_set_bodyB_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 12 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2FixtureDef_set_isSensor_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP8[$self + 20 >> 0] = $arg0 & 1;
 return;
}
function _emscripten_bind_b2DistanceJointDef_set_bodyB_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 12 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2WheelJointDef_set_userData_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 4 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2RevoluteJoint_SetUserData_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 64 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2RevoluteJointDef_set_bodyA_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 8 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2MouseJointDef_set_userData_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 4 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2FrictionJoint_SetUserData_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 64 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2FrictionJointDef_set_bodyA_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 8 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2DistanceJoint_SetUserData_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 64 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2DistanceJointDef_set_length_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 36 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2DistanceJointDef_set_bodyA_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 8 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2ChainShape_set_m_vertices_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 12 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2BodyDef_set_angularVelocity_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 24 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2BodyDef_set_allowSleep_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP8[$self + 36 >> 0] = $arg0 & 1;
 return;
}
function _emscripten_bind_b2WeldJointDef_set_userData_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 4 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2RopeJointDef_set_userData_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 4 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2RopeJointDef_set_maxLength_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 36 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2PulleyJointDef_set_lengthB_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 56 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2PulleyJointDef_set_lengthA_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 52 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2PulleyJointDef_set_bodyB_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 12 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2MouseJoint_SetDampingRatio_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 88 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2MouseJointDef_set_maxForce_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 28 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2GearJointDef_set_userData_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 4 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2FixtureDef_set_restitution_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 12 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2DistanceJoint_SetFrequency_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 68 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2ContactImpulse_set_count_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 16 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2BodyDef_set_angularDamping_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 32 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2WheelJointDef_set_bodyB_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 12 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2WeldJoint_SetDampingRatio_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 72 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2RayCastOutput_set_fraction_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 8 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2PulleyJoint_SetUserData_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 64 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2PulleyJointDef_set_bodyA_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 8 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2Profile_set_solveVelocity_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 16 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2Profile_set_solvePosition_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 20 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2MouseJointDef_set_bodyB_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 12 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2Manifold_set_pointCount_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 60 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2GearJointDef_set_joint2_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 24 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2GearJointDef_set_joint1_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 20 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2ContactFeature_set_indexB_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP8[$self + 1 >> 0] = $arg0;
 return;
}
function _emscripten_bind_b2BodyDef_set_linearDamping_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 28 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2World_SetDebugDraw_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 102984 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2WheelJoint_SetUserData_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 64 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2WheelJointDef_set_bodyA_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 8 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2WeldJointDef_set_bodyB_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 12 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2RopeJointDef_set_bodyB_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 12 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2PulleyJointDef_set_ratio_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 60 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2PolygonShape_set_m_type_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 4 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2PolygonShape_set_m_radius_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 8 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2MouseJoint_SetUserData_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 64 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2MouseJointDef_set_bodyA_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 8 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2GearJointDef_set_bodyB_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 12 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2FixtureDef_set_userData_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 4 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2DistanceJoint_SetLength_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 104 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2ContactFeature_set_typeB_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP8[$self + 3 >> 0] = $arg0;
 return;
}
function _emscripten_bind_b2ContactFeature_set_typeA_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP8[$self + 2 >> 0] = $arg0;
 return;
}
function _emscripten_bind_b2ContactEdge_set_contact_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 4 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2ChainShape_set_m_count_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 16 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2BodyDef_set_gravityScale_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 48 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2WeldJoint_SetUserData_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 64 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2WeldJointDef_set_bodyA_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 8 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2RopeJoint_SetUserData_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 64 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2RopeJointDef_set_bodyA_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 8 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2PrismaticJointDef_set_type_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2MouseJoint_SetMaxForce_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 104 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2MouseJoint_SetFrequency_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 84 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2GearJoint_SetUserData_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 64 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2GearJointDef_set_bodyA_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 8 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2Contact_SetRestitution_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 140 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2CircleShape_set_m_type_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 4 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2CircleShape_set_m_radius_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 8 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2Body_SetAngularDamping_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 136 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2Body_Dump_0($self) {
 $self = $self | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZN6b2Body4DumpEv($self);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2BodyDef_set_bullet_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP8[$self + 39 >> 0] = $arg0 & 1;
 return;
}
function _emscripten_bind_b2BodyDef_set_active_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP8[$self + 40 >> 0] = $arg0 & 1;
 return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2WeldJoint_SetFrequency_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 68 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2RopeJoint_SetMaxLength_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 84 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2RevoluteJointDef_set_type_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2Profile_set_broadphase_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 24 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2JointDef_set_userData_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 4 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2GearJointDef_set_ratio_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 28 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2FrictionJointDef_set_type_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2Fixture_SetRestitution_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 20 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2FixtureDef_set_friction_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 8 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2FixtureDef_set_density_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 16 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2Filter_set_groupIndex_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP16[$self + 4 >> 1] = $arg0;
 return;
}
function _emscripten_bind_b2DistanceJointDef_set_type_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2ContactEdge_set_next_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 12 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2ChainShape_set_m_type_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 4 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2ChainShape_set_m_radius_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 8 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2Body_SetLinearDamping_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 132 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2BodyDef_set_userData_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 44 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2BodyDef_set_awake_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP8[$self + 37 >> 0] = $arg0 & 1;
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}
function setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if ((__THREW__ | 0) == 0) {
  __THREW__ = threw;
  threwValue = value;
 }
}
function _emscripten_bind_b2Profile_set_solveInit_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 12 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2Fixture_SetUserData_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 40 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2EdgeShape_set_m_type_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 4 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2EdgeShape_set_m_radius_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 8 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2ContactFeature_set_indexA_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP8[$self >> 0] = $arg0;
 return;
}
function _emscripten_bind_b2ContactEdge_set_prev_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 8 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2Body_SetGravityScale_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 140 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2PulleyJointDef_set_type_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2Profile_set_solveTOI_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 28 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2JointEdge_set_next_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 12 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2JointEdge_set_joint_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 4 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2JointDef_set_bodyB_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 12 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2Filter_set_maskBits_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP16[$self + 2 >> 1] = $arg0;
 return;
}
function _emscripten_bind_b2Filter_set_categoryBits_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP16[$self >> 1] = $arg0;
 return;
}
function _emscripten_bind_b2Contact_SetFriction_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 136 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2WheelJointDef_set_type_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2MouseJointDef_set_type_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2Manifold_set_type_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 56 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2Joint_SetUserData_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 64 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2JointEdge_set_prev_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 8 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2JointDef_set_bodyA_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 8 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2Fixture_SetFriction_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 16 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2Body_SetUserData_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 148 >> 2] = $arg0;
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}
function dynCall_iii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return FUNCTION_TABLE_iii[index & 63](a1 | 0, a2 | 0) | 0;
}
function _emscripten_bind_b2WeldJointDef_set_type_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2RopeJointDef_set_type_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2Profile_set_collide_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 4 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2GearJointDef_set_type_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2ContactEdge_set_other_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2Shape_set_m_type_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 4 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2Shape_set_m_radius_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 8 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2PrismaticJointDef_get_collideConnected_0($self) {
 $self = $self | 0;
 return (HEAP8[$self + 16 >> 0] | 0) != 0 | 0;
}
function _emscripten_bind_b2FixtureDef_set_shape_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2BodyDef_set_angle_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 12 >> 2] = $arg0;
 return;
}
function jsCall_viiii_19(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 jsCall(19, a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}
function jsCall_viiii_18(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 jsCall(18, a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}
function jsCall_viiii_17(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 jsCall(17, a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}
function jsCall_viiii_16(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 jsCall(16, a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}
function jsCall_viiii_15(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 jsCall(15, a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}
function jsCall_viiii_14(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 jsCall(14, a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}
function jsCall_viiii_13(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 jsCall(13, a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}
function jsCall_viiii_12(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 jsCall(12, a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}
function jsCall_viiii_11(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 jsCall(11, a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}
function jsCall_viiii_10(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 jsCall(10, a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}
function _emscripten_bind_b2Rot_SetIdentity_0($self) {
 $self = $self | 0;
 HEAPF32[$self >> 2] = 0.0;
 HEAPF32[$self + 4 >> 2] = 1.0;
 return;
}
function _emscripten_bind_b2RevoluteJointDef_get_collideConnected_0($self) {
 $self = $self | 0;
 return (HEAP8[$self + 16 >> 0] | 0) != 0 | 0;
}
function _emscripten_bind_b2Profile_set_solve_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 8 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2JointEdge_set_other_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2FrictionJointDef_get_collideConnected_0($self) {
 $self = $self | 0;
 return (HEAP8[$self + 16 >> 0] | 0) != 0 | 0;
}
function _emscripten_bind_b2DistanceJointDef_get_collideConnected_0($self) {
 $self = $self | 0;
 return (HEAP8[$self + 16 >> 0] | 0) != 0 | 0;
}
function _strlen(ptr) {
 ptr = ptr | 0;
 var curr = 0;
 curr = ptr;
 while (HEAP8[curr >> 0] | 0) curr = curr + 1 | 0;
 return curr - ptr | 0;
}
function __ZNK12b2ChainShape9TestPointERK11b2TransformRK6b2Vec2($this, $xf, $p) {
 $this = $this | 0;
 $xf = $xf | 0;
 $p = $p | 0;
 return 0;
}
function __ZN25b2PolygonAndCircleContactD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}
function jsCall_viiii_9(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 jsCall(9, a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}
function jsCall_viiii_8(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 jsCall(8, a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}
function jsCall_viiii_7(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 jsCall(7, a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}
function jsCall_viiii_6(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 jsCall(6, a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}
function jsCall_viiii_5(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 jsCall(5, a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}
function jsCall_viiii_4(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 jsCall(4, a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}
function jsCall_viiii_3(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 jsCall(3, a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}
function jsCall_viiii_2(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 jsCall(2, a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}
function jsCall_viiii_1(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 jsCall(1, a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}
function jsCall_viiii_0(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 jsCall(0, a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}
function _emscripten_bind_b2PulleyJointDef_get_collideConnected_0($self) {
 $self = $self | 0;
 return (HEAP8[$self + 16 >> 0] | 0) != 0 | 0;
}
function _emscripten_bind_b2MassData_set_I_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 12 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2JointDef_set_type_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2Draw_SetFlags_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self + 4 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2ContactID_set_key_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self >> 2] = $arg0;
 return;
}
function __ZNK11b2EdgeShape9TestPointERK11b2TransformRK6b2Vec2($this, $xf, $p) {
 $this = $this | 0;
 $xf = $xf | 0;
 $p = $p | 0;
 return 0;
}
function __ZN24b2ChainAndPolygonContactD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2WheelJointDef_get_collideConnected_0($self) {
 $self = $self | 0;
 return (HEAP8[$self + 16 >> 0] | 0) != 0 | 0;
}
function _emscripten_bind_b2Vec2_SetZero_0($self) {
 $self = $self | 0;
 HEAPF32[$self >> 2] = 0.0;
 HEAPF32[$self + 4 >> 2] = 0.0;
 return;
}
function _emscripten_bind_b2PrismaticJoint_GetCollideConnected_0($self) {
 $self = $self | 0;
 return (HEAP8[$self + 61 >> 0] | 0) != 0 | 0;
}
function _emscripten_bind_b2MouseJointDef_get_collideConnected_0($self) {
 $self = $self | 0;
 return (HEAP8[$self + 16 >> 0] | 0) != 0 | 0;
}
function _emscripten_bind_b2BodyDef_set_type_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP32[$self >> 2] = $arg0;
 return;
}
function __ZN23b2EdgeAndPolygonContactD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}
function __ZN23b2ChainAndCircleContactD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}
function __ZN15b2FrictionJoint24SolvePositionConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 return 1;
}
function _emscripten_bind_b2World_GetAutoClearForces_0($self) {
 $self = $self | 0;
 return (HEAP32[$self + 102868 >> 2] & 4 | 0) != 0 | 0;
}
function _emscripten_bind_b2WeldJointDef_get_collideConnected_0($self) {
 $self = $self | 0;
 return (HEAP8[$self + 16 >> 0] | 0) != 0 | 0;
}
function _emscripten_bind_b2RopeJointDef_get_collideConnected_0($self) {
 $self = $self | 0;
 return (HEAP8[$self + 16 >> 0] | 0) != 0 | 0;
}
function _emscripten_bind_b2RevoluteJoint_GetCollideConnected_0($self) {
 $self = $self | 0;
 return (HEAP8[$self + 61 >> 0] | 0) != 0 | 0;
}
function _emscripten_bind_b2PrismaticJointDef_get_enableMotor_0($self) {
 $self = $self | 0;
 return (HEAP8[$self + 60 >> 0] | 0) != 0 | 0;
}
function _emscripten_bind_b2PrismaticJointDef_get_enableLimit_0($self) {
 $self = $self | 0;
 return (HEAP8[$self + 48 >> 0] | 0) != 0 | 0;
}
function _emscripten_bind_b2MassData_set_mass_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2GearJointDef_get_collideConnected_0($self) {
 $self = $self | 0;
 return (HEAP8[$self + 16 >> 0] | 0) != 0 | 0;
}
function _emscripten_bind_b2FrictionJoint_GetCollideConnected_0($self) {
 $self = $self | 0;
 return (HEAP8[$self + 61 >> 0] | 0) != 0 | 0;
}
function _emscripten_bind_b2DistanceJoint_GetCollideConnected_0($self) {
 $self = $self | 0;
 return (HEAP8[$self + 61 >> 0] | 0) != 0 | 0;
}
function __ZN22b2EdgeAndCircleContactD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2RevoluteJointDef_get_enableMotor_0($self) {
 $self = $self | 0;
 return (HEAP8[$self + 52 >> 0] | 0) != 0 | 0;
}
function _emscripten_bind_b2RevoluteJointDef_get_enableLimit_0($self) {
 $self = $self | 0;
 return (HEAP8[$self + 40 >> 0] | 0) != 0 | 0;
}
function _emscripten_bind_b2Profile_set_step_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2Params_setTestOut_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP8[8368] = $arg0 & 1;
 return;
}
function _emscripten_bind_b2Params_setSortCon_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP8[8400] = $arg0 & 1;
 return;
}
function _emscripten_bind_b2Params_setFrame10_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP8[8392] = $arg0 & 1;
 return;
}
function _emscripten_bind_b2Params_setDumpPos_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP8[8352] = $arg0 & 1;
 return;
}
function _emscripten_bind_b2Params_setDumpCon_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP8[8360] = $arg0 & 1;
 return;
}
function __ZN21JSDestructionListenerD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}
function jsCall_viidi_19(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 a4 = a4 | 0;
 jsCall(19, a1 | 0, a2 | 0, +a3, a4 | 0);
}
function jsCall_viidi_18(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 a4 = a4 | 0;
 jsCall(18, a1 | 0, a2 | 0, +a3, a4 | 0);
}
function jsCall_viidi_17(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 a4 = a4 | 0;
 jsCall(17, a1 | 0, a2 | 0, +a3, a4 | 0);
}
function jsCall_viidi_16(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 a4 = a4 | 0;
 jsCall(16, a1 | 0, a2 | 0, +a3, a4 | 0);
}
function jsCall_viidi_15(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 a4 = a4 | 0;
 jsCall(15, a1 | 0, a2 | 0, +a3, a4 | 0);
}
function jsCall_viidi_14(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 a4 = a4 | 0;
 jsCall(14, a1 | 0, a2 | 0, +a3, a4 | 0);
}
function jsCall_viidi_13(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 a4 = a4 | 0;
 jsCall(13, a1 | 0, a2 | 0, +a3, a4 | 0);
}
function jsCall_viidi_12(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 a4 = a4 | 0;
 jsCall(12, a1 | 0, a2 | 0, +a3, a4 | 0);
}
function jsCall_viidi_11(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 a4 = a4 | 0;
 jsCall(11, a1 | 0, a2 | 0, +a3, a4 | 0);
}
function jsCall_viidi_10(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 a4 = a4 | 0;
 jsCall(10, a1 | 0, a2 | 0, +a3, a4 | 0);
}
function _emscripten_bind_b2PulleyJoint_GetCollideConnected_0($self) {
 $self = $self | 0;
 return (HEAP8[$self + 61 >> 0] | 0) != 0 | 0;
}
function _emscripten_bind_b2Params_setFrame1_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP8[8384] = $arg0 & 1;
 return;
}
function _emscripten_bind_b2Color_set_g_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 4 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2Color_set_b_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 8 >> 2] = $arg0;
 return;
}
function __ZN12b2MouseJoint24SolvePositionConstraintsERK12b2SolverData($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 return 1;
}
function dynCall_did(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = +a2;
 return +FUNCTION_TABLE_did[index & 63](a1 | 0, +a2);
}
function _emscripten_bind_b2World_GetContinuousPhysics_0($self) {
 $self = $self | 0;
 return (HEAP8[$self + 102993 >> 0] | 0) != 0 | 0;
}
function _emscripten_bind_b2WheelJoint_GetCollideConnected_0($self) {
 $self = $self | 0;
 return (HEAP8[$self + 61 >> 0] | 0) != 0 | 0;
}
function _emscripten_bind_b2Vec3_set_z_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 8 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2Vec3_set_y_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 4 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2Vec2_set_y_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 4 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2PrismaticJoint_IsMotorEnabled_0($self) {
 $self = $self | 0;
 return (HEAP8[$self + 137 >> 0] | 0) != 0 | 0;
}
function _emscripten_bind_b2PrismaticJoint_IsLimitEnabled_0($self) {
 $self = $self | 0;
 return (HEAP8[$self + 136 >> 0] | 0) != 0 | 0;
}
function _emscripten_bind_b2Params_setDebug_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP8[8376] = $arg0 & 1;
 return;
}
function _emscripten_bind_b2MouseJoint_GetCollideConnected_0($self) {
 $self = $self | 0;
 return (HEAP8[$self + 61 >> 0] | 0) != 0 | 0;
}
function _emscripten_bind_b2ChainShape_get_m_hasPrevVertex_0($self) {
 $self = $self | 0;
 return (HEAP8[$self + 36 >> 0] | 0) != 0 | 0;
}
function _emscripten_bind_b2ChainShape_get_m_hasNextVertex_0($self) {
 $self = $self | 0;
 return (HEAP8[$self + 37 >> 0] | 0) != 0 | 0;
}
function jsCall_viidi_9(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 a4 = a4 | 0;
 jsCall(9, a1 | 0, a2 | 0, +a3, a4 | 0);
}
function jsCall_viidi_8(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 a4 = a4 | 0;
 jsCall(8, a1 | 0, a2 | 0, +a3, a4 | 0);
}
function jsCall_viidi_7(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 a4 = a4 | 0;
 jsCall(7, a1 | 0, a2 | 0, +a3, a4 | 0);
}
function jsCall_viidi_6(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 a4 = a4 | 0;
 jsCall(6, a1 | 0, a2 | 0, +a3, a4 | 0);
}
function jsCall_viidi_5(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 a4 = a4 | 0;
 jsCall(5, a1 | 0, a2 | 0, +a3, a4 | 0);
}
function jsCall_viidi_4(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 a4 = a4 | 0;
 jsCall(4, a1 | 0, a2 | 0, +a3, a4 | 0);
}
function jsCall_viidi_3(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 a4 = a4 | 0;
 jsCall(3, a1 | 0, a2 | 0, +a3, a4 | 0);
}
function jsCall_viidi_2(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 a4 = a4 | 0;
 jsCall(2, a1 | 0, a2 | 0, +a3, a4 | 0);
}
function jsCall_viidi_1(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 a4 = a4 | 0;
 jsCall(1, a1 | 0, a2 | 0, +a3, a4 | 0);
}
function jsCall_viidi_0(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 a4 = a4 | 0;
 jsCall(0, a1 | 0, a2 | 0, +a3, a4 | 0);
}
function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[index & 127](a1 | 0, a2 | 0);
}
function _emscripten_bind_b2WheelJointDef_get_enableMotor_0($self) {
 $self = $self | 0;
 return (HEAP8[$self + 44 >> 0] | 0) != 0 | 0;
}
function _emscripten_bind_b2WeldJoint_GetCollideConnected_0($self) {
 $self = $self | 0;
 return (HEAP8[$self + 61 >> 0] | 0) != 0 | 0;
}
function _emscripten_bind_b2Rot_set_c_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self + 4 >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2RopeJoint_GetCollideConnected_0($self) {
 $self = $self | 0;
 return (HEAP8[$self + 61 >> 0] | 0) != 0 | 0;
}
function _emscripten_bind_b2RevoluteJoint_IsMotorEnabled_0($self) {
 $self = $self | 0;
 return (HEAP8[$self + 100 >> 0] | 0) != 0 | 0;
}
function _emscripten_bind_b2RevoluteJoint_IsLimitEnabled_0($self) {
 $self = $self | 0;
 return (HEAP8[$self + 112 >> 0] | 0) != 0 | 0;
}
function _emscripten_bind_b2PrismaticJointDef_get_upperTranslation_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 56 >> 2]);
}
function _emscripten_bind_b2PrismaticJointDef_get_lowerTranslation_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 52 >> 2]);
}
function _emscripten_bind_b2Params_setSimd_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = $arg0 | 0;
 HEAP8[8344] = $arg0 & 1;
 return;
}
function _emscripten_bind_b2JointDef_get_collideConnected_0($self) {
 $self = $self | 0;
 return (HEAP8[$self + 16 >> 0] | 0) != 0 | 0;
}
function _emscripten_bind_b2GearJoint_GetCollideConnected_0($self) {
 $self = $self | 0;
 return (HEAP8[$self + 61 >> 0] | 0) != 0 | 0;
}
function b12(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 abort(12);
}
function _emscripten_bind_b2Fixture_GetType_0($self) {
 $self = $self | 0;
 return HEAP32[(HEAP32[$self + 12 >> 2] | 0) + 4 >> 2] | 0;
}
function __ZNK12b2MouseJoint17GetReactionTorqueEf($this, $inv_dt) {
 $this = $this | 0;
 $inv_dt = +$inv_dt;
 return +($inv_dt * 0.0);
}
function __ZN17b2ContactListenerD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}
function __ZN17JSRayCastCallbackD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}
function __ZN17JSContactListenerD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2PrismaticJointDef_get_referenceAngle_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 44 >> 2]);
}
function _emscripten_bind_b2Color_set_r_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self >> 2] = $arg0;
 return;
}
function __ZN16b2PrismaticJointD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}
function __ZN16b2PolygonContactD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2World_GetAllowSleeping_0($self) {
 $self = $self | 0;
 return (HEAP8[$self + 102976 >> 0] | 0) != 0 | 0;
}
function _emscripten_bind_b2WheelJoint_IsMotorEnabled_0($self) {
 $self = $self | 0;
 return (HEAP8[$self + 128 >> 0] | 0) != 0 | 0;
}
function _emscripten_bind_b2Vec3_set_x_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2Vec2_set_x_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2RevoluteJointDef_get_referenceAngle_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 36 >> 2]);
}
function _emscripten_bind_b2RevoluteJointDef_get_maxMotorTorque_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 60 >> 2]);
}
function _emscripten_bind_b2PrismaticJointDef_get_maxMotorForce_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 64 >> 2]);
}
function _emscripten_bind_b2EdgeShape_get_m_hasVertex3_0($self) {
 $self = $self | 0;
 return (HEAP8[$self + 45 >> 0] | 0) != 0 | 0;
}
function _emscripten_bind_b2EdgeShape_get_m_hasVertex0_0($self) {
 $self = $self | 0;
 return (HEAP8[$self + 44 >> 0] | 0) != 0 | 0;
}
function __ZN17b2ContactListener12BeginContactEP9b2Contact($this, $contact) {
 $this = $this | 0;
 $contact = $contact | 0;
 return;
}
function __ZN15b2RevoluteJointD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}
function __ZN15b2FrictionJointD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}
function __ZN15b2DistanceJointD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}
function __ZN15b2ContactFilterD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}
function __ZN15b2CircleContactD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}
function __ZN15JSQueryCallbackD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2World_GetWarmStarting_0($self) {
 $self = $self | 0;
 return (HEAP8[$self + 102992 >> 0] | 0) != 0 | 0;
}
function _emscripten_bind_b2Rot_set_s_1($self, $arg0) {
 $self = $self | 0;
 $arg0 = +$arg0;
 HEAPF32[$self >> 2] = $arg0;
 return;
}
function _emscripten_bind_b2Joint_GetCollideConnected_0($self) {
 $self = $self | 0;
 return (HEAP8[$self + 61 >> 0] | 0) != 0 | 0;
}
function _emscripten_bind_b2BodyDef_get_fixedRotation_0($self) {
 $self = $self | 0;
 return (HEAP8[$self + 38 >> 0] | 0) != 0 | 0;
}
function __ZN14b2PolygonShapeD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2World_GetSubStepping_0($self) {
 $self = $self | 0;
 return (HEAP8[$self + 102994 >> 0] | 0) != 0 | 0;
}
function _emscripten_bind_b2PrismaticJoint_GetReferenceAngle_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 100 >> 2]);
}
function _emscripten_bind_b2DistanceJointDef_get_dampingRatio_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 44 >> 2]);
}
function __ZN17b2ContactListener10EndContactEP9b2Contact($this, $contact) {
 $this = $this | 0;
 $contact = $contact | 0;
 return;
}
function __ZN13b2PulleyJointD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}
function __ZN13b2CircleShapeD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2World_IsLocked_0($self) {
 $self = $self | 0;
 return (HEAP32[$self + 102868 >> 2] & 2 | 0) != 0 | 0;
}
function _emscripten_bind_b2WheelJoint_GetSpringDampingRatio_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 72 >> 2]);
}
function _emscripten_bind_b2WheelJointDef_get_maxMotorTorque_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 48 >> 2]);
}
function _emscripten_bind_b2RevoluteJoint_GetReferenceAngle_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 116 >> 2]);
}
function _emscripten_bind_b2RevoluteJoint_GetMaxMotorTorque_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 104 >> 2]);
}
function _emscripten_bind_b2PrismaticJoint_GetMaxMotorForce_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 128 >> 2]);
}
function _emscripten_bind_b2PrismaticJointDef_get_motorSpeed_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 68 >> 2]);
}
function _emscripten_bind_b2ManifoldPoint_get_tangentImpulse_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 12 >> 2]);
}
function _emscripten_bind_b2FixtureDef_get_isSensor_0($self) {
 $self = $self | 0;
 return (HEAP8[$self + 20 >> 0] | 0) != 0 | 0;
}
function _emscripten_bind_b2DistanceJointDef_get_frequencyHz_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 40 >> 2]);
}
function __ZN12b2WheelJointD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}
function __ZN12b2MouseJointD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2WheelJoint_GetSpringFrequencyHz_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 68 >> 2]);
}
function _emscripten_bind_b2WeldJointDef_get_referenceAngle_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 36 >> 2]);
}
function _emscripten_bind_b2RevoluteJointDef_get_upperAngle_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 48 >> 2]);
}
function _emscripten_bind_b2RevoluteJointDef_get_motorSpeed_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 56 >> 2]);
}
function _emscripten_bind_b2RevoluteJointDef_get_lowerAngle_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 44 >> 2]);
}
function _emscripten_bind_b2Contact_IsTouching_0($self) {
 $self = $self | 0;
 return (HEAP32[$self + 4 >> 2] & 2 | 0) != 0 | 0;
}
function _emscripten_bind_b2Body_IsSleepingAllowed_0($self) {
 $self = $self | 0;
 return (HEAP16[$self + 4 >> 1] & 4) != 0 | 0;
}
function _emscripten_bind_b2BodyDef_get_allowSleep_0($self) {
 $self = $self | 0;
 return (HEAP8[$self + 36 >> 0] | 0) != 0 | 0;
}
function __ZN11b2WeldJointD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}
function __ZN11b2RopeJointD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}
function __ZN11b2GearJointD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}
function __ZN11b2EdgeShapeD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}
function jsCall_iiii_19(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall(19, a1 | 0, a2 | 0, a3 | 0) | 0;
}
function jsCall_iiii_18(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall(18, a1 | 0, a2 | 0, a3 | 0) | 0;
}
function jsCall_iiii_17(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall(17, a1 | 0, a2 | 0, a3 | 0) | 0;
}
function jsCall_iiii_16(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall(16, a1 | 0, a2 | 0, a3 | 0) | 0;
}
function jsCall_iiii_15(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall(15, a1 | 0, a2 | 0, a3 | 0) | 0;
}
function jsCall_iiii_14(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall(14, a1 | 0, a2 | 0, a3 | 0) | 0;
}
function jsCall_iiii_13(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall(13, a1 | 0, a2 | 0, a3 | 0) | 0;
}
function jsCall_iiii_12(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall(12, a1 | 0, a2 | 0, a3 | 0) | 0;
}
function jsCall_iiii_11(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall(11, a1 | 0, a2 | 0, a3 | 0) | 0;
}
function jsCall_iiii_10(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall(10, a1 | 0, a2 | 0, a3 | 0) | 0;
}
function b14(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 abort(14);
 return 0;
}
function _emscripten_bind_b2WheelJointDef_get_dampingRatio_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 60 >> 2]);
}
function _emscripten_bind_b2PolygonShape_get_m_vertexCount_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 148 >> 2] | 0;
}
function _emscripten_bind_b2MouseJointDef_get_dampingRatio_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 36 >> 2]);
}
function _emscripten_bind_b2ManifoldPoint_get_normalImpulse_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 8 >> 2]);
}
function _emscripten_bind_b2FrictionJointDef_get_maxTorque_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 40 >> 2]);
}
function _emscripten_bind_b2Contact_IsEnabled_0($self) {
 $self = $self | 0;
 return (HEAP32[$self + 4 >> 2] & 4 | 0) != 0 | 0;
}
function _emscripten_bind_b2Body_IsFixedRotation_0($self) {
 $self = $self | 0;
 return (HEAP16[$self + 4 >> 1] & 16) != 0 | 0;
}
function __ZNSt9bad_allocD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2WheelJoint_GetMaxMotorTorque_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 120 >> 2]);
}
function _emscripten_bind_b2WheelJointDef_get_frequencyHz_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 56 >> 2]);
}
function _emscripten_bind_b2WeldJointDef_get_dampingRatio_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 44 >> 2]);
}
function _emscripten_bind_b2PrismaticJoint_GetUpperLimit_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 124 >> 2]);
}
function _emscripten_bind_b2PrismaticJoint_GetMotorSpeed_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 132 >> 2]);
}
function _emscripten_bind_b2PrismaticJoint_GetLowerLimit_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 120 >> 2]);
}
function _emscripten_bind_b2MouseJointDef_get_frequencyHz_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 32 >> 2]);
}
function _emscripten_bind_b2FrictionJointDef_get_maxForce_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 36 >> 2]);
}
function _emscripten_bind_b2DistanceJoint_GetDampingRatio_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 72 >> 2]);
}
function jsCall_iiii_9(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall(9, a1 | 0, a2 | 0, a3 | 0) | 0;
}
function jsCall_iiii_8(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall(8, a1 | 0, a2 | 0, a3 | 0) | 0;
}
function jsCall_iiii_7(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall(7, a1 | 0, a2 | 0, a3 | 0) | 0;
}
function jsCall_iiii_6(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall(6, a1 | 0, a2 | 0, a3 | 0) | 0;
}
function jsCall_iiii_5(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall(5, a1 | 0, a2 | 0, a3 | 0) | 0;
}
function jsCall_iiii_4(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall(4, a1 | 0, a2 | 0, a3 | 0) | 0;
}
function jsCall_iiii_3(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall(3, a1 | 0, a2 | 0, a3 | 0) | 0;
}
function jsCall_iiii_2(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall(2, a1 | 0, a2 | 0, a3 | 0) | 0;
}
function jsCall_iiii_1(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall(1, a1 | 0, a2 | 0, a3 | 0) | 0;
}
function jsCall_iiii_0(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall(0, a1 | 0, a2 | 0, a3 | 0) | 0;
}
function _emscripten_bind_b2WheelJointDef_get_motorSpeed_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 52 >> 2]);
}
function _emscripten_bind_b2WeldJointDef_get_frequencyHz_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 40 >> 2]);
}
function _emscripten_bind_b2RevoluteJoint_GetUpperLimit_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 124 >> 2]);
}
function _emscripten_bind_b2RevoluteJoint_GetMotorSpeed_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 108 >> 2]);
}
function _emscripten_bind_b2RevoluteJoint_GetLowerLimit_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 120 >> 2]);
}
function _emscripten_bind_b2RayCastInput_get_maxFraction_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 16 >> 2]);
}
function _emscripten_bind_b2PrismaticJointDef_get_userData_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 4 >> 2] | 0;
}
function b4(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = +p4;
 abort(4);
 return 0.0;
}
function _emscripten_bind_b2RevoluteJointDef_get_userData_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 4 >> 2] | 0;
}
function _emscripten_bind_b2PolygonShape_GetVertexCount_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 148 >> 2] | 0;
}
function _emscripten_bind_b2FrictionJoint_GetMaxTorque_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 100 >> 2]);
}
function _emscripten_bind_b2FrictionJointDef_get_userData_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 4 >> 2] | 0;
}
function _emscripten_bind_b2DistanceJointDef_get_userData_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 4 >> 2] | 0;
}
function _emscripten_bind_b2DistanceJointDef_get_length_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 36 >> 2]);
}
function _emscripten_bind_b2BodyDef_get_bullet_0($self) {
 $self = $self | 0;
 return (HEAP8[$self + 39 >> 0] | 0) != 0 | 0;
}
function _emscripten_bind_b2BodyDef_get_angularVelocity_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 24 >> 2]);
}
function _emscripten_bind_b2BodyDef_get_active_0($self) {
 $self = $self | 0;
 return (HEAP8[$self + 40 >> 0] | 0) != 0 | 0;
}
function __ZNK15b2DistanceJoint17GetReactionTorqueEf($this, $inv_dt) {
 $this = $this | 0;
 $inv_dt = +$inv_dt;
 return 0.0;
}
function _emscripten_bind_b2RopeJointDef_get_maxLength_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 36 >> 2]);
}
function _emscripten_bind_b2PulleyJointDef_get_lengthB_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 56 >> 2]);
}
function _emscripten_bind_b2PulleyJointDef_get_lengthA_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 52 >> 2]);
}
function _emscripten_bind_b2PrismaticJointDef_get_bodyB_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 12 >> 2] | 0;
}
function _emscripten_bind_b2MouseJoint_GetDampingRatio_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 88 >> 2]);
}
function _emscripten_bind_b2MouseJointDef_get_maxForce_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 28 >> 2]);
}
function _emscripten_bind_b2FixtureDef_get_restitution_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 12 >> 2]);
}
function _emscripten_bind_b2DistanceJoint_GetFrequency_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 68 >> 2]);
}
function _emscripten_bind_b2BodyDef_get_awake_0($self) {
 $self = $self | 0;
 return (HEAP8[$self + 37 >> 0] | 0) != 0 | 0;
}
function _emscripten_bind_b2BodyDef_get_angularDamping_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 32 >> 2]);
}
function __ZN7b2JointD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2WheelJoint_GetMotorSpeed_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 124 >> 2]);
}
function _emscripten_bind_b2WeldJoint_GetDampingRatio_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 72 >> 2]);
}
function _emscripten_bind_b2RevoluteJointDef_get_bodyB_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 12 >> 2] | 0;
}
function _emscripten_bind_b2RayCastOutput_get_fraction_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 8 >> 2]);
}
function _emscripten_bind_b2PulleyJointDef_get_userData_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 4 >> 2] | 0;
}
function _emscripten_bind_b2Profile_get_solveVelocity_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 16 >> 2]);
}
function _emscripten_bind_b2Profile_get_solvePosition_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 20 >> 2]);
}
function _emscripten_bind_b2PrismaticJoint_GetUserData_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 64 >> 2] | 0;
}
function _emscripten_bind_b2PrismaticJointDef_get_bodyA_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 8 >> 2] | 0;
}
function _emscripten_bind_b2FrictionJoint_GetMaxForce_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 96 >> 2]);
}
function _emscripten_bind_b2FrictionJointDef_get_bodyB_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 12 >> 2] | 0;
}
function _emscripten_bind_b2Fixture_IsSensor_0($self) {
 $self = $self | 0;
 return (HEAP8[$self + 38 >> 0] | 0) != 0 | 0;
}
function _emscripten_bind_b2DistanceJointDef_get_bodyB_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 12 >> 2] | 0;
}
function _emscripten_bind_b2BodyDef_get_linearDamping_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 28 >> 2]);
}
function __ZNK13b2PulleyJoint17GetReactionTorqueEf($this, $inv_dt) {
 $this = $this | 0;
 $inv_dt = +$inv_dt;
 return 0.0;
}
function __ZNK12b2ChainShape13GetChildCountEv($this) {
 $this = $this | 0;
 return (HEAP32[$this + 16 >> 2] | 0) + -1 | 0;
}
function __ZN6JSDrawD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;
 return;
}
function _emscripten_bind_b2World_GetContactCount_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 102936 >> 2] | 0;
}
function _emscripten_bind_b2WheelJointDef_get_userData_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 4 >> 2] | 0;
}
function _emscripten_bind_b2RevoluteJoint_GetUserData_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 64 >> 2] | 0;
}
function _emscripten_bind_b2RevoluteJointDef_get_bodyA_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 8 >> 2] | 0;
}
function _emscripten_bind_b2PulleyJointDef_get_ratio_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 60 >> 2]);
}
function _emscripten_bind_b2PolygonShape_get_m_radius_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 8 >> 2]);
}
function _emscripten_bind_b2MouseJointDef_get_userData_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 4 >> 2] | 0;
}
function _emscripten_bind_b2FrictionJoint_GetUserData_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 64 >> 2] | 0;
}
function _emscripten_bind_b2FrictionJointDef_get_bodyA_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 8 >> 2] | 0;
}
function _emscripten_bind_b2DistanceJoint_GetUserData_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 64 >> 2] | 0;
}
function _emscripten_bind_b2DistanceJoint_GetLength_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 104 >> 2]);
}
function _emscripten_bind_b2DistanceJointDef_get_bodyA_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 8 >> 2] | 0;
}
function _emscripten_bind_b2ChainShape_get_m_vertices_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 12 >> 2] | 0;
}
function _emscripten_bind_b2BodyDef_get_gravityScale_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 48 >> 2]);
}
function _emscripten_bind_b2World_GetContactList_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 102932 >> 2] | 0;
}
function _emscripten_bind_b2WeldJointDef_get_userData_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 4 >> 2] | 0;
}
function _emscripten_bind_b2RopeJoint_GetLimitState_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 164 >> 2] | 0;
}
function _emscripten_bind_b2RopeJointDef_get_userData_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 4 >> 2] | 0;
}
function _emscripten_bind_b2PulleyJointDef_get_bodyB_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 12 >> 2] | 0;
}
function _emscripten_bind_b2MouseJoint_GetMaxForce_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 104 >> 2]);
}
function _emscripten_bind_b2MouseJoint_GetFrequency_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 84 >> 2]);
}
function _emscripten_bind_b2GearJointDef_get_userData_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 4 >> 2] | 0;
}
function _emscripten_bind_b2Contact_GetRestitution_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 140 >> 2]);
}
function _emscripten_bind_b2ContactImpulse_get_count_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 16 >> 2] | 0;
}
function _emscripten_bind_b2CircleShape_get_m_radius_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 8 >> 2]);
}
function _emscripten_bind_b2Body_IsActive_0($self) {
 $self = $self | 0;
 return (HEAP16[$self + 4 >> 1] & 32) != 0 | 0;
}
function _emscripten_bind_b2Body_GetAngularVelocity_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 72 >> 2]);
}
function _emscripten_bind_b2Body_GetAngularDamping_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 136 >> 2]);
}
function __ZNK11b2RopeJoint17GetReactionTorqueEf($this, $inv_dt) {
 $this = $this | 0;
 $inv_dt = +$inv_dt;
 return 0.0;
}
function _emscripten_bind_b2World_GetProxyCount_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 102900 >> 2] | 0;
}
function _emscripten_bind_b2World_GetJointCount_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 102964 >> 2] | 0;
}
function _emscripten_bind_b2WheelJointDef_get_bodyB_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 12 >> 2] | 0;
}
function _emscripten_bind_b2WeldJoint_GetFrequency_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 68 >> 2]);
}
function _emscripten_bind_b2RopeJoint_GetMaxLength_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 84 >> 2]);
}
function _emscripten_bind_b2PulleyJoint_GetUserData_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 64 >> 2] | 0;
}
function _emscripten_bind_b2PulleyJointDef_get_bodyA_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 8 >> 2] | 0;
}
function _emscripten_bind_b2Profile_get_broadphase_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 24 >> 2]);
}
function _emscripten_bind_b2PrismaticJoint_GetBodyB_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 52 >> 2] | 0;
}
function _emscripten_bind_b2PrismaticJoint_GetBodyA_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 48 >> 2] | 0;
}
function _emscripten_bind_b2MouseJointDef_get_bodyB_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 12 >> 2] | 0;
}
function _emscripten_bind_b2Manifold_get_pointCount_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 60 >> 2] | 0;
}
function _emscripten_bind_b2GearJointDef_get_ratio_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 28 >> 2]);
}
function _emscripten_bind_b2GearJointDef_get_joint2_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 24 >> 2] | 0;
}
function _emscripten_bind_b2GearJointDef_get_joint1_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 20 >> 2] | 0;
}
function _emscripten_bind_b2Fixture_GetRestitution_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 20 >> 2]);
}
function _emscripten_bind_b2FixtureDef_get_friction_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 8 >> 2]);
}
function _emscripten_bind_b2FixtureDef_get_density_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 16 >> 2]);
}
function _emscripten_bind_b2ContactFeature_get_indexB_0($self) {
 $self = $self | 0;
 return HEAP8[$self + 1 >> 0] | 0;
}
function _emscripten_bind_b2ChainShape_get_m_radius_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 8 >> 2]);
}
function _emscripten_bind_b2Body_IsBullet_0($self) {
 $self = $self | 0;
 return (HEAP16[$self + 4 >> 1] & 8) != 0 | 0;
}
function _emscripten_bind_b2Body_GetLinearDamping_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 132 >> 2]);
}
function _emscripten_bind_b2World_GetJointList_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 102956 >> 2] | 0;
}
function _emscripten_bind_b2World_GetBodyCount_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 102960 >> 2] | 0;
}
function _emscripten_bind_b2WheelJoint_GetUserData_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 64 >> 2] | 0;
}
function _emscripten_bind_b2WheelJointDef_get_bodyA_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 8 >> 2] | 0;
}
function _emscripten_bind_b2WeldJointDef_get_bodyB_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 12 >> 2] | 0;
}
function _emscripten_bind_b2RopeJointDef_get_bodyB_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 12 >> 2] | 0;
}
function _emscripten_bind_b2RevoluteJoint_GetBodyB_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 52 >> 2] | 0;
}
function _emscripten_bind_b2RevoluteJoint_GetBodyA_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 48 >> 2] | 0;
}
function _emscripten_bind_b2PulleyJoint_GetRatio_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 112 >> 2]);
}
function _emscripten_bind_b2Profile_get_solveInit_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 12 >> 2]);
}
function _emscripten_bind_b2PrismaticJoint_GetNext_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 12 >> 2] | 0;
}
function _emscripten_bind_b2PolygonShape_get_m_type_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 4 >> 2] | 0;
}
function _emscripten_bind_b2MouseJoint_GetUserData_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 64 >> 2] | 0;
}
function _emscripten_bind_b2MouseJointDef_get_bodyA_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 8 >> 2] | 0;
}
function _emscripten_bind_b2GearJointDef_get_bodyB_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 12 >> 2] | 0;
}
function _emscripten_bind_b2FrictionJoint_GetBodyB_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 52 >> 2] | 0;
}
function _emscripten_bind_b2FrictionJoint_GetBodyA_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 48 >> 2] | 0;
}
function _emscripten_bind_b2FixtureDef_get_userData_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 4 >> 2] | 0;
}
function _emscripten_bind_b2EdgeShape_get_m_radius_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 8 >> 2]);
}
function _emscripten_bind_b2DistanceJoint_GetBodyB_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 52 >> 2] | 0;
}
function _emscripten_bind_b2DistanceJoint_GetBodyA_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 48 >> 2] | 0;
}
function _emscripten_bind_b2Contact_GetChildIndexB_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 60 >> 2] | 0;
}
function _emscripten_bind_b2Contact_GetChildIndexA_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 56 >> 2] | 0;
}
function _emscripten_bind_b2ContactFeature_get_typeB_0($self) {
 $self = $self | 0;
 return HEAP8[$self + 3 >> 0] | 0;
}
function _emscripten_bind_b2ContactFeature_get_typeA_0($self) {
 $self = $self | 0;
 return HEAP8[$self + 2 >> 0] | 0;
}
function _emscripten_bind_b2ContactEdge_get_contact_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 4 >> 2] | 0;
}
function _emscripten_bind_b2ChainShape_get_m_count_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 16 >> 2] | 0;
}
function _emscripten_bind_b2Body_IsAwake_0($self) {
 $self = $self | 0;
 return (HEAP16[$self + 4 >> 1] & 2) != 0 | 0;
}
function _emscripten_bind_b2Body_GetGravityScale_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 140 >> 2]);
}
function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 63](a1 | 0) | 0;
}
function _emscripten_bind_b2World_GetBodyList_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 102952 >> 2] | 0;
}
function _emscripten_bind_b2WeldJoint_GetUserData_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 64 >> 2] | 0;
}
function _emscripten_bind_b2WeldJointDef_get_bodyA_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 8 >> 2] | 0;
}
function _emscripten_bind_b2RopeJoint_GetUserData_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 64 >> 2] | 0;
}
function _emscripten_bind_b2RopeJointDef_get_bodyA_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 8 >> 2] | 0;
}
function _emscripten_bind_b2RevoluteJoint_GetNext_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 12 >> 2] | 0;
}
function _emscripten_bind_b2Profile_get_solveTOI_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 28 >> 2]);
}
function _emscripten_bind_b2PrismaticJoint_GetType_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 4 >> 2] | 0;
}
function _emscripten_bind_b2PrismaticJointDef_get_type_0($self) {
 $self = $self | 0;
 return HEAP32[$self >> 2] | 0;
}
function _emscripten_bind_b2PrismaticJointDef_get_localAnchorB_0($self) {
 $self = $self | 0;
 return $self + 28 | 0;
}
function _emscripten_bind_b2PrismaticJointDef_get_localAnchorA_0($self) {
 $self = $self | 0;
 return $self + 20 | 0;
}
function _emscripten_bind_b2GearJoint_GetUserData_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 64 >> 2] | 0;
}
function _emscripten_bind_b2GearJointDef_get_bodyA_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 8 >> 2] | 0;
}
function _emscripten_bind_b2FrictionJoint_GetNext_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 12 >> 2] | 0;
}
function _emscripten_bind_b2DistanceJoint_GetNext_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 12 >> 2] | 0;
}
function _emscripten_bind_b2Contact_GetFriction_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 136 >> 2]);
}
function _emscripten_bind_b2CircleShape_get_m_type_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 4 >> 2] | 0;
}
function jsCall_viii_19(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall(19, a1 | 0, a2 | 0, a3 | 0);
}
function jsCall_viii_18(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall(18, a1 | 0, a2 | 0, a3 | 0);
}
function jsCall_viii_17(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall(17, a1 | 0, a2 | 0, a3 | 0);
}
function jsCall_viii_16(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall(16, a1 | 0, a2 | 0, a3 | 0);
}
function jsCall_viii_15(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall(15, a1 | 0, a2 | 0, a3 | 0);
}
function jsCall_viii_14(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall(14, a1 | 0, a2 | 0, a3 | 0);
}
function jsCall_viii_13(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall(13, a1 | 0, a2 | 0, a3 | 0);
}
function jsCall_viii_12(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall(12, a1 | 0, a2 | 0, a3 | 0);
}
function jsCall_viii_11(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall(11, a1 | 0, a2 | 0, a3 | 0);
}
function jsCall_viii_10(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall(10, a1 | 0, a2 | 0, a3 | 0);
}
function _emscripten_bind_b2RevoluteJoint_GetType_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 4 >> 2] | 0;
}
function _emscripten_bind_b2RevoluteJointDef_get_type_0($self) {
 $self = $self | 0;
 return HEAP32[$self >> 2] | 0;
}
function _emscripten_bind_b2RevoluteJointDef_get_localAnchorB_0($self) {
 $self = $self | 0;
 return $self + 28 | 0;
}
function _emscripten_bind_b2RevoluteJointDef_get_localAnchorA_0($self) {
 $self = $self | 0;
 return $self + 20 | 0;
}
function _emscripten_bind_b2PulleyJoint_GetBodyB_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 52 >> 2] | 0;
}
function _emscripten_bind_b2PulleyJoint_GetBodyA_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 48 >> 2] | 0;
}
function _emscripten_bind_b2JointDef_get_userData_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 4 >> 2] | 0;
}
function _emscripten_bind_b2GearJoint_GetRatio_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 152 >> 2]);
}
function _emscripten_bind_b2FrictionJoint_GetType_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 4 >> 2] | 0;
}
function _emscripten_bind_b2FrictionJointDef_get_type_0($self) {
 $self = $self | 0;
 return HEAP32[$self >> 2] | 0;
}
function _emscripten_bind_b2FrictionJointDef_get_localAnchorB_0($self) {
 $self = $self | 0;
 return $self + 28 | 0;
}
function _emscripten_bind_b2FrictionJointDef_get_localAnchorA_0($self) {
 $self = $self | 0;
 return $self + 20 | 0;
}
function _emscripten_bind_b2Fixture_GetFriction_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 16 >> 2]);
}
function _emscripten_bind_b2Filter_get_groupIndex_0($self) {
 $self = $self | 0;
 return HEAP16[$self + 4 >> 1] | 0;
}
function _emscripten_bind_b2DistanceJoint_GetType_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 4 >> 2] | 0;
}
function _emscripten_bind_b2DistanceJointDef_get_type_0($self) {
 $self = $self | 0;
 return HEAP32[$self >> 2] | 0;
}
function _emscripten_bind_b2DistanceJointDef_get_localAnchorB_0($self) {
 $self = $self | 0;
 return $self + 28 | 0;
}
function _emscripten_bind_b2DistanceJointDef_get_localAnchorA_0($self) {
 $self = $self | 0;
 return $self + 20 | 0;
}
function _emscripten_bind_b2ContactEdge_get_next_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 12 >> 2] | 0;
}
function _emscripten_bind_b2ChainShape_get_m_type_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 4 >> 2] | 0;
}
function _emscripten_bind_b2Body_GetFixtureList_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 100 >> 2] | 0;
}
function _emscripten_bind_b2Body_GetContactList_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 112 >> 2] | 0;
}
function _emscripten_bind_b2BodyDef_get_userData_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 44 >> 2] | 0;
}
function _emscripten_bind_b2WheelJoint_GetBodyB_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 52 >> 2] | 0;
}
function _emscripten_bind_b2WheelJoint_GetBodyA_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 48 >> 2] | 0;
}
function _emscripten_bind_b2PulleyJoint_GetNext_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 12 >> 2] | 0;
}
function _emscripten_bind_b2PulleyJointDef_get_groundAnchorB_0($self) {
 $self = $self | 0;
 return $self + 28 | 0;
}
function _emscripten_bind_b2PulleyJointDef_get_groundAnchorA_0($self) {
 $self = $self | 0;
 return $self + 20 | 0;
}
function _emscripten_bind_b2Profile_get_collide_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 4 >> 2]);
}
function _emscripten_bind_b2PrismaticJointDef_get_localAxisA_0($self) {
 $self = $self | 0;
 return $self + 36 | 0;
}
function _emscripten_bind_b2PolygonShape_GetType_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 4 >> 2] | 0;
}
function _emscripten_bind_b2MouseJoint_GetBodyB_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 52 >> 2] | 0;
}
function _emscripten_bind_b2MouseJoint_GetBodyA_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 48 >> 2] | 0;
}
function _emscripten_bind_b2GearJoint_GetJoint2_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 72 >> 2] | 0;
}
function _emscripten_bind_b2GearJoint_GetJoint1_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 68 >> 2] | 0;
}
function _emscripten_bind_b2Fixture_GetUserData_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 40 >> 2] | 0;
}
function _emscripten_bind_b2EdgeShape_get_m_type_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 4 >> 2] | 0;
}
function _emscripten_bind_b2Contact_GetFixtureB_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 52 >> 2] | 0;
}
function _emscripten_bind_b2Contact_GetFixtureA_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 48 >> 2] | 0;
}
function _emscripten_bind_b2ContactFeature_get_indexA_0($self) {
 $self = $self | 0;
 return HEAP8[$self >> 0] | 0;
}
function _emscripten_bind_b2ContactEdge_get_prev_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 8 >> 2] | 0;
}
function jsCall_viii_9(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall(9, a1 | 0, a2 | 0, a3 | 0);
}
function jsCall_viii_8(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall(8, a1 | 0, a2 | 0, a3 | 0);
}
function jsCall_viii_7(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall(7, a1 | 0, a2 | 0, a3 | 0);
}
function jsCall_viii_6(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall(6, a1 | 0, a2 | 0, a3 | 0);
}
function jsCall_viii_5(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall(5, a1 | 0, a2 | 0, a3 | 0);
}
function jsCall_viii_4(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall(4, a1 | 0, a2 | 0, a3 | 0);
}
function jsCall_viii_3(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall(3, a1 | 0, a2 | 0, a3 | 0);
}
function jsCall_viii_2(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall(2, a1 | 0, a2 | 0, a3 | 0);
}
function jsCall_viii_1(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall(1, a1 | 0, a2 | 0, a3 | 0);
}
function jsCall_viii_0(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 jsCall(0, a1 | 0, a2 | 0, a3 | 0);
}
function b1(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 abort(1);
}
function _emscripten_bind_b2WheelJoint_GetNext_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 12 >> 2] | 0;
}
function _emscripten_bind_b2WeldJoint_GetBodyB_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 52 >> 2] | 0;
}
function _emscripten_bind_b2WeldJoint_GetBodyA_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 48 >> 2] | 0;
}
function _emscripten_bind_b2Shape_get_m_radius_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 8 >> 2]);
}
function _emscripten_bind_b2RopeJoint_GetBodyB_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 52 >> 2] | 0;
}
function _emscripten_bind_b2RopeJoint_GetBodyA_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 48 >> 2] | 0;
}
function _emscripten_bind_b2PulleyJoint_GetType_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 4 >> 2] | 0;
}
function _emscripten_bind_b2PulleyJointDef_get_type_0($self) {
 $self = $self | 0;
 return HEAP32[$self >> 2] | 0;
}
function _emscripten_bind_b2PulleyJointDef_get_localAnchorB_0($self) {
 $self = $self | 0;
 return $self + 44 | 0;
}
function _emscripten_bind_b2PulleyJointDef_get_localAnchorA_0($self) {
 $self = $self | 0;
 return $self + 36 | 0;
}
function _emscripten_bind_b2MouseJoint_GetNext_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 12 >> 2] | 0;
}
function _emscripten_bind_b2JointEdge_get_next_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 12 >> 2] | 0;
}
function _emscripten_bind_b2JointEdge_get_joint_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 4 >> 2] | 0;
}
function _emscripten_bind_b2JointDef_get_bodyB_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 12 >> 2] | 0;
}
function _emscripten_bind_b2GearJoint_GetBodyB_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 52 >> 2] | 0;
}
function _emscripten_bind_b2GearJoint_GetBodyA_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 48 >> 2] | 0;
}
function _emscripten_bind_b2Filter_get_maskBits_0($self) {
 $self = $self | 0;
 return HEAP16[$self + 2 >> 1] | 0;
}
function _emscripten_bind_b2Filter_get_categoryBits_0($self) {
 $self = $self | 0;
 return HEAP16[$self >> 1] | 0;
}
function _emscripten_bind_b2CircleShape_GetType_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 4 >> 2] | 0;
}
function _emscripten_bind_b2Body_GetJointList_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 108 >> 2] | 0;
}
function _emscripten_bind_b2BodyDef_get_angle_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 12 >> 2]);
}
function _emscripten_bind_b2WheelJoint_GetType_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 4 >> 2] | 0;
}
function _emscripten_bind_b2WheelJointDef_get_type_0($self) {
 $self = $self | 0;
 return HEAP32[$self >> 2] | 0;
}
function _emscripten_bind_b2WheelJointDef_get_localAnchorB_0($self) {
 $self = $self | 0;
 return $self + 28 | 0;
}
function _emscripten_bind_b2WheelJointDef_get_localAnchorA_0($self) {
 $self = $self | 0;
 return $self + 20 | 0;
}
function _emscripten_bind_b2WeldJoint_GetNext_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 12 >> 2] | 0;
}
function _emscripten_bind_b2RopeJoint_GetNext_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 12 >> 2] | 0;
}
function _emscripten_bind_b2Profile_get_solve_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 8 >> 2]);
}
function _emscripten_bind_b2PrismaticJoint_GetLocalAnchorB_0($self) {
 $self = $self | 0;
 return $self + 76 | 0;
}
function _emscripten_bind_b2PrismaticJoint_GetLocalAnchorA_0($self) {
 $self = $self | 0;
 return $self + 68 | 0;
}
function _emscripten_bind_b2MouseJoint_GetType_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 4 >> 2] | 0;
}
function _emscripten_bind_b2MouseJointDef_get_type_0($self) {
 $self = $self | 0;
 return HEAP32[$self >> 2] | 0;
}
function _emscripten_bind_b2Manifold_get_type_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 56 >> 2] | 0;
}
function _emscripten_bind_b2Joint_GetUserData_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 64 >> 2] | 0;
}
function _emscripten_bind_b2JointEdge_get_prev_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 8 >> 2] | 0;
}
function _emscripten_bind_b2JointDef_get_bodyA_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 8 >> 2] | 0;
}
function _emscripten_bind_b2GearJoint_GetNext_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 12 >> 2] | 0;
}
function _emscripten_bind_b2ChainShape_GetType_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 4 >> 2] | 0;
}
function _emscripten_bind_b2Body_GetUserData_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 148 >> 2] | 0;
}
function _emscripten_bind_b2WeldJoint_GetType_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 4 >> 2] | 0;
}
function _emscripten_bind_b2WeldJointDef_get_type_0($self) {
 $self = $self | 0;
 return HEAP32[$self >> 2] | 0;
}
function _emscripten_bind_b2WeldJointDef_get_localAnchorB_0($self) {
 $self = $self | 0;
 return $self + 28 | 0;
}
function _emscripten_bind_b2WeldJointDef_get_localAnchorA_0($self) {
 $self = $self | 0;
 return $self + 20 | 0;
}
function _emscripten_bind_b2RopeJoint_GetType_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 4 >> 2] | 0;
}
function _emscripten_bind_b2RopeJointDef_get_type_0($self) {
 $self = $self | 0;
 return HEAP32[$self >> 2] | 0;
}
function _emscripten_bind_b2RopeJointDef_get_localAnchorB_0($self) {
 $self = $self | 0;
 return $self + 28 | 0;
}
function _emscripten_bind_b2RopeJointDef_get_localAnchorA_0($self) {
 $self = $self | 0;
 return $self + 20 | 0;
}
function _emscripten_bind_b2RevoluteJoint_GetLocalAnchorB_0($self) {
 $self = $self | 0;
 return $self + 76 | 0;
}
function _emscripten_bind_b2RevoluteJoint_GetLocalAnchorA_0($self) {
 $self = $self | 0;
 return $self + 68 | 0;
}
function _emscripten_bind_b2Params_getTestOut_0($self) {
 $self = $self | 0;
 return (HEAP8[8368] | 0) != 0 | 0;
}
function _emscripten_bind_b2Params_getSortCon_0($self) {
 $self = $self | 0;
 return (HEAP8[8400] | 0) != 0 | 0;
}
function _emscripten_bind_b2Params_getFrame10_0($self) {
 $self = $self | 0;
 return (HEAP8[8392] | 0) != 0 | 0;
}
function _emscripten_bind_b2Params_getDumpPos_0($self) {
 $self = $self | 0;
 return (HEAP8[8352] | 0) != 0 | 0;
}
function _emscripten_bind_b2Params_getDumpCon_0($self) {
 $self = $self | 0;
 return (HEAP8[8360] | 0) != 0 | 0;
}
function _emscripten_bind_b2GearJoint_GetType_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 4 >> 2] | 0;
}
function _emscripten_bind_b2GearJointDef_get_type_0($self) {
 $self = $self | 0;
 return HEAP32[$self >> 2] | 0;
}
function _emscripten_bind_b2FrictionJoint_GetLocalAnchorB_0($self) {
 $self = $self | 0;
 return $self + 76 | 0;
}
function _emscripten_bind_b2FrictionJoint_GetLocalAnchorA_0($self) {
 $self = $self | 0;
 return $self + 68 | 0;
}
function _emscripten_bind_b2Fixture_GetShape_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 12 >> 2] | 0;
}
function _emscripten_bind_b2EdgeShape_GetType_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 4 >> 2] | 0;
}
function _emscripten_bind_b2DistanceJoint_GetLocalAnchorB_0($self) {
 $self = $self | 0;
 return $self + 88 | 0;
}
function _emscripten_bind_b2DistanceJoint_GetLocalAnchorA_0($self) {
 $self = $self | 0;
 return $self + 80 | 0;
}
function _emscripten_bind_b2ContactEdge_get_other_0($self) {
 $self = $self | 0;
 return HEAP32[$self >> 2] | 0;
}
function b6(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = +p2;
 p3 = p3 | 0;
 p4 = p4 | 0;
 abort(6);
}
function _emscripten_bind_b2WheelJointDef_get_localAxisA_0($self) {
 $self = $self | 0;
 return $self + 36 | 0;
}
function _emscripten_bind_b2Shape_get_m_type_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 4 >> 2] | 0;
}
function _emscripten_bind_b2PrismaticJoint_GetLocalAxisA_0($self) {
 $self = $self | 0;
 return $self + 84 | 0;
}
function _emscripten_bind_b2Params_getFrame1_0($self) {
 $self = $self | 0;
 return (HEAP8[8384] | 0) != 0 | 0;
}
function _emscripten_bind_b2MassData_get_I_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 12 >> 2]);
}
function _emscripten_bind_b2FixtureDef_get_shape_0($self) {
 $self = $self | 0;
 return HEAP32[$self >> 2] | 0;
}
function _emscripten_bind_b2Contact_GetNext_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 12 >> 2] | 0;
}
function jsCall_viid_19(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 jsCall(19, a1 | 0, a2 | 0, +a3);
}
function jsCall_viid_18(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 jsCall(18, a1 | 0, a2 | 0, +a3);
}
function jsCall_viid_17(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 jsCall(17, a1 | 0, a2 | 0, +a3);
}
function jsCall_viid_16(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 jsCall(16, a1 | 0, a2 | 0, +a3);
}
function jsCall_viid_15(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 jsCall(15, a1 | 0, a2 | 0, +a3);
}
function jsCall_viid_14(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 jsCall(14, a1 | 0, a2 | 0, +a3);
}
function jsCall_viid_13(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 jsCall(13, a1 | 0, a2 | 0, +a3);
}
function jsCall_viid_12(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 jsCall(12, a1 | 0, a2 | 0, +a3);
}
function jsCall_viid_11(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 jsCall(11, a1 | 0, a2 | 0, +a3);
}
function jsCall_viid_10(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 jsCall(10, a1 | 0, a2 | 0, +a3);
}
function _emscripten_bind_b2PolygonShape_get_m_centroid_0($self) {
 $self = $self | 0;
 return $self + 12 | 0;
}
function _emscripten_bind_b2Params_getDebug_0($self) {
 $self = $self | 0;
 return (HEAP8[8376] | 0) != 0 | 0;
}
function _emscripten_bind_b2Joint_GetBodyB_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 52 >> 2] | 0;
}
function _emscripten_bind_b2Joint_GetBodyA_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 48 >> 2] | 0;
}
function _emscripten_bind_b2JointEdge_get_other_0($self) {
 $self = $self | 0;
 return HEAP32[$self >> 2] | 0;
}
function _emscripten_bind_b2Fixture_GetNext_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 4 >> 2] | 0;
}
function _emscripten_bind_b2Fixture_GetDensity_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self >> 2]);
}
function _emscripten_bind_b2Fixture_GetBody_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 8 >> 2] | 0;
}
function _emscripten_bind_b2ChainShape_get_m_prevVertex_0($self) {
 $self = $self | 0;
 return $self + 20 | 0;
}
function _emscripten_bind_b2ChainShape_get_m_nextVertex_0($self) {
 $self = $self | 0;
 return $self + 28 | 0;
}
function _emscripten_bind_b2Body_GetMass_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 116 >> 2]);
}
function _emscripten_bind_b2Body_GetAngle_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 56 >> 2]);
}
function _emscripten_bind_b2WheelJoint_GetLocalAnchorB_0($self) {
 $self = $self | 0;
 return $self + 84 | 0;
}
function _emscripten_bind_b2WheelJoint_GetLocalAnchorA_0($self) {
 $self = $self | 0;
 return $self + 76 | 0;
}
function _emscripten_bind_b2Params_getSimd_0($self) {
 $self = $self | 0;
 return (HEAP8[8344] | 0) != 0 | 0;
}
function _emscripten_bind_b2MassData_get_mass_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self >> 2]);
}
function _emscripten_bind_b2Joint_GetNext_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 12 >> 2] | 0;
}
function _emscripten_bind_b2Body_GetWorld_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 88 >> 2] | 0;
}
function _emscripten_bind_b2BodyDef_get_linearVelocity_0($self) {
 $self = $self | 0;
 return $self + 16 | 0;
}
function jsCall_viid_9(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 jsCall(9, a1 | 0, a2 | 0, +a3);
}
function jsCall_viid_8(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 jsCall(8, a1 | 0, a2 | 0, +a3);
}
function jsCall_viid_7(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 jsCall(7, a1 | 0, a2 | 0, +a3);
}
function jsCall_viid_6(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 jsCall(6, a1 | 0, a2 | 0, +a3);
}
function jsCall_viid_5(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 jsCall(5, a1 | 0, a2 | 0, +a3);
}
function jsCall_viid_4(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 jsCall(4, a1 | 0, a2 | 0, +a3);
}
function jsCall_viid_3(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 jsCall(3, a1 | 0, a2 | 0, +a3);
}
function jsCall_viid_2(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 jsCall(2, a1 | 0, a2 | 0, +a3);
}
function jsCall_viid_1(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 jsCall(1, a1 | 0, a2 | 0, +a3);
}
function jsCall_viid_0(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 jsCall(0, a1 | 0, a2 | 0, +a3);
}
function _emscripten_bind_b2WeldJoint_GetLocalAnchorB_0($self) {
 $self = $self | 0;
 return $self + 88 | 0;
}
function _emscripten_bind_b2WeldJoint_GetLocalAnchorA_0($self) {
 $self = $self | 0;
 return $self + 80 | 0;
}
function _emscripten_bind_b2Shape_GetType_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 4 >> 2] | 0;
}
function _emscripten_bind_b2RopeJoint_GetLocalAnchorB_0($self) {
 $self = $self | 0;
 return $self + 76 | 0;
}
function _emscripten_bind_b2RopeJoint_GetLocalAnchorA_0($self) {
 $self = $self | 0;
 return $self + 68 | 0;
}
function _emscripten_bind_b2Profile_get_step_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self >> 2]);
}
function _emscripten_bind_b2Joint_GetType_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 4 >> 2] | 0;
}
function _emscripten_bind_b2JointDef_get_type_0($self) {
 $self = $self | 0;
 return HEAP32[$self >> 2] | 0;
}
function _emscripten_bind_b2Draw_GetFlags_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 4 >> 2] | 0;
}
function _emscripten_bind_b2ContactID_get_key_0($self) {
 $self = $self | 0;
 return HEAP32[$self >> 2] | 0;
}
function _emscripten_bind_b2Body_GetNext_0($self) {
 $self = $self | 0;
 return HEAP32[$self + 96 >> 2] | 0;
}
function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[index & 127](a1 | 0);
}
function _emscripten_bind_b2WheelJoint_GetLocalAxisA_0($self) {
 $self = $self | 0;
 return $self + 92 | 0;
}
function _emscripten_bind_b2MouseJointDef_get_target_0($self) {
 $self = $self | 0;
 return $self + 20 | 0;
}
function _emscripten_bind_b2Manifold_get_localNormal_0($self) {
 $self = $self | 0;
 return $self + 40 | 0;
}
function _emscripten_bind_b2Color_get_g_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 4 >> 2]);
}
function _emscripten_bind_b2Color_get_b_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 8 >> 2]);
}
function _emscripten_bind_b2BodyDef_get_type_0($self) {
 $self = $self | 0;
 return HEAP32[$self >> 2] | 0;
}
function _emscripten_bind_b2Vec3_get_z_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 8 >> 2]);
}
function _emscripten_bind_b2Vec3_get_y_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 4 >> 2]);
}
function _emscripten_bind_b2Vec2_get_y_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 4 >> 2]);
}
function _emscripten_bind_b2Manifold_get_localPoint_0($self) {
 $self = $self | 0;
 return $self + 48 | 0;
}
function _emscripten_bind_b2ManifoldPoint_get_localPoint_0($self) {
 $self = $self | 0;
 return $self | 0;
}
function _emscripten_bind_b2EdgeShape_get_m_vertex3_0($self) {
 $self = $self | 0;
 return $self + 36 | 0;
}
function _emscripten_bind_b2EdgeShape_get_m_vertex2_0($self) {
 $self = $self | 0;
 return $self + 20 | 0;
}
function _emscripten_bind_b2EdgeShape_get_m_vertex1_0($self) {
 $self = $self | 0;
 return $self + 12 | 0;
}
function _emscripten_bind_b2EdgeShape_get_m_vertex0_0($self) {
 $self = $self | 0;
 return $self + 28 | 0;
}
function ___clang_call_terminate($0) {
 $0 = $0 | 0;
 ___cxa_begin_catch($0 | 0) | 0;
 __ZSt9terminatev();
}
function _emscripten_bind_b2Rot_get_c_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self + 4 >> 2]);
}
function _emscripten_bind_b2Fixture_GetFilterData_0($self) {
 $self = $self | 0;
 return $self + 32 | 0;
}
function _emscripten_bind_b2FixtureDef_get_filter_0($self) {
 $self = $self | 0;
 return $self + 22 | 0;
}
function _emscripten_bind_b2World_GetProfile_0($self) {
 $self = $self | 0;
 return $self + 102996 | 0;
}
function _emscripten_bind_b2MouseJoint_GetTarget_0($self) {
 $self = $self | 0;
 return $self + 76 | 0;
}
function _emscripten_bind_b2ManifoldPoint_get_id_0($self) {
 $self = $self | 0;
 return $self + 16 | 0;
}
function _emscripten_bind_b2Color_get_r_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self >> 2]);
}
function _emscripten_bind_b2Body_GetType_0($self) {
 $self = $self | 0;
 return HEAP32[$self >> 2] | 0;
}
function _emscripten_bind_b2Vec3_get_x_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self >> 2]);
}
function _emscripten_bind_b2Vec2_get_x_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self >> 2]);
}
function _emscripten_bind_b2RayCastOutput_get_normal_0($self) {
 $self = $self | 0;
 return $self | 0;
}
function _emscripten_bind_b2Contact_GetManifold_0($self) {
 $self = $self | 0;
 return $self + 64 | 0;
}
function _emscripten_bind_b2CircleShape_get_m_p_0($self) {
 $self = $self | 0;
 return $self + 12 | 0;
}
function _emscripten_bind_b2Body_GetWorldCenter_0($self) {
 $self = $self | 0;
 return $self + 44 | 0;
}
function _emscripten_bind_b2Body_GetLocalCenter_0($self) {
 $self = $self | 0;
 return $self + 28 | 0;
}
function _emscripten_bind_b2BodyDef_get_position_0($self) {
 $self = $self | 0;
 return $self + 4 | 0;
}
function _emscripten_bind_b2Rot_get_s_0($self) {
 $self = $self | 0;
 return +(+HEAPF32[$self >> 2]);
}
function _emscripten_bind_b2RayCastInput_get_p2_0($self) {
 $self = $self | 0;
 return $self + 8 | 0;
}
function _emscripten_bind_b2MassData_get_center_0($self) {
 $self = $self | 0;
 return $self + 4 | 0;
}
function _emscripten_bind_b2AABB_get_upperBound_0($self) {
 $self = $self | 0;
 return $self + 8 | 0;
}
function jsCall_iii_19(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return jsCall(19, a1 | 0, a2 | 0) | 0;
}
function jsCall_iii_18(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return jsCall(18, a1 | 0, a2 | 0) | 0;
}
function jsCall_iii_17(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return jsCall(17, a1 | 0, a2 | 0) | 0;
}
function jsCall_iii_16(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return jsCall(16, a1 | 0, a2 | 0) | 0;
}
function jsCall_iii_15(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return jsCall(15, a1 | 0, a2 | 0) | 0;
}
function jsCall_iii_14(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return jsCall(14, a1 | 0, a2 | 0) | 0;
}
function jsCall_iii_13(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return jsCall(13, a1 | 0, a2 | 0) | 0;
}
function jsCall_iii_12(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return jsCall(12, a1 | 0, a2 | 0) | 0;
}
function jsCall_iii_11(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return jsCall(11, a1 | 0, a2 | 0) | 0;
}
function jsCall_iii_10(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return jsCall(10, a1 | 0, a2 | 0) | 0;
}
function _emscripten_bind_b2Body_GetTransform_0($self) {
 $self = $self | 0;
 return $self + 12 | 0;
}
function _emscripten_bind_b2Body_GetPosition_0($self) {
 $self = $self | 0;
 return $self + 12 | 0;
}
function jsCall_iii_9(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return jsCall(9, a1 | 0, a2 | 0) | 0;
}
function jsCall_iii_8(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return jsCall(8, a1 | 0, a2 | 0) | 0;
}
function jsCall_iii_7(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return jsCall(7, a1 | 0, a2 | 0) | 0;
}
function jsCall_iii_6(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return jsCall(6, a1 | 0, a2 | 0) | 0;
}
function jsCall_iii_5(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return jsCall(5, a1 | 0, a2 | 0) | 0;
}
function jsCall_iii_4(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return jsCall(4, a1 | 0, a2 | 0) | 0;
}
function jsCall_iii_3(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return jsCall(3, a1 | 0, a2 | 0) | 0;
}
function jsCall_iii_2(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return jsCall(2, a1 | 0, a2 | 0) | 0;
}
function jsCall_iii_1(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return jsCall(1, a1 | 0, a2 | 0) | 0;
}
function jsCall_iii_0(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return jsCall(0, a1 | 0, a2 | 0) | 0;
}
function b15(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 abort(15);
}
function _emscripten_bind_b2Transform_get_q_0($self) {
 $self = $self | 0;
 return $self + 8 | 0;
}
function _emscripten_bind_b2RayCastInput_get_p1_0($self) {
 $self = $self | 0;
 return $self | 0;
}
function _emscripten_bind_b2AABB_get_lowerBound_0($self) {
 $self = $self | 0;
 return $self | 0;
}
function _emscripten_bind_b2Mat33_get_ez_0($self) {
 $self = $self | 0;
 return $self + 24 | 0;
}
function _emscripten_bind_b2Mat33_get_ey_0($self) {
 $self = $self | 0;
 return $self + 12 | 0;
}
function _emscripten_bind_b2Mat22_get_ey_0($self) {
 $self = $self | 0;
 return $self + 8 | 0;
}
function _emscripten_bind_b2ContactID_get_cf_0($self) {
 $self = $self | 0;
 return $self | 0;
}
function b8(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = +p2;
 p3 = p3 | 0;
 abort(8);
}
function _emscripten_bind_b2Transform_get_p_0($self) {
 $self = $self | 0;
 return $self | 0;
}
function jsCall_did_19(a1, a2) {
 a1 = a1 | 0;
 a2 = +a2;
 return +jsCall(19, a1 | 0, +a2);
}
function jsCall_did_18(a1, a2) {
 a1 = a1 | 0;
 a2 = +a2;
 return +jsCall(18, a1 | 0, +a2);
}
function jsCall_did_17(a1, a2) {
 a1 = a1 | 0;
 a2 = +a2;
 return +jsCall(17, a1 | 0, +a2);
}
function jsCall_did_16(a1, a2) {
 a1 = a1 | 0;
 a2 = +a2;
 return +jsCall(16, a1 | 0, +a2);
}
function jsCall_did_15(a1, a2) {
 a1 = a1 | 0;
 a2 = +a2;
 return +jsCall(15, a1 | 0, +a2);
}
function jsCall_did_14(a1, a2) {
 a1 = a1 | 0;
 a2 = +a2;
 return +jsCall(14, a1 | 0, +a2);
}
function jsCall_did_13(a1, a2) {
 a1 = a1 | 0;
 a2 = +a2;
 return +jsCall(13, a1 | 0, +a2);
}
function jsCall_did_12(a1, a2) {
 a1 = a1 | 0;
 a2 = +a2;
 return +jsCall(12, a1 | 0, +a2);
}
function jsCall_did_11(a1, a2) {
 a1 = a1 | 0;
 a2 = +a2;
 return +jsCall(11, a1 | 0, +a2);
}
function jsCall_did_10(a1, a2) {
 a1 = a1 | 0;
 a2 = +a2;
 return +jsCall(10, a1 | 0, +a2);
}
function _emscripten_bind_b2Mat33_get_ex_0($self) {
 $self = $self | 0;
 return $self | 0;
}
function _emscripten_bind_b2Mat22_get_ex_0($self) {
 $self = $self | 0;
 return $self | 0;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this | 0;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this | 0;
 return;
}
function jsCall_vii_19(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 jsCall(19, a1 | 0, a2 | 0);
}
function jsCall_vii_18(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 jsCall(18, a1 | 0, a2 | 0);
}
function jsCall_vii_17(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 jsCall(17, a1 | 0, a2 | 0);
}
function jsCall_vii_16(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 jsCall(16, a1 | 0, a2 | 0);
}
function jsCall_vii_15(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 jsCall(15, a1 | 0, a2 | 0);
}
function jsCall_vii_14(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 jsCall(14, a1 | 0, a2 | 0);
}
function jsCall_vii_13(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 jsCall(13, a1 | 0, a2 | 0);
}
function jsCall_vii_12(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 jsCall(12, a1 | 0, a2 | 0);
}
function jsCall_vii_11(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 jsCall(11, a1 | 0, a2 | 0);
}
function jsCall_vii_10(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 jsCall(10, a1 | 0, a2 | 0);
}
function jsCall_did_9(a1, a2) {
 a1 = a1 | 0;
 a2 = +a2;
 return +jsCall(9, a1 | 0, +a2);
}
function jsCall_did_8(a1, a2) {
 a1 = a1 | 0;
 a2 = +a2;
 return +jsCall(8, a1 | 0, +a2);
}
function jsCall_did_7(a1, a2) {
 a1 = a1 | 0;
 a2 = +a2;
 return +jsCall(7, a1 | 0, +a2);
}
function jsCall_did_6(a1, a2) {
 a1 = a1 | 0;
 a2 = +a2;
 return +jsCall(6, a1 | 0, +a2);
}
function jsCall_did_5(a1, a2) {
 a1 = a1 | 0;
 a2 = +a2;
 return +jsCall(5, a1 | 0, +a2);
}
function jsCall_did_4(a1, a2) {
 a1 = a1 | 0;
 a2 = +a2;
 return +jsCall(4, a1 | 0, +a2);
}
function jsCall_did_3(a1, a2) {
 a1 = a1 | 0;
 a2 = +a2;
 return +jsCall(3, a1 | 0, +a2);
}
function jsCall_did_2(a1, a2) {
 a1 = a1 | 0;
 a2 = +a2;
 return +jsCall(2, a1 | 0, +a2);
}
function jsCall_did_1(a1, a2) {
 a1 = a1 | 0;
 a2 = +a2;
 return +jsCall(1, a1 | 0, +a2);
}
function jsCall_did_0(a1, a2) {
 a1 = a1 | 0;
 a2 = +a2;
 return +jsCall(0, a1 | 0, +a2);
}
function b0(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 abort(0);
 return 0;
}
function jsCall_vii_9(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 jsCall(9, a1 | 0, a2 | 0);
}
function jsCall_vii_8(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 jsCall(8, a1 | 0, a2 | 0);
}
function jsCall_vii_7(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 jsCall(7, a1 | 0, a2 | 0);
}
function jsCall_vii_6(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 jsCall(6, a1 | 0, a2 | 0);
}
function jsCall_vii_5(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 jsCall(5, a1 | 0, a2 | 0);
}
function jsCall_vii_4(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 jsCall(4, a1 | 0, a2 | 0);
}
function jsCall_vii_3(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 jsCall(3, a1 | 0, a2 | 0);
}
function jsCall_vii_2(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 jsCall(2, a1 | 0, a2 | 0);
}
function jsCall_vii_1(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 jsCall(1, a1 | 0, a2 | 0);
}
function jsCall_vii_0(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 jsCall(0, a1 | 0, a2 | 0);
}
function __ZNK14b2PolygonShape13GetChildCountEv($this) {
 $this = $this | 0;
 return 1;
}
function __ZNK13b2CircleShape13GetChildCountEv($this) {
 $this = $this | 0;
 return 1;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this | 0;
 return;
}
function __ZNK11b2EdgeShape13GetChildCountEv($this) {
 $this = $this | 0;
 return 1;
}
function __ZN25b2PolygonAndCircleContactD1Ev($this) {
 $this = $this | 0;
 return;
}
function __ZN24b2ChainAndPolygonContactD1Ev($this) {
 $this = $this | 0;
 return;
}
function dynCall_v(index) {
 index = index | 0;
 FUNCTION_TABLE_v[index & 63]();
}
function __ZN23b2EdgeAndPolygonContactD1Ev($this) {
 $this = $this | 0;
 return;
}
function __ZN23b2ChainAndCircleContactD1Ev($this) {
 $this = $this | 0;
 return;
}
function __ZN22b2EdgeAndCircleContactD1Ev($this) {
 $this = $this | 0;
 return;
}
function b9(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 abort(9);
}
function __ZN21JSDestructionListenerD1Ev($this) {
 $this = $this | 0;
 return;
}
function b11(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = +p2;
 abort(11);
}
function __ZNKSt9bad_alloc4whatEv($this) {
 $this = $this | 0;
 return 21368;
}
function __ZN17b2ContactListenerD1Ev($this) {
 $this = $this | 0;
 return;
}
function __ZN17JSRayCastCallbackD1Ev($this) {
 $this = $this | 0;
 return;
}
function __ZN17JSContactListenerD1Ev($this) {
 $this = $this | 0;
 return;
}
function jsCall_ii_19(a1) {
 a1 = a1 | 0;
 return jsCall(19, a1 | 0) | 0;
}
function jsCall_ii_18(a1) {
 a1 = a1 | 0;
 return jsCall(18, a1 | 0) | 0;
}
function jsCall_ii_17(a1) {
 a1 = a1 | 0;
 return jsCall(17, a1 | 0) | 0;
}
function jsCall_ii_16(a1) {
 a1 = a1 | 0;
 return jsCall(16, a1 | 0) | 0;
}
function jsCall_ii_15(a1) {
 a1 = a1 | 0;
 return jsCall(15, a1 | 0) | 0;
}
function jsCall_ii_14(a1) {
 a1 = a1 | 0;
 return jsCall(14, a1 | 0) | 0;
}
function jsCall_ii_13(a1) {
 a1 = a1 | 0;
 return jsCall(13, a1 | 0) | 0;
}
function jsCall_ii_12(a1) {
 a1 = a1 | 0;
 return jsCall(12, a1 | 0) | 0;
}
function jsCall_ii_11(a1) {
 a1 = a1 | 0;
 return jsCall(11, a1 | 0) | 0;
}
function jsCall_ii_10(a1) {
 a1 = a1 | 0;
 return jsCall(10, a1 | 0) | 0;
}
function b13(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 abort(13);
 return 0;
}
function __ZN16b2PrismaticJointD1Ev($this) {
 $this = $this | 0;
 return;
}
function __ZN16b2PolygonContactD1Ev($this) {
 $this = $this | 0;
 return;
}
function __ZN15b2RevoluteJointD1Ev($this) {
 $this = $this | 0;
 return;
}
function __ZN15b2FrictionJointD1Ev($this) {
 $this = $this | 0;
 return;
}
function __ZN15b2DistanceJointD1Ev($this) {
 $this = $this | 0;
 return;
}
function __ZN15b2ContactFilterD1Ev($this) {
 $this = $this | 0;
 return;
}
function __ZN15b2CircleContactD1Ev($this) {
 $this = $this | 0;
 return;
}
function __ZN15JSQueryCallbackD1Ev($this) {
 $this = $this | 0;
 return;
}
function jsCall_ii_9(a1) {
 a1 = a1 | 0;
 return jsCall(9, a1 | 0) | 0;
}
function jsCall_ii_8(a1) {
 a1 = a1 | 0;
 return jsCall(8, a1 | 0) | 0;
}
function jsCall_ii_7(a1) {
 a1 = a1 | 0;
 return jsCall(7, a1 | 0) | 0;
}
function jsCall_ii_6(a1) {
 a1 = a1 | 0;
 return jsCall(6, a1 | 0) | 0;
}
function jsCall_ii_5(a1) {
 a1 = a1 | 0;
 return jsCall(5, a1 | 0) | 0;
}
function jsCall_ii_4(a1) {
 a1 = a1 | 0;
 return jsCall(4, a1 | 0) | 0;
}
function jsCall_ii_3(a1) {
 a1 = a1 | 0;
 return jsCall(3, a1 | 0) | 0;
}
function jsCall_ii_2(a1) {
 a1 = a1 | 0;
 return jsCall(2, a1 | 0) | 0;
}
function jsCall_ii_1(a1) {
 a1 = a1 | 0;
 return jsCall(1, a1 | 0) | 0;
}
function jsCall_ii_0(a1) {
 a1 = a1 | 0;
 return jsCall(0, a1 | 0) | 0;
}
function __ZN14b2PolygonShapeD1Ev($this) {
 $this = $this | 0;
 return;
}
function b2(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 abort(2);
 return 0.0;
}
function _emscripten_enum_b2DrawFlag_e_centerOfMassBit() {
 return 16;
}
function _emscripten_enum_b2ContactFeatureType_e_vertex() {
 return 0;
}
function __ZN13b2PulleyJointD1Ev($this) {
 $this = $this | 0;
 return;
}
function __ZN13b2CircleShapeD1Ev($this) {
 $this = $this | 0;
 return;
}
function _emscripten_enum_b2LimitState_e_inactiveLimit() {
 return 0;
}
function _emscripten_enum_b2JointType_e_prismaticJoint() {
 return 2;
}
function __ZN12b2WheelJointD1Ev($this) {
 $this = $this | 0;
 return;
}
function __ZN12b2MouseJointD1Ev($this) {
 $this = $this | 0;
 return;
}
function setTempRet0(value) {
 value = value | 0;
 tempRet0 = value;
}
function _emscripten_enum_b2LimitState_e_atUpperLimit() {
 return 2;
}
function _emscripten_enum_b2LimitState_e_atLowerLimit() {
 return 1;
}
function _emscripten_enum_b2JointType_e_revoluteJoint() {
 return 1;
}
function _emscripten_enum_b2JointType_e_frictionJoint() {
 return 9;
}
function _emscripten_enum_b2JointType_e_distanceJoint() {
 return 3;
}
function _emscripten_enum_b2ContactFeatureType_e_face() {
 return 1;
}
function _emscripten_enum_b2BodyType_b2_kinematicBody() {
 return 1;
}
function __ZN11b2WeldJointD1Ev($this) {
 $this = $this | 0;
 return;
}
function __ZN11b2RopeJointD1Ev($this) {
 $this = $this | 0;
 return;
}
function __ZN11b2GearJointD1Ev($this) {
 $this = $this | 0;
 return;
}
function __ZN11b2EdgeShapeD1Ev($this) {
 $this = $this | 0;
 return;
}
function _emscripten_enum_b2LimitState_e_equalLimits() {
 return 3;
}
function _emscripten_enum_b2JointType_e_unknownJoint() {
 return 0;
}
function __ZNSt9bad_allocD2Ev($this) {
 $this = $this | 0;
 return;
}
function _emscripten_enum_b2JointType_e_pulleyJoint() {
 return 4;
}
function _emscripten_enum_b2BodyType_b2_dynamicBody() {
 return 2;
}
function _emscripten_enum_b2ManifoldType_e_circles() {
 return 0;
}
function _emscripten_enum_b2JointType_e_wheelJoint() {
 return 7;
}
function _emscripten_enum_b2JointType_e_ropeJoint() {
 return 10;
}
function _emscripten_enum_b2JointType_e_mouseJoint() {
 return 5;
}
function _emscripten_enum_b2BodyType_b2_staticBody() {
 return 0;
}
function ___cxa_pure_virtual__wrapper() {
 ___cxa_pure_virtual();
}
function _emscripten_enum_b2ShapeType_e_typeCount() {
 return 4;
}
function _emscripten_enum_b2JointType_e_weldJoint() {
 return 8;
}
function _emscripten_enum_b2JointType_e_gearJoint() {
 return 6;
}
function _emscripten_enum_b2ManifoldType_e_faceB() {
 return 2;
}
function _emscripten_enum_b2ManifoldType_e_faceA() {
 return 1;
}
function __ZN7b2JointD1Ev($this) {
 $this = $this | 0;
 return;
}
function jsCall_vi_19(a1) {
 a1 = a1 | 0;
 jsCall(19, a1 | 0);
}
function jsCall_vi_18(a1) {
 a1 = a1 | 0;
 jsCall(18, a1 | 0);
}
function jsCall_vi_17(a1) {
 a1 = a1 | 0;
 jsCall(17, a1 | 0);
}
function jsCall_vi_16(a1) {
 a1 = a1 | 0;
 jsCall(16, a1 | 0);
}
function jsCall_vi_15(a1) {
 a1 = a1 | 0;
 jsCall(15, a1 | 0);
}
function jsCall_vi_14(a1) {
 a1 = a1 | 0;
 jsCall(14, a1 | 0);
}
function jsCall_vi_13(a1) {
 a1 = a1 | 0;
 jsCall(13, a1 | 0);
}
function jsCall_vi_12(a1) {
 a1 = a1 | 0;
 jsCall(12, a1 | 0);
}
function jsCall_vi_11(a1) {
 a1 = a1 | 0;
 jsCall(11, a1 | 0);
}
function jsCall_vi_10(a1) {
 a1 = a1 | 0;
 jsCall(10, a1 | 0);
}
function _emscripten_enum_b2ShapeType_e_polygon() {
 return 2;
}
function _emscripten_enum_b2DrawFlag_e_shapeBit() {
 return 1;
}
function _emscripten_enum_b2DrawFlag_e_jointBit() {
 return 2;
}
function __ZN6JSDrawD1Ev($this) {
 $this = $this | 0;
 return;
}
function stackRestore(top) {
 top = top | 0;
 STACKTOP = top;
}
function _emscripten_enum_b2ShapeType_e_circle() {
 return 0;
}
function _emscripten_enum_b2DrawFlag_e_pairBit() {
 return 8;
}
function _emscripten_enum_b2DrawFlag_e_aabbBit() {
 return 4;
}
function jsCall_vi_9(a1) {
 a1 = a1 | 0;
 jsCall(9, a1 | 0);
}
function jsCall_vi_8(a1) {
 a1 = a1 | 0;
 jsCall(8, a1 | 0);
}
function jsCall_vi_7(a1) {
 a1 = a1 | 0;
 jsCall(7, a1 | 0);
}
function jsCall_vi_6(a1) {
 a1 = a1 | 0;
 jsCall(6, a1 | 0);
}
function jsCall_vi_5(a1) {
 a1 = a1 | 0;
 jsCall(5, a1 | 0);
}
function jsCall_vi_4(a1) {
 a1 = a1 | 0;
 jsCall(4, a1 | 0);
}
function jsCall_vi_3(a1) {
 a1 = a1 | 0;
 jsCall(3, a1 | 0);
}
function jsCall_vi_2(a1) {
 a1 = a1 | 0;
 jsCall(2, a1 | 0);
}
function jsCall_vi_1(a1) {
 a1 = a1 | 0;
 jsCall(1, a1 | 0);
}
function jsCall_vi_0(a1) {
 a1 = a1 | 0;
 jsCall(0, a1 | 0);
}
function b5(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 abort(5);
}
function _emscripten_enum_b2ShapeType_e_chain() {
 return 3;
}
function _emscripten_enum_b2ShapeType_e_edge() {
 return 1;
}
function b7(p0) {
 p0 = p0 | 0;
 abort(7);
 return 0;
}
function getTempRet0() {
 return tempRet0 | 0;
}
function stackSave() {
 return STACKTOP | 0;
}
function b3(p0) {
 p0 = p0 | 0;
 abort(3);
}
function jsCall_v_19() {
 jsCall(19);
}
function jsCall_v_18() {
 jsCall(18);
}
function jsCall_v_17() {
 jsCall(17);
}
function jsCall_v_16() {
 jsCall(16);
}
function jsCall_v_15() {
 jsCall(15);
}
function jsCall_v_14() {
 jsCall(14);
}
function jsCall_v_13() {
 jsCall(13);
}
function jsCall_v_12() {
 jsCall(12);
}
function jsCall_v_11() {
 jsCall(11);
}
function jsCall_v_10() {
 jsCall(10);
}
function jsCall_v_9() {
 jsCall(9);
}
function jsCall_v_8() {
 jsCall(8);
}
function jsCall_v_7() {
 jsCall(7);
}
function jsCall_v_6() {
 jsCall(6);
}
function jsCall_v_5() {
 jsCall(5);
}
function jsCall_v_4() {
 jsCall(4);
}
function jsCall_v_3() {
 jsCall(3);
}
function jsCall_v_2() {
 jsCall(2);
}
function jsCall_v_1() {
 jsCall(1);
}
function jsCall_v_0() {
 jsCall(0);
}
function b10() {
 abort(10);
}

// EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_iiii = [b0,b0,jsCall_iiii_0,b0,jsCall_iiii_1,b0,jsCall_iiii_2,b0,jsCall_iiii_3,b0,jsCall_iiii_4,b0,jsCall_iiii_5,b0,jsCall_iiii_6,b0,jsCall_iiii_7,b0,jsCall_iiii_8,b0,jsCall_iiii_9,b0,jsCall_iiii_10,b0,jsCall_iiii_11,b0,jsCall_iiii_12,b0,jsCall_iiii_13
  ,b0,jsCall_iiii_14,b0,jsCall_iiii_15,b0,jsCall_iiii_16,b0,jsCall_iiii_17,b0,jsCall_iiii_18,b0,jsCall_iiii_19,b0,__ZNK12b2ChainShape9TestPointERK11b2TransformRK6b2Vec2,__ZNK13b2CircleShape9TestPointERK11b2TransformRK6b2Vec2,__ZNK11b2EdgeShape9TestPointERK11b2TransformRK6b2Vec2,__ZNK14b2PolygonShape9TestPointERK11b2TransformRK6b2Vec2,__ZN15b2ContactFilter13ShouldCollideEP9b2FixtureS1_,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0];
  var FUNCTION_TABLE_viiiii = [b1,b1,jsCall_viiiii_0,b1,jsCall_viiiii_1,b1,jsCall_viiiii_2,b1,jsCall_viiiii_3,b1,jsCall_viiiii_4,b1,jsCall_viiiii_5,b1,jsCall_viiiii_6,b1,jsCall_viiiii_7,b1,jsCall_viiiii_8,b1,jsCall_viiiii_9,b1,jsCall_viiiii_10,b1,jsCall_viiiii_11,b1,jsCall_viiiii_12,b1,jsCall_viiiii_13
  ,b1,jsCall_viiiii_14,b1,jsCall_viiiii_15,b1,jsCall_viiiii_16,b1,jsCall_viiiii_17,b1,jsCall_viiiii_18,b1,jsCall_viiiii_19,b1,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1];
  var FUNCTION_TABLE_did = [b2,b2,jsCall_did_0,b2,jsCall_did_1,b2,jsCall_did_2,b2,jsCall_did_3,b2,jsCall_did_4,b2,jsCall_did_5,b2,jsCall_did_6,b2,jsCall_did_7,b2,jsCall_did_8,b2,jsCall_did_9,b2,jsCall_did_10,b2,jsCall_did_11,b2,jsCall_did_12,b2,jsCall_did_13
  ,b2,jsCall_did_14,b2,jsCall_did_15,b2,jsCall_did_16,b2,jsCall_did_17,b2,jsCall_did_18,b2,jsCall_did_19,b2,__ZNK15b2DistanceJoint17GetReactionTorqueEf,__ZNK15b2FrictionJoint17GetReactionTorqueEf,__ZNK11b2GearJoint17GetReactionTorqueEf,__ZNK12b2MouseJoint17GetReactionTorqueEf,__ZNK16b2PrismaticJoint17GetReactionTorqueEf,__ZNK13b2PulleyJoint17GetReactionTorqueEf,__ZNK15b2RevoluteJoint17GetReactionTorqueEf,__ZNK11b2RopeJoint17GetReactionTorqueEf,__ZNK11b2WeldJoint17GetReactionTorqueEf,__ZNK12b2WheelJoint17GetReactionTorqueEf,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2];
  var FUNCTION_TABLE_vi = [b3,b3,jsCall_vi_0,b3,jsCall_vi_1,b3,jsCall_vi_2,b3,jsCall_vi_3,b3,jsCall_vi_4,b3,jsCall_vi_5,b3,jsCall_vi_6,b3,jsCall_vi_7,b3,jsCall_vi_8,b3,jsCall_vi_9,b3,jsCall_vi_10,b3,jsCall_vi_11,b3,jsCall_vi_12,b3,jsCall_vi_13
  ,b3,jsCall_vi_14,b3,jsCall_vi_15,b3,jsCall_vi_16,b3,jsCall_vi_17,b3,jsCall_vi_18,b3,jsCall_vi_19,b3,__ZN6JSDrawD1Ev,__ZN6JSDrawD0Ev,__ZN17JSContactListenerD1Ev,__ZN17JSContactListenerD0Ev,__ZN17JSRayCastCallbackD1Ev,__ZN17JSRayCastCallbackD0Ev,__ZN15JSQueryCallbackD1Ev,__ZN15JSQueryCallbackD0Ev,__ZN21JSDestructionListenerD1Ev,__ZN21JSDestructionListenerD0Ev,__ZN12b2ChainShapeD2Ev,__ZN12b2ChainShapeD0Ev,__ZN13b2CircleShapeD1Ev,__ZN13b2CircleShapeD0Ev,__ZN11b2EdgeShapeD1Ev,__ZN11b2EdgeShapeD0Ev,__ZN14b2PolygonShapeD1Ev
  ,__ZN14b2PolygonShapeD0Ev,__ZN17b2ContactListenerD1Ev,__ZN17b2ContactListenerD0Ev,__ZN15b2ContactFilterD1Ev,__ZN15b2ContactFilterD0Ev,__ZN23b2ChainAndCircleContactD1Ev,__ZN23b2ChainAndCircleContactD0Ev,__ZN24b2ChainAndPolygonContactD1Ev,__ZN24b2ChainAndPolygonContactD0Ev,__ZN15b2CircleContactD1Ev,__ZN15b2CircleContactD0Ev,__ZN22b2EdgeAndCircleContactD1Ev,__ZN22b2EdgeAndCircleContactD0Ev,__ZN23b2EdgeAndPolygonContactD1Ev,__ZN23b2EdgeAndPolygonContactD0Ev,__ZN25b2PolygonAndCircleContactD1Ev,__ZN25b2PolygonAndCircleContactD0Ev,__ZN16b2PolygonContactD1Ev,__ZN16b2PolygonContactD0Ev,__ZN15b2DistanceJoint4DumpEv,__ZN15b2DistanceJointD1Ev,__ZN15b2DistanceJointD0Ev,__ZN15b2FrictionJoint4DumpEv,__ZN15b2FrictionJointD1Ev,__ZN15b2FrictionJointD0Ev,__ZN11b2GearJoint4DumpEv,__ZN11b2GearJointD1Ev,__ZN11b2GearJointD0Ev,__ZN7b2Joint4DumpEv,__ZN7b2JointD1Ev
  ,__ZN7b2JointD0Ev,__ZN12b2MouseJoint4DumpEv,__ZN12b2MouseJointD1Ev,__ZN12b2MouseJointD0Ev,__ZN16b2PrismaticJoint4DumpEv,__ZN16b2PrismaticJointD1Ev,__ZN16b2PrismaticJointD0Ev,__ZN13b2PulleyJoint4DumpEv,__ZN13b2PulleyJointD1Ev,__ZN13b2PulleyJointD0Ev,__ZN15b2RevoluteJoint4DumpEv,__ZN15b2RevoluteJointD1Ev,__ZN15b2RevoluteJointD0Ev,__ZN11b2RopeJoint4DumpEv,__ZN11b2RopeJointD1Ev,__ZN11b2RopeJointD0Ev,__ZN11b2WeldJoint4DumpEv,__ZN11b2WeldJointD1Ev,__ZN11b2WeldJointD0Ev,__ZN12b2WheelJoint4DumpEv,__ZN12b2WheelJointD1Ev,__ZN12b2WheelJointD0Ev,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev
  ,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b3,b3,b3,b3,b3,b3,b3,b3];
  var FUNCTION_TABLE_diiiid = [b4,b4,jsCall_diiiid_0,b4,jsCall_diiiid_1,b4,jsCall_diiiid_2,b4,jsCall_diiiid_3,b4,jsCall_diiiid_4,b4,jsCall_diiiid_5,b4,jsCall_diiiid_6,b4,jsCall_diiiid_7,b4,jsCall_diiiid_8,b4,jsCall_diiiid_9,b4,jsCall_diiiid_10,b4,jsCall_diiiid_11,b4,jsCall_diiiid_12,b4,jsCall_diiiid_13
  ,b4,jsCall_diiiid_14,b4,jsCall_diiiid_15,b4,jsCall_diiiid_16,b4,jsCall_diiiid_17,b4,jsCall_diiiid_18,b4,jsCall_diiiid_19,b4,__ZN17JSRayCastCallback13ReportFixtureEP9b2FixtureRK6b2Vec2S4_f,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4];
  var FUNCTION_TABLE_vii = [b5,b5,jsCall_vii_0,b5,jsCall_vii_1,b5,jsCall_vii_2,b5,jsCall_vii_3,b5,jsCall_vii_4,b5,jsCall_vii_5,b5,jsCall_vii_6,b5,jsCall_vii_7,b5,jsCall_vii_8,b5,jsCall_vii_9,b5,jsCall_vii_10,b5,jsCall_vii_11,b5,jsCall_vii_12,b5,jsCall_vii_13
  ,b5,jsCall_vii_14,b5,jsCall_vii_15,b5,jsCall_vii_16,b5,jsCall_vii_17,b5,jsCall_vii_18,b5,jsCall_vii_19,b5,__ZN6JSDraw13DrawTransformERK11b2Transform,__ZN17JSContactListener12BeginContactEP9b2Contact,__ZN17JSContactListener10EndContactEP9b2Contact,__ZN28b2DestructionListenerWrapper10SayGoodbyeEP7b2Joint,__ZN28b2DestructionListenerWrapper10SayGoodbyeEP9b2Fixture,__ZN21JSDestructionListener15SayGoodbyeJointEP7b2Joint,__ZN21JSDestructionListener17SayGoodbyeFixtureEP9b2Fixture,__ZN17b2ContactListener12BeginContactEP9b2Contact,__ZN17b2ContactListener10EndContactEP9b2Contact,__ZNK15b2DistanceJoint10GetAnchorAEv,__ZNK15b2DistanceJoint10GetAnchorBEv,__ZN15b2DistanceJoint23InitVelocityConstraintsERK12b2SolverData,__ZN15b2DistanceJoint24SolveVelocityConstraintsERK12b2SolverData,__ZNK15b2FrictionJoint10GetAnchorAEv,__ZNK15b2FrictionJoint10GetAnchorBEv,__ZN15b2FrictionJoint23InitVelocityConstraintsERK12b2SolverData,__ZN15b2FrictionJoint24SolveVelocityConstraintsERK12b2SolverData
  ,__ZNK11b2GearJoint10GetAnchorAEv,__ZNK11b2GearJoint10GetAnchorBEv,__ZN11b2GearJoint23InitVelocityConstraintsERK12b2SolverData,__ZN11b2GearJoint24SolveVelocityConstraintsERK12b2SolverData,__ZNK12b2MouseJoint10GetAnchorAEv,__ZNK12b2MouseJoint10GetAnchorBEv,__ZN12b2MouseJoint23InitVelocityConstraintsERK12b2SolverData,__ZN12b2MouseJoint24SolveVelocityConstraintsERK12b2SolverData,__ZNK16b2PrismaticJoint10GetAnchorAEv,__ZNK16b2PrismaticJoint10GetAnchorBEv,__ZN16b2PrismaticJoint23InitVelocityConstraintsERK12b2SolverData,__ZN16b2PrismaticJoint24SolveVelocityConstraintsERK12b2SolverData,__ZNK13b2PulleyJoint10GetAnchorAEv,__ZNK13b2PulleyJoint10GetAnchorBEv,__ZN13b2PulleyJoint23InitVelocityConstraintsERK12b2SolverData,__ZN13b2PulleyJoint24SolveVelocityConstraintsERK12b2SolverData,__ZNK15b2RevoluteJoint10GetAnchorAEv,__ZNK15b2RevoluteJoint10GetAnchorBEv,__ZN15b2RevoluteJoint23InitVelocityConstraintsERK12b2SolverData,__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK12b2SolverData,__ZNK11b2RopeJoint10GetAnchorAEv,__ZNK11b2RopeJoint10GetAnchorBEv,__ZN11b2RopeJoint23InitVelocityConstraintsERK12b2SolverData,__ZN11b2RopeJoint24SolveVelocityConstraintsERK12b2SolverData,__ZNK11b2WeldJoint10GetAnchorAEv,__ZNK11b2WeldJoint10GetAnchorBEv,__ZN11b2WeldJoint23InitVelocityConstraintsERK12b2SolverData,__ZN11b2WeldJoint24SolveVelocityConstraintsERK12b2SolverData,__ZNK12b2WheelJoint10GetAnchorAEv,__ZNK12b2WheelJoint10GetAnchorBEv
  ,__ZN12b2WheelJoint23InitVelocityConstraintsERK12b2SolverData,__ZN12b2WheelJoint24SolveVelocityConstraintsERK12b2SolverData,__ZN15b2CircleContact7DestroyEP9b2ContactP16b2BlockAllocator,__ZN25b2PolygonAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator,__ZN16b2PolygonContact7DestroyEP9b2ContactP16b2BlockAllocator,__ZN22b2EdgeAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator,__ZN23b2EdgeAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator,__ZN23b2ChainAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator,__ZN24b2ChainAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5];
  var FUNCTION_TABLE_viidii = [b6,b6,jsCall_viidii_0,b6,jsCall_viidii_1,b6,jsCall_viidii_2,b6,jsCall_viidii_3,b6,jsCall_viidii_4,b6,jsCall_viidii_5,b6,jsCall_viidii_6,b6,jsCall_viidii_7,b6,jsCall_viidii_8,b6,jsCall_viidii_9,b6,jsCall_viidii_10,b6,jsCall_viidii_11,b6,jsCall_viidii_12,b6,jsCall_viidii_13
  ,b6,jsCall_viidii_14,b6,jsCall_viidii_15,b6,jsCall_viidii_16,b6,jsCall_viidii_17,b6,jsCall_viidii_18,b6,jsCall_viidii_19,b6,__ZN6JSDraw15DrawSolidCircleERK6b2Vec2fS2_RK7b2Color,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6];
  var FUNCTION_TABLE_ii = [b7,b7,jsCall_ii_0,b7,jsCall_ii_1,b7,jsCall_ii_2,b7,jsCall_ii_3,b7,jsCall_ii_4,b7,jsCall_ii_5,b7,jsCall_ii_6,b7,jsCall_ii_7,b7,jsCall_ii_8,b7,jsCall_ii_9,b7,jsCall_ii_10,b7,jsCall_ii_11,b7,jsCall_ii_12,b7,jsCall_ii_13
  ,b7,jsCall_ii_14,b7,jsCall_ii_15,b7,jsCall_ii_16,b7,jsCall_ii_17,b7,jsCall_ii_18,b7,jsCall_ii_19,b7,__ZNK12b2ChainShape13GetChildCountEv,__ZNK13b2CircleShape13GetChildCountEv,__ZNK11b2EdgeShape13GetChildCountEv,__ZNK14b2PolygonShape13GetChildCountEv,__ZNKSt9bad_alloc4whatEv,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7];
  var FUNCTION_TABLE_viidi = [b8,b8,jsCall_viidi_0,b8,jsCall_viidi_1,b8,jsCall_viidi_2,b8,jsCall_viidi_3,b8,jsCall_viidi_4,b8,jsCall_viidi_5,b8,jsCall_viidi_6,b8,jsCall_viidi_7,b8,jsCall_viidi_8,b8,jsCall_viidi_9,b8,jsCall_viidi_10,b8,jsCall_viidi_11,b8,jsCall_viidi_12,b8,jsCall_viidi_13
  ,b8,jsCall_viidi_14,b8,jsCall_viidi_15,b8,jsCall_viidi_16,b8,jsCall_viidi_17,b8,jsCall_viidi_18,b8,jsCall_viidi_19,b8,__ZN6JSDraw10DrawCircleERK6b2Vec2fRK7b2Color,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8];
  var FUNCTION_TABLE_viii = [b9,b9,jsCall_viii_0,b9,jsCall_viii_1,b9,jsCall_viii_2,b9,jsCall_viii_3,b9,jsCall_viii_4,b9,jsCall_viii_5,b9,jsCall_viii_6,b9,jsCall_viii_7,b9,jsCall_viii_8,b9,jsCall_viii_9,b9,jsCall_viii_10,b9,jsCall_viii_11,b9,jsCall_viii_12,b9,jsCall_viii_13
  ,b9,jsCall_viii_14,b9,jsCall_viii_15,b9,jsCall_viii_16,b9,jsCall_viii_17,b9,jsCall_viii_18,b9,jsCall_viii_19,b9,__ZN17JSContactListener8PreSolveEP9b2ContactPK10b2Manifold,__ZN17JSContactListener9PostSolveEP9b2ContactPK16b2ContactImpulse,__ZN17b2ContactListener8PreSolveEP9b2ContactPK10b2Manifold,__ZN17b2ContactListener9PostSolveEP9b2ContactPK16b2ContactImpulse,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9];
  var FUNCTION_TABLE_v = [b10,b10,jsCall_v_0,b10,jsCall_v_1,b10,jsCall_v_2,b10,jsCall_v_3,b10,jsCall_v_4,b10,jsCall_v_5,b10,jsCall_v_6,b10,jsCall_v_7,b10,jsCall_v_8,b10,jsCall_v_9,b10,jsCall_v_10,b10,jsCall_v_11,b10,jsCall_v_12,b10,jsCall_v_13
  ,b10,jsCall_v_14,b10,jsCall_v_15,b10,jsCall_v_16,b10,jsCall_v_17,b10,jsCall_v_18,b10,jsCall_v_19,b10,___cxa_pure_virtual__wrapper,__ZL25default_terminate_handlerv,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10];
  var FUNCTION_TABLE_viid = [b11,b11,jsCall_viid_0,b11,jsCall_viid_1,b11,jsCall_viid_2,b11,jsCall_viid_3,b11,jsCall_viid_4,b11,jsCall_viid_5,b11,jsCall_viid_6,b11,jsCall_viid_7,b11,jsCall_viid_8,b11,jsCall_viid_9,b11,jsCall_viid_10,b11,jsCall_viid_11,b11,jsCall_viid_12,b11,jsCall_viid_13
  ,b11,jsCall_viid_14,b11,jsCall_viid_15,b11,jsCall_viid_16,b11,jsCall_viid_17,b11,jsCall_viid_18,b11,jsCall_viid_19,b11,__ZNK12b2ChainShape11ComputeMassEP10b2MassDataf,__ZNK13b2CircleShape11ComputeMassEP10b2MassDataf,__ZNK11b2EdgeShape11ComputeMassEP10b2MassDataf,__ZNK14b2PolygonShape11ComputeMassEP10b2MassDataf,__ZNK15b2DistanceJoint16GetReactionForceEf,__ZNK15b2FrictionJoint16GetReactionForceEf,__ZNK11b2GearJoint16GetReactionForceEf,__ZNK12b2MouseJoint16GetReactionForceEf,__ZNK16b2PrismaticJoint16GetReactionForceEf,__ZNK13b2PulleyJoint16GetReactionForceEf,__ZNK15b2RevoluteJoint16GetReactionForceEf,__ZNK11b2RopeJoint16GetReactionForceEf,__ZNK11b2WeldJoint16GetReactionForceEf,__ZNK12b2WheelJoint16GetReactionForceEf,b11,b11,b11
  ,b11,b11,b11,b11,b11];
  var FUNCTION_TABLE_viiiiii = [b12,b12,jsCall_viiiiii_0,b12,jsCall_viiiiii_1,b12,jsCall_viiiiii_2,b12,jsCall_viiiiii_3,b12,jsCall_viiiiii_4,b12,jsCall_viiiiii_5,b12,jsCall_viiiiii_6,b12,jsCall_viiiiii_7,b12,jsCall_viiiiii_8,b12,jsCall_viiiiii_9,b12,jsCall_viiiiii_10,b12,jsCall_viiiiii_11,b12,jsCall_viiiiii_12,b12,jsCall_viiiiii_13
  ,b12,jsCall_viiiiii_14,b12,jsCall_viiiiii_15,b12,jsCall_viiiiii_16,b12,jsCall_viiiiii_17,b12,jsCall_viiiiii_18,b12,jsCall_viiiiii_19,b12,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12];
  var FUNCTION_TABLE_iii = [b13,b13,jsCall_iii_0,b13,jsCall_iii_1,b13,jsCall_iii_2,b13,jsCall_iii_3,b13,jsCall_iii_4,b13,jsCall_iii_5,b13,jsCall_iii_6,b13,jsCall_iii_7,b13,jsCall_iii_8,b13,jsCall_iii_9,b13,jsCall_iii_10,b13,jsCall_iii_11,b13,jsCall_iii_12,b13,jsCall_iii_13
  ,b13,jsCall_iii_14,b13,jsCall_iii_15,b13,jsCall_iii_16,b13,jsCall_iii_17,b13,jsCall_iii_18,b13,jsCall_iii_19,b13,__ZN15JSQueryCallback13ReportFixtureEP9b2Fixture,__ZNK12b2ChainShape5CloneEP16b2BlockAllocator,__ZNK13b2CircleShape5CloneEP16b2BlockAllocator,__ZNK11b2EdgeShape5CloneEP16b2BlockAllocator,__ZNK14b2PolygonShape5CloneEP16b2BlockAllocator,__ZN15b2DistanceJoint24SolvePositionConstraintsERK12b2SolverData,__ZN15b2FrictionJoint24SolvePositionConstraintsERK12b2SolverData,__ZN11b2GearJoint24SolvePositionConstraintsERK12b2SolverData,__ZN12b2MouseJoint24SolvePositionConstraintsERK12b2SolverData,__ZN16b2PrismaticJoint24SolvePositionConstraintsERK12b2SolverData,__ZN13b2PulleyJoint24SolvePositionConstraintsERK12b2SolverData,__ZN15b2RevoluteJoint24SolvePositionConstraintsERK12b2SolverData,__ZN11b2RopeJoint24SolvePositionConstraintsERK12b2SolverData,__ZN11b2WeldJoint24SolvePositionConstraintsERK12b2SolverData,__ZN12b2WheelJoint24SolvePositionConstraintsERK12b2SolverData,__Z14b2PairLessThanRK6b2PairS1_,b13
  ,b13,b13,b13,b13,b13];
  var FUNCTION_TABLE_iiiiii = [b14,b14,jsCall_iiiiii_0,b14,jsCall_iiiiii_1,b14,jsCall_iiiiii_2,b14,jsCall_iiiiii_3,b14,jsCall_iiiiii_4,b14,jsCall_iiiiii_5,b14,jsCall_iiiiii_6,b14,jsCall_iiiiii_7,b14,jsCall_iiiiii_8,b14,jsCall_iiiiii_9,b14,jsCall_iiiiii_10,b14,jsCall_iiiiii_11,b14,jsCall_iiiiii_12,b14,jsCall_iiiiii_13
  ,b14,jsCall_iiiiii_14,b14,jsCall_iiiiii_15,b14,jsCall_iiiiii_16,b14,jsCall_iiiiii_17,b14,jsCall_iiiiii_18,b14,jsCall_iiiiii_19,b14,__ZNK12b2ChainShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi,__ZNK13b2CircleShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi,__ZNK11b2EdgeShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi,__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi,__ZN15b2CircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator,__ZN25b2PolygonAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator,__ZN16b2PolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator,__ZN22b2EdgeAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator,__ZN23b2EdgeAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator,__ZN23b2ChainAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator,__ZN24b2ChainAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14];
  var FUNCTION_TABLE_viiii = [b15,b15,jsCall_viiii_0,b15,jsCall_viiii_1,b15,jsCall_viiii_2,b15,jsCall_viiii_3,b15,jsCall_viiii_4,b15,jsCall_viiii_5,b15,jsCall_viiii_6,b15,jsCall_viiii_7,b15,jsCall_viiii_8,b15,jsCall_viiii_9,b15,jsCall_viiii_10,b15,jsCall_viiii_11,b15,jsCall_viiii_12,b15,jsCall_viiii_13
  ,b15,jsCall_viiii_14,b15,jsCall_viiii_15,b15,jsCall_viiii_16,b15,jsCall_viiii_17,b15,jsCall_viiii_18,b15,jsCall_viiii_19,b15,__ZN6JSDraw11DrawPolygonEPK6b2Vec2iRK7b2Color,__ZN6JSDraw16DrawSolidPolygonEPK6b2Vec2iRK7b2Color,__ZN6JSDraw11DrawSegmentERK6b2Vec2S2_RK7b2Color,__ZNK12b2ChainShape11ComputeAABBEP6b2AABBRK11b2Transformi,__ZNK13b2CircleShape11ComputeAABBEP6b2AABBRK11b2Transformi,__ZNK11b2EdgeShape11ComputeAABBEP6b2AABBRK11b2Transformi,__ZNK14b2PolygonShape11ComputeAABBEP6b2AABBRK11b2Transformi,__ZN23b2ChainAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_,__ZN24b2ChainAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_,__ZN15b2CircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_,__ZN22b2EdgeAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_,__ZN23b2EdgeAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_,__ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_,__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi
  ,b15,b15,b15,b15,b15];

    return { _emscripten_bind_b2WheelJoint_GetSpringDampingRatio_0: _emscripten_bind_b2WheelJoint_GetSpringDampingRatio_0, _emscripten_bind_b2ContactEdge_set_next_1: _emscripten_bind_b2ContactEdge_set_next_1, _emscripten_bind_b2ChainShape_get_m_count_0: _emscripten_bind_b2ChainShape_get_m_count_0, _emscripten_bind_b2Fixture_SetFriction_1: _emscripten_bind_b2Fixture_SetFriction_1, _emscripten_bind_b2Shape_ComputeAABB_3: _emscripten_bind_b2Shape_ComputeAABB_3, _emscripten_bind_b2FrictionJointDef_set_userData_1: _emscripten_bind_b2FrictionJointDef_set_userData_1, _emscripten_bind_b2Vec3_get_z_0: _emscripten_bind_b2Vec3_get_z_0, _emscripten_bind_b2World_IsLocked_0: _emscripten_bind_b2World_IsLocked_0, _emscripten_bind_b2RevoluteJointDef_set_motorSpeed_1: _emscripten_bind_b2RevoluteJointDef_set_motorSpeed_1, _emscripten_bind_b2Draw_GetFlags_0: _emscripten_bind_b2Draw_GetFlags_0, _emscripten_bind_b2Body_GetMassData_1: _emscripten_bind_b2Body_GetMassData_1, _emscripten_bind_b2Color_set_g_1: _emscripten_bind_b2Color_set_g_1, _emscripten_bind_b2WheelJointDef_get_frequencyHz_0: _emscripten_bind_b2WheelJointDef_get_frequencyHz_0, _emscripten_bind_b2RopeJointDef_set_localAnchorA_1: _emscripten_bind_b2RopeJointDef_set_localAnchorA_1, _emscripten_bind_b2PolygonShape_RayCast_4: _emscripten_bind_b2PolygonShape_RayCast_4, _emscripten_bind_b2World_GetTreeBalance_0: _emscripten_bind_b2World_GetTreeBalance_0, _emscripten_bind_b2PrismaticJointDef_get_upperTranslation_0: _emscripten_bind_b2PrismaticJointDef_get_upperTranslation_0, _emscripten_bind_JSDraw_DrawSolidCircle_4: _emscripten_bind_JSDraw_DrawSolidCircle_4, _emscripten_bind_b2RevoluteJoint_GetLocalAnchorA_0: _emscripten_bind_b2RevoluteJoint_GetLocalAnchorA_0, _emscripten_bind_b2FixtureDef_get_filter_0: _emscripten_bind_b2FixtureDef_get_filter_0, _emscripten_bind_b2FrictionJointDef_get_type_0: _emscripten_bind_b2FrictionJointDef_get_type_0, _emscripten_bind_b2RayCastInput_get_p1_0: _emscripten_bind_b2RayCastInput_get_p1_0, _emscripten_bind_b2EdgeShape_set_m_hasVertex3_1: _emscripten_bind_b2EdgeShape_set_m_hasVertex3_1, _emscripten_bind_b2JointEdge_set_joint_1: _emscripten_bind_b2JointEdge_set_joint_1, _emscripten_bind_b2Fixture___destroy___0: _emscripten_bind_b2Fixture___destroy___0, _emscripten_bind_b2PulleyJoint_SetUserData_1: _emscripten_bind_b2PulleyJoint_SetUserData_1, _emscripten_bind_b2World_SetWarmStarting_1: _emscripten_bind_b2World_SetWarmStarting_1, _emscripten_bind_JSDraw_DrawCircle_3: _emscripten_bind_JSDraw_DrawCircle_3, _emscripten_bind_b2WeldJoint_IsActive_0: _emscripten_bind_b2WeldJoint_IsActive_0, _emscripten_bind_b2DestructionListener___destroy___0: _emscripten_bind_b2DestructionListener___destroy___0, _emscripten_bind_b2BodyDef_set_type_1: _emscripten_bind_b2BodyDef_set_type_1, _emscripten_bind_b2ChainShape_ComputeAABB_3: _emscripten_bind_b2ChainShape_ComputeAABB_3, _emscripten_bind_b2MouseJointDef_set_type_1: _emscripten_bind_b2MouseJointDef_set_type_1, _emscripten_bind_b2JointEdge_get_prev_0: _emscripten_bind_b2JointEdge_get_prev_0, _emscripten_bind_b2WeldJoint_GetReactionTorque_1: _emscripten_bind_b2WeldJoint_GetReactionTorque_1, _emscripten_bind_b2DistanceJointDef_get_userData_0: _emscripten_bind_b2DistanceJointDef_get_userData_0, _emscripten_bind_b2BodyDef_get_position_0: _emscripten_bind_b2BodyDef_get_position_0, _emscripten_bind_b2RevoluteJointDef_set_userData_1: _emscripten_bind_b2RevoluteJointDef_set_userData_1, _emscripten_bind_b2RevoluteJointDef_get_localAnchorA_0: _emscripten_bind_b2RevoluteJointDef_get_localAnchorA_0, _emscripten_bind_b2WheelJointDef_get_collideConnected_0: _emscripten_bind_b2WheelJointDef_get_collideConnected_0, _emscripten_bind_b2MouseJointDef_set_userData_1: _emscripten_bind_b2MouseJointDef_set_userData_1, _emscripten_bind_JSDraw_DrawSegment_3: _emscripten_bind_JSDraw_DrawSegment_3, _emscripten_bind_b2FixtureDef_set_restitution_1: _emscripten_bind_b2FixtureDef_set_restitution_1, _emscripten_bind_b2RevoluteJoint_GetUserData_0: _emscripten_bind_b2RevoluteJoint_GetUserData_0, _emscripten_bind_b2Mat33_get_ey_0: _emscripten_bind_b2Mat33_get_ey_0, _emscripten_bind_b2MouseJoint_IsActive_0: _emscripten_bind_b2MouseJoint_IsActive_0, _emscripten_bind_b2World_GetGravity_0: _emscripten_bind_b2World_GetGravity_0, _emscripten_bind_b2World_DrawDebugData_0: _emscripten_bind_b2World_DrawDebugData_0, _emscripten_bind_b2Profile_get_broadphase_0: _emscripten_bind_b2Profile_get_broadphase_0, _emscripten_bind_b2PulleyJointDef_get_bodyA_0: _emscripten_bind_b2PulleyJointDef_get_bodyA_0, _emscripten_bind_b2PrismaticJoint_SetLimits_2: _emscripten_bind_b2PrismaticJoint_SetLimits_2, _emscripten_bind_b2PulleyJointDef_get_localAnchorA_0: _emscripten_bind_b2PulleyJointDef_get_localAnchorA_0, _emscripten_bind_b2DistanceJoint_GetAnchorA_0: _emscripten_bind_b2DistanceJoint_GetAnchorA_0, _emscripten_bind_b2ManifoldPoint_set_tangentImpulse_1: _emscripten_bind_b2ManifoldPoint_set_tangentImpulse_1, _emscripten_bind_b2DistanceJointDef_set_dampingRatio_1: _emscripten_bind_b2DistanceJointDef_set_dampingRatio_1, _emscripten_bind_b2RopeJointDef_set_collideConnected_1: _emscripten_bind_b2RopeJointDef_set_collideConnected_1, _emscripten_bind_b2CircleShape_set_m_p_1: _emscripten_bind_b2CircleShape_set_m_p_1, _emscripten_bind_JSContactListener_EndContact_1: _emscripten_bind_JSContactListener_EndContact_1, _emscripten_bind_b2MassData_set_mass_1: _emscripten_bind_b2MassData_set_mass_1, _emscripten_bind_b2Vec3_get_x_0: _emscripten_bind_b2Vec3_get_x_0, _emscripten_bind_b2ChainShape_CreateChain_2: _emscripten_bind_b2ChainShape_CreateChain_2, _emscripten_bind_b2RopeJoint_GetUserData_0: _emscripten_bind_b2RopeJoint_GetUserData_0, _emscripten_bind_b2World_DestroyBody_1: _emscripten_bind_b2World_DestroyBody_1, _emscripten_bind_b2Profile_get_solvePosition_0: _emscripten_bind_b2Profile_get_solvePosition_0, _emscripten_bind_b2Shape_RayCast_4: _emscripten_bind_b2Shape_RayCast_4, _emscripten_bind_b2PulleyJoint_GetGroundAnchorA_0: _emscripten_bind_b2PulleyJoint_GetGroundAnchorA_0, _emscripten_bind_b2Mat33___destroy___0: _emscripten_bind_b2Mat33___destroy___0, _emscripten_bind_b2GearJoint_GetReactionTorque_1: _emscripten_bind_b2GearJoint_GetReactionTorque_1, _emscripten_bind_b2WeldJointDef_set_collideConnected_1: _emscripten_bind_b2WeldJointDef_set_collideConnected_1, _emscripten_bind_b2Manifold_get_type_0: _emscripten_bind_b2Manifold_get_type_0, _emscripten_bind_b2FrictionJointDef_get_maxTorque_0: _emscripten_bind_b2FrictionJointDef_get_maxTorque_0, _emscripten_bind_b2PulleyJointDef_b2PulleyJointDef_0: _emscripten_bind_b2PulleyJointDef_b2PulleyJointDef_0, _emscripten_bind_b2World_SetAutoClearForces_1: _emscripten_bind_b2World_SetAutoClearForces_1, _emscripten_bind_b2FrictionJoint_IsActive_0: _emscripten_bind_b2FrictionJoint_IsActive_0, _emscripten_bind_b2PrismaticJointDef_set_lowerTranslation_1: _emscripten_bind_b2PrismaticJointDef_set_lowerTranslation_1, _emscripten_bind_b2BodyDef_set_position_1: _emscripten_bind_b2BodyDef_set_position_1, _emscripten_bind_b2Transform_get_q_0: _emscripten_bind_b2Transform_get_q_0, _emscripten_bind_b2FrictionJoint_GetMaxForce_0: _emscripten_bind_b2FrictionJoint_GetMaxForce_0, _emscripten_bind_b2RevoluteJoint_GetType_0: _emscripten_bind_b2RevoluteJoint_GetType_0, _emscripten_bind_b2Contact_GetNext_0: _emscripten_bind_b2Contact_GetNext_0, _emscripten_bind_b2EdgeShape_get_m_type_0: _emscripten_bind_b2EdgeShape_get_m_type_0, _emscripten_bind_b2GearJoint_GetJoint1_0: _emscripten_bind_b2GearJoint_GetJoint1_0, _emscripten_bind_b2WheelJoint_GetMaxMotorTorque_0: _emscripten_bind_b2WheelJoint_GetMaxMotorTorque_0, _emscripten_enum_b2ContactFeatureType_e_face: _emscripten_enum_b2ContactFeatureType_e_face, _emscripten_bind_b2GearJoint_GetAnchorA_0: _emscripten_bind_b2GearJoint_GetAnchorA_0, _emscripten_enum_b2JointType_e_mouseJoint: _emscripten_enum_b2JointType_e_mouseJoint, _emscripten_bind_b2MouseJointDef_set_bodyA_1: _emscripten_bind_b2MouseJointDef_set_bodyA_1, _emscripten_bind_b2Params_setFrame1_1: _emscripten_bind_b2Params_setFrame1_1, _emscripten_enum_b2JointType_e_revoluteJoint: _emscripten_enum_b2JointType_e_revoluteJoint, _emscripten_bind_b2World_SetContactListener_1: _emscripten_bind_b2World_SetContactListener_1, _emscripten_bind_b2Body_IsAwake_0: _emscripten_bind_b2Body_IsAwake_0, _emscripten_bind_b2JointEdge_set_other_1: _emscripten_bind_b2JointEdge_set_other_1, _emscripten_bind_b2RevoluteJoint_IsMotorEnabled_0: _emscripten_bind_b2RevoluteJoint_IsMotorEnabled_0, _emscripten_bind_b2MouseJointDef_set_target_1: _emscripten_bind_b2MouseJointDef_set_target_1, _emscripten_bind_b2FrictionJoint_GetLocalAnchorB_0: _emscripten_bind_b2FrictionJoint_GetLocalAnchorB_0, _emscripten_bind_b2FixtureDef_get_density_0: _emscripten_bind_b2FixtureDef_get_density_0, _emscripten_bind_b2ChainShape_set_m_vertices_1: _emscripten_bind_b2ChainShape_set_m_vertices_1, _emscripten_bind_b2ChainShape_get_m_vertices_0: _emscripten_bind_b2ChainShape_get_m_vertices_0, _emscripten_bind_b2Rot_set_s_1: _emscripten_bind_b2Rot_set_s_1, _emscripten_bind_b2WheelJointDef_set_bodyB_1: _emscripten_bind_b2WheelJointDef_set_bodyB_1, _emscripten_bind_b2PulleyJointDef_set_localAnchorB_1: _emscripten_bind_b2PulleyJointDef_set_localAnchorB_1, _emscripten_bind_b2FixtureDef_get_userData_0: _emscripten_bind_b2FixtureDef_get_userData_0, _emscripten_bind_b2FrictionJointDef_set_collideConnected_1: _emscripten_bind_b2FrictionJointDef_set_collideConnected_1, _emscripten_bind_b2PrismaticJointDef_get_lowerTranslation_0: _emscripten_bind_b2PrismaticJointDef_get_lowerTranslation_0, _emscripten_bind_b2GearJoint_GetCollideConnected_0: _emscripten_bind_b2GearJoint_GetCollideConnected_0, _emscripten_bind_b2Params_setDebug_1: _emscripten_bind_b2Params_setDebug_1, _emscripten_bind_b2RevoluteJointDef_get_upperAngle_0: _emscripten_bind_b2RevoluteJointDef_get_upperAngle_0, _emscripten_enum_b2JointType_e_frictionJoint: _emscripten_enum_b2JointType_e_frictionJoint, _emscripten_bind_b2RayCastOutput_set_fraction_1: _emscripten_bind_b2RayCastOutput_set_fraction_1, _emscripten_bind_b2Color_set_r_1: _emscripten_bind_b2Color_set_r_1, _emscripten_bind_b2DistanceJointDef_get_length_0: _emscripten_bind_b2DistanceJointDef_get_length_0, _emscripten_bind_b2PulleyJoint_GetBodyB_0: _emscripten_bind_b2PulleyJoint_GetBodyB_0, _emscripten_bind_b2WheelJointDef_set_type_1: _emscripten_bind_b2WheelJointDef_set_type_1, _emscripten_bind_b2World_GetTreeQuality_0: _emscripten_bind_b2World_GetTreeQuality_0, _emscripten_bind_b2BodyDef_set_gravityScale_1: _emscripten_bind_b2BodyDef_set_gravityScale_1, _emscripten_bind_b2RopeJointDef_set_bodyB_1: _emscripten_bind_b2RopeJointDef_set_bodyB_1, _emscripten_bind_b2PrismaticJoint_GetLowerLimit_0: _emscripten_bind_b2PrismaticJoint_GetLowerLimit_0, _emscripten_bind_b2AABB_get_lowerBound_0: _emscripten_bind_b2AABB_get_lowerBound_0, _emscripten_bind_b2WheelJoint_SetMotorSpeed_1: _emscripten_bind_b2WheelJoint_SetMotorSpeed_1, _emscripten_bind_b2PrismaticJointDef_get_referenceAngle_0: _emscripten_bind_b2PrismaticJointDef_get_referenceAngle_0, _emscripten_bind_b2Body_SetMassData_1: _emscripten_bind_b2Body_SetMassData_1, _emscripten_bind_b2BodyDef_get_angularVelocity_0: _emscripten_bind_b2BodyDef_get_angularVelocity_0, _emscripten_bind_b2WeldJoint_SetDampingRatio_1: _emscripten_bind_b2WeldJoint_SetDampingRatio_1, _emscripten_bind_b2PrismaticJointDef___destroy___0: _emscripten_bind_b2PrismaticJointDef___destroy___0, _emscripten_bind_b2Contact_IsTouching_0: _emscripten_bind_b2Contact_IsTouching_0, _emscripten_bind_b2Draw_SetFlags_1: _emscripten_bind_b2Draw_SetFlags_1, _emscripten_bind_b2AABB_Contains_1: _emscripten_bind_b2AABB_Contains_1, _emscripten_bind_b2DistanceJoint_GetNext_0: _emscripten_bind_b2DistanceJoint_GetNext_0, _emscripten_bind_b2WheelJointDef_get_localAxisA_0: _emscripten_bind_b2WheelJointDef_get_localAxisA_0, _emscripten_bind_b2PrismaticJoint_GetNext_0: _emscripten_bind_b2PrismaticJoint_GetNext_0, _emscripten_bind_b2Filter_get_groupIndex_0: _emscripten_bind_b2Filter_get_groupIndex_0, _emscripten_bind_b2PrismaticJoint_GetType_0: _emscripten_bind_b2PrismaticJoint_GetType_0, _emscripten_bind_b2Fixture_GetRestitution_0: _emscripten_bind_b2Fixture_GetRestitution_0, _emscripten_bind_b2Transform_set_q_1: _emscripten_bind_b2Transform_set_q_1, _emscripten_bind_b2PolygonShape___destroy___0: _emscripten_bind_b2PolygonShape___destroy___0, _emscripten_bind_b2AABB_get_upperBound_0: _emscripten_bind_b2AABB_get_upperBound_0, _emscripten_bind_b2Transform___destroy___0: _emscripten_bind_b2Transform___destroy___0, _emscripten_bind_b2WeldJointDef_set_localAnchorB_1: _emscripten_bind_b2WeldJointDef_set_localAnchorB_1, _emscripten_bind_b2CircleShape_set_m_radius_1: _emscripten_bind_b2CircleShape_set_m_radius_1, _emscripten_bind_b2EdgeShape_set_m_hasVertex0_1: _emscripten_bind_b2EdgeShape_set_m_hasVertex0_1, _emscripten_bind_b2RopeJoint_GetMaxLength_0: _emscripten_bind_b2RopeJoint_GetMaxLength_0, _emscripten_bind_b2GearJoint_GetUserData_0: _emscripten_bind_b2GearJoint_GetUserData_0, _emscripten_bind_b2GearJointDef_set_type_1: _emscripten_bind_b2GearJointDef_set_type_1, _emscripten_bind_b2DistanceJoint_SetDampingRatio_1: _emscripten_bind_b2DistanceJoint_SetDampingRatio_1, _emscripten_bind_b2Contact_GetFixtureA_0: _emscripten_bind_b2Contact_GetFixtureA_0, _emscripten_bind_b2QueryCallback___destroy___0: _emscripten_bind_b2QueryCallback___destroy___0, _emscripten_bind_b2PulleyJointDef_get_ratio_0: _emscripten_bind_b2PulleyJointDef_get_ratio_0, _emscripten_bind_b2PrismaticJointDef_get_localAnchorB_0: _emscripten_bind_b2PrismaticJointDef_get_localAnchorB_0, _emscripten_bind_b2CircleShape_set_m_type_1: _emscripten_bind_b2CircleShape_set_m_type_1, _emscripten_enum_b2ShapeType_e_typeCount: _emscripten_enum_b2ShapeType_e_typeCount, _emscripten_bind_b2Body_SetTransform_2: _emscripten_bind_b2Body_SetTransform_2, _emscripten_bind_b2RopeJoint_GetAnchorB_0: _emscripten_bind_b2RopeJoint_GetAnchorB_0, _emscripten_bind_b2AABB_set_upperBound_1: _emscripten_bind_b2AABB_set_upperBound_1, _emscripten_bind_b2MouseJointDef_get_collideConnected_0: _emscripten_bind_b2MouseJointDef_get_collideConnected_0, _emscripten_bind_b2ContactImpulse___destroy___0: _emscripten_bind_b2ContactImpulse___destroy___0, _emscripten_bind_b2World_GetTreeHeight_0: _emscripten_bind_b2World_GetTreeHeight_0, _emscripten_bind_b2Vec2_set_x_1: _emscripten_bind_b2Vec2_set_x_1, _emscripten_bind_b2RayCastInput___destroy___0: _emscripten_bind_b2RayCastInput___destroy___0, _emscripten_bind_JSDestructionListener_JSDestructionListener_0: _emscripten_bind_JSDestructionListener_JSDestructionListener_0, _emscripten_bind_b2WheelJointDef_set_localAnchorA_1: _emscripten_bind_b2WheelJointDef_set_localAnchorA_1, _emscripten_bind_b2FrictionJoint_GetBodyB_0: _emscripten_bind_b2FrictionJoint_GetBodyB_0, _emscripten_bind_b2WeldJointDef_set_bodyA_1: _emscripten_bind_b2WeldJointDef_set_bodyA_1, _emscripten_bind_b2World_SetDestructionListener_1: _emscripten_bind_b2World_SetDestructionListener_1, _emscripten_enum_b2JointType_e_wheelJoint: _emscripten_enum_b2JointType_e_wheelJoint, _emscripten_bind_b2WheelJoint_GetLocalAnchorB_0: _emscripten_bind_b2WheelJoint_GetLocalAnchorB_0, _emscripten_bind_b2JointDef___destroy___0: _emscripten_bind_b2JointDef___destroy___0, _emscripten_bind_b2PrismaticJointDef_Initialize_4: _emscripten_bind_b2PrismaticJointDef_Initialize_4, _emscripten_bind_b2FrictionJointDef_get_localAnchorA_0: _emscripten_bind_b2FrictionJointDef_get_localAnchorA_0, _emscripten_bind_b2CircleShape_GetChildCount_0: _emscripten_bind_b2CircleShape_GetChildCount_0, _emscripten_bind_b2BodyDef_get_bullet_0: _emscripten_bind_b2BodyDef_get_bullet_0, _emscripten_bind_b2Params_getDumpPos_0: _emscripten_bind_b2Params_getDumpPos_0, _emscripten_bind_b2Color_set_b_1: _emscripten_bind_b2Color_set_b_1, _emscripten_bind_b2PrismaticJointDef_get_type_0: _emscripten_bind_b2PrismaticJointDef_get_type_0, _emscripten_bind_b2MassData_get_center_0: _emscripten_bind_b2MassData_get_center_0, _emscripten_bind_b2World_b2World_1: _emscripten_bind_b2World_b2World_1, _emscripten_bind_b2WheelJoint_GetReactionForce_1: _emscripten_bind_b2WheelJoint_GetReactionForce_1, _emscripten_bind_b2Rot_Set_1: _emscripten_bind_b2Rot_Set_1, _emscripten_bind_b2Vec2_op_add_1: _emscripten_bind_b2Vec2_op_add_1, _emscripten_bind_b2Joint_GetBodyA_0: _emscripten_bind_b2Joint_GetBodyA_0, _emscripten_bind_b2Joint_GetCollideConnected_0: _emscripten_bind_b2Joint_GetCollideConnected_0, _emscripten_bind_b2FrictionJointDef_get_bodyB_0: _emscripten_bind_b2FrictionJointDef_get_bodyB_0, _emscripten_bind_b2WheelJointDef___destroy___0: _emscripten_bind_b2WheelJointDef___destroy___0, _emscripten_bind_b2Vec3_SetZero_0: _emscripten_bind_b2Vec3_SetZero_0, _emscripten_enum_b2JointType_e_pulleyJoint: _emscripten_enum_b2JointType_e_pulleyJoint, _emscripten_bind_b2ChainShape_get_m_nextVertex_0: _emscripten_bind_b2ChainShape_get_m_nextVertex_0, _emscripten_bind_b2Contact_SetEnabled_1: _emscripten_bind_b2Contact_SetEnabled_1, _emscripten_bind_b2Shape_set_m_radius_1: _emscripten_bind_b2Shape_set_m_radius_1, _emscripten_bind_b2World_SetDebugDraw_1: _emscripten_bind_b2World_SetDebugDraw_1, _emscripten_bind_b2ContactID_set_key_1: _emscripten_bind_b2ContactID_set_key_1, _emscripten_bind_b2Params_getSimd_0: _emscripten_bind_b2Params_getSimd_0, _emscripten_bind_b2RevoluteJointDef_set_collideConnected_1: _emscripten_bind_b2RevoluteJointDef_set_collideConnected_1, _malloc: _malloc, _emscripten_bind_b2World_GetProxyCount_0: _emscripten_bind_b2World_GetProxyCount_0, _emscripten_bind_b2Vec2_Normalize_0: _emscripten_bind_b2Vec2_Normalize_0, _emscripten_bind_b2WheelJoint_GetJointSpeed_0: _emscripten_bind_b2WheelJoint_GetJointSpeed_0, _emscripten_bind_b2FrictionJointDef_set_localAnchorA_1: _emscripten_bind_b2FrictionJointDef_set_localAnchorA_1, _emscripten_bind_b2GearJoint_GetRatio_0: _emscripten_bind_b2GearJoint_GetRatio_0, _emscripten_bind_JSRayCastCallback_JSRayCastCallback_0: _emscripten_bind_JSRayCastCallback_JSRayCastCallback_0, _emscripten_bind_b2RayCastInput_set_p2_1: _emscripten_bind_b2RayCastInput_set_p2_1, _emscripten_bind_b2RevoluteJointDef_get_motorSpeed_0: _emscripten_bind_b2RevoluteJointDef_get_motorSpeed_0, _emscripten_bind_b2RayCastOutput_get_normal_0: _emscripten_bind_b2RayCastOutput_get_normal_0, _emscripten_bind_b2WeldJoint_GetBodyA_0: _emscripten_bind_b2WeldJoint_GetBodyA_0, _emscripten_enum_b2DrawFlag_e_jointBit: _emscripten_enum_b2DrawFlag_e_jointBit, _emscripten_bind_b2FixtureDef_get_isSensor_0: _emscripten_bind_b2FixtureDef_get_isSensor_0, _emscripten_bind_b2PulleyJointDef_set_bodyB_1: _emscripten_bind_b2PulleyJointDef_set_bodyB_1, _emscripten_bind_b2WheelJoint_EnableMotor_1: _emscripten_bind_b2WheelJoint_EnableMotor_1, _emscripten_bind_b2RevoluteJoint_GetJointSpeed_0: _emscripten_bind_b2RevoluteJoint_GetJointSpeed_0, _emscripten_bind_JSDraw_DrawSolidPolygon_3: _emscripten_bind_JSDraw_DrawSolidPolygon_3, _emscripten_bind_b2World_SetSubStepping_1: _emscripten_bind_b2World_SetSubStepping_1, _emscripten_bind_b2RevoluteJoint_GetJointAngle_0: _emscripten_bind_b2RevoluteJoint_GetJointAngle_0, _emscripten_bind_JSDraw___destroy___0: _emscripten_bind_JSDraw___destroy___0, _emscripten_bind_b2MouseJointDef___destroy___0: _emscripten_bind_b2MouseJointDef___destroy___0, _emscripten_bind_b2Mat33_Solve22_1: _emscripten_bind_b2Mat33_Solve22_1, _emscripten_bind_b2Body_ApplyTorque_1: _emscripten_bind_b2Body_ApplyTorque_1, _emscripten_bind_b2Profile_set_solvePosition_1: _emscripten_bind_b2Profile_set_solvePosition_1, _emscripten_bind_b2ContactFilter___destroy___0: _emscripten_bind_b2ContactFilter___destroy___0, _emscripten_bind_b2PulleyJointDef_get_localAnchorB_0: _emscripten_bind_b2PulleyJointDef_get_localAnchorB_0, _emscripten_bind_b2ChainShape_set_m_hasPrevVertex_1: _emscripten_bind_b2ChainShape_set_m_hasPrevVertex_1, _emscripten_bind_b2Params_setTestOut_1: _emscripten_bind_b2Params_setTestOut_1, _emscripten_bind_b2FrictionJointDef_get_localAnchorB_0: _emscripten_bind_b2FrictionJointDef_get_localAnchorB_0, _emscripten_bind_b2PrismaticJoint___destroy___0: _emscripten_bind_b2PrismaticJoint___destroy___0, _emscripten_bind_b2World_CreateJoint_1: _emscripten_bind_b2World_CreateJoint_1, _emscripten_bind_b2Profile_get_solveTOI_0: _emscripten_bind_b2Profile_get_solveTOI_0, _emscripten_bind_b2ManifoldPoint_get_id_0: _emscripten_bind_b2ManifoldPoint_get_id_0, _emscripten_bind_JSContactFilter_JSContactListener_0: _emscripten_bind_JSContactFilter_JSContactListener_0, _emscripten_bind_b2Manifold_set_pointCount_1: _emscripten_bind_b2Manifold_set_pointCount_1, _emscripten_bind_b2PrismaticJoint_GetMotorSpeed_0: _emscripten_bind_b2PrismaticJoint_GetMotorSpeed_0, _emscripten_bind_b2Body_SetSleepingAllowed_1: _emscripten_bind_b2Body_SetSleepingAllowed_1, _emscripten_bind_b2Rot_SetIdentity_0: _emscripten_bind_b2Rot_SetIdentity_0, _emscripten_bind_b2PulleyJoint_GetGroundAnchorB_0: _emscripten_bind_b2PulleyJoint_GetGroundAnchorB_0, _emscripten_bind_b2Vec3_op_add_1: _emscripten_bind_b2Vec3_op_add_1, _emscripten_bind_b2FrictionJoint_GetType_0: _emscripten_bind_b2FrictionJoint_GetType_0, _emscripten_bind_b2Params_getSortCon_0: _emscripten_bind_b2Params_getSortCon_0, _emscripten_bind_b2MouseJoint_SetTarget_1: _emscripten_bind_b2MouseJoint_SetTarget_1, _emscripten_bind_b2MouseJointDef_get_dampingRatio_0: _emscripten_bind_b2MouseJointDef_get_dampingRatio_0, _emscripten_bind_b2RevoluteJoint_GetMotorSpeed_0: _emscripten_bind_b2RevoluteJoint_GetMotorSpeed_0, _emscripten_bind_b2ChainShape_set_m_type_1: _emscripten_bind_b2ChainShape_set_m_type_1, _emscripten_bind_b2RevoluteJointDef_set_bodyB_1: _emscripten_bind_b2RevoluteJointDef_set_bodyB_1, _emscripten_bind_b2Body_GetGravityScale_0: _emscripten_bind_b2Body_GetGravityScale_0, _emscripten_bind_b2Mat33_b2Mat33_0: _emscripten_bind_b2Mat33_b2Mat33_0, _emscripten_bind_b2MouseJointDef_get_bodyB_0: _emscripten_bind_b2MouseJointDef_get_bodyB_0, _emscripten_bind_b2Shape_TestPoint_2: _emscripten_bind_b2Shape_TestPoint_2, _emscripten_bind_b2Body_GetWorldVector_1: _emscripten_bind_b2Body_GetWorldVector_1, _emscripten_bind_b2WeldJointDef_get_frequencyHz_0: _emscripten_bind_b2WeldJointDef_get_frequencyHz_0, _emscripten_bind_b2PolygonShape_Set_2: _emscripten_bind_b2PolygonShape_Set_2, _emscripten_bind_b2Manifold___destroy___0: _emscripten_bind_b2Manifold___destroy___0, _emscripten_bind_b2PulleyJointDef_set_lengthA_1: _emscripten_bind_b2PulleyJointDef_set_lengthA_1, _emscripten_bind_b2RevoluteJointDef_set_localAnchorA_1: _emscripten_bind_b2RevoluteJointDef_set_localAnchorA_1, _emscripten_bind_b2GearJoint___destroy___0: _emscripten_bind_b2GearJoint___destroy___0, _emscripten_bind_b2Fixture_SetRestitution_1: _emscripten_bind_b2Fixture_SetRestitution_1, _emscripten_bind_b2PulleyJointDef_set_ratio_1: _emscripten_bind_b2PulleyJointDef_set_ratio_1, _emscripten_bind_b2JointEdge_set_prev_1: _emscripten_bind_b2JointEdge_set_prev_1, _emscripten_bind_b2PrismaticJoint_GetReactionTorque_1: _emscripten_bind_b2PrismaticJoint_GetReactionTorque_1, _emscripten_bind_b2Body_GetLocalPoint_1: _emscripten_bind_b2Body_GetLocalPoint_1, _emscripten_bind_b2PrismaticJoint_GetCollideConnected_0: _emscripten_bind_b2PrismaticJoint_GetCollideConnected_0, _emscripten_bind_b2RopeJointDef_get_userData_0: _emscripten_bind_b2RopeJointDef_get_userData_0, _emscripten_bind_b2DistanceJoint_IsActive_0: _emscripten_bind_b2DistanceJoint_IsActive_0, _emscripten_bind_b2Vec2_b2Vec2_2: _emscripten_bind_b2Vec2_b2Vec2_2, _emscripten_bind_b2PrismaticJoint_GetJointTranslation_0: _emscripten_bind_b2PrismaticJoint_GetJointTranslation_0, _emscripten_bind_b2Vec2_b2Vec2_0: _emscripten_bind_b2Vec2_b2Vec2_0, _emscripten_bind_b2DistanceJoint_GetAnchorB_0: _emscripten_bind_b2DistanceJoint_GetAnchorB_0, _emscripten_bind_b2WheelJointDef_get_maxMotorTorque_0: _emscripten_bind_b2WheelJointDef_get_maxMotorTorque_0, _emscripten_bind_b2Vec2_op_sub_1: _emscripten_bind_b2Vec2_op_sub_1, _emscripten_bind_b2CircleShape_get_m_p_0: _emscripten_bind_b2CircleShape_get_m_p_0, _emscripten_bind_b2ContactFeature_get_indexA_0: _emscripten_bind_b2ContactFeature_get_indexA_0, _emscripten_bind_b2ChainShape_set_m_nextVertex_1: _emscripten_bind_b2ChainShape_set_m_nextVertex_1, _emscripten_bind_b2PulleyJoint_GetCollideConnected_0: _emscripten_bind_b2PulleyJoint_GetCollideConnected_0, _emscripten_bind_b2PulleyJoint_GetReactionForce_1: _emscripten_bind_b2PulleyJoint_GetReactionForce_1, _emscripten_bind_b2FrictionJointDef_get_maxForce_0: _emscripten_bind_b2FrictionJointDef_get_maxForce_0, _emscripten_bind_b2PulleyJoint_GetAnchorB_0: _emscripten_bind_b2PulleyJoint_GetAnchorB_0, _emscripten_bind_b2Mat33_get_ex_0: _emscripten_bind_b2Mat33_get_ex_0, _emscripten_bind_b2Body_GetPosition_0: _emscripten_bind_b2Body_GetPosition_0, _emscripten_bind_b2Profile___destroy___0: _emscripten_bind_b2Profile___destroy___0, _emscripten_bind_b2ContactEdge_get_prev_0: _emscripten_bind_b2ContactEdge_get_prev_0, _emscripten_bind_b2DistanceJoint_SetFrequency_1: _emscripten_bind_b2DistanceJoint_SetFrequency_1, _emscripten_bind_b2Params_setDumpCon_1: _emscripten_bind_b2Params_setDumpCon_1, _emscripten_enum_b2ShapeType_e_chain: _emscripten_enum_b2ShapeType_e_chain, _emscripten_enum_b2ContactFeatureType_e_vertex: _emscripten_enum_b2ContactFeatureType_e_vertex, _emscripten_bind_b2Counters_b2Counters_0: _emscripten_bind_b2Counters_b2Counters_0, _emscripten_bind_b2Fixture_GetBody_0: _emscripten_bind_b2Fixture_GetBody_0, _emscripten_bind_b2Body_ApplyForceToCenter_1: _emscripten_bind_b2Body_ApplyForceToCenter_1, _emscripten_bind_b2ContactImpulse_set_count_1: _emscripten_bind_b2ContactImpulse_set_count_1, _emscripten_bind_b2Params_b2Params_0: _emscripten_bind_b2Params_b2Params_0, _emscripten_bind_b2PulleyJointDef_get_bodyB_0: _emscripten_bind_b2PulleyJointDef_get_bodyB_0, _emscripten_bind_b2Rot_set_c_1: _emscripten_bind_b2Rot_set_c_1, _emscripten_bind_b2RevoluteJoint_GetReactionTorque_1: _emscripten_bind_b2RevoluteJoint_GetReactionTorque_1, _emscripten_bind_b2Fixture_SetDensity_1: _emscripten_bind_b2Fixture_SetDensity_1, _emscripten_bind_b2ChainShape_get_m_prevVertex_0: _emscripten_bind_b2ChainShape_get_m_prevVertex_0, _emscripten_bind_b2World_ClearForces_0: _emscripten_bind_b2World_ClearForces_0, _emscripten_bind_b2Vec3___destroy___0: _emscripten_bind_b2Vec3___destroy___0, _emscripten_bind_b2WheelJointDef_set_userData_1: _emscripten_bind_b2WheelJointDef_set_userData_1, _emscripten_bind_b2WeldJoint_SetFrequency_1: _emscripten_bind_b2WeldJoint_SetFrequency_1, _emscripten_bind_JSContactListener_PreSolve_2: _emscripten_bind_JSContactListener_PreSolve_2, _emscripten_bind_b2Body_SetFixedRotation_1: _emscripten_bind_b2Body_SetFixedRotation_1, _emscripten_bind_b2RayCastOutput_set_normal_1: _emscripten_bind_b2RayCastOutput_set_normal_1, _emscripten_enum_b2JointType_e_ropeJoint: _emscripten_enum_b2JointType_e_ropeJoint, _emscripten_bind_b2DistanceJoint_GetDampingRatio_0: _emscripten_bind_b2DistanceJoint_GetDampingRatio_0, _emscripten_bind_b2WeldJointDef_set_userData_1: _emscripten_bind_b2WeldJointDef_set_userData_1, _emscripten_bind_b2RevoluteJoint_EnableMotor_1: _emscripten_bind_b2RevoluteJoint_EnableMotor_1, _emscripten_bind_b2Body_ApplyAngularImpulse_1: _emscripten_bind_b2Body_ApplyAngularImpulse_1, _emscripten_bind_b2MouseJointDef_set_bodyB_1: _emscripten_bind_b2MouseJointDef_set_bodyB_1, _emscripten_bind_b2CircleShape_GetType_0: _emscripten_bind_b2CircleShape_GetType_0, _emscripten_bind_b2PolygonShape_GetType_0: _emscripten_bind_b2PolygonShape_GetType_0, _emscripten_bind_b2PrismaticJointDef_set_referenceAngle_1: _emscripten_bind_b2PrismaticJointDef_set_referenceAngle_1, _emscripten_bind_b2RopeJointDef_get_collideConnected_0: _emscripten_bind_b2RopeJointDef_get_collideConnected_0, _emscripten_bind_b2FixtureDef_set_filter_1: _emscripten_bind_b2FixtureDef_set_filter_1, _emscripten_bind_b2PulleyJointDef_get_groundAnchorA_0: _emscripten_bind_b2PulleyJointDef_get_groundAnchorA_0, _emscripten_bind_b2Fixture_SetFilterData_1: _emscripten_bind_b2Fixture_SetFilterData_1, _emscripten_bind_b2Params_setSortCon_1: _emscripten_bind_b2Params_setSortCon_1, _emscripten_bind_b2RayCastCallback___destroy___0: _emscripten_bind_b2RayCastCallback___destroy___0, _emscripten_bind_b2PulleyJointDef_set_localAnchorA_1: _emscripten_bind_b2PulleyJointDef_set_localAnchorA_1, _emscripten_bind_b2PrismaticJoint_GetLocalAxisA_0: _emscripten_bind_b2PrismaticJoint_GetLocalAxisA_0, _emscripten_bind_b2WheelJoint_GetAnchorA_0: _emscripten_bind_b2WheelJoint_GetAnchorA_0, _emscripten_bind_b2Transform_Set_2: _emscripten_bind_b2Transform_Set_2, _emscripten_bind_b2RopeJointDef_get_localAnchorA_0: _emscripten_bind_b2RopeJointDef_get_localAnchorA_0, _emscripten_bind_b2ContactEdge_set_contact_1: _emscripten_bind_b2ContactEdge_set_contact_1, _emscripten_bind_b2RevoluteJointDef_get_enableLimit_0: _emscripten_bind_b2RevoluteJointDef_get_enableLimit_0, _emscripten_bind_b2CircleShape_get_m_radius_0: _emscripten_bind_b2CircleShape_get_m_radius_0, _emscripten_bind_b2EdgeShape_GetChildCount_0: _emscripten_bind_b2EdgeShape_GetChildCount_0, _emscripten_bind_b2Profile_set_solveTOI_1: _emscripten_bind_b2Profile_set_solveTOI_1, _emscripten_bind_b2PrismaticJointDef_set_type_1: _emscripten_bind_b2PrismaticJointDef_set_type_1, _emscripten_bind_b2GearJointDef_get_userData_0: _emscripten_bind_b2GearJointDef_get_userData_0, _emscripten_bind_b2RevoluteJoint_GetAnchorB_0: _emscripten_bind_b2RevoluteJoint_GetAnchorB_0, _emscripten_bind_b2Transform_b2Transform_2: _emscripten_bind_b2Transform_b2Transform_2, _emscripten_bind_b2PrismaticJoint_GetReactionForce_1: _emscripten_bind_b2PrismaticJoint_GetReactionForce_1, _emscripten_bind_b2Transform_b2Transform_0: _emscripten_bind_b2Transform_b2Transform_0, _emscripten_bind_b2MouseJoint_GetCollideConnected_0: _emscripten_bind_b2MouseJoint_GetCollideConnected_0, _emscripten_enum_b2LimitState_e_equalLimits: _emscripten_enum_b2LimitState_e_equalLimits, _emscripten_bind_b2Body_GetContactList_0: _emscripten_bind_b2Body_GetContactList_0, _emscripten_bind_b2Body_IsFixedRotation_0: _emscripten_bind_b2Body_IsFixedRotation_0, _emscripten_enum_b2DrawFlag_e_shapeBit: _emscripten_enum_b2DrawFlag_e_shapeBit, _emscripten_bind_b2Contact_GetFriction_0: _emscripten_bind_b2Contact_GetFriction_0, _emscripten_bind_b2WheelJoint_GetAnchorB_0: _emscripten_bind_b2WheelJoint_GetAnchorB_0, _emscripten_bind_b2DistanceJointDef_set_length_1: _emscripten_bind_b2DistanceJointDef_set_length_1, _emscripten_bind_b2DistanceJoint_GetLocalAnchorB_0: _emscripten_bind_b2DistanceJoint_GetLocalAnchorB_0, _emscripten_bind_b2Mat33_set_ey_1: _emscripten_bind_b2Mat33_set_ey_1, _emscripten_bind_b2DistanceJointDef_get_type_0: _emscripten_bind_b2DistanceJointDef_get_type_0, _emscripten_bind_b2Draw_ClearFlags_1: _emscripten_bind_b2Draw_ClearFlags_1, _emscripten_bind_b2Body_IsActive_0: _emscripten_bind_b2Body_IsActive_0, _emscripten_bind_b2Contact_ResetRestitution_0: _emscripten_bind_b2Contact_ResetRestitution_0, _emscripten_bind_b2World_GetAllowSleeping_0: _emscripten_bind_b2World_GetAllowSleeping_0, _emscripten_bind_b2ManifoldPoint_b2ManifoldPoint_0: _emscripten_bind_b2ManifoldPoint_b2ManifoldPoint_0, _emscripten_bind_b2PrismaticJointDef_set_maxMotorForce_1: _emscripten_bind_b2PrismaticJointDef_set_maxMotorForce_1, _emscripten_bind_b2GearJointDef_set_bodyA_1: _emscripten_bind_b2GearJointDef_set_bodyA_1, _emscripten_bind_b2RevoluteJointDef_set_enableMotor_1: _emscripten_bind_b2RevoluteJointDef_set_enableMotor_1, _emscripten_bind_b2PulleyJoint_IsActive_0: _emscripten_bind_b2PulleyJoint_IsActive_0, _emscripten_bind_b2MouseJoint_GetNext_0: _emscripten_bind_b2MouseJoint_GetNext_0, _emscripten_bind_b2Transform_set_p_1: _emscripten_bind_b2Transform_set_p_1, _emscripten_bind_b2EdgeShape_set_m_vertex0_1: _emscripten_bind_b2EdgeShape_set_m_vertex0_1, _emscripten_bind_b2PulleyJointDef_get_lengthB_0: _emscripten_bind_b2PulleyJointDef_get_lengthB_0, _emscripten_bind_b2Fixture_SetSensor_1: _emscripten_bind_b2Fixture_SetSensor_1, _emscripten_bind_b2GearJointDef_get_joint1_0: _emscripten_bind_b2GearJointDef_get_joint1_0, _emscripten_bind_b2PrismaticJoint_GetMotorForce_1: _emscripten_bind_b2PrismaticJoint_GetMotorForce_1, _emscripten_bind_b2DistanceJoint_GetBodyA_0: _emscripten_bind_b2DistanceJoint_GetBodyA_0, _emscripten_bind_b2GearJoint_IsActive_0: _emscripten_bind_b2GearJoint_IsActive_0, _emscripten_bind_b2EdgeShape_get_m_vertex0_0: _emscripten_bind_b2EdgeShape_get_m_vertex0_0, _emscripten_bind_b2World_GetBodyCount_0: _emscripten_bind_b2World_GetBodyCount_0, _emscripten_bind_b2Fixture_GetMassData_1: _emscripten_bind_b2Fixture_GetMassData_1, _emscripten_bind_b2WeldJointDef_get_collideConnected_0: _emscripten_bind_b2WeldJointDef_get_collideConnected_0, _emscripten_bind_b2FrictionJoint_GetMaxTorque_0: _emscripten_bind_b2FrictionJoint_GetMaxTorque_0, _emscripten_bind_b2EdgeShape_RayCast_4: _emscripten_bind_b2EdgeShape_RayCast_4, _emscripten_bind_b2BodyDef_set_allowSleep_1: _emscripten_bind_b2BodyDef_set_allowSleep_1, _emscripten_bind_b2PulleyJoint_GetType_0: _emscripten_bind_b2PulleyJoint_GetType_0, _emscripten_bind_b2WeldJointDef_set_localAnchorA_1: _emscripten_bind_b2WeldJointDef_set_localAnchorA_1, _emscripten_bind_b2Profile_set_step_1: _emscripten_bind_b2Profile_set_step_1, _emscripten_bind_b2ContactEdge_set_other_1: _emscripten_bind_b2ContactEdge_set_other_1, _emscripten_enum_b2LimitState_e_atLowerLimit: _emscripten_enum_b2LimitState_e_atLowerLimit, _emscripten_bind_b2Vec2_op_mul_1: _emscripten_bind_b2Vec2_op_mul_1, _emscripten_bind_b2PrismaticJointDef_get_localAnchorA_0: _emscripten_bind_b2PrismaticJointDef_get_localAnchorA_0, _emscripten_bind_b2PrismaticJoint_SetUserData_1: _emscripten_bind_b2PrismaticJoint_SetUserData_1, _emscripten_bind_b2RopeJoint_GetAnchorA_0: _emscripten_bind_b2RopeJoint_GetAnchorA_0, _emscripten_bind_b2WheelJoint_GetLocalAnchorA_0: _emscripten_bind_b2WheelJoint_GetLocalAnchorA_0, _emscripten_bind_b2DistanceJointDef_get_bodyA_0: _emscripten_bind_b2DistanceJointDef_get_bodyA_0, _emscripten_bind_b2Vec2_get_x_0: _emscripten_bind_b2Vec2_get_x_0, _emscripten_bind_b2DistanceJointDef_set_userData_1: _emscripten_bind_b2DistanceJointDef_set_userData_1, _emscripten_bind_b2ContactEdge_get_other_0: _emscripten_bind_b2ContactEdge_get_other_0, _emscripten_bind_b2RopeJoint_GetLocalAnchorB_0: _emscripten_bind_b2RopeJoint_GetLocalAnchorB_0, _emscripten_bind_b2PulleyJointDef___destroy___0: _emscripten_bind_b2PulleyJointDef___destroy___0, _emscripten_bind_b2MouseJoint_GetBodyB_0: _emscripten_bind_b2MouseJoint_GetBodyB_0, _emscripten_bind_b2PolygonShape_TestPoint_2: _emscripten_bind_b2PolygonShape_TestPoint_2, _emscripten_bind_b2EdgeShape_set_m_vertex3_1: _emscripten_bind_b2EdgeShape_set_m_vertex3_1, _emscripten_bind_b2PolygonShape_b2PolygonShape_0: _emscripten_bind_b2PolygonShape_b2PolygonShape_0, _emscripten_bind_b2GearJointDef_set_ratio_1: _emscripten_bind_b2GearJointDef_set_ratio_1, _emscripten_bind_b2WheelJoint_SetMaxMotorTorque_1: _emscripten_bind_b2WheelJoint_SetMaxMotorTorque_1, _emscripten_bind_b2GearJoint_GetReactionForce_1: _emscripten_bind_b2GearJoint_GetReactionForce_1, _emscripten_bind_b2DistanceJointDef_get_localAnchorA_0: _emscripten_bind_b2DistanceJointDef_get_localAnchorA_0, _emscripten_bind_b2MassData_set_center_1: _emscripten_bind_b2MassData_set_center_1, _emscripten_bind_b2Body_GetInertia_0: _emscripten_bind_b2Body_GetInertia_0, _emscripten_bind_b2PrismaticJointDef_b2PrismaticJointDef_0: _emscripten_bind_b2PrismaticJointDef_b2PrismaticJointDef_0, _emscripten_bind_b2BodyDef_get_active_0: _emscripten_bind_b2BodyDef_get_active_0, _emscripten_bind_b2Body_GetAngularVelocity_0: _emscripten_bind_b2Body_GetAngularVelocity_0, _emscripten_bind_b2WeldJoint_GetBodyB_0: _emscripten_bind_b2WeldJoint_GetBodyB_0, _emscripten_bind_b2Draw___destroy___0: _emscripten_bind_b2Draw___destroy___0, _emscripten_bind_b2WheelJointDef_Initialize_4: _emscripten_bind_b2WheelJointDef_Initialize_4, _emscripten_bind_b2WeldJointDef_set_dampingRatio_1: _emscripten_bind_b2WeldJointDef_set_dampingRatio_1, _emscripten_bind_b2Contact_IsEnabled_0: _emscripten_bind_b2Contact_IsEnabled_0, _emscripten_bind_b2Joint_GetAnchorB_0: _emscripten_bind_b2Joint_GetAnchorB_0, _emscripten_bind_b2Params_getFrame1_0: _emscripten_bind_b2Params_getFrame1_0, _emscripten_bind_b2PrismaticJointDef_get_userData_0: _emscripten_bind_b2PrismaticJointDef_get_userData_0, _emscripten_bind_b2ContactFeature_set_typeB_1: _emscripten_bind_b2ContactFeature_set_typeB_1, _emscripten_bind_b2RevoluteJoint_GetBodyA_0: _emscripten_bind_b2RevoluteJoint_GetBodyA_0, _emscripten_bind_b2ContactID_set_cf_1: _emscripten_bind_b2ContactID_set_cf_1, _emscripten_bind_b2Rot_GetXAxis_0: _emscripten_bind_b2Rot_GetXAxis_0, _emscripten_bind_b2ContactEdge_set_prev_1: _emscripten_bind_b2ContactEdge_set_prev_1, _emscripten_bind_b2Vec3_Set_3: _emscripten_bind_b2Vec3_Set_3, _emscripten_bind_b2Fixture_GetNext_0: _emscripten_bind_b2Fixture_GetNext_0, _emscripten_bind_b2FrictionJointDef_set_localAnchorB_1: _emscripten_bind_b2FrictionJointDef_set_localAnchorB_1, _emscripten_bind_b2PulleyJoint_GetNext_0: _emscripten_bind_b2PulleyJoint_GetNext_0, _emscripten_bind_b2ChainShape_get_m_type_0: _emscripten_bind_b2ChainShape_get_m_type_0, _emscripten_bind_b2GearJointDef_get_bodyA_0: _emscripten_bind_b2GearJointDef_get_bodyA_0, _emscripten_bind_b2DistanceJointDef_set_frequencyHz_1: _emscripten_bind_b2DistanceJointDef_set_frequencyHz_1, _emscripten_bind_b2RevoluteJointDef_get_localAnchorB_0: _emscripten_bind_b2RevoluteJointDef_get_localAnchorB_0, _emscripten_bind_b2Counters_dump_0: _emscripten_bind_b2Counters_dump_0, _emscripten_bind_b2RevoluteJointDef_get_referenceAngle_0: _emscripten_bind_b2RevoluteJointDef_get_referenceAngle_0, _emscripten_bind_JSContactFilter___destroy___0: _emscripten_bind_JSContactFilter___destroy___0, _emscripten_bind_b2RevoluteJoint_EnableLimit_1: _emscripten_bind_b2RevoluteJoint_EnableLimit_1, _emscripten_bind_b2PolygonShape_get_m_radius_0: _emscripten_bind_b2PolygonShape_get_m_radius_0, _emscripten_enum_b2BodyType_b2_kinematicBody: _emscripten_enum_b2BodyType_b2_kinematicBody, _emscripten_bind_b2RopeJointDef_get_bodyA_0: _emscripten_bind_b2RopeJointDef_get_bodyA_0, _emscripten_bind_b2DistanceJointDef_get_dampingRatio_0: _emscripten_bind_b2DistanceJointDef_get_dampingRatio_0, _emscripten_enum_b2ManifoldType_e_faceA: _emscripten_enum_b2ManifoldType_e_faceA, _emscripten_enum_b2ManifoldType_e_faceB: _emscripten_enum_b2ManifoldType_e_faceB, _emscripten_bind_b2RevoluteJointDef_get_bodyB_0: _emscripten_bind_b2RevoluteJointDef_get_bodyB_0, _emscripten_bind_b2FixtureDef_b2FixtureDef_0: _emscripten_bind_b2FixtureDef_b2FixtureDef_0, _emscripten_bind_b2BodyDef_get_awake_0: _emscripten_bind_b2BodyDef_get_awake_0, _emscripten_bind_b2EdgeShape_get_m_hasVertex3_0: _emscripten_bind_b2EdgeShape_get_m_hasVertex3_0, _emscripten_enum_b2ShapeType_e_edge: _emscripten_enum_b2ShapeType_e_edge, _emscripten_bind_b2RevoluteJoint_GetMaxMotorTorque_0: _emscripten_bind_b2RevoluteJoint_GetMaxMotorTorque_0, _emscripten_bind_b2BodyDef_set_active_1: _emscripten_bind_b2BodyDef_set_active_1, _emscripten_bind_b2DistanceJointDef_set_localAnchorB_1: _emscripten_bind_b2DistanceJointDef_set_localAnchorB_1, _emscripten_bind_b2Body_GetWorldPoint_1: _emscripten_bind_b2Body_GetWorldPoint_1, _emscripten_bind_b2ManifoldPoint_get_normalImpulse_0: _emscripten_bind_b2ManifoldPoint_get_normalImpulse_0, _emscripten_bind_JSContactFilter_ShouldCollide_2: _emscripten_bind_JSContactFilter_ShouldCollide_2, _emscripten_bind_b2Joint_GetReactionTorque_1: _emscripten_bind_b2Joint_GetReactionTorque_1, _emscripten_bind_b2RevoluteJointDef_set_type_1: _emscripten_bind_b2RevoluteJointDef_set_type_1, _emscripten_bind_b2RopeJointDef_b2RopeJointDef_0: _emscripten_bind_b2RopeJointDef_b2RopeJointDef_0, _emscripten_bind_b2BodyDef_get_linearDamping_0: _emscripten_bind_b2BodyDef_get_linearDamping_0, _emscripten_bind_b2World_Step_3: _emscripten_bind_b2World_Step_3, _emscripten_bind_b2CircleShape_RayCast_4: _emscripten_bind_b2CircleShape_RayCast_4, _emscripten_bind_b2Profile_get_step_0: _emscripten_bind_b2Profile_get_step_0, _emscripten_bind_b2Vec3_b2Vec3_0: _emscripten_bind_b2Vec3_b2Vec3_0, _emscripten_bind_b2DistanceJoint_GetLength_0: _emscripten_bind_b2DistanceJoint_GetLength_0, _emscripten_bind_b2PulleyJoint_GetLengthB_0: _emscripten_bind_b2PulleyJoint_GetLengthB_0, _emscripten_bind_b2Filter_set_categoryBits_1: _emscripten_bind_b2Filter_set_categoryBits_1, _emscripten_bind_b2PrismaticJoint_GetLocalAnchorA_0: _emscripten_bind_b2PrismaticJoint_GetLocalAnchorA_0, _emscripten_bind_b2Shape_get_m_type_0: _emscripten_bind_b2Shape_get_m_type_0, _emscripten_bind_b2MouseJoint_SetDampingRatio_1: _emscripten_bind_b2MouseJoint_SetDampingRatio_1, _emscripten_bind_b2World_GetAutoClearForces_0: _emscripten_bind_b2World_GetAutoClearForces_0, _emscripten_enum_b2ShapeType_e_circle: _emscripten_enum_b2ShapeType_e_circle, _emscripten_bind_b2BodyDef_set_fixedRotation_1: _emscripten_bind_b2BodyDef_set_fixedRotation_1, _emscripten_bind_b2RopeJoint_GetLimitState_0: _emscripten_bind_b2RopeJoint_GetLimitState_0, _emscripten_bind_b2JointDef_get_collideConnected_0: _emscripten_bind_b2JointDef_get_collideConnected_0, _emscripten_bind_b2FrictionJointDef_b2FrictionJointDef_0: _emscripten_bind_b2FrictionJointDef_b2FrictionJointDef_0, _emscripten_bind_b2Body_Dump_0: _emscripten_bind_b2Body_Dump_0, _emscripten_bind_b2RevoluteJoint_GetLowerLimit_0: _emscripten_bind_b2RevoluteJoint_GetLowerLimit_0, _emscripten_bind_b2Body_GetWorldCenter_0: _emscripten_bind_b2Body_GetWorldCenter_0, _emscripten_bind_JSContactListener___destroy___0: _emscripten_bind_JSContactListener___destroy___0, _emscripten_bind_b2BodyDef_set_linearVelocity_1: _emscripten_bind_b2BodyDef_set_linearVelocity_1, _emscripten_bind_b2JointDef_set_collideConnected_1: _emscripten_bind_b2JointDef_set_collideConnected_1, _emscripten_bind_b2RopeJointDef_get_localAnchorB_0: _emscripten_bind_b2RopeJointDef_get_localAnchorB_0, _emscripten_bind_b2Body_GetUserData_0: _emscripten_bind_b2Body_GetUserData_0, _emscripten_bind_b2World_GetContinuousPhysics_0: _emscripten_bind_b2World_GetContinuousPhysics_0, _emscripten_bind_b2Fixture_RayCast_3: _emscripten_bind_b2Fixture_RayCast_3, _emscripten_bind_b2JointDef_set_bodyA_1: _emscripten_bind_b2JointDef_set_bodyA_1, _emscripten_bind_b2GearJointDef_get_collideConnected_0: _emscripten_bind_b2GearJointDef_get_collideConnected_0, _emscripten_bind_b2RopeJointDef_get_maxLength_0: _emscripten_bind_b2RopeJointDef_get_maxLength_0, _emscripten_bind_b2MouseJointDef_get_bodyA_0: _emscripten_bind_b2MouseJointDef_get_bodyA_0, _emscripten_bind_b2Body_SetBullet_1: _emscripten_bind_b2Body_SetBullet_1, _emscripten_bind_b2DistanceJoint_GetType_0: _emscripten_bind_b2DistanceJoint_GetType_0, _emscripten_bind_b2FixtureDef_get_restitution_0: _emscripten_bind_b2FixtureDef_get_restitution_0, _emscripten_bind_b2Fixture_GetType_0: _emscripten_bind_b2Fixture_GetType_0, _emscripten_bind_b2WheelJointDef_set_enableMotor_1: _emscripten_bind_b2WheelJointDef_set_enableMotor_1, _emscripten_bind_b2RevoluteJoint_GetBodyB_0: _emscripten_bind_b2RevoluteJoint_GetBodyB_0, _emscripten_bind_b2Profile_set_solveInit_1: _emscripten_bind_b2Profile_set_solveInit_1, _emscripten_bind_b2RopeJointDef_set_type_1: _emscripten_bind_b2RopeJointDef_set_type_1, _emscripten_bind_b2PrismaticJointDef_get_bodyB_0: _emscripten_bind_b2PrismaticJointDef_get_bodyB_0, _emscripten_bind_b2Body_SetLinearVelocity_1: _emscripten_bind_b2Body_SetLinearVelocity_1, _emscripten_bind_b2RevoluteJoint_GetReferenceAngle_0: _emscripten_bind_b2RevoluteJoint_GetReferenceAngle_0, _emscripten_bind_b2PulleyJointDef_get_userData_0: _emscripten_bind_b2PulleyJointDef_get_userData_0, _emscripten_bind_b2PrismaticJointDef_set_bodyB_1: _emscripten_bind_b2PrismaticJointDef_set_bodyB_1, _emscripten_bind_b2ManifoldPoint_set_id_1: _emscripten_bind_b2ManifoldPoint_set_id_1, _i64Subtract: _i64Subtract, _free: _free, _emscripten_bind_b2Params_setDumpPos_1: _emscripten_bind_b2Params_setDumpPos_1, _emscripten_bind_b2Manifold_get_localNormal_0: _emscripten_bind_b2Manifold_get_localNormal_0, _emscripten_bind_b2AABB_RayCast_2: _emscripten_bind_b2AABB_RayCast_2, _emscripten_bind_b2FixtureDef_set_isSensor_1: _emscripten_bind_b2FixtureDef_set_isSensor_1, _emscripten_bind_b2RopeJoint_GetBodyB_0: _emscripten_bind_b2RopeJoint_GetBodyB_0, _emscripten_bind_b2PrismaticJoint_GetAnchorA_0: _emscripten_bind_b2PrismaticJoint_GetAnchorA_0, _emscripten_bind_b2ChainShape_set_m_count_1: _emscripten_bind_b2ChainShape_set_m_count_1, _emscripten_bind_b2PrismaticJoint_IsMotorEnabled_0: _emscripten_bind_b2PrismaticJoint_IsMotorEnabled_0, _emscripten_bind_b2WeldJoint_GetFrequency_0: _emscripten_bind_b2WeldJoint_GetFrequency_0, _emscripten_bind_b2Joint_GetUserData_0: _emscripten_bind_b2Joint_GetUserData_0, _emscripten_bind_b2RevoluteJointDef_get_lowerAngle_0: _emscripten_bind_b2RevoluteJointDef_get_lowerAngle_0, _emscripten_bind_b2Manifold_set_type_1: _emscripten_bind_b2Manifold_set_type_1, _emscripten_bind_b2Vec3_b2Vec3_3: _emscripten_bind_b2Vec3_b2Vec3_3, _emscripten_bind_b2RopeJointDef_set_maxLength_1: _emscripten_bind_b2RopeJointDef_set_maxLength_1, _emscripten_bind_b2ChainShape_TestPoint_2: _emscripten_bind_b2ChainShape_TestPoint_2, _emscripten_bind_b2PrismaticJoint_GetReferenceAngle_0: _emscripten_bind_b2PrismaticJoint_GetReferenceAngle_0, _emscripten_bind_b2RayCastInput_get_p2_0: _emscripten_bind_b2RayCastInput_get_p2_0, _emscripten_bind_b2Params_setSimd_1: _emscripten_bind_b2Params_setSimd_1, _emscripten_bind_b2Shape_GetChildCount_0: _emscripten_bind_b2Shape_GetChildCount_0, _emscripten_bind_b2BodyDef_set_angle_1: _emscripten_bind_b2BodyDef_set_angle_1, _emscripten_bind_b2WeldJoint_GetUserData_0: _emscripten_bind_b2WeldJoint_GetUserData_0, _emscripten_bind_b2WheelJointDef_get_localAnchorA_0: _emscripten_bind_b2WheelJointDef_get_localAnchorA_0, _emscripten_bind_b2PulleyJointDef_set_type_1: _emscripten_bind_b2PulleyJointDef_set_type_1, _emscripten_bind_b2Body_IsBullet_0: _emscripten_bind_b2Body_IsBullet_0, _emscripten_bind_b2Body_ApplyLinearImpulse_2: _emscripten_bind_b2Body_ApplyLinearImpulse_2, _emscripten_bind_b2Mat33_GetSymInverse33_1: _emscripten_bind_b2Mat33_GetSymInverse33_1, _emscripten_bind_b2PolygonShape_ComputeMass_2: _emscripten_bind_b2PolygonShape_ComputeMass_2, _emscripten_bind_b2WeldJoint_GetLocalAnchorA_0: _emscripten_bind_b2WeldJoint_GetLocalAnchorA_0, _emscripten_bind_b2MouseJoint_SetFrequency_1: _emscripten_bind_b2MouseJoint_SetFrequency_1, _emscripten_bind_b2EdgeShape_get_m_vertex1_0: _emscripten_bind_b2EdgeShape_get_m_vertex1_0, _emscripten_bind_b2BodyDef_set_awake_1: _emscripten_bind_b2BodyDef_set_awake_1, _emscripten_bind_b2Vec2_get_y_0: _emscripten_bind_b2Vec2_get_y_0, _emscripten_bind_b2Body_CreateFixture_1: _emscripten_bind_b2Body_CreateFixture_1, _emscripten_bind_b2Body_CreateFixture_2: _emscripten_bind_b2Body_CreateFixture_2, _emscripten_bind_b2PulleyJoint_GetUserData_0: _emscripten_bind_b2PulleyJoint_GetUserData_0, _emscripten_bind_b2WheelJoint_SetSpringFrequencyHz_1: _emscripten_bind_b2WheelJoint_SetSpringFrequencyHz_1, _emscripten_bind_b2Fixture_GetUserData_0: _emscripten_bind_b2Fixture_GetUserData_0, _emscripten_bind_b2PolygonShape_ComputeAABB_3: _emscripten_bind_b2PolygonShape_ComputeAABB_3, _emscripten_bind_b2ContactFeature_get_typeA_0: _emscripten_bind_b2ContactFeature_get_typeA_0, _emscripten_bind_b2MouseJoint_GetReactionForce_1: _emscripten_bind_b2MouseJoint_GetReactionForce_1, _emscripten_bind_b2FrictionJoint_GetReactionTorque_1: _emscripten_bind_b2FrictionJoint_GetReactionTorque_1, _emscripten_bind_b2EdgeShape_TestPoint_2: _emscripten_bind_b2EdgeShape_TestPoint_2, _memcpy: _memcpy, _emscripten_bind_b2PolygonShape_get_m_centroid_0: _emscripten_bind_b2PolygonShape_get_m_centroid_0, _emscripten_bind_b2ChainShape___destroy___0: _emscripten_bind_b2ChainShape___destroy___0, _emscripten_bind_b2GearJoint_SetUserData_1: _emscripten_bind_b2GearJoint_SetUserData_1, _emscripten_bind_b2Vec3_set_z_1: _emscripten_bind_b2Vec3_set_z_1, _emscripten_bind_b2PrismaticJointDef_set_enableLimit_1: _emscripten_bind_b2PrismaticJointDef_set_enableLimit_1, _emscripten_bind_b2DistanceJoint_GetFrequency_0: _emscripten_bind_b2DistanceJoint_GetFrequency_0, _emscripten_bind_b2Body_SetGravityScale_1: _emscripten_bind_b2Body_SetGravityScale_1, _emscripten_bind_b2FrictionJointDef_get_userData_0: _emscripten_bind_b2FrictionJointDef_get_userData_0, _emscripten_bind_b2AABB_GetPerimeter_0: _emscripten_bind_b2AABB_GetPerimeter_0, _emscripten_bind_b2PulleyJointDef_get_lengthA_0: _emscripten_bind_b2PulleyJointDef_get_lengthA_0, _emscripten_bind_b2Vec3_set_x_1: _emscripten_bind_b2Vec3_set_x_1, _emscripten_bind_b2PulleyJointDef_get_type_0: _emscripten_bind_b2PulleyJointDef_get_type_0, _emscripten_bind_JSDestructionListener_SayGoodbyeJoint_1: _emscripten_bind_JSDestructionListener_SayGoodbyeJoint_1, _emscripten_bind_b2Shape___destroy___0: _emscripten_bind_b2Shape___destroy___0, _strlen: _strlen, _emscripten_bind_b2Joint_GetReactionForce_1: _emscripten_bind_b2Joint_GetReactionForce_1, _emscripten_bind_b2FixtureDef_set_friction_1: _emscripten_bind_b2FixtureDef_set_friction_1, _emscripten_bind_b2ContactID___destroy___0: _emscripten_bind_b2ContactID___destroy___0, _emscripten_bind_b2EdgeShape_get_m_hasVertex0_0: _emscripten_bind_b2EdgeShape_get_m_hasVertex0_0, _emscripten_bind_JSRayCastCallback_ReportFixture_4: _emscripten_bind_JSRayCastCallback_ReportFixture_4, _emscripten_bind_b2Profile_set_solveVelocity_1: _emscripten_bind_b2Profile_set_solveVelocity_1, _emscripten_bind_b2PrismaticJoint_GetAnchorB_0: _emscripten_bind_b2PrismaticJoint_GetAnchorB_0, _emscripten_bind_b2WeldJointDef_b2WeldJointDef_0: _emscripten_bind_b2WeldJointDef_b2WeldJointDef_0, _emscripten_enum_b2BodyType_b2_staticBody: _emscripten_enum_b2BodyType_b2_staticBody, _emscripten_bind_b2RevoluteJointDef_set_upperAngle_1: _emscripten_bind_b2RevoluteJointDef_set_upperAngle_1, _emscripten_bind_b2RevoluteJointDef_get_type_0: _emscripten_bind_b2RevoluteJointDef_get_type_0, _emscripten_bind_b2GearJointDef_get_type_0: _emscripten_bind_b2GearJointDef_get_type_0, _emscripten_bind_b2ChainShape_GetType_0: _emscripten_bind_b2ChainShape_GetType_0, _emscripten_bind_b2RayCastInput_get_maxFraction_0: _emscripten_bind_b2RayCastInput_get_maxFraction_0, _emscripten_bind_b2GearJoint_GetBodyA_0: _emscripten_bind_b2GearJoint_GetBodyA_0, _emscripten_bind_b2Body_GetLocalVector_1: _emscripten_bind_b2Body_GetLocalVector_1, _emscripten_bind_b2PrismaticJoint_EnableLimit_1: _emscripten_bind_b2PrismaticJoint_EnableLimit_1, _emscripten_bind_b2Shape_get_m_radius_0: _emscripten_bind_b2Shape_get_m_radius_0, _emscripten_bind_b2BodyDef_set_angularVelocity_1: _emscripten_bind_b2BodyDef_set_angularVelocity_1, _emscripten_bind_b2Body_SetLinearDamping_1: _emscripten_bind_b2Body_SetLinearDamping_1, _emscripten_bind_b2WheelJoint_GetBodyB_0: _emscripten_bind_b2WheelJoint_GetBodyB_0, _emscripten_bind_b2GearJointDef_get_joint2_0: _emscripten_bind_b2GearJointDef_get_joint2_0, _emscripten_bind_b2PrismaticJoint_IsActive_0: _emscripten_bind_b2PrismaticJoint_IsActive_0, _emscripten_enum_b2JointType_e_weldJoint: _emscripten_enum_b2JointType_e_weldJoint, _emscripten_bind_b2World_SetContinuousPhysics_1: _emscripten_bind_b2World_SetContinuousPhysics_1, _emscripten_bind_b2MouseJointDef_get_target_0: _emscripten_bind_b2MouseJointDef_get_target_0, _emscripten_bind_b2Manifold_b2Manifold_0: _emscripten_bind_b2Manifold_b2Manifold_0, _emscripten_bind_b2PulleyJointDef_set_userData_1: _emscripten_bind_b2PulleyJointDef_set_userData_1, _emscripten_bind_b2FrictionJointDef_set_maxForce_1: _emscripten_bind_b2FrictionJointDef_set_maxForce_1, _emscripten_bind_b2DistanceJointDef_b2DistanceJointDef_0: _emscripten_bind_b2DistanceJointDef_b2DistanceJointDef_0, _emscripten_bind_b2PolygonShape_set_m_centroid_1: _emscripten_bind_b2PolygonShape_set_m_centroid_1, _emscripten_bind_b2Mat33_GetInverse22_1: _emscripten_bind_b2Mat33_GetInverse22_1, _emscripten_bind_b2PolygonShape_SetAsBox_4: _emscripten_bind_b2PolygonShape_SetAsBox_4, _emscripten_bind_b2Params_getTestOut_0: _emscripten_bind_b2Params_getTestOut_0, _emscripten_bind_b2EdgeShape_get_m_vertex2_0: _emscripten_bind_b2EdgeShape_get_m_vertex2_0, _emscripten_bind_b2WheelJoint_GetReactionTorque_1: _emscripten_bind_b2WheelJoint_GetReactionTorque_1, _emscripten_bind_b2RevoluteJointDef_b2RevoluteJointDef_0: _emscripten_bind_b2RevoluteJointDef_b2RevoluteJointDef_0, _emscripten_bind_b2ContactFeature_set_typeA_1: _emscripten_bind_b2ContactFeature_set_typeA_1, _emscripten_bind_b2Fixture_Dump_1: _emscripten_bind_b2Fixture_Dump_1, _emscripten_bind_b2World_GetJointList_0: _emscripten_bind_b2World_GetJointList_0, _emscripten_bind_b2Manifold_set_localPoint_1: _emscripten_bind_b2Manifold_set_localPoint_1, _emscripten_bind_b2DistanceJoint_SetUserData_1: _emscripten_bind_b2DistanceJoint_SetUserData_1, _emscripten_bind_b2BodyDef_set_bullet_1: _emscripten_bind_b2BodyDef_set_bullet_1, _emscripten_bind_b2RayCastOutput___destroy___0: _emscripten_bind_b2RayCastOutput___destroy___0, ___cxa_can_catch: ___cxa_can_catch, _emscripten_bind_b2WheelJoint_GetNext_0: _emscripten_bind_b2WheelJoint_GetNext_0, _emscripten_bind_b2AABB_GetCenter_0: _emscripten_bind_b2AABB_GetCenter_0, _emscripten_bind_b2Filter_set_groupIndex_1: _emscripten_bind_b2Filter_set_groupIndex_1, _emscripten_bind_b2JointDef_b2JointDef_0: _emscripten_bind_b2JointDef_b2JointDef_0, _emscripten_bind_b2CircleShape_b2CircleShape_0: _emscripten_bind_b2CircleShape_b2CircleShape_0, _emscripten_bind_b2GearJointDef_b2GearJointDef_0: _emscripten_bind_b2GearJointDef_b2GearJointDef_0, _emscripten_bind_b2JointDef_get_bodyB_0: _emscripten_bind_b2JointDef_get_bodyB_0, _emscripten_bind_b2DistanceJoint_GetReactionForce_1: _emscripten_bind_b2DistanceJoint_GetReactionForce_1, _emscripten_bind_b2PrismaticJoint_GetJointSpeed_0: _emscripten_bind_b2PrismaticJoint_GetJointSpeed_0, _emscripten_bind_b2PulleyJointDef_get_groundAnchorB_0: _emscripten_bind_b2PulleyJointDef_get_groundAnchorB_0, _emscripten_bind_b2Joint_GetAnchorA_0: _emscripten_bind_b2Joint_GetAnchorA_0, _emscripten_bind_b2Contact_GetRestitution_0: _emscripten_bind_b2Contact_GetRestitution_0, _emscripten_bind_b2ContactEdge_get_contact_0: _emscripten_bind_b2ContactEdge_get_contact_0, _emscripten_bind_b2RevoluteJointDef_get_userData_0: _emscripten_bind_b2RevoluteJointDef_get_userData_0, _emscripten_bind_b2Fixture_GetAABB_1: _emscripten_bind_b2Fixture_GetAABB_1, _emscripten_bind_b2DistanceJointDef_Initialize_4: _emscripten_bind_b2DistanceJointDef_Initialize_4, _emscripten_bind_b2PrismaticJointDef_set_collideConnected_1: _emscripten_bind_b2PrismaticJointDef_set_collideConnected_1, _emscripten_bind_b2PrismaticJointDef_set_localAxisA_1: _emscripten_bind_b2PrismaticJointDef_set_localAxisA_1, _emscripten_bind_b2GearJointDef_get_bodyB_0: _emscripten_bind_b2GearJointDef_get_bodyB_0, _emscripten_bind_b2WheelJointDef_get_bodyB_0: _emscripten_bind_b2WheelJointDef_get_bodyB_0, _emscripten_bind_b2WeldJoint_GetLocalAnchorB_0: _emscripten_bind_b2WeldJoint_GetLocalAnchorB_0, _emscripten_bind_b2RevoluteJointDef_set_localAnchorB_1: _emscripten_bind_b2RevoluteJointDef_set_localAnchorB_1, _emscripten_bind_b2Body_DestroyFixture_1: _emscripten_bind_b2Body_DestroyFixture_1, _emscripten_bind_b2Profile_set_broadphase_1: _emscripten_bind_b2Profile_set_broadphase_1, _emscripten_bind_b2WheelJointDef_get_localAnchorB_0: _emscripten_bind_b2WheelJointDef_get_localAnchorB_0, _emscripten_bind_b2ContactImpulse_get_count_0: _emscripten_bind_b2ContactImpulse_get_count_0, _emscripten_bind_b2World_GetJointCount_0: _emscripten_bind_b2World_GetJointCount_0, _emscripten_bind_b2WheelJoint_GetMotorSpeed_0: _emscripten_bind_b2WheelJoint_GetMotorSpeed_0, _emscripten_bind_b2Body_GetAngularDamping_0: _emscripten_bind_b2Body_GetAngularDamping_0, _emscripten_bind_b2WheelJointDef_get_dampingRatio_0: _emscripten_bind_b2WheelJointDef_get_dampingRatio_0, _emscripten_bind_b2RayCastOutput_get_fraction_0: _emscripten_bind_b2RayCastOutput_get_fraction_0, _emscripten_enum_b2ManifoldType_e_circles: _emscripten_enum_b2ManifoldType_e_circles, _emscripten_bind_b2GearJoint_SetRatio_1: _emscripten_bind_b2GearJoint_SetRatio_1, _emscripten_bind_JSDraw_DrawPolygon_3: _emscripten_bind_JSDraw_DrawPolygon_3, _emscripten_bind_b2Filter___destroy___0: _emscripten_bind_b2Filter___destroy___0, _emscripten_bind_b2JointEdge_set_next_1: _emscripten_bind_b2JointEdge_set_next_1, ___cxa_is_pointer_type: ___cxa_is_pointer_type, _emscripten_bind_b2BodyDef_get_fixedRotation_0: _emscripten_bind_b2BodyDef_get_fixedRotation_0, _emscripten_bind_b2PrismaticJointDef_set_motorSpeed_1: _emscripten_bind_b2PrismaticJointDef_set_motorSpeed_1, _emscripten_bind_b2ChainShape_SetPrevVertex_1: _emscripten_bind_b2ChainShape_SetPrevVertex_1, _emscripten_bind_b2Filter_get_categoryBits_0: _emscripten_bind_b2Filter_get_categoryBits_0, _emscripten_bind_b2MouseJoint_GetReactionTorque_1: _emscripten_bind_b2MouseJoint_GetReactionTorque_1, _emscripten_bind_b2MouseJoint_GetUserData_0: _emscripten_bind_b2MouseJoint_GetUserData_0, _emscripten_bind_b2Params_setFrame10_1: _emscripten_bind_b2Params_setFrame10_1, _emscripten_bind_b2WheelJoint_GetUserData_0: _emscripten_bind_b2WheelJoint_GetUserData_0, _emscripten_bind_b2Vec3_op_sub_1: _emscripten_bind_b2Vec3_op_sub_1, _emscripten_bind_b2BodyDef_get_gravityScale_0: _emscripten_bind_b2BodyDef_get_gravityScale_0, _emscripten_bind_b2Shape_GetType_0: _emscripten_bind_b2Shape_GetType_0, _emscripten_bind_b2AABB_IsValid_0: _emscripten_bind_b2AABB_IsValid_0, _emscripten_bind_b2WheelJoint_GetBodyA_0: _emscripten_bind_b2WheelJoint_GetBodyA_0, _emscripten_bind_JSDraw_DrawTransform_1: _emscripten_bind_JSDraw_DrawTransform_1, _emscripten_bind_b2PulleyJoint_GetLengthA_0: _emscripten_bind_b2PulleyJoint_GetLengthA_0, _emscripten_bind_b2DistanceJointDef_get_frequencyHz_0: _emscripten_bind_b2DistanceJointDef_get_frequencyHz_0, _emscripten_bind_b2RevoluteJoint_SetMotorSpeed_1: _emscripten_bind_b2RevoluteJoint_SetMotorSpeed_1, _emscripten_bind_b2World___destroy___0: _emscripten_bind_b2World___destroy___0, _emscripten_bind_b2ChainShape_get_m_hasNextVertex_0: _emscripten_bind_b2ChainShape_get_m_hasNextVertex_0, _emscripten_bind_b2ChainShape_SetNextVertex_1: _emscripten_bind_b2ChainShape_SetNextVertex_1, _emscripten_bind_b2Body_SetType_1: _emscripten_bind_b2Body_SetType_1, _emscripten_bind_b2Body_GetMass_0: _emscripten_bind_b2Body_GetMass_0, _emscripten_bind_b2Rot_b2Rot_0: _emscripten_bind_b2Rot_b2Rot_0, _emscripten_bind_b2Rot_b2Rot_1: _emscripten_bind_b2Rot_b2Rot_1, _emscripten_enum_b2JointType_e_distanceJoint: _emscripten_enum_b2JointType_e_distanceJoint, _emscripten_bind_b2PulleyJoint___destroy___0: _emscripten_bind_b2PulleyJoint___destroy___0, _emscripten_bind_b2PrismaticJoint_GetLocalAnchorB_0: _emscripten_bind_b2PrismaticJoint_GetLocalAnchorB_0, _emscripten_bind_b2MouseJoint_GetType_0: _emscripten_bind_b2MouseJoint_GetType_0, _memset: _memset, _emscripten_bind_JSQueryCallback___destroy___0: _emscripten_bind_JSQueryCallback___destroy___0, _emscripten_bind_b2RevoluteJointDef_set_lowerAngle_1: _emscripten_bind_b2RevoluteJointDef_set_lowerAngle_1, _emscripten_bind_b2Params_getFrame10_0: _emscripten_bind_b2Params_getFrame10_0, _emscripten_bind_b2JointEdge___destroy___0: _emscripten_bind_b2JointEdge___destroy___0, _emscripten_bind_b2PulleyJoint_GetRatio_0: _emscripten_bind_b2PulleyJoint_GetRatio_0, _emscripten_bind_JSContactListener_BeginContact_1: _emscripten_bind_JSContactListener_BeginContact_1, _emscripten_bind_b2JointEdge_get_next_0: _emscripten_bind_b2JointEdge_get_next_0, _emscripten_bind_b2RayCastInput_set_maxFraction_1: _emscripten_bind_b2RayCastInput_set_maxFraction_1, _emscripten_bind_b2WheelJointDef_get_bodyA_0: _emscripten_bind_b2WheelJointDef_get_bodyA_0, _emscripten_bind_b2MouseJoint_GetBodyA_0: _emscripten_bind_b2MouseJoint_GetBodyA_0, _emscripten_bind_b2Profile_set_collide_1: _emscripten_bind_b2Profile_set_collide_1, _emscripten_bind_b2AABB_b2AABB_0: _emscripten_bind_b2AABB_b2AABB_0, _emscripten_bind_b2Fixture_Refilter_0: _emscripten_bind_b2Fixture_Refilter_0, _emscripten_bind_b2World_CreateBody_1: _emscripten_bind_b2World_CreateBody_1, _emscripten_bind_b2RopeJointDef_set_userData_1: _emscripten_bind_b2RopeJointDef_set_userData_1, _emscripten_bind_b2Fixture_IsSensor_0: _emscripten_bind_b2Fixture_IsSensor_0, _emscripten_bind_b2WeldJoint_GetType_0: _emscripten_bind_b2WeldJoint_GetType_0, _emscripten_bind_b2PrismaticJointDef_get_motorSpeed_0: _emscripten_bind_b2PrismaticJointDef_get_motorSpeed_0, _emscripten_bind_b2Rot___destroy___0: _emscripten_bind_b2Rot___destroy___0, _emscripten_bind_b2Filter_get_maskBits_0: _emscripten_bind_b2Filter_get_maskBits_0, _emscripten_bind_b2Body_GetFixtureList_0: _emscripten_bind_b2Body_GetFixtureList_0, _emscripten_bind_b2RevoluteJointDef_get_enableMotor_0: _emscripten_bind_b2RevoluteJointDef_get_enableMotor_0, _emscripten_bind_b2MouseJointDef_set_dampingRatio_1: _emscripten_bind_b2MouseJointDef_set_dampingRatio_1, _emscripten_bind_JSRayCastCallback___destroy___0: _emscripten_bind_JSRayCastCallback___destroy___0, _emscripten_bind_b2ContactListener___destroy___0: _emscripten_bind_b2ContactListener___destroy___0, _emscripten_bind_b2PrismaticJointDef_set_localAnchorB_1: _emscripten_bind_b2PrismaticJointDef_set_localAnchorB_1, _emscripten_enum_b2DrawFlag_e_pairBit: _emscripten_enum_b2DrawFlag_e_pairBit, _emscripten_bind_b2FrictionJoint___destroy___0: _emscripten_bind_b2FrictionJoint___destroy___0, _emscripten_bind_b2WeldJoint_Dump_0: _emscripten_bind_b2WeldJoint_Dump_0, _emscripten_bind_b2WheelJointDef_get_type_0: _emscripten_bind_b2WheelJointDef_get_type_0, _emscripten_bind_b2MouseJoint_GetFrequency_0: _emscripten_bind_b2MouseJoint_GetFrequency_0, _emscripten_bind_b2FrictionJoint_GetLocalAnchorA_0: _emscripten_bind_b2FrictionJoint_GetLocalAnchorA_0, _emscripten_bind_b2WeldJointDef_get_localAnchorB_0: _emscripten_bind_b2WeldJointDef_get_localAnchorB_0, _emscripten_bind_b2PrismaticJointDef_get_bodyA_0: _emscripten_bind_b2PrismaticJointDef_get_bodyA_0, _emscripten_bind_b2Vec2_IsValid_0: _emscripten_bind_b2Vec2_IsValid_0, _emscripten_bind_b2World_SetGravity_1: _emscripten_bind_b2World_SetGravity_1, _emscripten_bind_b2World_GetWarmStarting_0: _emscripten_bind_b2World_GetWarmStarting_0, _emscripten_bind_b2RevoluteJointDef_set_enableLimit_1: _emscripten_bind_b2RevoluteJointDef_set_enableLimit_1, _emscripten_bind_b2Mat22_Solve_1: _emscripten_bind_b2Mat22_Solve_1, _emscripten_bind_b2World_GetProfile_0: _emscripten_bind_b2World_GetProfile_0, _emscripten_bind_b2RopeJoint_GetNext_0: _emscripten_bind_b2RopeJoint_GetNext_0, _emscripten_bind_b2Filter_b2Filter_0: _emscripten_bind_b2Filter_b2Filter_0, _emscripten_bind_b2PolygonShape_GetChildCount_0: _emscripten_bind_b2PolygonShape_GetChildCount_0, _emscripten_bind_b2GearJointDef_get_ratio_0: _emscripten_bind_b2GearJointDef_get_ratio_0, _emscripten_bind_b2Mat33_Solve33_1: _emscripten_bind_b2Mat33_Solve33_1, _emscripten_bind_b2RevoluteJoint_SetMaxMotorTorque_1: _emscripten_bind_b2RevoluteJoint_SetMaxMotorTorque_1, _emscripten_bind_b2WheelJoint_GetCollideConnected_0: _emscripten_bind_b2WheelJoint_GetCollideConnected_0, _emscripten_bind_b2WheelJoint_SetSpringDampingRatio_1: _emscripten_bind_b2WheelJoint_SetSpringDampingRatio_1, _emscripten_bind_b2RevoluteJointDef___destroy___0: _emscripten_bind_b2RevoluteJointDef___destroy___0, _emscripten_bind_b2PolygonShape_set_m_vertexCount_1: _emscripten_bind_b2PolygonShape_set_m_vertexCount_1, _emscripten_bind_b2ContactFeature_get_typeB_0: _emscripten_bind_b2ContactFeature_get_typeB_0, _emscripten_bind_b2ContactID_get_key_0: _emscripten_bind_b2ContactID_get_key_0, _emscripten_bind_b2Rot_GetAngle_0: _emscripten_bind_b2Rot_GetAngle_0, _emscripten_bind_b2World_SetAllowSleeping_1: _emscripten_bind_b2World_SetAllowSleeping_1, _emscripten_enum_b2DrawFlag_e_centerOfMassBit: _emscripten_enum_b2DrawFlag_e_centerOfMassBit, _emscripten_bind_b2WheelJoint_SetUserData_1: _emscripten_bind_b2WheelJoint_SetUserData_1, _emscripten_bind_b2FrictionJoint_GetCollideConnected_0: _emscripten_bind_b2FrictionJoint_GetCollideConnected_0, _emscripten_bind_b2WeldJointDef___destroy___0: _emscripten_bind_b2WeldJointDef___destroy___0, _emscripten_bind_b2Mat22_get_ex_0: _emscripten_bind_b2Mat22_get_ex_0, _emscripten_bind_b2Fixture_GetDensity_0: _emscripten_bind_b2Fixture_GetDensity_0, _emscripten_bind_b2PolygonShape_get_m_type_0: _emscripten_bind_b2PolygonShape_get_m_type_0, _emscripten_bind_b2Vec2_Set_2: _emscripten_bind_b2Vec2_Set_2, _emscripten_bind_b2WeldJointDef_get_type_0: _emscripten_bind_b2WeldJointDef_get_type_0, _emscripten_bind_b2MouseJointDef_b2MouseJointDef_0: _emscripten_bind_b2MouseJointDef_b2MouseJointDef_0, _emscripten_bind_b2Rot_get_s_0: _emscripten_bind_b2Rot_get_s_0, _emscripten_bind_b2FrictionJoint_SetMaxTorque_1: _emscripten_bind_b2FrictionJoint_SetMaxTorque_1, _emscripten_bind_b2MouseJointDef_get_frequencyHz_0: _emscripten_bind_b2MouseJointDef_get_frequencyHz_0, _emscripten_bind_b2FrictionJoint_SetUserData_1: _emscripten_bind_b2FrictionJoint_SetUserData_1, _emscripten_bind_b2FixtureDef_set_userData_1: _emscripten_bind_b2FixtureDef_set_userData_1, _emscripten_bind_b2JointDef_get_userData_0: _emscripten_bind_b2JointDef_get_userData_0, _emscripten_bind_b2DistanceJointDef_get_collideConnected_0: _emscripten_bind_b2DistanceJointDef_get_collideConnected_0, _emscripten_bind_b2RevoluteJointDef_set_referenceAngle_1: _emscripten_bind_b2RevoluteJointDef_set_referenceAngle_1, _emscripten_bind_b2ContactFeature___destroy___0: _emscripten_bind_b2ContactFeature___destroy___0, _emscripten_bind_b2DistanceJointDef_set_bodyB_1: _emscripten_bind_b2DistanceJointDef_set_bodyB_1, _emscripten_bind_JSQueryCallback_JSQueryCallback_0: _emscripten_bind_JSQueryCallback_JSQueryCallback_0, _emscripten_bind_b2ChainShape_GetChildCount_0: _emscripten_bind_b2ChainShape_GetChildCount_0, _emscripten_bind_b2MassData_b2MassData_0: _emscripten_bind_b2MassData_b2MassData_0, _emscripten_bind_b2Vec3_set_y_1: _emscripten_bind_b2Vec3_set_y_1, _emscripten_bind_b2AABB_Combine_1: _emscripten_bind_b2AABB_Combine_1, _emscripten_bind_b2AABB_Combine_2: _emscripten_bind_b2AABB_Combine_2, _emscripten_bind_b2PrismaticJoint_GetBodyA_0: _emscripten_bind_b2PrismaticJoint_GetBodyA_0, _emscripten_bind_b2PrismaticJoint_GetMaxMotorForce_0: _emscripten_bind_b2PrismaticJoint_GetMaxMotorForce_0, _emscripten_bind_b2AABB___destroy___0: _emscripten_bind_b2AABB___destroy___0, _emscripten_bind_b2Body_IsSleepingAllowed_0: _emscripten_bind_b2Body_IsSleepingAllowed_0, _emscripten_bind_b2MouseJointDef_set_maxForce_1: _emscripten_bind_b2MouseJointDef_set_maxForce_1, _emscripten_bind_b2Profile_get_solve_0: _emscripten_bind_b2Profile_get_solve_0, _emscripten_bind_JSDestructionListener_SayGoodbyeFixture_1: _emscripten_bind_JSDestructionListener_SayGoodbyeFixture_1, _emscripten_bind_b2PolygonShape_GetVertexCount_0: _emscripten_bind_b2PolygonShape_GetVertexCount_0, _emscripten_bind_b2Rot_get_c_0: _emscripten_bind_b2Rot_get_c_0, _emscripten_bind_b2AABB_set_lowerBound_1: _emscripten_bind_b2AABB_set_lowerBound_1, _emscripten_bind_b2RevoluteJoint___destroy___0: _emscripten_bind_b2RevoluteJoint___destroy___0, _emscripten_bind_b2MouseJoint_SetMaxForce_1: _emscripten_bind_b2MouseJoint_SetMaxForce_1, _emscripten_bind_b2WheelJoint_IsMotorEnabled_0: _emscripten_bind_b2WheelJoint_IsMotorEnabled_0, _emscripten_bind_b2JointDef_set_userData_1: _emscripten_bind_b2JointDef_set_userData_1, _emscripten_bind_b2Body_GetLocalCenter_0: _emscripten_bind_b2Body_GetLocalCenter_0, _emscripten_bind_b2ManifoldPoint_get_tangentImpulse_0: _emscripten_bind_b2ManifoldPoint_get_tangentImpulse_0, _emscripten_bind_b2RevoluteJointDef_get_maxMotorTorque_0: _emscripten_bind_b2RevoluteJointDef_get_maxMotorTorque_0, _emscripten_bind_b2WeldJointDef_get_dampingRatio_0: _emscripten_bind_b2WeldJointDef_get_dampingRatio_0, _emscripten_bind_b2MouseJoint___destroy___0: _emscripten_bind_b2MouseJoint___destroy___0, _emscripten_bind_b2EdgeShape_b2EdgeShape_0: _emscripten_bind_b2EdgeShape_b2EdgeShape_0, _emscripten_bind_b2FrictionJoint_GetReactionForce_1: _emscripten_bind_b2FrictionJoint_GetReactionForce_1, _emscripten_bind_b2Params_getDebug_0: _emscripten_bind_b2Params_getDebug_0, _emscripten_bind_b2DistanceJointDef_set_type_1: _emscripten_bind_b2DistanceJointDef_set_type_1, _emscripten_bind_b2WeldJoint___destroy___0: _emscripten_bind_b2WeldJoint___destroy___0, _emscripten_bind_JSContactListener_PostSolve_2: _emscripten_bind_JSContactListener_PostSolve_2, _emscripten_bind_b2PulleyJoint_GetBodyA_0: _emscripten_bind_b2PulleyJoint_GetBodyA_0, _emscripten_bind_b2RopeJointDef_get_type_0: _emscripten_bind_b2RopeJointDef_get_type_0, _emscripten_bind_b2CircleShape_ComputeMass_2: _emscripten_bind_b2CircleShape_ComputeMass_2, _emscripten_bind_b2DistanceJointDef_get_localAnchorB_0: _emscripten_bind_b2DistanceJointDef_get_localAnchorB_0, _emscripten_bind_b2GearJointDef___destroy___0: _emscripten_bind_b2GearJointDef___destroy___0, _emscripten_bind_b2RevoluteJointDef_set_bodyA_1: _emscripten_bind_b2RevoluteJointDef_set_bodyA_1, _emscripten_enum_b2BodyType_b2_dynamicBody: _emscripten_enum_b2BodyType_b2_dynamicBody, _emscripten_bind_b2CircleShape_TestPoint_2: _emscripten_bind_b2CircleShape_TestPoint_2, _emscripten_bind_b2Body_GetLinearVelocityFromLocalPoint_1: _emscripten_bind_b2Body_GetLinearVelocityFromLocalPoint_1, _emscripten_bind_b2FrictionJointDef_set_bodyB_1: _emscripten_bind_b2FrictionJointDef_set_bodyB_1, _emscripten_bind_b2MouseJoint_GetAnchorB_0: _emscripten_bind_b2MouseJoint_GetAnchorB_0, _emscripten_bind_b2Manifold_get_localPoint_0: _emscripten_bind_b2Manifold_get_localPoint_0, _emscripten_bind_b2GearJoint_GetBodyB_0: _emscripten_bind_b2GearJoint_GetBodyB_0, _i64Add: _i64Add, _emscripten_bind_b2CircleShape___destroy___0: _emscripten_bind_b2CircleShape___destroy___0, _emscripten_bind_b2EdgeShape___destroy___0: _emscripten_bind_b2EdgeShape___destroy___0, _emscripten_bind_b2World_GetContactCount_0: _emscripten_bind_b2World_GetContactCount_0, _emscripten_bind_b2Contact_SetRestitution_1: _emscripten_bind_b2Contact_SetRestitution_1, _emscripten_bind_b2BodyDef_get_angularDamping_0: _emscripten_bind_b2BodyDef_get_angularDamping_0, _emscripten_bind_b2EdgeShape_get_m_vertex3_0: _emscripten_bind_b2EdgeShape_get_m_vertex3_0, _emscripten_bind_b2Fixture_SetUserData_1: _emscripten_bind_b2Fixture_SetUserData_1, _emscripten_bind_b2Transform_SetIdentity_0: _emscripten_bind_b2Transform_SetIdentity_0, _emscripten_bind_b2GearJointDef_set_joint1_1: _emscripten_bind_b2GearJointDef_set_joint1_1, _emscripten_bind_b2EdgeShape_set_m_vertex2_1: _emscripten_bind_b2EdgeShape_set_m_vertex2_1, _emscripten_bind_b2ContactEdge_get_next_0: _emscripten_bind_b2ContactEdge_get_next_0, _emscripten_bind_b2ContactFeature_set_indexB_1: _emscripten_bind_b2ContactFeature_set_indexB_1, _emscripten_bind_b2Body_GetLinearVelocityFromWorldPoint_1: _emscripten_bind_b2Body_GetLinearVelocityFromWorldPoint_1, _emscripten_bind_b2WeldJoint_GetCollideConnected_0: _emscripten_bind_b2WeldJoint_GetCollideConnected_0, _emscripten_bind_b2WeldJointDef_get_bodyA_0: _emscripten_bind_b2WeldJointDef_get_bodyA_0, _emscripten_bind_b2Mat22_set_ey_1: _emscripten_bind_b2Mat22_set_ey_1, _emscripten_bind_b2WheelJointDef_set_frequencyHz_1: _emscripten_bind_b2WheelJointDef_set_frequencyHz_1, _emscripten_bind_b2World_GetSubStepping_0: _emscripten_bind_b2World_GetSubStepping_0, _emscripten_bind_b2Rot_GetYAxis_0: _emscripten_bind_b2Rot_GetYAxis_0, _emscripten_bind_b2Contact_GetChildIndexB_0: _emscripten_bind_b2Contact_GetChildIndexB_0, _emscripten_bind_b2WheelJointDef_set_localAnchorB_1: _emscripten_bind_b2WheelJointDef_set_localAnchorB_1, _emscripten_bind_b2DistanceJoint___destroy___0: _emscripten_bind_b2DistanceJoint___destroy___0, _emscripten_bind_b2EdgeShape_GetType_0: _emscripten_bind_b2EdgeShape_GetType_0, _emscripten_bind_b2WheelJointDef_set_dampingRatio_1: _emscripten_bind_b2WheelJointDef_set_dampingRatio_1, _emscripten_bind_b2ManifoldPoint___destroy___0: _emscripten_bind_b2ManifoldPoint___destroy___0, _emscripten_enum_b2JointType_e_prismaticJoint: _emscripten_enum_b2JointType_e_prismaticJoint, _emscripten_bind_b2WeldJointDef_get_referenceAngle_0: _emscripten_bind_b2WeldJointDef_get_referenceAngle_0, _emscripten_bind_b2Vec2_Length_0: _emscripten_bind_b2Vec2_Length_0, _emscripten_bind_b2Vec2_SetZero_0: _emscripten_bind_b2Vec2_SetZero_0, _emscripten_bind_b2RopeJoint___destroy___0: _emscripten_bind_b2RopeJoint___destroy___0, _emscripten_bind_b2World_DestroyJoint_1: _emscripten_bind_b2World_DestroyJoint_1, _emscripten_bind_b2JointDef_set_bodyB_1: _emscripten_bind_b2JointDef_set_bodyB_1, _emscripten_bind_b2Mat22_Set_2: _emscripten_bind_b2Mat22_Set_2, _emscripten_bind_b2Body_GetType_0: _emscripten_bind_b2Body_GetType_0, _emscripten_bind_b2WeldJoint_GetAnchorB_0: _emscripten_bind_b2WeldJoint_GetAnchorB_0, _emscripten_bind_b2WeldJoint_GetNext_0: _emscripten_bind_b2WeldJoint_GetNext_0, _emscripten_bind_b2EdgeShape_ComputeAABB_3: _emscripten_bind_b2EdgeShape_ComputeAABB_3, _emscripten_bind_b2BodyDef_get_type_0: _emscripten_bind_b2BodyDef_get_type_0, _emscripten_bind_b2WheelJointDef_set_collideConnected_1: _emscripten_bind_b2WheelJointDef_set_collideConnected_1, _emscripten_bind_JSDestructionListener___destroy___0: _emscripten_bind_JSDestructionListener___destroy___0, _emscripten_bind_b2RopeJoint_GetLocalAnchorA_0: _emscripten_bind_b2RopeJoint_GetLocalAnchorA_0, _emscripten_bind_b2BodyDef_set_linearDamping_1: _emscripten_bind_b2BodyDef_set_linearDamping_1, _emscripten_bind_b2FrictionJoint_GetUserData_0: _emscripten_bind_b2FrictionJoint_GetUserData_0, _emscripten_bind_b2Contact_SetFriction_1: _emscripten_bind_b2Contact_SetFriction_1, _emscripten_bind_b2Manifold_set_localNormal_1: _emscripten_bind_b2Manifold_set_localNormal_1, _emscripten_bind_b2JointDef_get_bodyA_0: _emscripten_bind_b2JointDef_get_bodyA_0, _emscripten_bind_b2Body_GetLinearDamping_0: _emscripten_bind_b2Body_GetLinearDamping_0, _emscripten_bind_b2WeldJointDef_set_frequencyHz_1: _emscripten_bind_b2WeldJointDef_set_frequencyHz_1, _emscripten_bind_b2Body_ResetMassData_0: _emscripten_bind_b2Body_ResetMassData_0, _emscripten_bind_b2PrismaticJointDef_set_enableMotor_1: _emscripten_bind_b2PrismaticJointDef_set_enableMotor_1, _emscripten_bind_b2Vec2_Skew_0: _emscripten_bind_b2Vec2_Skew_0, _emscripten_bind_b2MouseJoint_GetDampingRatio_0: _emscripten_bind_b2MouseJoint_GetDampingRatio_0, _emscripten_bind_b2RevoluteJoint_GetAnchorA_0: _emscripten_bind_b2RevoluteJoint_GetAnchorA_0, _emscripten_bind_b2ChainShape_set_m_prevVertex_1: _emscripten_bind_b2ChainShape_set_m_prevVertex_1, _emscripten_bind_b2ChainShape_get_m_hasPrevVertex_0: _emscripten_bind_b2ChainShape_get_m_hasPrevVertex_0, _emscripten_bind_b2FrictionJoint_GetNext_0: _emscripten_bind_b2FrictionJoint_GetNext_0, _emscripten_bind_b2RopeJointDef_set_localAnchorB_1: _emscripten_bind_b2RopeJointDef_set_localAnchorB_1, _emscripten_bind_b2PrismaticJointDef_set_userData_1: _emscripten_bind_b2PrismaticJointDef_set_userData_1, _emscripten_bind_b2GearJointDef_set_userData_1: _emscripten_bind_b2GearJointDef_set_userData_1, _emscripten_bind_b2FrictionJointDef_set_type_1: _emscripten_bind_b2FrictionJointDef_set_type_1, _emscripten_bind_b2FrictionJointDef_Initialize_3: _emscripten_bind_b2FrictionJointDef_Initialize_3, _emscripten_bind_b2FrictionJointDef_get_collideConnected_0: _emscripten_bind_b2FrictionJointDef_get_collideConnected_0, _emscripten_bind_b2WeldJointDef_set_referenceAngle_1: _emscripten_bind_b2WeldJointDef_set_referenceAngle_1, _emscripten_bind_b2FrictionJoint_GetAnchorA_0: _emscripten_bind_b2FrictionJoint_GetAnchorA_0, _emscripten_bind_b2RopeJoint_GetType_0: _emscripten_bind_b2RopeJoint_GetType_0, _emscripten_bind_b2MassData_get_I_0: _emscripten_bind_b2MassData_get_I_0, _emscripten_bind_b2WheelJointDef_get_motorSpeed_0: _emscripten_bind_b2WheelJointDef_get_motorSpeed_0, _emscripten_bind_b2Filter_set_maskBits_1: _emscripten_bind_b2Filter_set_maskBits_1, _emscripten_bind_b2EdgeShape_set_m_radius_1: _emscripten_bind_b2EdgeShape_set_m_radius_1, _emscripten_bind_b2Mat22_b2Mat22_2: _emscripten_bind_b2Mat22_b2Mat22_2, _emscripten_bind_b2WheelJointDef_set_maxMotorTorque_1: _emscripten_bind_b2WheelJointDef_set_maxMotorTorque_1, _emscripten_bind_b2Mat22_b2Mat22_0: _emscripten_bind_b2Mat22_b2Mat22_0, _emscripten_bind_b2Mat22_b2Mat22_4: _emscripten_bind_b2Mat22_b2Mat22_4, _emscripten_bind_b2ChainShape_set_m_hasNextVertex_1: _emscripten_bind_b2ChainShape_set_m_hasNextVertex_1, _emscripten_bind_b2Mat22_GetInverse_0: _emscripten_bind_b2Mat22_GetInverse_0, _emscripten_bind_b2PrismaticJoint_EnableMotor_1: _emscripten_bind_b2PrismaticJoint_EnableMotor_1, _emscripten_bind_b2CircleShape_get_m_type_0: _emscripten_bind_b2CircleShape_get_m_type_0, _emscripten_bind_b2DistanceJoint_GetLocalAnchorA_0: _emscripten_bind_b2DistanceJoint_GetLocalAnchorA_0, _emscripten_bind_b2ContactEdge_b2ContactEdge_0: _emscripten_bind_b2ContactEdge_b2ContactEdge_0, _emscripten_bind_b2BodyDef___destroy___0: _emscripten_bind_b2BodyDef___destroy___0, _emscripten_bind_b2FrictionJointDef_set_maxTorque_1: _emscripten_bind_b2FrictionJointDef_set_maxTorque_1, _emscripten_bind_b2PolygonShape_GetVertex_1: _emscripten_bind_b2PolygonShape_GetVertex_1, _emscripten_bind_b2PulleyJointDef_set_groundAnchorB_1: _emscripten_bind_b2PulleyJointDef_set_groundAnchorB_1, _emscripten_bind_b2RevoluteJointDef_get_collideConnected_0: _emscripten_bind_b2RevoluteJointDef_get_collideConnected_0, _emscripten_bind_b2DistanceJointDef_set_bodyA_1: _emscripten_bind_b2DistanceJointDef_set_bodyA_1, _emscripten_bind_b2RevoluteJoint_SetLimits_2: _emscripten_bind_b2RevoluteJoint_SetLimits_2, _emscripten_bind_b2WeldJointDef_set_type_1: _emscripten_bind_b2WeldJointDef_set_type_1, _emscripten_bind_b2FixtureDef_set_density_1: _emscripten_bind_b2FixtureDef_set_density_1, _emscripten_bind_b2Shape_set_m_type_1: _emscripten_bind_b2Shape_set_m_type_1, _emscripten_bind_b2WheelJoint_GetJointTranslation_0: _emscripten_bind_b2WheelJoint_GetJointTranslation_0, _emscripten_bind_b2WheelJoint_GetMotorTorque_1: _emscripten_bind_b2WheelJoint_GetMotorTorque_1, _emscripten_bind_b2RopeJoint_SetUserData_1: _emscripten_bind_b2RopeJoint_SetUserData_1, _emscripten_bind_b2RopeJointDef___destroy___0: _emscripten_bind_b2RopeJointDef___destroy___0, _emscripten_bind_b2WheelJoint_IsActive_0: _emscripten_bind_b2WheelJoint_IsActive_0, _emscripten_bind_b2PrismaticJointDef_get_enableMotor_0: _emscripten_bind_b2PrismaticJointDef_get_enableMotor_0, _emscripten_bind_b2FrictionJointDef___destroy___0: _emscripten_bind_b2FrictionJointDef___destroy___0, _emscripten_bind_b2WeldJoint_GetReactionForce_1: _emscripten_bind_b2WeldJoint_GetReactionForce_1, _emscripten_bind_b2ChainShape_RayCast_4: _emscripten_bind_b2ChainShape_RayCast_4, _emscripten_bind_b2PrismaticJoint_SetMotorSpeed_1: _emscripten_bind_b2PrismaticJoint_SetMotorSpeed_1, _emscripten_bind_b2ContactID_get_cf_0: _emscripten_bind_b2ContactID_get_cf_0, _emscripten_bind_b2MouseJointDef_set_frequencyHz_1: _emscripten_bind_b2MouseJointDef_set_frequencyHz_1, _emscripten_bind_b2ChainShape_get_m_radius_0: _emscripten_bind_b2ChainShape_get_m_radius_0, _emscripten_bind_b2Body_GetLinearVelocity_0: _emscripten_bind_b2Body_GetLinearVelocity_0, _emscripten_bind_b2ChainShape_set_m_radius_1: _emscripten_bind_b2ChainShape_set_m_radius_1, _emscripten_bind_b2DistanceJoint_GetReactionTorque_1: _emscripten_bind_b2DistanceJoint_GetReactionTorque_1, _emscripten_bind_b2World_Dump_0: _emscripten_bind_b2World_Dump_0, _emscripten_bind_b2RevoluteJoint_GetLocalAnchorB_0: _emscripten_bind_b2RevoluteJoint_GetLocalAnchorB_0, _emscripten_bind_b2Profile_set_solve_1: _emscripten_bind_b2Profile_set_solve_1, _emscripten_bind_b2WeldJoint_GetDampingRatio_0: _emscripten_bind_b2WeldJoint_GetDampingRatio_0, _emscripten_bind_b2Color_get_b_0: _emscripten_bind_b2Color_get_b_0, _emscripten_bind_b2RopeJoint_GetReactionForce_1: _emscripten_bind_b2RopeJoint_GetReactionForce_1, _emscripten_bind_b2PrismaticJointDef_get_enableLimit_0: _emscripten_bind_b2PrismaticJointDef_get_enableLimit_0, _emscripten_bind_b2ManifoldPoint_set_localPoint_1: _emscripten_bind_b2ManifoldPoint_set_localPoint_1, _emscripten_bind_b2Fixture_GetFilterData_0: _emscripten_bind_b2Fixture_GetFilterData_0, _emscripten_bind_b2Color_get_r_0: _emscripten_bind_b2Color_get_r_0, _emscripten_bind_b2Shape_ComputeMass_2: _emscripten_bind_b2Shape_ComputeMass_2, _emscripten_bind_b2Joint_GetNext_0: _emscripten_bind_b2Joint_GetNext_0, _emscripten_bind_b2PrismaticJointDef_get_collideConnected_0: _emscripten_bind_b2PrismaticJointDef_get_collideConnected_0, _emscripten_bind_b2World_RayCast_3: _emscripten_bind_b2World_RayCast_3, _emscripten_bind_b2MassData_set_I_1: _emscripten_bind_b2MassData_set_I_1, _emscripten_bind_b2MassData___destroy___0: _emscripten_bind_b2MassData___destroy___0, _emscripten_bind_b2Profile_get_collide_0: _emscripten_bind_b2Profile_get_collide_0, _emscripten_bind_b2Color_b2Color_3: _emscripten_bind_b2Color_b2Color_3, _emscripten_bind_b2Color_b2Color_0: _emscripten_bind_b2Color_b2Color_0, _emscripten_bind_b2CircleShape_ComputeAABB_3: _emscripten_bind_b2CircleShape_ComputeAABB_3, _emscripten_bind_b2WeldJointDef_Initialize_3: _emscripten_bind_b2WeldJointDef_Initialize_3, _emscripten_bind_b2RevoluteJoint_GetMotorTorque_1: _emscripten_bind_b2RevoluteJoint_GetMotorTorque_1, _emscripten_enum_b2JointType_e_gearJoint: _emscripten_enum_b2JointType_e_gearJoint, _emscripten_bind_b2FixtureDef_get_friction_0: _emscripten_bind_b2FixtureDef_get_friction_0, _emscripten_bind_b2PrismaticJointDef_set_localAnchorA_1: _emscripten_bind_b2PrismaticJointDef_set_localAnchorA_1, _emscripten_bind_b2Contact_GetManifold_0: _emscripten_bind_b2Contact_GetManifold_0, _emscripten_bind_b2MouseJoint_GetTarget_0: _emscripten_bind_b2MouseJoint_GetTarget_0, _emscripten_bind_b2WeldJointDef_get_localAnchorA_0: _emscripten_bind_b2WeldJointDef_get_localAnchorA_0, _emscripten_bind_b2MouseJoint_SetUserData_1: _emscripten_bind_b2MouseJoint_SetUserData_1, _emscripten_bind_b2JointEdge_get_other_0: _emscripten_bind_b2JointEdge_get_other_0, _emscripten_bind_b2ChainShape_GetChildEdge_2: _emscripten_bind_b2ChainShape_GetChildEdge_2, _emscripten_bind_b2GearJointDef_set_collideConnected_1: _emscripten_bind_b2GearJointDef_set_collideConnected_1, _emscripten_bind_b2PrismaticJoint_GetUpperLimit_0: _emscripten_bind_b2PrismaticJoint_GetUpperLimit_0, _emscripten_bind_b2DistanceJoint_GetCollideConnected_0: _emscripten_bind_b2DistanceJoint_GetCollideConnected_0, _emscripten_bind_b2MouseJoint_GetMaxForce_0: _emscripten_bind_b2MouseJoint_GetMaxForce_0, _emscripten_bind_b2PrismaticJointDef_set_bodyA_1: _emscripten_bind_b2PrismaticJointDef_set_bodyA_1, _emscripten_bind_b2Mat22_SetZero_0: _emscripten_bind_b2Mat22_SetZero_0, _emscripten_bind_b2Contact_GetChildIndexA_0: _emscripten_bind_b2Contact_GetChildIndexA_0, _emscripten_bind_b2Color_get_g_0: _emscripten_bind_b2Color_get_g_0, _emscripten_bind_b2Body_GetTransform_0: _emscripten_bind_b2Body_GetTransform_0, _emscripten_bind_b2ContactEdge___destroy___0: _emscripten_bind_b2ContactEdge___destroy___0, _emscripten_bind_b2Mat33_set_ex_1: _emscripten_bind_b2Mat33_set_ex_1, _emscripten_bind_b2AABB_GetExtents_0: _emscripten_bind_b2AABB_GetExtents_0, _emscripten_bind_b2RevoluteJointDef_get_bodyA_0: _emscripten_bind_b2RevoluteJointDef_get_bodyA_0, _emscripten_bind_b2PrismaticJoint_GetBodyB_0: _emscripten_bind_b2PrismaticJoint_GetBodyB_0, _emscripten_bind_b2WheelJointDef_set_bodyA_1: _emscripten_bind_b2WheelJointDef_set_bodyA_1, _emscripten_bind_b2DistanceJointDef_set_collideConnected_1: _emscripten_bind_b2DistanceJointDef_set_collideConnected_1, _emscripten_bind_b2BodyDef_get_angle_0: _emscripten_bind_b2BodyDef_get_angle_0, _emscripten_bind_b2PulleyJoint_GetReactionTorque_1: _emscripten_bind_b2PulleyJoint_GetReactionTorque_1, _emscripten_bind_b2FixtureDef_get_shape_0: _emscripten_bind_b2FixtureDef_get_shape_0, _emscripten_bind_b2WeldJointDef_get_userData_0: _emscripten_bind_b2WeldJointDef_get_userData_0, _emscripten_bind_b2WheelJointDef_get_enableMotor_0: _emscripten_bind_b2WheelJointDef_get_enableMotor_0, _emscripten_bind_b2Mat33_b2Mat33_3: _emscripten_bind_b2Mat33_b2Mat33_3, _emscripten_bind_b2Vec3_get_y_0: _emscripten_bind_b2Vec3_get_y_0, _emscripten_bind_b2JointDef_get_type_0: _emscripten_bind_b2JointDef_get_type_0, _emscripten_bind_JSQueryCallback_ReportFixture_1: _emscripten_bind_JSQueryCallback_ReportFixture_1, _emscripten_bind_b2Fixture_TestPoint_1: _emscripten_bind_b2Fixture_TestPoint_1, _emscripten_bind_b2RevoluteJoint_GetCollideConnected_0: _emscripten_bind_b2RevoluteJoint_GetCollideConnected_0, _emscripten_bind_JSDraw_JSDraw_0: _emscripten_bind_JSDraw_JSDraw_0, _emscripten_bind_b2MouseJoint_GetAnchorA_0: _emscripten_bind_b2MouseJoint_GetAnchorA_0, _emscripten_bind_b2Transform_get_p_0: _emscripten_bind_b2Transform_get_p_0, _emscripten_bind_b2FrictionJoint_SetMaxForce_1: _emscripten_bind_b2FrictionJoint_SetMaxForce_1, _emscripten_bind_b2EdgeShape_ComputeMass_2: _emscripten_bind_b2EdgeShape_ComputeMass_2, _emscripten_bind_VoidPtr___destroy___0: _emscripten_bind_VoidPtr___destroy___0, _emscripten_bind_b2DistanceJointDef___destroy___0: _emscripten_bind_b2DistanceJointDef___destroy___0, _emscripten_bind_b2RopeJointDef_set_bodyA_1: _emscripten_bind_b2RopeJointDef_set_bodyA_1, _emscripten_bind_b2JointDef_set_type_1: _emscripten_bind_b2JointDef_set_type_1, _emscripten_bind_b2Draw_AppendFlags_1: _emscripten_bind_b2Draw_AppendFlags_1, _emscripten_bind_b2Body_SetActive_1: _emscripten_bind_b2Body_SetActive_1, _emscripten_bind_b2World_GetContactList_0: _emscripten_bind_b2World_GetContactList_0, _emscripten_bind_b2Mat33_set_ez_1: _emscripten_bind_b2Mat33_set_ez_1, _emscripten_bind_b2JointEdge_b2JointEdge_0: _emscripten_bind_b2JointEdge_b2JointEdge_0, _emscripten_bind_b2FrictionJointDef_get_bodyA_0: _emscripten_bind_b2FrictionJointDef_get_bodyA_0, _emscripten_bind_b2Body_ApplyForce_2: _emscripten_bind_b2Body_ApplyForce_2, _emscripten_bind_b2WeldJoint_SetUserData_1: _emscripten_bind_b2WeldJoint_SetUserData_1, _emscripten_bind_b2RevoluteJoint_GetReactionForce_1: _emscripten_bind_b2RevoluteJoint_GetReactionForce_1, _emscripten_bind_b2PulleyJointDef_set_collideConnected_1: _emscripten_bind_b2PulleyJointDef_set_collideConnected_1, _emscripten_bind_b2RopeJoint_GetCollideConnected_0: _emscripten_bind_b2RopeJoint_GetCollideConnected_0, _emscripten_bind_b2GearJointDef_set_joint2_1: _emscripten_bind_b2GearJointDef_set_joint2_1, _emscripten_bind_b2BodyDef_set_userData_1: _emscripten_bind_b2BodyDef_set_userData_1, _emscripten_bind_b2GearJoint_GetAnchorB_0: _emscripten_bind_b2GearJoint_GetAnchorB_0, _emscripten_bind_b2RopeJoint_IsActive_0: _emscripten_bind_b2RopeJoint_IsActive_0, _emscripten_bind_b2Fixture_GetFriction_0: _emscripten_bind_b2Fixture_GetFriction_0, _emscripten_bind_b2Body_GetAngle_0: _emscripten_bind_b2Body_GetAngle_0, _emscripten_enum_b2DrawFlag_e_aabbBit: _emscripten_enum_b2DrawFlag_e_aabbBit, _emscripten_bind_b2RevoluteJointDef_Initialize_3: _emscripten_bind_b2RevoluteJointDef_Initialize_3, _emscripten_bind_b2DistanceJointDef_set_localAnchorA_1: _emscripten_bind_b2DistanceJointDef_set_localAnchorA_1, _emscripten_bind_b2EdgeShape_Set_2: _emscripten_bind_b2EdgeShape_Set_2, _emscripten_bind_b2Mat33_SetZero_0: _emscripten_bind_b2Mat33_SetZero_0, _emscripten_bind_b2WheelJointDef_b2WheelJointDef_0: _emscripten_bind_b2WheelJointDef_b2WheelJointDef_0, _emscripten_bind_b2PrismaticJointDef_get_localAxisA_0: _emscripten_bind_b2PrismaticJointDef_get_localAxisA_0, _emscripten_bind_b2Mat22_get_ey_0: _emscripten_bind_b2Mat22_get_ey_0, _emscripten_bind_b2Mat22_SetIdentity_0: _emscripten_bind_b2Mat22_SetIdentity_0, _emscripten_bind_b2Joint_IsActive_0: _emscripten_bind_b2Joint_IsActive_0, _emscripten_bind_b2BodyDef_get_allowSleep_0: _emscripten_bind_b2BodyDef_get_allowSleep_0, _emscripten_bind_b2GearJoint_GetJoint2_0: _emscripten_bind_b2GearJoint_GetJoint2_0, _emscripten_bind_b2EdgeShape_set_m_vertex1_1: _emscripten_bind_b2EdgeShape_set_m_vertex1_1, _emscripten_bind_b2Body_GetWorld_0: _emscripten_bind_b2Body_GetWorld_0, _emscripten_enum_b2LimitState_e_inactiveLimit: _emscripten_enum_b2LimitState_e_inactiveLimit, _emscripten_bind_b2PulleyJointDef_set_lengthB_1: _emscripten_bind_b2PulleyJointDef_set_lengthB_1, _emscripten_bind_b2Body_SetAwake_1: _emscripten_bind_b2Body_SetAwake_1, _emscripten_bind_b2PrismaticJointDef_set_upperTranslation_1: _emscripten_bind_b2PrismaticJointDef_set_upperTranslation_1, _emscripten_bind_b2Vec2___destroy___0: _emscripten_bind_b2Vec2___destroy___0, _emscripten_bind_b2RayCastInput_set_p1_1: _emscripten_bind_b2RayCastInput_set_p1_1, _emscripten_bind_b2Contact_ResetFriction_0: _emscripten_bind_b2Contact_ResetFriction_0, _emscripten_bind_b2PulleyJoint_GetAnchorA_0: _emscripten_bind_b2PulleyJoint_GetAnchorA_0, _emscripten_bind_b2BodyDef_get_linearVelocity_0: _emscripten_bind_b2BodyDef_get_linearVelocity_0, _emscripten_bind_b2DistanceJointDef_get_bodyB_0: _emscripten_bind_b2DistanceJointDef_get_bodyB_0, _emscripten_bind_b2Mat22___destroy___0: _emscripten_bind_b2Mat22___destroy___0, _emscripten_bind_b2RevoluteJoint_GetNext_0: _emscripten_bind_b2RevoluteJoint_GetNext_0, _emscripten_bind_b2Color___destroy___0: _emscripten_bind_b2Color___destroy___0, _emscripten_bind_b2Fixture_GetShape_0: _emscripten_bind_b2Fixture_GetShape_0, _emscripten_bind_b2PolygonShape_SetAsBox_2: _emscripten_bind_b2PolygonShape_SetAsBox_2, _emscripten_bind_b2Vec3_op_mul_1: _emscripten_bind_b2Vec3_op_mul_1, _emscripten_bind_b2PolygonShape_set_m_type_1: _emscripten_bind_b2PolygonShape_set_m_type_1, _emscripten_bind_b2Cycles_b2Cycles_0: _emscripten_bind_b2Cycles_b2Cycles_0, _emscripten_bind_b2WheelJoint_GetType_0: _emscripten_bind_b2WheelJoint_GetType_0, _emscripten_bind_b2RevoluteJoint_IsActive_0: _emscripten_bind_b2RevoluteJoint_IsActive_0, _emscripten_bind_b2GearJoint_GetNext_0: _emscripten_bind_b2GearJoint_GetNext_0, _emscripten_bind_b2MouseJointDef_get_maxForce_0: _emscripten_bind_b2MouseJointDef_get_maxForce_0, _emscripten_bind_b2DestructionListenerWrapper___destroy___0: _emscripten_bind_b2DestructionListenerWrapper___destroy___0, _emscripten_bind_b2EdgeShape_set_m_type_1: _emscripten_bind_b2EdgeShape_set_m_type_1, _emscripten_bind_b2WheelJoint_GetLocalAxisA_0: _emscripten_bind_b2WheelJoint_GetLocalAxisA_0, _emscripten_bind_b2Body_GetNext_0: _emscripten_bind_b2Body_GetNext_0, _emscripten_bind_b2RopeJoint_GetBodyA_0: _emscripten_bind_b2RopeJoint_GetBodyA_0, _emscripten_enum_b2JointType_e_unknownJoint: _emscripten_enum_b2JointType_e_unknownJoint, _emscripten_bind_b2ContactFeature_set_indexA_1: _emscripten_bind_b2ContactFeature_set_indexA_1, _emscripten_bind_b2Profile_get_solveInit_0: _emscripten_bind_b2Profile_get_solveInit_0, _emscripten_bind_b2BodyDef_set_angularDamping_1: _emscripten_bind_b2BodyDef_set_angularDamping_1, _emscripten_bind_b2FrictionJoint_GetAnchorB_0: _emscripten_bind_b2FrictionJoint_GetAnchorB_0, _emscripten_bind_b2World_QueryAABB_2: _emscripten_bind_b2World_QueryAABB_2, _emscripten_bind_b2BodyDef_get_userData_0: _emscripten_bind_b2BodyDef_get_userData_0, _emscripten_bind_b2Body_SetAngularVelocity_1: _emscripten_bind_b2Body_SetAngularVelocity_1, _emscripten_bind_b2WheelJointDef_get_userData_0: _emscripten_bind_b2WheelJointDef_get_userData_0, _emscripten_bind_b2DistanceJoint_GetBodyB_0: _emscripten_bind_b2DistanceJoint_GetBodyB_0, _emscripten_bind_b2RevoluteJointDef_set_maxMotorTorque_1: _emscripten_bind_b2RevoluteJointDef_set_maxMotorTorque_1, _emscripten_bind_b2WeldJointDef_set_bodyB_1: _emscripten_bind_b2WeldJointDef_set_bodyB_1, _emscripten_bind_b2RevoluteJoint_SetUserData_1: _emscripten_bind_b2RevoluteJoint_SetUserData_1, _emscripten_bind_b2DistanceJoint_SetLength_1: _emscripten_bind_b2DistanceJoint_SetLength_1, _emscripten_bind_b2JointEdge_get_joint_0: _emscripten_bind_b2JointEdge_get_joint_0, _emscripten_bind_b2Params_getDumpCon_0: _emscripten_bind_b2Params_getDumpCon_0, _emscripten_bind_b2FixtureDef___destroy___0: _emscripten_bind_b2FixtureDef___destroy___0, _emscripten_bind_b2FixtureDef_set_shape_1: _emscripten_bind_b2FixtureDef_set_shape_1, _emscripten_bind_b2WeldJoint_GetAnchorA_0: _emscripten_bind_b2WeldJoint_GetAnchorA_0, _emscripten_bind_b2Profile_get_solveVelocity_0: _emscripten_bind_b2Profile_get_solveVelocity_0, _emscripten_bind_b2WeldJointDef_get_bodyB_0: _emscripten_bind_b2WeldJointDef_get_bodyB_0, _emscripten_bind_b2Body_SetAngularDamping_1: _emscripten_bind_b2Body_SetAngularDamping_1, _emscripten_bind_b2PulleyJointDef_Initialize_7: _emscripten_bind_b2PulleyJointDef_Initialize_7, _emscripten_bind_b2GearJointDef_set_bodyB_1: _emscripten_bind_b2GearJointDef_set_bodyB_1, _emscripten_bind_b2RopeJoint_GetReactionTorque_1: _emscripten_bind_b2RopeJoint_GetReactionTorque_1, _emscripten_bind_b2Mat22_set_ex_1: _emscripten_bind_b2Mat22_set_ex_1, _emscripten_bind_b2GearJoint_GetType_0: _emscripten_bind_b2GearJoint_GetType_0, _emscripten_bind_b2ChainShape_b2ChainShape_0: _emscripten_bind_b2ChainShape_b2ChainShape_0, _emscripten_bind_b2PolygonShape_get_m_vertexCount_0: _emscripten_bind_b2PolygonShape_get_m_vertexCount_0, _emscripten_bind_b2PrismaticJoint_GetUserData_0: _emscripten_bind_b2PrismaticJoint_GetUserData_0, _emscripten_bind_b2RevoluteJoint_GetUpperLimit_0: _emscripten_bind_b2RevoluteJoint_GetUpperLimit_0, _emscripten_enum_b2ShapeType_e_polygon: _emscripten_enum_b2ShapeType_e_polygon, _emscripten_bind_b2ChainShape_CreateLoop_2: _emscripten_bind_b2ChainShape_CreateLoop_2, _emscripten_bind_b2EdgeShape_get_m_radius_0: _emscripten_bind_b2EdgeShape_get_m_radius_0, _emscripten_bind_b2Contact_GetFixtureB_0: _emscripten_bind_b2Contact_GetFixtureB_0, _emscripten_bind_b2ChainShape_ComputeMass_2: _emscripten_bind_b2ChainShape_ComputeMass_2, _emscripten_bind_b2Vec2_set_y_1: _emscripten_bind_b2Vec2_set_y_1, _emscripten_bind_b2PrismaticJoint_IsLimitEnabled_0: _emscripten_bind_b2PrismaticJoint_IsLimitEnabled_0, _emscripten_bind_b2RopeJointDef_get_bodyB_0: _emscripten_bind_b2RopeJointDef_get_bodyB_0, _emscripten_bind_b2BodyDef_b2BodyDef_0: _emscripten_bind_b2BodyDef_b2BodyDef_0, _emscripten_bind_b2MassData_get_mass_0: _emscripten_bind_b2MassData_get_mass_0, _emscripten_bind_b2WheelJoint___destroy___0: _emscripten_bind_b2WheelJoint___destroy___0, _emscripten_bind_b2Joint_GetBodyB_0: _emscripten_bind_b2Joint_GetBodyB_0, _emscripten_bind_b2MouseJointDef_set_collideConnected_1: _emscripten_bind_b2MouseJointDef_set_collideConnected_1, _emscripten_bind_b2WheelJointDef_set_localAxisA_1: _emscripten_bind_b2WheelJointDef_set_localAxisA_1, _emscripten_bind_b2Joint_Dump_0: _emscripten_bind_b2Joint_Dump_0, _emscripten_bind_b2World_GetBodyList_0: _emscripten_bind_b2World_GetBodyList_0, _emscripten_bind_b2WheelJointDef_set_motorSpeed_1: _emscripten_bind_b2WheelJointDef_set_motorSpeed_1, _emscripten_bind_b2Cycles_dump_0: _emscripten_bind_b2Cycles_dump_0, _emscripten_bind_b2Vec2_LengthSquared_0: _emscripten_bind_b2Vec2_LengthSquared_0, _emscripten_bind_b2FrictionJointDef_set_bodyA_1: _emscripten_bind_b2FrictionJointDef_set_bodyA_1, _emscripten_bind_b2WheelJoint_GetSpringFrequencyHz_0: _emscripten_bind_b2WheelJoint_GetSpringFrequencyHz_0, _emscripten_bind_b2ContactFeature_get_indexB_0: _emscripten_bind_b2ContactFeature_get_indexB_0, _emscripten_bind_b2Body_GetJointList_0: _emscripten_bind_b2Body_GetJointList_0, _emscripten_bind_b2FrictionJoint_GetBodyA_0: _emscripten_bind_b2FrictionJoint_GetBodyA_0, _emscripten_bind_b2ManifoldPoint_get_localPoint_0: _emscripten_bind_b2ManifoldPoint_get_localPoint_0, _emscripten_bind_b2RevoluteJoint_IsLimitEnabled_0: _emscripten_bind_b2RevoluteJoint_IsLimitEnabled_0, _emscripten_bind_b2PrismaticJointDef_get_maxMotorForce_0: _emscripten_bind_b2PrismaticJointDef_get_maxMotorForce_0, _emscripten_bind_b2Body_SetUserData_1: _emscripten_bind_b2Body_SetUserData_1, _emscripten_bind_b2DistanceJoint_GetUserData_0: _emscripten_bind_b2DistanceJoint_GetUserData_0, _emscripten_bind_b2PulleyJointDef_set_bodyA_1: _emscripten_bind_b2PulleyJointDef_set_bodyA_1, _emscripten_bind_b2Joint_GetType_0: _emscripten_bind_b2Joint_GetType_0, _emscripten_bind_b2Manifold_get_pointCount_0: _emscripten_bind_b2Manifold_get_pointCount_0, _emscripten_bind_b2Mat33_get_ez_0: _emscripten_bind_b2Mat33_get_ez_0, _emscripten_bind_b2Color_Set_3: _emscripten_bind_b2Color_Set_3, _emscripten_bind_b2ManifoldPoint_set_normalImpulse_1: _emscripten_bind_b2ManifoldPoint_set_normalImpulse_1, _emscripten_enum_b2LimitState_e_atUpperLimit: _emscripten_enum_b2LimitState_e_atUpperLimit, _emscripten_bind_b2PulleyJointDef_set_groundAnchorA_1: _emscripten_bind_b2PulleyJointDef_set_groundAnchorA_1, _emscripten_bind_b2MouseJointDef_get_type_0: _emscripten_bind_b2MouseJointDef_get_type_0, _emscripten_bind_b2MouseJointDef_get_userData_0: _emscripten_bind_b2MouseJointDef_get_userData_0, _emscripten_bind_b2PulleyJointDef_get_collideConnected_0: _emscripten_bind_b2PulleyJointDef_get_collideConnected_0, _emscripten_bind_b2RopeJoint_SetMaxLength_1: _emscripten_bind_b2RopeJoint_SetMaxLength_1, _emscripten_bind_b2Joint_SetUserData_1: _emscripten_bind_b2Joint_SetUserData_1, _emscripten_bind_b2PolygonShape_set_m_radius_1: _emscripten_bind_b2PolygonShape_set_m_radius_1, _emscripten_bind_b2PrismaticJoint_SetMaxMotorForce_1: _emscripten_bind_b2PrismaticJoint_SetMaxMotorForce_1, _emscripten_bind_JSContactListener_JSContactListener_0: _emscripten_bind_JSContactListener_JSContactListener_0, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_viiiii: dynCall_viiiii, dynCall_did: dynCall_did, dynCall_vi: dynCall_vi, dynCall_diiiid: dynCall_diiiid, dynCall_vii: dynCall_vii, dynCall_viidii: dynCall_viidii, dynCall_ii: dynCall_ii, dynCall_viidi: dynCall_viidi, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_viid: dynCall_viid, dynCall_viiiiii: dynCall_viiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_viiii: dynCall_viiii };
  })
  // EMSCRIPTEN_END_ASM
  ({ "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "SIMD": SIMD }, { "abort": abort, "assert": assert, "min": Math_min, "jsCall": jsCall, "invoke_iiii": invoke_iiii, "invoke_viiiii": invoke_viiiii, "invoke_did": invoke_did, "invoke_vi": invoke_vi, "invoke_diiiid": invoke_diiiid, "invoke_vii": invoke_vii, "invoke_viidii": invoke_viidii, "invoke_ii": invoke_ii, "invoke_viidi": invoke_viidi, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_viid": invoke_viid, "invoke_viiiiii": invoke_viiiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_viiii": invoke_viiii, "___cxa_throw": ___cxa_throw, "_cosf": _cosf, "_send": _send, "_sqrtf": _sqrtf, "___cxa_guard_acquire": ___cxa_guard_acquire, "__reallyNegative": __reallyNegative, "_vfprintf": _vfprintf, "_emscripten_float32x4_lessThan": _emscripten_float32x4_lessThan, "_emscripten_asm_const_int": _emscripten_asm_const_int, "___assert_fail": ___assert_fail, "_atan2f": _atan2f, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___cxa_guard_release": ___cxa_guard_release, "___errno_location": ___errno_location, "_emscripten_float32x4_fromInt32x4Bits": _emscripten_float32x4_fromInt32x4Bits, "_emscripten_asm_const_double": _emscripten_asm_const_double, "_fprintf": _fprintf, "___setErrNo": ___setErrNo, "_sbrk": _sbrk, "_emscripten_float32x4_greaterThan": _emscripten_float32x4_greaterThan, "___cxa_begin_catch": ___cxa_begin_catch, "_sinf": _sinf, "_fileno": _fileno, "___resumeException": ___resumeException, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "_sysconf": _sysconf, "_emscripten_float32x4_and": _emscripten_float32x4_and, "_pthread_getspecific": _pthread_getspecific, "_vprintf": _vprintf, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_pwrite": _pwrite, "_pthread_once": _pthread_once, "_puts": _puts, "_printf": _printf, "_floorf": _floorf, "_pthread_key_create": _pthread_key_create, "_write": _write, "_emscripten_get_now": _emscripten_get_now, "_pthread_setspecific": _pthread_setspecific, "_fputc": _fputc, "_emscripten_float32x4_select": _emscripten_float32x4_select, "_emscripten_float32x4_or": _emscripten_float32x4_or, "_emscripten_float32x4_not": _emscripten_float32x4_not, "_abort": _abort, "_fwrite": _fwrite, "_time": _time, "___cxa_allocate_exception": ___cxa_allocate_exception, "__formatString": __formatString, "_fputs": _fputs, "_emscripten_float32x4_xor": _emscripten_float32x4_xor, "___cxa_pure_virtual": ___cxa_pure_virtual, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "ctlz_i8": ctlz_i8, "NaN": NaN, "Infinity": Infinity, "_stderr": _stderr }, buffer);
  var _emscripten_bind_b2WheelJoint_GetSpringDampingRatio_0 = Module["_emscripten_bind_b2WheelJoint_GetSpringDampingRatio_0"] = asm["_emscripten_bind_b2WheelJoint_GetSpringDampingRatio_0"];
var _emscripten_bind_b2ContactEdge_set_next_1 = Module["_emscripten_bind_b2ContactEdge_set_next_1"] = asm["_emscripten_bind_b2ContactEdge_set_next_1"];
var _emscripten_bind_b2ChainShape_get_m_count_0 = Module["_emscripten_bind_b2ChainShape_get_m_count_0"] = asm["_emscripten_bind_b2ChainShape_get_m_count_0"];
var _emscripten_bind_b2Fixture_SetFriction_1 = Module["_emscripten_bind_b2Fixture_SetFriction_1"] = asm["_emscripten_bind_b2Fixture_SetFriction_1"];
var _emscripten_bind_b2Shape_ComputeAABB_3 = Module["_emscripten_bind_b2Shape_ComputeAABB_3"] = asm["_emscripten_bind_b2Shape_ComputeAABB_3"];
var _emscripten_bind_b2FrictionJointDef_set_userData_1 = Module["_emscripten_bind_b2FrictionJointDef_set_userData_1"] = asm["_emscripten_bind_b2FrictionJointDef_set_userData_1"];
var _emscripten_bind_b2Vec3_get_z_0 = Module["_emscripten_bind_b2Vec3_get_z_0"] = asm["_emscripten_bind_b2Vec3_get_z_0"];
var _emscripten_bind_b2World_IsLocked_0 = Module["_emscripten_bind_b2World_IsLocked_0"] = asm["_emscripten_bind_b2World_IsLocked_0"];
var _emscripten_bind_b2RevoluteJointDef_set_motorSpeed_1 = Module["_emscripten_bind_b2RevoluteJointDef_set_motorSpeed_1"] = asm["_emscripten_bind_b2RevoluteJointDef_set_motorSpeed_1"];
var _emscripten_bind_b2Draw_GetFlags_0 = Module["_emscripten_bind_b2Draw_GetFlags_0"] = asm["_emscripten_bind_b2Draw_GetFlags_0"];
var _emscripten_bind_b2Body_GetMassData_1 = Module["_emscripten_bind_b2Body_GetMassData_1"] = asm["_emscripten_bind_b2Body_GetMassData_1"];
var _emscripten_bind_b2Color_set_g_1 = Module["_emscripten_bind_b2Color_set_g_1"] = asm["_emscripten_bind_b2Color_set_g_1"];
var _emscripten_bind_b2WheelJointDef_get_frequencyHz_0 = Module["_emscripten_bind_b2WheelJointDef_get_frequencyHz_0"] = asm["_emscripten_bind_b2WheelJointDef_get_frequencyHz_0"];
var _emscripten_bind_b2RopeJointDef_set_localAnchorA_1 = Module["_emscripten_bind_b2RopeJointDef_set_localAnchorA_1"] = asm["_emscripten_bind_b2RopeJointDef_set_localAnchorA_1"];
var _emscripten_bind_b2PolygonShape_RayCast_4 = Module["_emscripten_bind_b2PolygonShape_RayCast_4"] = asm["_emscripten_bind_b2PolygonShape_RayCast_4"];
var _emscripten_bind_b2World_GetTreeBalance_0 = Module["_emscripten_bind_b2World_GetTreeBalance_0"] = asm["_emscripten_bind_b2World_GetTreeBalance_0"];
var _emscripten_bind_b2PrismaticJointDef_get_upperTranslation_0 = Module["_emscripten_bind_b2PrismaticJointDef_get_upperTranslation_0"] = asm["_emscripten_bind_b2PrismaticJointDef_get_upperTranslation_0"];
var _emscripten_bind_JSDraw_DrawSolidCircle_4 = Module["_emscripten_bind_JSDraw_DrawSolidCircle_4"] = asm["_emscripten_bind_JSDraw_DrawSolidCircle_4"];
var _emscripten_bind_b2RevoluteJoint_GetLocalAnchorA_0 = Module["_emscripten_bind_b2RevoluteJoint_GetLocalAnchorA_0"] = asm["_emscripten_bind_b2RevoluteJoint_GetLocalAnchorA_0"];
var _emscripten_bind_b2FixtureDef_get_filter_0 = Module["_emscripten_bind_b2FixtureDef_get_filter_0"] = asm["_emscripten_bind_b2FixtureDef_get_filter_0"];
var _emscripten_bind_b2FrictionJointDef_get_type_0 = Module["_emscripten_bind_b2FrictionJointDef_get_type_0"] = asm["_emscripten_bind_b2FrictionJointDef_get_type_0"];
var _emscripten_bind_b2RayCastInput_get_p1_0 = Module["_emscripten_bind_b2RayCastInput_get_p1_0"] = asm["_emscripten_bind_b2RayCastInput_get_p1_0"];
var _emscripten_bind_b2EdgeShape_set_m_hasVertex3_1 = Module["_emscripten_bind_b2EdgeShape_set_m_hasVertex3_1"] = asm["_emscripten_bind_b2EdgeShape_set_m_hasVertex3_1"];
var _emscripten_bind_b2JointEdge_set_joint_1 = Module["_emscripten_bind_b2JointEdge_set_joint_1"] = asm["_emscripten_bind_b2JointEdge_set_joint_1"];
var _emscripten_bind_b2Fixture___destroy___0 = Module["_emscripten_bind_b2Fixture___destroy___0"] = asm["_emscripten_bind_b2Fixture___destroy___0"];
var _emscripten_bind_b2PulleyJoint_SetUserData_1 = Module["_emscripten_bind_b2PulleyJoint_SetUserData_1"] = asm["_emscripten_bind_b2PulleyJoint_SetUserData_1"];
var _emscripten_bind_b2World_SetWarmStarting_1 = Module["_emscripten_bind_b2World_SetWarmStarting_1"] = asm["_emscripten_bind_b2World_SetWarmStarting_1"];
var _emscripten_bind_JSDraw_DrawCircle_3 = Module["_emscripten_bind_JSDraw_DrawCircle_3"] = asm["_emscripten_bind_JSDraw_DrawCircle_3"];
var _emscripten_bind_b2WeldJoint_IsActive_0 = Module["_emscripten_bind_b2WeldJoint_IsActive_0"] = asm["_emscripten_bind_b2WeldJoint_IsActive_0"];
var _emscripten_bind_b2DestructionListener___destroy___0 = Module["_emscripten_bind_b2DestructionListener___destroy___0"] = asm["_emscripten_bind_b2DestructionListener___destroy___0"];
var _emscripten_bind_b2BodyDef_set_type_1 = Module["_emscripten_bind_b2BodyDef_set_type_1"] = asm["_emscripten_bind_b2BodyDef_set_type_1"];
var _emscripten_bind_b2ChainShape_ComputeAABB_3 = Module["_emscripten_bind_b2ChainShape_ComputeAABB_3"] = asm["_emscripten_bind_b2ChainShape_ComputeAABB_3"];
var _emscripten_bind_b2MouseJointDef_set_type_1 = Module["_emscripten_bind_b2MouseJointDef_set_type_1"] = asm["_emscripten_bind_b2MouseJointDef_set_type_1"];
var _emscripten_bind_b2JointEdge_get_prev_0 = Module["_emscripten_bind_b2JointEdge_get_prev_0"] = asm["_emscripten_bind_b2JointEdge_get_prev_0"];
var _emscripten_bind_b2WeldJoint_GetReactionTorque_1 = Module["_emscripten_bind_b2WeldJoint_GetReactionTorque_1"] = asm["_emscripten_bind_b2WeldJoint_GetReactionTorque_1"];
var _emscripten_bind_b2DistanceJointDef_get_userData_0 = Module["_emscripten_bind_b2DistanceJointDef_get_userData_0"] = asm["_emscripten_bind_b2DistanceJointDef_get_userData_0"];
var _emscripten_bind_b2BodyDef_get_position_0 = Module["_emscripten_bind_b2BodyDef_get_position_0"] = asm["_emscripten_bind_b2BodyDef_get_position_0"];
var _emscripten_bind_b2RevoluteJointDef_set_userData_1 = Module["_emscripten_bind_b2RevoluteJointDef_set_userData_1"] = asm["_emscripten_bind_b2RevoluteJointDef_set_userData_1"];
var _emscripten_bind_b2RevoluteJointDef_get_localAnchorA_0 = Module["_emscripten_bind_b2RevoluteJointDef_get_localAnchorA_0"] = asm["_emscripten_bind_b2RevoluteJointDef_get_localAnchorA_0"];
var _emscripten_bind_b2WheelJointDef_get_collideConnected_0 = Module["_emscripten_bind_b2WheelJointDef_get_collideConnected_0"] = asm["_emscripten_bind_b2WheelJointDef_get_collideConnected_0"];
var _emscripten_bind_b2MouseJointDef_set_userData_1 = Module["_emscripten_bind_b2MouseJointDef_set_userData_1"] = asm["_emscripten_bind_b2MouseJointDef_set_userData_1"];
var _emscripten_bind_JSDraw_DrawSegment_3 = Module["_emscripten_bind_JSDraw_DrawSegment_3"] = asm["_emscripten_bind_JSDraw_DrawSegment_3"];
var _emscripten_bind_b2FixtureDef_set_restitution_1 = Module["_emscripten_bind_b2FixtureDef_set_restitution_1"] = asm["_emscripten_bind_b2FixtureDef_set_restitution_1"];
var _emscripten_bind_b2RevoluteJoint_GetUserData_0 = Module["_emscripten_bind_b2RevoluteJoint_GetUserData_0"] = asm["_emscripten_bind_b2RevoluteJoint_GetUserData_0"];
var _emscripten_bind_b2Mat33_get_ey_0 = Module["_emscripten_bind_b2Mat33_get_ey_0"] = asm["_emscripten_bind_b2Mat33_get_ey_0"];
var _emscripten_bind_b2MouseJoint_IsActive_0 = Module["_emscripten_bind_b2MouseJoint_IsActive_0"] = asm["_emscripten_bind_b2MouseJoint_IsActive_0"];
var _emscripten_bind_b2World_GetGravity_0 = Module["_emscripten_bind_b2World_GetGravity_0"] = asm["_emscripten_bind_b2World_GetGravity_0"];
var _emscripten_bind_b2World_DrawDebugData_0 = Module["_emscripten_bind_b2World_DrawDebugData_0"] = asm["_emscripten_bind_b2World_DrawDebugData_0"];
var _emscripten_bind_b2Profile_get_broadphase_0 = Module["_emscripten_bind_b2Profile_get_broadphase_0"] = asm["_emscripten_bind_b2Profile_get_broadphase_0"];
var _emscripten_bind_b2PulleyJointDef_get_bodyA_0 = Module["_emscripten_bind_b2PulleyJointDef_get_bodyA_0"] = asm["_emscripten_bind_b2PulleyJointDef_get_bodyA_0"];
var _emscripten_bind_b2PrismaticJoint_SetLimits_2 = Module["_emscripten_bind_b2PrismaticJoint_SetLimits_2"] = asm["_emscripten_bind_b2PrismaticJoint_SetLimits_2"];
var _emscripten_bind_b2PulleyJointDef_get_localAnchorA_0 = Module["_emscripten_bind_b2PulleyJointDef_get_localAnchorA_0"] = asm["_emscripten_bind_b2PulleyJointDef_get_localAnchorA_0"];
var _emscripten_bind_b2DistanceJoint_GetAnchorA_0 = Module["_emscripten_bind_b2DistanceJoint_GetAnchorA_0"] = asm["_emscripten_bind_b2DistanceJoint_GetAnchorA_0"];
var _emscripten_bind_b2ManifoldPoint_set_tangentImpulse_1 = Module["_emscripten_bind_b2ManifoldPoint_set_tangentImpulse_1"] = asm["_emscripten_bind_b2ManifoldPoint_set_tangentImpulse_1"];
var _emscripten_bind_b2DistanceJointDef_set_dampingRatio_1 = Module["_emscripten_bind_b2DistanceJointDef_set_dampingRatio_1"] = asm["_emscripten_bind_b2DistanceJointDef_set_dampingRatio_1"];
var _emscripten_bind_b2RopeJointDef_set_collideConnected_1 = Module["_emscripten_bind_b2RopeJointDef_set_collideConnected_1"] = asm["_emscripten_bind_b2RopeJointDef_set_collideConnected_1"];
var _emscripten_bind_b2CircleShape_set_m_p_1 = Module["_emscripten_bind_b2CircleShape_set_m_p_1"] = asm["_emscripten_bind_b2CircleShape_set_m_p_1"];
var _emscripten_bind_JSContactListener_EndContact_1 = Module["_emscripten_bind_JSContactListener_EndContact_1"] = asm["_emscripten_bind_JSContactListener_EndContact_1"];
var _emscripten_bind_b2MassData_set_mass_1 = Module["_emscripten_bind_b2MassData_set_mass_1"] = asm["_emscripten_bind_b2MassData_set_mass_1"];
var _emscripten_bind_b2Vec3_get_x_0 = Module["_emscripten_bind_b2Vec3_get_x_0"] = asm["_emscripten_bind_b2Vec3_get_x_0"];
var _emscripten_bind_b2ChainShape_CreateChain_2 = Module["_emscripten_bind_b2ChainShape_CreateChain_2"] = asm["_emscripten_bind_b2ChainShape_CreateChain_2"];
var _emscripten_bind_b2RopeJoint_GetUserData_0 = Module["_emscripten_bind_b2RopeJoint_GetUserData_0"] = asm["_emscripten_bind_b2RopeJoint_GetUserData_0"];
var _emscripten_bind_b2World_DestroyBody_1 = Module["_emscripten_bind_b2World_DestroyBody_1"] = asm["_emscripten_bind_b2World_DestroyBody_1"];
var _emscripten_bind_b2Profile_get_solvePosition_0 = Module["_emscripten_bind_b2Profile_get_solvePosition_0"] = asm["_emscripten_bind_b2Profile_get_solvePosition_0"];
var _emscripten_bind_b2Shape_RayCast_4 = Module["_emscripten_bind_b2Shape_RayCast_4"] = asm["_emscripten_bind_b2Shape_RayCast_4"];
var _emscripten_bind_b2PulleyJoint_GetGroundAnchorA_0 = Module["_emscripten_bind_b2PulleyJoint_GetGroundAnchorA_0"] = asm["_emscripten_bind_b2PulleyJoint_GetGroundAnchorA_0"];
var _emscripten_bind_b2Mat33___destroy___0 = Module["_emscripten_bind_b2Mat33___destroy___0"] = asm["_emscripten_bind_b2Mat33___destroy___0"];
var _emscripten_bind_b2GearJoint_GetReactionTorque_1 = Module["_emscripten_bind_b2GearJoint_GetReactionTorque_1"] = asm["_emscripten_bind_b2GearJoint_GetReactionTorque_1"];
var _emscripten_bind_b2WeldJointDef_set_collideConnected_1 = Module["_emscripten_bind_b2WeldJointDef_set_collideConnected_1"] = asm["_emscripten_bind_b2WeldJointDef_set_collideConnected_1"];
var _emscripten_bind_b2Manifold_get_type_0 = Module["_emscripten_bind_b2Manifold_get_type_0"] = asm["_emscripten_bind_b2Manifold_get_type_0"];
var _emscripten_bind_b2FrictionJointDef_get_maxTorque_0 = Module["_emscripten_bind_b2FrictionJointDef_get_maxTorque_0"] = asm["_emscripten_bind_b2FrictionJointDef_get_maxTorque_0"];
var _emscripten_bind_b2PulleyJointDef_b2PulleyJointDef_0 = Module["_emscripten_bind_b2PulleyJointDef_b2PulleyJointDef_0"] = asm["_emscripten_bind_b2PulleyJointDef_b2PulleyJointDef_0"];
var _emscripten_bind_b2World_SetAutoClearForces_1 = Module["_emscripten_bind_b2World_SetAutoClearForces_1"] = asm["_emscripten_bind_b2World_SetAutoClearForces_1"];
var _emscripten_bind_b2FrictionJoint_IsActive_0 = Module["_emscripten_bind_b2FrictionJoint_IsActive_0"] = asm["_emscripten_bind_b2FrictionJoint_IsActive_0"];
var _emscripten_bind_b2PrismaticJointDef_set_lowerTranslation_1 = Module["_emscripten_bind_b2PrismaticJointDef_set_lowerTranslation_1"] = asm["_emscripten_bind_b2PrismaticJointDef_set_lowerTranslation_1"];
var _emscripten_bind_b2BodyDef_set_position_1 = Module["_emscripten_bind_b2BodyDef_set_position_1"] = asm["_emscripten_bind_b2BodyDef_set_position_1"];
var _emscripten_bind_b2Transform_get_q_0 = Module["_emscripten_bind_b2Transform_get_q_0"] = asm["_emscripten_bind_b2Transform_get_q_0"];
var _emscripten_bind_b2FrictionJoint_GetMaxForce_0 = Module["_emscripten_bind_b2FrictionJoint_GetMaxForce_0"] = asm["_emscripten_bind_b2FrictionJoint_GetMaxForce_0"];
var _emscripten_bind_b2RevoluteJoint_GetType_0 = Module["_emscripten_bind_b2RevoluteJoint_GetType_0"] = asm["_emscripten_bind_b2RevoluteJoint_GetType_0"];
var _emscripten_bind_b2Contact_GetNext_0 = Module["_emscripten_bind_b2Contact_GetNext_0"] = asm["_emscripten_bind_b2Contact_GetNext_0"];
var _emscripten_bind_b2EdgeShape_get_m_type_0 = Module["_emscripten_bind_b2EdgeShape_get_m_type_0"] = asm["_emscripten_bind_b2EdgeShape_get_m_type_0"];
var _emscripten_bind_b2GearJoint_GetJoint1_0 = Module["_emscripten_bind_b2GearJoint_GetJoint1_0"] = asm["_emscripten_bind_b2GearJoint_GetJoint1_0"];
var _emscripten_bind_b2WheelJoint_GetMaxMotorTorque_0 = Module["_emscripten_bind_b2WheelJoint_GetMaxMotorTorque_0"] = asm["_emscripten_bind_b2WheelJoint_GetMaxMotorTorque_0"];
var _emscripten_enum_b2ContactFeatureType_e_face = Module["_emscripten_enum_b2ContactFeatureType_e_face"] = asm["_emscripten_enum_b2ContactFeatureType_e_face"];
var _emscripten_bind_b2GearJoint_GetAnchorA_0 = Module["_emscripten_bind_b2GearJoint_GetAnchorA_0"] = asm["_emscripten_bind_b2GearJoint_GetAnchorA_0"];
var _emscripten_enum_b2JointType_e_mouseJoint = Module["_emscripten_enum_b2JointType_e_mouseJoint"] = asm["_emscripten_enum_b2JointType_e_mouseJoint"];
var _emscripten_bind_b2MouseJointDef_set_bodyA_1 = Module["_emscripten_bind_b2MouseJointDef_set_bodyA_1"] = asm["_emscripten_bind_b2MouseJointDef_set_bodyA_1"];
var _emscripten_bind_b2Params_setFrame1_1 = Module["_emscripten_bind_b2Params_setFrame1_1"] = asm["_emscripten_bind_b2Params_setFrame1_1"];
var _emscripten_enum_b2JointType_e_revoluteJoint = Module["_emscripten_enum_b2JointType_e_revoluteJoint"] = asm["_emscripten_enum_b2JointType_e_revoluteJoint"];
var _emscripten_bind_b2World_SetContactListener_1 = Module["_emscripten_bind_b2World_SetContactListener_1"] = asm["_emscripten_bind_b2World_SetContactListener_1"];
var _emscripten_bind_b2Body_IsAwake_0 = Module["_emscripten_bind_b2Body_IsAwake_0"] = asm["_emscripten_bind_b2Body_IsAwake_0"];
var _emscripten_bind_b2JointEdge_set_other_1 = Module["_emscripten_bind_b2JointEdge_set_other_1"] = asm["_emscripten_bind_b2JointEdge_set_other_1"];
var _emscripten_bind_b2RevoluteJoint_IsMotorEnabled_0 = Module["_emscripten_bind_b2RevoluteJoint_IsMotorEnabled_0"] = asm["_emscripten_bind_b2RevoluteJoint_IsMotorEnabled_0"];
var _emscripten_bind_b2MouseJointDef_set_target_1 = Module["_emscripten_bind_b2MouseJointDef_set_target_1"] = asm["_emscripten_bind_b2MouseJointDef_set_target_1"];
var _emscripten_bind_b2FrictionJoint_GetLocalAnchorB_0 = Module["_emscripten_bind_b2FrictionJoint_GetLocalAnchorB_0"] = asm["_emscripten_bind_b2FrictionJoint_GetLocalAnchorB_0"];
var _emscripten_bind_b2FixtureDef_get_density_0 = Module["_emscripten_bind_b2FixtureDef_get_density_0"] = asm["_emscripten_bind_b2FixtureDef_get_density_0"];
var _emscripten_bind_b2ChainShape_set_m_vertices_1 = Module["_emscripten_bind_b2ChainShape_set_m_vertices_1"] = asm["_emscripten_bind_b2ChainShape_set_m_vertices_1"];
var _emscripten_bind_b2ChainShape_get_m_vertices_0 = Module["_emscripten_bind_b2ChainShape_get_m_vertices_0"] = asm["_emscripten_bind_b2ChainShape_get_m_vertices_0"];
var _emscripten_bind_b2Rot_set_s_1 = Module["_emscripten_bind_b2Rot_set_s_1"] = asm["_emscripten_bind_b2Rot_set_s_1"];
var _emscripten_bind_b2WheelJointDef_set_bodyB_1 = Module["_emscripten_bind_b2WheelJointDef_set_bodyB_1"] = asm["_emscripten_bind_b2WheelJointDef_set_bodyB_1"];
var _emscripten_bind_b2PulleyJointDef_set_localAnchorB_1 = Module["_emscripten_bind_b2PulleyJointDef_set_localAnchorB_1"] = asm["_emscripten_bind_b2PulleyJointDef_set_localAnchorB_1"];
var _emscripten_bind_b2FixtureDef_get_userData_0 = Module["_emscripten_bind_b2FixtureDef_get_userData_0"] = asm["_emscripten_bind_b2FixtureDef_get_userData_0"];
var _emscripten_bind_b2FrictionJointDef_set_collideConnected_1 = Module["_emscripten_bind_b2FrictionJointDef_set_collideConnected_1"] = asm["_emscripten_bind_b2FrictionJointDef_set_collideConnected_1"];
var _emscripten_bind_b2PrismaticJointDef_get_lowerTranslation_0 = Module["_emscripten_bind_b2PrismaticJointDef_get_lowerTranslation_0"] = asm["_emscripten_bind_b2PrismaticJointDef_get_lowerTranslation_0"];
var _emscripten_bind_b2GearJoint_GetCollideConnected_0 = Module["_emscripten_bind_b2GearJoint_GetCollideConnected_0"] = asm["_emscripten_bind_b2GearJoint_GetCollideConnected_0"];
var _emscripten_bind_b2Params_setDebug_1 = Module["_emscripten_bind_b2Params_setDebug_1"] = asm["_emscripten_bind_b2Params_setDebug_1"];
var _emscripten_bind_b2RevoluteJointDef_get_upperAngle_0 = Module["_emscripten_bind_b2RevoluteJointDef_get_upperAngle_0"] = asm["_emscripten_bind_b2RevoluteJointDef_get_upperAngle_0"];
var _emscripten_enum_b2JointType_e_frictionJoint = Module["_emscripten_enum_b2JointType_e_frictionJoint"] = asm["_emscripten_enum_b2JointType_e_frictionJoint"];
var _emscripten_bind_b2RayCastOutput_set_fraction_1 = Module["_emscripten_bind_b2RayCastOutput_set_fraction_1"] = asm["_emscripten_bind_b2RayCastOutput_set_fraction_1"];
var _emscripten_bind_b2Color_set_r_1 = Module["_emscripten_bind_b2Color_set_r_1"] = asm["_emscripten_bind_b2Color_set_r_1"];
var _emscripten_bind_b2DistanceJointDef_get_length_0 = Module["_emscripten_bind_b2DistanceJointDef_get_length_0"] = asm["_emscripten_bind_b2DistanceJointDef_get_length_0"];
var _emscripten_bind_b2PulleyJoint_GetBodyB_0 = Module["_emscripten_bind_b2PulleyJoint_GetBodyB_0"] = asm["_emscripten_bind_b2PulleyJoint_GetBodyB_0"];
var _emscripten_bind_b2WheelJointDef_set_type_1 = Module["_emscripten_bind_b2WheelJointDef_set_type_1"] = asm["_emscripten_bind_b2WheelJointDef_set_type_1"];
var _emscripten_bind_b2World_GetTreeQuality_0 = Module["_emscripten_bind_b2World_GetTreeQuality_0"] = asm["_emscripten_bind_b2World_GetTreeQuality_0"];
var _emscripten_bind_b2BodyDef_set_gravityScale_1 = Module["_emscripten_bind_b2BodyDef_set_gravityScale_1"] = asm["_emscripten_bind_b2BodyDef_set_gravityScale_1"];
var _emscripten_bind_b2RopeJointDef_set_bodyB_1 = Module["_emscripten_bind_b2RopeJointDef_set_bodyB_1"] = asm["_emscripten_bind_b2RopeJointDef_set_bodyB_1"];
var _emscripten_bind_b2PrismaticJoint_GetLowerLimit_0 = Module["_emscripten_bind_b2PrismaticJoint_GetLowerLimit_0"] = asm["_emscripten_bind_b2PrismaticJoint_GetLowerLimit_0"];
var _emscripten_bind_b2AABB_get_lowerBound_0 = Module["_emscripten_bind_b2AABB_get_lowerBound_0"] = asm["_emscripten_bind_b2AABB_get_lowerBound_0"];
var _emscripten_bind_b2WheelJoint_SetMotorSpeed_1 = Module["_emscripten_bind_b2WheelJoint_SetMotorSpeed_1"] = asm["_emscripten_bind_b2WheelJoint_SetMotorSpeed_1"];
var _emscripten_bind_b2PrismaticJointDef_get_referenceAngle_0 = Module["_emscripten_bind_b2PrismaticJointDef_get_referenceAngle_0"] = asm["_emscripten_bind_b2PrismaticJointDef_get_referenceAngle_0"];
var _emscripten_bind_b2Body_SetMassData_1 = Module["_emscripten_bind_b2Body_SetMassData_1"] = asm["_emscripten_bind_b2Body_SetMassData_1"];
var _emscripten_bind_b2BodyDef_get_angularVelocity_0 = Module["_emscripten_bind_b2BodyDef_get_angularVelocity_0"] = asm["_emscripten_bind_b2BodyDef_get_angularVelocity_0"];
var _emscripten_bind_b2WeldJoint_SetDampingRatio_1 = Module["_emscripten_bind_b2WeldJoint_SetDampingRatio_1"] = asm["_emscripten_bind_b2WeldJoint_SetDampingRatio_1"];
var _emscripten_bind_b2PrismaticJointDef___destroy___0 = Module["_emscripten_bind_b2PrismaticJointDef___destroy___0"] = asm["_emscripten_bind_b2PrismaticJointDef___destroy___0"];
var _emscripten_bind_b2Contact_IsTouching_0 = Module["_emscripten_bind_b2Contact_IsTouching_0"] = asm["_emscripten_bind_b2Contact_IsTouching_0"];
var _emscripten_bind_b2Draw_SetFlags_1 = Module["_emscripten_bind_b2Draw_SetFlags_1"] = asm["_emscripten_bind_b2Draw_SetFlags_1"];
var _emscripten_bind_b2AABB_Contains_1 = Module["_emscripten_bind_b2AABB_Contains_1"] = asm["_emscripten_bind_b2AABB_Contains_1"];
var _emscripten_bind_b2DistanceJoint_GetNext_0 = Module["_emscripten_bind_b2DistanceJoint_GetNext_0"] = asm["_emscripten_bind_b2DistanceJoint_GetNext_0"];
var _emscripten_bind_b2WheelJointDef_get_localAxisA_0 = Module["_emscripten_bind_b2WheelJointDef_get_localAxisA_0"] = asm["_emscripten_bind_b2WheelJointDef_get_localAxisA_0"];
var _emscripten_bind_b2PrismaticJoint_GetNext_0 = Module["_emscripten_bind_b2PrismaticJoint_GetNext_0"] = asm["_emscripten_bind_b2PrismaticJoint_GetNext_0"];
var _emscripten_bind_b2Filter_get_groupIndex_0 = Module["_emscripten_bind_b2Filter_get_groupIndex_0"] = asm["_emscripten_bind_b2Filter_get_groupIndex_0"];
var _emscripten_bind_b2PrismaticJoint_GetType_0 = Module["_emscripten_bind_b2PrismaticJoint_GetType_0"] = asm["_emscripten_bind_b2PrismaticJoint_GetType_0"];
var _emscripten_bind_b2Fixture_GetRestitution_0 = Module["_emscripten_bind_b2Fixture_GetRestitution_0"] = asm["_emscripten_bind_b2Fixture_GetRestitution_0"];
var _emscripten_bind_b2Transform_set_q_1 = Module["_emscripten_bind_b2Transform_set_q_1"] = asm["_emscripten_bind_b2Transform_set_q_1"];
var _emscripten_bind_b2PolygonShape___destroy___0 = Module["_emscripten_bind_b2PolygonShape___destroy___0"] = asm["_emscripten_bind_b2PolygonShape___destroy___0"];
var _emscripten_bind_b2AABB_get_upperBound_0 = Module["_emscripten_bind_b2AABB_get_upperBound_0"] = asm["_emscripten_bind_b2AABB_get_upperBound_0"];
var _emscripten_bind_b2Transform___destroy___0 = Module["_emscripten_bind_b2Transform___destroy___0"] = asm["_emscripten_bind_b2Transform___destroy___0"];
var _emscripten_bind_b2WeldJointDef_set_localAnchorB_1 = Module["_emscripten_bind_b2WeldJointDef_set_localAnchorB_1"] = asm["_emscripten_bind_b2WeldJointDef_set_localAnchorB_1"];
var _emscripten_bind_b2CircleShape_set_m_radius_1 = Module["_emscripten_bind_b2CircleShape_set_m_radius_1"] = asm["_emscripten_bind_b2CircleShape_set_m_radius_1"];
var _emscripten_bind_b2EdgeShape_set_m_hasVertex0_1 = Module["_emscripten_bind_b2EdgeShape_set_m_hasVertex0_1"] = asm["_emscripten_bind_b2EdgeShape_set_m_hasVertex0_1"];
var _emscripten_bind_b2RopeJoint_GetMaxLength_0 = Module["_emscripten_bind_b2RopeJoint_GetMaxLength_0"] = asm["_emscripten_bind_b2RopeJoint_GetMaxLength_0"];
var _emscripten_bind_b2GearJoint_GetUserData_0 = Module["_emscripten_bind_b2GearJoint_GetUserData_0"] = asm["_emscripten_bind_b2GearJoint_GetUserData_0"];
var _emscripten_bind_b2GearJointDef_set_type_1 = Module["_emscripten_bind_b2GearJointDef_set_type_1"] = asm["_emscripten_bind_b2GearJointDef_set_type_1"];
var _emscripten_bind_b2DistanceJoint_SetDampingRatio_1 = Module["_emscripten_bind_b2DistanceJoint_SetDampingRatio_1"] = asm["_emscripten_bind_b2DistanceJoint_SetDampingRatio_1"];
var _emscripten_bind_b2Contact_GetFixtureA_0 = Module["_emscripten_bind_b2Contact_GetFixtureA_0"] = asm["_emscripten_bind_b2Contact_GetFixtureA_0"];
var _emscripten_bind_b2QueryCallback___destroy___0 = Module["_emscripten_bind_b2QueryCallback___destroy___0"] = asm["_emscripten_bind_b2QueryCallback___destroy___0"];
var _emscripten_bind_b2PulleyJointDef_get_ratio_0 = Module["_emscripten_bind_b2PulleyJointDef_get_ratio_0"] = asm["_emscripten_bind_b2PulleyJointDef_get_ratio_0"];
var _emscripten_bind_b2PrismaticJointDef_get_localAnchorB_0 = Module["_emscripten_bind_b2PrismaticJointDef_get_localAnchorB_0"] = asm["_emscripten_bind_b2PrismaticJointDef_get_localAnchorB_0"];
var _emscripten_bind_b2CircleShape_set_m_type_1 = Module["_emscripten_bind_b2CircleShape_set_m_type_1"] = asm["_emscripten_bind_b2CircleShape_set_m_type_1"];
var _emscripten_enum_b2ShapeType_e_typeCount = Module["_emscripten_enum_b2ShapeType_e_typeCount"] = asm["_emscripten_enum_b2ShapeType_e_typeCount"];
var _emscripten_bind_b2Body_SetTransform_2 = Module["_emscripten_bind_b2Body_SetTransform_2"] = asm["_emscripten_bind_b2Body_SetTransform_2"];
var _emscripten_bind_b2RopeJoint_GetAnchorB_0 = Module["_emscripten_bind_b2RopeJoint_GetAnchorB_0"] = asm["_emscripten_bind_b2RopeJoint_GetAnchorB_0"];
var _emscripten_bind_b2AABB_set_upperBound_1 = Module["_emscripten_bind_b2AABB_set_upperBound_1"] = asm["_emscripten_bind_b2AABB_set_upperBound_1"];
var _emscripten_bind_b2MouseJointDef_get_collideConnected_0 = Module["_emscripten_bind_b2MouseJointDef_get_collideConnected_0"] = asm["_emscripten_bind_b2MouseJointDef_get_collideConnected_0"];
var _emscripten_bind_b2ContactImpulse___destroy___0 = Module["_emscripten_bind_b2ContactImpulse___destroy___0"] = asm["_emscripten_bind_b2ContactImpulse___destroy___0"];
var _emscripten_bind_b2World_GetTreeHeight_0 = Module["_emscripten_bind_b2World_GetTreeHeight_0"] = asm["_emscripten_bind_b2World_GetTreeHeight_0"];
var _emscripten_bind_b2Vec2_set_x_1 = Module["_emscripten_bind_b2Vec2_set_x_1"] = asm["_emscripten_bind_b2Vec2_set_x_1"];
var _emscripten_bind_b2RayCastInput___destroy___0 = Module["_emscripten_bind_b2RayCastInput___destroy___0"] = asm["_emscripten_bind_b2RayCastInput___destroy___0"];
var _emscripten_bind_JSDestructionListener_JSDestructionListener_0 = Module["_emscripten_bind_JSDestructionListener_JSDestructionListener_0"] = asm["_emscripten_bind_JSDestructionListener_JSDestructionListener_0"];
var _emscripten_bind_b2WheelJointDef_set_localAnchorA_1 = Module["_emscripten_bind_b2WheelJointDef_set_localAnchorA_1"] = asm["_emscripten_bind_b2WheelJointDef_set_localAnchorA_1"];
var _emscripten_bind_b2FrictionJoint_GetBodyB_0 = Module["_emscripten_bind_b2FrictionJoint_GetBodyB_0"] = asm["_emscripten_bind_b2FrictionJoint_GetBodyB_0"];
var _emscripten_bind_b2WeldJointDef_set_bodyA_1 = Module["_emscripten_bind_b2WeldJointDef_set_bodyA_1"] = asm["_emscripten_bind_b2WeldJointDef_set_bodyA_1"];
var _emscripten_bind_b2World_SetDestructionListener_1 = Module["_emscripten_bind_b2World_SetDestructionListener_1"] = asm["_emscripten_bind_b2World_SetDestructionListener_1"];
var _emscripten_enum_b2JointType_e_wheelJoint = Module["_emscripten_enum_b2JointType_e_wheelJoint"] = asm["_emscripten_enum_b2JointType_e_wheelJoint"];
var _emscripten_bind_b2WheelJoint_GetLocalAnchorB_0 = Module["_emscripten_bind_b2WheelJoint_GetLocalAnchorB_0"] = asm["_emscripten_bind_b2WheelJoint_GetLocalAnchorB_0"];
var _emscripten_bind_b2JointDef___destroy___0 = Module["_emscripten_bind_b2JointDef___destroy___0"] = asm["_emscripten_bind_b2JointDef___destroy___0"];
var _emscripten_bind_b2PrismaticJointDef_Initialize_4 = Module["_emscripten_bind_b2PrismaticJointDef_Initialize_4"] = asm["_emscripten_bind_b2PrismaticJointDef_Initialize_4"];
var _emscripten_bind_b2FrictionJointDef_get_localAnchorA_0 = Module["_emscripten_bind_b2FrictionJointDef_get_localAnchorA_0"] = asm["_emscripten_bind_b2FrictionJointDef_get_localAnchorA_0"];
var _emscripten_bind_b2CircleShape_GetChildCount_0 = Module["_emscripten_bind_b2CircleShape_GetChildCount_0"] = asm["_emscripten_bind_b2CircleShape_GetChildCount_0"];
var _emscripten_bind_b2BodyDef_get_bullet_0 = Module["_emscripten_bind_b2BodyDef_get_bullet_0"] = asm["_emscripten_bind_b2BodyDef_get_bullet_0"];
var _emscripten_bind_b2Params_getDumpPos_0 = Module["_emscripten_bind_b2Params_getDumpPos_0"] = asm["_emscripten_bind_b2Params_getDumpPos_0"];
var _emscripten_bind_b2Color_set_b_1 = Module["_emscripten_bind_b2Color_set_b_1"] = asm["_emscripten_bind_b2Color_set_b_1"];
var _emscripten_bind_b2PrismaticJointDef_get_type_0 = Module["_emscripten_bind_b2PrismaticJointDef_get_type_0"] = asm["_emscripten_bind_b2PrismaticJointDef_get_type_0"];
var _emscripten_bind_b2MassData_get_center_0 = Module["_emscripten_bind_b2MassData_get_center_0"] = asm["_emscripten_bind_b2MassData_get_center_0"];
var _emscripten_bind_b2World_b2World_1 = Module["_emscripten_bind_b2World_b2World_1"] = asm["_emscripten_bind_b2World_b2World_1"];
var _emscripten_bind_b2WheelJoint_GetReactionForce_1 = Module["_emscripten_bind_b2WheelJoint_GetReactionForce_1"] = asm["_emscripten_bind_b2WheelJoint_GetReactionForce_1"];
var _emscripten_bind_b2Rot_Set_1 = Module["_emscripten_bind_b2Rot_Set_1"] = asm["_emscripten_bind_b2Rot_Set_1"];
var _emscripten_bind_b2Vec2_op_add_1 = Module["_emscripten_bind_b2Vec2_op_add_1"] = asm["_emscripten_bind_b2Vec2_op_add_1"];
var _emscripten_bind_b2Joint_GetBodyA_0 = Module["_emscripten_bind_b2Joint_GetBodyA_0"] = asm["_emscripten_bind_b2Joint_GetBodyA_0"];
var _emscripten_bind_b2Joint_GetCollideConnected_0 = Module["_emscripten_bind_b2Joint_GetCollideConnected_0"] = asm["_emscripten_bind_b2Joint_GetCollideConnected_0"];
var _emscripten_bind_b2FrictionJointDef_get_bodyB_0 = Module["_emscripten_bind_b2FrictionJointDef_get_bodyB_0"] = asm["_emscripten_bind_b2FrictionJointDef_get_bodyB_0"];
var _emscripten_bind_b2WheelJointDef___destroy___0 = Module["_emscripten_bind_b2WheelJointDef___destroy___0"] = asm["_emscripten_bind_b2WheelJointDef___destroy___0"];
var _emscripten_bind_b2Vec3_SetZero_0 = Module["_emscripten_bind_b2Vec3_SetZero_0"] = asm["_emscripten_bind_b2Vec3_SetZero_0"];
var _emscripten_enum_b2JointType_e_pulleyJoint = Module["_emscripten_enum_b2JointType_e_pulleyJoint"] = asm["_emscripten_enum_b2JointType_e_pulleyJoint"];
var _emscripten_bind_b2ChainShape_get_m_nextVertex_0 = Module["_emscripten_bind_b2ChainShape_get_m_nextVertex_0"] = asm["_emscripten_bind_b2ChainShape_get_m_nextVertex_0"];
var _emscripten_bind_b2Contact_SetEnabled_1 = Module["_emscripten_bind_b2Contact_SetEnabled_1"] = asm["_emscripten_bind_b2Contact_SetEnabled_1"];
var _emscripten_bind_b2Shape_set_m_radius_1 = Module["_emscripten_bind_b2Shape_set_m_radius_1"] = asm["_emscripten_bind_b2Shape_set_m_radius_1"];
var _emscripten_bind_b2World_SetDebugDraw_1 = Module["_emscripten_bind_b2World_SetDebugDraw_1"] = asm["_emscripten_bind_b2World_SetDebugDraw_1"];
var _emscripten_bind_b2ContactID_set_key_1 = Module["_emscripten_bind_b2ContactID_set_key_1"] = asm["_emscripten_bind_b2ContactID_set_key_1"];
var _emscripten_bind_b2Params_getSimd_0 = Module["_emscripten_bind_b2Params_getSimd_0"] = asm["_emscripten_bind_b2Params_getSimd_0"];
var _emscripten_bind_b2RevoluteJointDef_set_collideConnected_1 = Module["_emscripten_bind_b2RevoluteJointDef_set_collideConnected_1"] = asm["_emscripten_bind_b2RevoluteJointDef_set_collideConnected_1"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _emscripten_bind_b2World_GetProxyCount_0 = Module["_emscripten_bind_b2World_GetProxyCount_0"] = asm["_emscripten_bind_b2World_GetProxyCount_0"];
var _emscripten_bind_b2Vec2_Normalize_0 = Module["_emscripten_bind_b2Vec2_Normalize_0"] = asm["_emscripten_bind_b2Vec2_Normalize_0"];
var _emscripten_bind_b2WheelJoint_GetJointSpeed_0 = Module["_emscripten_bind_b2WheelJoint_GetJointSpeed_0"] = asm["_emscripten_bind_b2WheelJoint_GetJointSpeed_0"];
var _emscripten_bind_b2FrictionJointDef_set_localAnchorA_1 = Module["_emscripten_bind_b2FrictionJointDef_set_localAnchorA_1"] = asm["_emscripten_bind_b2FrictionJointDef_set_localAnchorA_1"];
var _emscripten_bind_b2GearJoint_GetRatio_0 = Module["_emscripten_bind_b2GearJoint_GetRatio_0"] = asm["_emscripten_bind_b2GearJoint_GetRatio_0"];
var _emscripten_bind_JSRayCastCallback_JSRayCastCallback_0 = Module["_emscripten_bind_JSRayCastCallback_JSRayCastCallback_0"] = asm["_emscripten_bind_JSRayCastCallback_JSRayCastCallback_0"];
var _emscripten_bind_b2RayCastInput_set_p2_1 = Module["_emscripten_bind_b2RayCastInput_set_p2_1"] = asm["_emscripten_bind_b2RayCastInput_set_p2_1"];
var _emscripten_bind_b2RevoluteJointDef_get_motorSpeed_0 = Module["_emscripten_bind_b2RevoluteJointDef_get_motorSpeed_0"] = asm["_emscripten_bind_b2RevoluteJointDef_get_motorSpeed_0"];
var _emscripten_bind_b2RayCastOutput_get_normal_0 = Module["_emscripten_bind_b2RayCastOutput_get_normal_0"] = asm["_emscripten_bind_b2RayCastOutput_get_normal_0"];
var _emscripten_bind_b2WeldJoint_GetBodyA_0 = Module["_emscripten_bind_b2WeldJoint_GetBodyA_0"] = asm["_emscripten_bind_b2WeldJoint_GetBodyA_0"];
var _emscripten_enum_b2DrawFlag_e_jointBit = Module["_emscripten_enum_b2DrawFlag_e_jointBit"] = asm["_emscripten_enum_b2DrawFlag_e_jointBit"];
var _emscripten_bind_b2FixtureDef_get_isSensor_0 = Module["_emscripten_bind_b2FixtureDef_get_isSensor_0"] = asm["_emscripten_bind_b2FixtureDef_get_isSensor_0"];
var _emscripten_bind_b2PulleyJointDef_set_bodyB_1 = Module["_emscripten_bind_b2PulleyJointDef_set_bodyB_1"] = asm["_emscripten_bind_b2PulleyJointDef_set_bodyB_1"];
var _emscripten_bind_b2WheelJoint_EnableMotor_1 = Module["_emscripten_bind_b2WheelJoint_EnableMotor_1"] = asm["_emscripten_bind_b2WheelJoint_EnableMotor_1"];
var _emscripten_bind_b2RevoluteJoint_GetJointSpeed_0 = Module["_emscripten_bind_b2RevoluteJoint_GetJointSpeed_0"] = asm["_emscripten_bind_b2RevoluteJoint_GetJointSpeed_0"];
var _emscripten_bind_JSDraw_DrawSolidPolygon_3 = Module["_emscripten_bind_JSDraw_DrawSolidPolygon_3"] = asm["_emscripten_bind_JSDraw_DrawSolidPolygon_3"];
var _emscripten_bind_b2World_SetSubStepping_1 = Module["_emscripten_bind_b2World_SetSubStepping_1"] = asm["_emscripten_bind_b2World_SetSubStepping_1"];
var _emscripten_bind_b2RevoluteJoint_GetJointAngle_0 = Module["_emscripten_bind_b2RevoluteJoint_GetJointAngle_0"] = asm["_emscripten_bind_b2RevoluteJoint_GetJointAngle_0"];
var _emscripten_bind_JSDraw___destroy___0 = Module["_emscripten_bind_JSDraw___destroy___0"] = asm["_emscripten_bind_JSDraw___destroy___0"];
var _emscripten_bind_b2MouseJointDef___destroy___0 = Module["_emscripten_bind_b2MouseJointDef___destroy___0"] = asm["_emscripten_bind_b2MouseJointDef___destroy___0"];
var _emscripten_bind_b2Mat33_Solve22_1 = Module["_emscripten_bind_b2Mat33_Solve22_1"] = asm["_emscripten_bind_b2Mat33_Solve22_1"];
var _emscripten_bind_b2Body_ApplyTorque_1 = Module["_emscripten_bind_b2Body_ApplyTorque_1"] = asm["_emscripten_bind_b2Body_ApplyTorque_1"];
var _emscripten_bind_b2Profile_set_solvePosition_1 = Module["_emscripten_bind_b2Profile_set_solvePosition_1"] = asm["_emscripten_bind_b2Profile_set_solvePosition_1"];
var _emscripten_bind_b2ContactFilter___destroy___0 = Module["_emscripten_bind_b2ContactFilter___destroy___0"] = asm["_emscripten_bind_b2ContactFilter___destroy___0"];
var _emscripten_bind_b2PulleyJointDef_get_localAnchorB_0 = Module["_emscripten_bind_b2PulleyJointDef_get_localAnchorB_0"] = asm["_emscripten_bind_b2PulleyJointDef_get_localAnchorB_0"];
var _emscripten_bind_b2ChainShape_set_m_hasPrevVertex_1 = Module["_emscripten_bind_b2ChainShape_set_m_hasPrevVertex_1"] = asm["_emscripten_bind_b2ChainShape_set_m_hasPrevVertex_1"];
var _emscripten_bind_b2Params_setTestOut_1 = Module["_emscripten_bind_b2Params_setTestOut_1"] = asm["_emscripten_bind_b2Params_setTestOut_1"];
var _emscripten_bind_b2FrictionJointDef_get_localAnchorB_0 = Module["_emscripten_bind_b2FrictionJointDef_get_localAnchorB_0"] = asm["_emscripten_bind_b2FrictionJointDef_get_localAnchorB_0"];
var _emscripten_bind_b2PrismaticJoint___destroy___0 = Module["_emscripten_bind_b2PrismaticJoint___destroy___0"] = asm["_emscripten_bind_b2PrismaticJoint___destroy___0"];
var _emscripten_bind_b2World_CreateJoint_1 = Module["_emscripten_bind_b2World_CreateJoint_1"] = asm["_emscripten_bind_b2World_CreateJoint_1"];
var _emscripten_bind_b2Profile_get_solveTOI_0 = Module["_emscripten_bind_b2Profile_get_solveTOI_0"] = asm["_emscripten_bind_b2Profile_get_solveTOI_0"];
var _emscripten_bind_b2ManifoldPoint_get_id_0 = Module["_emscripten_bind_b2ManifoldPoint_get_id_0"] = asm["_emscripten_bind_b2ManifoldPoint_get_id_0"];
var _emscripten_bind_JSContactFilter_JSContactListener_0 = Module["_emscripten_bind_JSContactFilter_JSContactListener_0"] = asm["_emscripten_bind_JSContactFilter_JSContactListener_0"];
var _emscripten_bind_b2Manifold_set_pointCount_1 = Module["_emscripten_bind_b2Manifold_set_pointCount_1"] = asm["_emscripten_bind_b2Manifold_set_pointCount_1"];
var _emscripten_bind_b2PrismaticJoint_GetMotorSpeed_0 = Module["_emscripten_bind_b2PrismaticJoint_GetMotorSpeed_0"] = asm["_emscripten_bind_b2PrismaticJoint_GetMotorSpeed_0"];
var _emscripten_bind_b2Body_SetSleepingAllowed_1 = Module["_emscripten_bind_b2Body_SetSleepingAllowed_1"] = asm["_emscripten_bind_b2Body_SetSleepingAllowed_1"];
var _emscripten_bind_b2Rot_SetIdentity_0 = Module["_emscripten_bind_b2Rot_SetIdentity_0"] = asm["_emscripten_bind_b2Rot_SetIdentity_0"];
var _emscripten_bind_b2PulleyJoint_GetGroundAnchorB_0 = Module["_emscripten_bind_b2PulleyJoint_GetGroundAnchorB_0"] = asm["_emscripten_bind_b2PulleyJoint_GetGroundAnchorB_0"];
var _emscripten_bind_b2Vec3_op_add_1 = Module["_emscripten_bind_b2Vec3_op_add_1"] = asm["_emscripten_bind_b2Vec3_op_add_1"];
var _emscripten_bind_b2FrictionJoint_GetType_0 = Module["_emscripten_bind_b2FrictionJoint_GetType_0"] = asm["_emscripten_bind_b2FrictionJoint_GetType_0"];
var _emscripten_bind_b2Params_getSortCon_0 = Module["_emscripten_bind_b2Params_getSortCon_0"] = asm["_emscripten_bind_b2Params_getSortCon_0"];
var _emscripten_bind_b2MouseJoint_SetTarget_1 = Module["_emscripten_bind_b2MouseJoint_SetTarget_1"] = asm["_emscripten_bind_b2MouseJoint_SetTarget_1"];
var _emscripten_bind_b2MouseJointDef_get_dampingRatio_0 = Module["_emscripten_bind_b2MouseJointDef_get_dampingRatio_0"] = asm["_emscripten_bind_b2MouseJointDef_get_dampingRatio_0"];
var _emscripten_bind_b2RevoluteJoint_GetMotorSpeed_0 = Module["_emscripten_bind_b2RevoluteJoint_GetMotorSpeed_0"] = asm["_emscripten_bind_b2RevoluteJoint_GetMotorSpeed_0"];
var _emscripten_bind_b2ChainShape_set_m_type_1 = Module["_emscripten_bind_b2ChainShape_set_m_type_1"] = asm["_emscripten_bind_b2ChainShape_set_m_type_1"];
var _emscripten_bind_b2RevoluteJointDef_set_bodyB_1 = Module["_emscripten_bind_b2RevoluteJointDef_set_bodyB_1"] = asm["_emscripten_bind_b2RevoluteJointDef_set_bodyB_1"];
var _emscripten_bind_b2Body_GetGravityScale_0 = Module["_emscripten_bind_b2Body_GetGravityScale_0"] = asm["_emscripten_bind_b2Body_GetGravityScale_0"];
var _emscripten_bind_b2Mat33_b2Mat33_0 = Module["_emscripten_bind_b2Mat33_b2Mat33_0"] = asm["_emscripten_bind_b2Mat33_b2Mat33_0"];
var _emscripten_bind_b2MouseJointDef_get_bodyB_0 = Module["_emscripten_bind_b2MouseJointDef_get_bodyB_0"] = asm["_emscripten_bind_b2MouseJointDef_get_bodyB_0"];
var _emscripten_bind_b2Shape_TestPoint_2 = Module["_emscripten_bind_b2Shape_TestPoint_2"] = asm["_emscripten_bind_b2Shape_TestPoint_2"];
var _emscripten_bind_b2Body_GetWorldVector_1 = Module["_emscripten_bind_b2Body_GetWorldVector_1"] = asm["_emscripten_bind_b2Body_GetWorldVector_1"];
var _emscripten_bind_b2WeldJointDef_get_frequencyHz_0 = Module["_emscripten_bind_b2WeldJointDef_get_frequencyHz_0"] = asm["_emscripten_bind_b2WeldJointDef_get_frequencyHz_0"];
var _emscripten_bind_b2PolygonShape_Set_2 = Module["_emscripten_bind_b2PolygonShape_Set_2"] = asm["_emscripten_bind_b2PolygonShape_Set_2"];
var _emscripten_bind_b2Manifold___destroy___0 = Module["_emscripten_bind_b2Manifold___destroy___0"] = asm["_emscripten_bind_b2Manifold___destroy___0"];
var _emscripten_bind_b2PulleyJointDef_set_lengthA_1 = Module["_emscripten_bind_b2PulleyJointDef_set_lengthA_1"] = asm["_emscripten_bind_b2PulleyJointDef_set_lengthA_1"];
var _emscripten_bind_b2RevoluteJointDef_set_localAnchorA_1 = Module["_emscripten_bind_b2RevoluteJointDef_set_localAnchorA_1"] = asm["_emscripten_bind_b2RevoluteJointDef_set_localAnchorA_1"];
var _emscripten_bind_b2GearJoint___destroy___0 = Module["_emscripten_bind_b2GearJoint___destroy___0"] = asm["_emscripten_bind_b2GearJoint___destroy___0"];
var _emscripten_bind_b2Fixture_SetRestitution_1 = Module["_emscripten_bind_b2Fixture_SetRestitution_1"] = asm["_emscripten_bind_b2Fixture_SetRestitution_1"];
var _emscripten_bind_b2PulleyJointDef_set_ratio_1 = Module["_emscripten_bind_b2PulleyJointDef_set_ratio_1"] = asm["_emscripten_bind_b2PulleyJointDef_set_ratio_1"];
var _emscripten_bind_b2JointEdge_set_prev_1 = Module["_emscripten_bind_b2JointEdge_set_prev_1"] = asm["_emscripten_bind_b2JointEdge_set_prev_1"];
var _emscripten_bind_b2PrismaticJoint_GetReactionTorque_1 = Module["_emscripten_bind_b2PrismaticJoint_GetReactionTorque_1"] = asm["_emscripten_bind_b2PrismaticJoint_GetReactionTorque_1"];
var _emscripten_bind_b2Body_GetLocalPoint_1 = Module["_emscripten_bind_b2Body_GetLocalPoint_1"] = asm["_emscripten_bind_b2Body_GetLocalPoint_1"];
var _emscripten_bind_b2PrismaticJoint_GetCollideConnected_0 = Module["_emscripten_bind_b2PrismaticJoint_GetCollideConnected_0"] = asm["_emscripten_bind_b2PrismaticJoint_GetCollideConnected_0"];
var _emscripten_bind_b2RopeJointDef_get_userData_0 = Module["_emscripten_bind_b2RopeJointDef_get_userData_0"] = asm["_emscripten_bind_b2RopeJointDef_get_userData_0"];
var _emscripten_bind_b2DistanceJoint_IsActive_0 = Module["_emscripten_bind_b2DistanceJoint_IsActive_0"] = asm["_emscripten_bind_b2DistanceJoint_IsActive_0"];
var _emscripten_bind_b2Vec2_b2Vec2_2 = Module["_emscripten_bind_b2Vec2_b2Vec2_2"] = asm["_emscripten_bind_b2Vec2_b2Vec2_2"];
var _emscripten_bind_b2PrismaticJoint_GetJointTranslation_0 = Module["_emscripten_bind_b2PrismaticJoint_GetJointTranslation_0"] = asm["_emscripten_bind_b2PrismaticJoint_GetJointTranslation_0"];
var _emscripten_bind_b2Vec2_b2Vec2_0 = Module["_emscripten_bind_b2Vec2_b2Vec2_0"] = asm["_emscripten_bind_b2Vec2_b2Vec2_0"];
var _emscripten_bind_b2DistanceJoint_GetAnchorB_0 = Module["_emscripten_bind_b2DistanceJoint_GetAnchorB_0"] = asm["_emscripten_bind_b2DistanceJoint_GetAnchorB_0"];
var _emscripten_bind_b2WheelJointDef_get_maxMotorTorque_0 = Module["_emscripten_bind_b2WheelJointDef_get_maxMotorTorque_0"] = asm["_emscripten_bind_b2WheelJointDef_get_maxMotorTorque_0"];
var _emscripten_bind_b2Vec2_op_sub_1 = Module["_emscripten_bind_b2Vec2_op_sub_1"] = asm["_emscripten_bind_b2Vec2_op_sub_1"];
var _emscripten_bind_b2CircleShape_get_m_p_0 = Module["_emscripten_bind_b2CircleShape_get_m_p_0"] = asm["_emscripten_bind_b2CircleShape_get_m_p_0"];
var _emscripten_bind_b2ContactFeature_get_indexA_0 = Module["_emscripten_bind_b2ContactFeature_get_indexA_0"] = asm["_emscripten_bind_b2ContactFeature_get_indexA_0"];
var _emscripten_bind_b2ChainShape_set_m_nextVertex_1 = Module["_emscripten_bind_b2ChainShape_set_m_nextVertex_1"] = asm["_emscripten_bind_b2ChainShape_set_m_nextVertex_1"];
var _emscripten_bind_b2PulleyJoint_GetCollideConnected_0 = Module["_emscripten_bind_b2PulleyJoint_GetCollideConnected_0"] = asm["_emscripten_bind_b2PulleyJoint_GetCollideConnected_0"];
var _emscripten_bind_b2PulleyJoint_GetReactionForce_1 = Module["_emscripten_bind_b2PulleyJoint_GetReactionForce_1"] = asm["_emscripten_bind_b2PulleyJoint_GetReactionForce_1"];
var _emscripten_bind_b2FrictionJointDef_get_maxForce_0 = Module["_emscripten_bind_b2FrictionJointDef_get_maxForce_0"] = asm["_emscripten_bind_b2FrictionJointDef_get_maxForce_0"];
var _emscripten_bind_b2PulleyJoint_GetAnchorB_0 = Module["_emscripten_bind_b2PulleyJoint_GetAnchorB_0"] = asm["_emscripten_bind_b2PulleyJoint_GetAnchorB_0"];
var _emscripten_bind_b2Mat33_get_ex_0 = Module["_emscripten_bind_b2Mat33_get_ex_0"] = asm["_emscripten_bind_b2Mat33_get_ex_0"];
var _emscripten_bind_b2Body_GetPosition_0 = Module["_emscripten_bind_b2Body_GetPosition_0"] = asm["_emscripten_bind_b2Body_GetPosition_0"];
var _emscripten_bind_b2Profile___destroy___0 = Module["_emscripten_bind_b2Profile___destroy___0"] = asm["_emscripten_bind_b2Profile___destroy___0"];
var _emscripten_bind_b2ContactEdge_get_prev_0 = Module["_emscripten_bind_b2ContactEdge_get_prev_0"] = asm["_emscripten_bind_b2ContactEdge_get_prev_0"];
var _emscripten_bind_b2DistanceJoint_SetFrequency_1 = Module["_emscripten_bind_b2DistanceJoint_SetFrequency_1"] = asm["_emscripten_bind_b2DistanceJoint_SetFrequency_1"];
var _emscripten_bind_b2Params_setDumpCon_1 = Module["_emscripten_bind_b2Params_setDumpCon_1"] = asm["_emscripten_bind_b2Params_setDumpCon_1"];
var _emscripten_enum_b2ShapeType_e_chain = Module["_emscripten_enum_b2ShapeType_e_chain"] = asm["_emscripten_enum_b2ShapeType_e_chain"];
var _emscripten_enum_b2ContactFeatureType_e_vertex = Module["_emscripten_enum_b2ContactFeatureType_e_vertex"] = asm["_emscripten_enum_b2ContactFeatureType_e_vertex"];
var _emscripten_bind_b2Counters_b2Counters_0 = Module["_emscripten_bind_b2Counters_b2Counters_0"] = asm["_emscripten_bind_b2Counters_b2Counters_0"];
var _emscripten_bind_b2Fixture_GetBody_0 = Module["_emscripten_bind_b2Fixture_GetBody_0"] = asm["_emscripten_bind_b2Fixture_GetBody_0"];
var _emscripten_bind_b2Body_ApplyForceToCenter_1 = Module["_emscripten_bind_b2Body_ApplyForceToCenter_1"] = asm["_emscripten_bind_b2Body_ApplyForceToCenter_1"];
var _emscripten_bind_b2ContactImpulse_set_count_1 = Module["_emscripten_bind_b2ContactImpulse_set_count_1"] = asm["_emscripten_bind_b2ContactImpulse_set_count_1"];
var _emscripten_bind_b2Params_b2Params_0 = Module["_emscripten_bind_b2Params_b2Params_0"] = asm["_emscripten_bind_b2Params_b2Params_0"];
var _emscripten_bind_b2PulleyJointDef_get_bodyB_0 = Module["_emscripten_bind_b2PulleyJointDef_get_bodyB_0"] = asm["_emscripten_bind_b2PulleyJointDef_get_bodyB_0"];
var _emscripten_bind_b2Rot_set_c_1 = Module["_emscripten_bind_b2Rot_set_c_1"] = asm["_emscripten_bind_b2Rot_set_c_1"];
var _emscripten_bind_b2RevoluteJoint_GetReactionTorque_1 = Module["_emscripten_bind_b2RevoluteJoint_GetReactionTorque_1"] = asm["_emscripten_bind_b2RevoluteJoint_GetReactionTorque_1"];
var _emscripten_bind_b2Fixture_SetDensity_1 = Module["_emscripten_bind_b2Fixture_SetDensity_1"] = asm["_emscripten_bind_b2Fixture_SetDensity_1"];
var _emscripten_bind_b2ChainShape_get_m_prevVertex_0 = Module["_emscripten_bind_b2ChainShape_get_m_prevVertex_0"] = asm["_emscripten_bind_b2ChainShape_get_m_prevVertex_0"];
var _emscripten_bind_b2World_ClearForces_0 = Module["_emscripten_bind_b2World_ClearForces_0"] = asm["_emscripten_bind_b2World_ClearForces_0"];
var _emscripten_bind_b2Vec3___destroy___0 = Module["_emscripten_bind_b2Vec3___destroy___0"] = asm["_emscripten_bind_b2Vec3___destroy___0"];
var _emscripten_bind_b2WheelJointDef_set_userData_1 = Module["_emscripten_bind_b2WheelJointDef_set_userData_1"] = asm["_emscripten_bind_b2WheelJointDef_set_userData_1"];
var _emscripten_bind_b2WeldJoint_SetFrequency_1 = Module["_emscripten_bind_b2WeldJoint_SetFrequency_1"] = asm["_emscripten_bind_b2WeldJoint_SetFrequency_1"];
var _emscripten_bind_JSContactListener_PreSolve_2 = Module["_emscripten_bind_JSContactListener_PreSolve_2"] = asm["_emscripten_bind_JSContactListener_PreSolve_2"];
var _emscripten_bind_b2Body_SetFixedRotation_1 = Module["_emscripten_bind_b2Body_SetFixedRotation_1"] = asm["_emscripten_bind_b2Body_SetFixedRotation_1"];
var _emscripten_bind_b2RayCastOutput_set_normal_1 = Module["_emscripten_bind_b2RayCastOutput_set_normal_1"] = asm["_emscripten_bind_b2RayCastOutput_set_normal_1"];
var _emscripten_enum_b2JointType_e_ropeJoint = Module["_emscripten_enum_b2JointType_e_ropeJoint"] = asm["_emscripten_enum_b2JointType_e_ropeJoint"];
var _emscripten_bind_b2DistanceJoint_GetDampingRatio_0 = Module["_emscripten_bind_b2DistanceJoint_GetDampingRatio_0"] = asm["_emscripten_bind_b2DistanceJoint_GetDampingRatio_0"];
var _emscripten_bind_b2WeldJointDef_set_userData_1 = Module["_emscripten_bind_b2WeldJointDef_set_userData_1"] = asm["_emscripten_bind_b2WeldJointDef_set_userData_1"];
var _emscripten_bind_b2RevoluteJoint_EnableMotor_1 = Module["_emscripten_bind_b2RevoluteJoint_EnableMotor_1"] = asm["_emscripten_bind_b2RevoluteJoint_EnableMotor_1"];
var _emscripten_bind_b2Body_ApplyAngularImpulse_1 = Module["_emscripten_bind_b2Body_ApplyAngularImpulse_1"] = asm["_emscripten_bind_b2Body_ApplyAngularImpulse_1"];
var _emscripten_bind_b2MouseJointDef_set_bodyB_1 = Module["_emscripten_bind_b2MouseJointDef_set_bodyB_1"] = asm["_emscripten_bind_b2MouseJointDef_set_bodyB_1"];
var _emscripten_bind_b2CircleShape_GetType_0 = Module["_emscripten_bind_b2CircleShape_GetType_0"] = asm["_emscripten_bind_b2CircleShape_GetType_0"];
var _emscripten_bind_b2PolygonShape_GetType_0 = Module["_emscripten_bind_b2PolygonShape_GetType_0"] = asm["_emscripten_bind_b2PolygonShape_GetType_0"];
var _emscripten_bind_b2PrismaticJointDef_set_referenceAngle_1 = Module["_emscripten_bind_b2PrismaticJointDef_set_referenceAngle_1"] = asm["_emscripten_bind_b2PrismaticJointDef_set_referenceAngle_1"];
var _emscripten_bind_b2RopeJointDef_get_collideConnected_0 = Module["_emscripten_bind_b2RopeJointDef_get_collideConnected_0"] = asm["_emscripten_bind_b2RopeJointDef_get_collideConnected_0"];
var _emscripten_bind_b2FixtureDef_set_filter_1 = Module["_emscripten_bind_b2FixtureDef_set_filter_1"] = asm["_emscripten_bind_b2FixtureDef_set_filter_1"];
var _emscripten_bind_b2PulleyJointDef_get_groundAnchorA_0 = Module["_emscripten_bind_b2PulleyJointDef_get_groundAnchorA_0"] = asm["_emscripten_bind_b2PulleyJointDef_get_groundAnchorA_0"];
var _emscripten_bind_b2Fixture_SetFilterData_1 = Module["_emscripten_bind_b2Fixture_SetFilterData_1"] = asm["_emscripten_bind_b2Fixture_SetFilterData_1"];
var _emscripten_bind_b2Params_setSortCon_1 = Module["_emscripten_bind_b2Params_setSortCon_1"] = asm["_emscripten_bind_b2Params_setSortCon_1"];
var _emscripten_bind_b2RayCastCallback___destroy___0 = Module["_emscripten_bind_b2RayCastCallback___destroy___0"] = asm["_emscripten_bind_b2RayCastCallback___destroy___0"];
var _emscripten_bind_b2PulleyJointDef_set_localAnchorA_1 = Module["_emscripten_bind_b2PulleyJointDef_set_localAnchorA_1"] = asm["_emscripten_bind_b2PulleyJointDef_set_localAnchorA_1"];
var _emscripten_bind_b2PrismaticJoint_GetLocalAxisA_0 = Module["_emscripten_bind_b2PrismaticJoint_GetLocalAxisA_0"] = asm["_emscripten_bind_b2PrismaticJoint_GetLocalAxisA_0"];
var _emscripten_bind_b2WheelJoint_GetAnchorA_0 = Module["_emscripten_bind_b2WheelJoint_GetAnchorA_0"] = asm["_emscripten_bind_b2WheelJoint_GetAnchorA_0"];
var _emscripten_bind_b2Transform_Set_2 = Module["_emscripten_bind_b2Transform_Set_2"] = asm["_emscripten_bind_b2Transform_Set_2"];
var _emscripten_bind_b2RopeJointDef_get_localAnchorA_0 = Module["_emscripten_bind_b2RopeJointDef_get_localAnchorA_0"] = asm["_emscripten_bind_b2RopeJointDef_get_localAnchorA_0"];
var _emscripten_bind_b2ContactEdge_set_contact_1 = Module["_emscripten_bind_b2ContactEdge_set_contact_1"] = asm["_emscripten_bind_b2ContactEdge_set_contact_1"];
var _emscripten_bind_b2RevoluteJointDef_get_enableLimit_0 = Module["_emscripten_bind_b2RevoluteJointDef_get_enableLimit_0"] = asm["_emscripten_bind_b2RevoluteJointDef_get_enableLimit_0"];
var _emscripten_bind_b2CircleShape_get_m_radius_0 = Module["_emscripten_bind_b2CircleShape_get_m_radius_0"] = asm["_emscripten_bind_b2CircleShape_get_m_radius_0"];
var _emscripten_bind_b2EdgeShape_GetChildCount_0 = Module["_emscripten_bind_b2EdgeShape_GetChildCount_0"] = asm["_emscripten_bind_b2EdgeShape_GetChildCount_0"];
var _emscripten_bind_b2Profile_set_solveTOI_1 = Module["_emscripten_bind_b2Profile_set_solveTOI_1"] = asm["_emscripten_bind_b2Profile_set_solveTOI_1"];
var _emscripten_bind_b2PrismaticJointDef_set_type_1 = Module["_emscripten_bind_b2PrismaticJointDef_set_type_1"] = asm["_emscripten_bind_b2PrismaticJointDef_set_type_1"];
var _emscripten_bind_b2GearJointDef_get_userData_0 = Module["_emscripten_bind_b2GearJointDef_get_userData_0"] = asm["_emscripten_bind_b2GearJointDef_get_userData_0"];
var _emscripten_bind_b2RevoluteJoint_GetAnchorB_0 = Module["_emscripten_bind_b2RevoluteJoint_GetAnchorB_0"] = asm["_emscripten_bind_b2RevoluteJoint_GetAnchorB_0"];
var _emscripten_bind_b2Transform_b2Transform_2 = Module["_emscripten_bind_b2Transform_b2Transform_2"] = asm["_emscripten_bind_b2Transform_b2Transform_2"];
var _emscripten_bind_b2PrismaticJoint_GetReactionForce_1 = Module["_emscripten_bind_b2PrismaticJoint_GetReactionForce_1"] = asm["_emscripten_bind_b2PrismaticJoint_GetReactionForce_1"];
var _emscripten_bind_b2Transform_b2Transform_0 = Module["_emscripten_bind_b2Transform_b2Transform_0"] = asm["_emscripten_bind_b2Transform_b2Transform_0"];
var _emscripten_bind_b2MouseJoint_GetCollideConnected_0 = Module["_emscripten_bind_b2MouseJoint_GetCollideConnected_0"] = asm["_emscripten_bind_b2MouseJoint_GetCollideConnected_0"];
var _emscripten_enum_b2LimitState_e_equalLimits = Module["_emscripten_enum_b2LimitState_e_equalLimits"] = asm["_emscripten_enum_b2LimitState_e_equalLimits"];
var _emscripten_bind_b2Body_GetContactList_0 = Module["_emscripten_bind_b2Body_GetContactList_0"] = asm["_emscripten_bind_b2Body_GetContactList_0"];
var _emscripten_bind_b2Body_IsFixedRotation_0 = Module["_emscripten_bind_b2Body_IsFixedRotation_0"] = asm["_emscripten_bind_b2Body_IsFixedRotation_0"];
var _emscripten_enum_b2DrawFlag_e_shapeBit = Module["_emscripten_enum_b2DrawFlag_e_shapeBit"] = asm["_emscripten_enum_b2DrawFlag_e_shapeBit"];
var _emscripten_bind_b2Contact_GetFriction_0 = Module["_emscripten_bind_b2Contact_GetFriction_0"] = asm["_emscripten_bind_b2Contact_GetFriction_0"];
var _emscripten_bind_b2WheelJoint_GetAnchorB_0 = Module["_emscripten_bind_b2WheelJoint_GetAnchorB_0"] = asm["_emscripten_bind_b2WheelJoint_GetAnchorB_0"];
var _emscripten_bind_b2DistanceJointDef_set_length_1 = Module["_emscripten_bind_b2DistanceJointDef_set_length_1"] = asm["_emscripten_bind_b2DistanceJointDef_set_length_1"];
var _emscripten_bind_b2DistanceJoint_GetLocalAnchorB_0 = Module["_emscripten_bind_b2DistanceJoint_GetLocalAnchorB_0"] = asm["_emscripten_bind_b2DistanceJoint_GetLocalAnchorB_0"];
var _emscripten_bind_b2Mat33_set_ey_1 = Module["_emscripten_bind_b2Mat33_set_ey_1"] = asm["_emscripten_bind_b2Mat33_set_ey_1"];
var _emscripten_bind_b2DistanceJointDef_get_type_0 = Module["_emscripten_bind_b2DistanceJointDef_get_type_0"] = asm["_emscripten_bind_b2DistanceJointDef_get_type_0"];
var _emscripten_bind_b2Draw_ClearFlags_1 = Module["_emscripten_bind_b2Draw_ClearFlags_1"] = asm["_emscripten_bind_b2Draw_ClearFlags_1"];
var _emscripten_bind_b2Body_IsActive_0 = Module["_emscripten_bind_b2Body_IsActive_0"] = asm["_emscripten_bind_b2Body_IsActive_0"];
var _emscripten_bind_b2Contact_ResetRestitution_0 = Module["_emscripten_bind_b2Contact_ResetRestitution_0"] = asm["_emscripten_bind_b2Contact_ResetRestitution_0"];
var _emscripten_bind_b2World_GetAllowSleeping_0 = Module["_emscripten_bind_b2World_GetAllowSleeping_0"] = asm["_emscripten_bind_b2World_GetAllowSleeping_0"];
var _emscripten_bind_b2ManifoldPoint_b2ManifoldPoint_0 = Module["_emscripten_bind_b2ManifoldPoint_b2ManifoldPoint_0"] = asm["_emscripten_bind_b2ManifoldPoint_b2ManifoldPoint_0"];
var _emscripten_bind_b2PrismaticJointDef_set_maxMotorForce_1 = Module["_emscripten_bind_b2PrismaticJointDef_set_maxMotorForce_1"] = asm["_emscripten_bind_b2PrismaticJointDef_set_maxMotorForce_1"];
var _emscripten_bind_b2GearJointDef_set_bodyA_1 = Module["_emscripten_bind_b2GearJointDef_set_bodyA_1"] = asm["_emscripten_bind_b2GearJointDef_set_bodyA_1"];
var _emscripten_bind_b2RevoluteJointDef_set_enableMotor_1 = Module["_emscripten_bind_b2RevoluteJointDef_set_enableMotor_1"] = asm["_emscripten_bind_b2RevoluteJointDef_set_enableMotor_1"];
var _emscripten_bind_b2PulleyJoint_IsActive_0 = Module["_emscripten_bind_b2PulleyJoint_IsActive_0"] = asm["_emscripten_bind_b2PulleyJoint_IsActive_0"];
var _emscripten_bind_b2MouseJoint_GetNext_0 = Module["_emscripten_bind_b2MouseJoint_GetNext_0"] = asm["_emscripten_bind_b2MouseJoint_GetNext_0"];
var _emscripten_bind_b2Transform_set_p_1 = Module["_emscripten_bind_b2Transform_set_p_1"] = asm["_emscripten_bind_b2Transform_set_p_1"];
var _emscripten_bind_b2EdgeShape_set_m_vertex0_1 = Module["_emscripten_bind_b2EdgeShape_set_m_vertex0_1"] = asm["_emscripten_bind_b2EdgeShape_set_m_vertex0_1"];
var _emscripten_bind_b2PulleyJointDef_get_lengthB_0 = Module["_emscripten_bind_b2PulleyJointDef_get_lengthB_0"] = asm["_emscripten_bind_b2PulleyJointDef_get_lengthB_0"];
var _emscripten_bind_b2Fixture_SetSensor_1 = Module["_emscripten_bind_b2Fixture_SetSensor_1"] = asm["_emscripten_bind_b2Fixture_SetSensor_1"];
var _emscripten_bind_b2GearJointDef_get_joint1_0 = Module["_emscripten_bind_b2GearJointDef_get_joint1_0"] = asm["_emscripten_bind_b2GearJointDef_get_joint1_0"];
var _emscripten_bind_b2PrismaticJoint_GetMotorForce_1 = Module["_emscripten_bind_b2PrismaticJoint_GetMotorForce_1"] = asm["_emscripten_bind_b2PrismaticJoint_GetMotorForce_1"];
var _emscripten_bind_b2DistanceJoint_GetBodyA_0 = Module["_emscripten_bind_b2DistanceJoint_GetBodyA_0"] = asm["_emscripten_bind_b2DistanceJoint_GetBodyA_0"];
var _emscripten_bind_b2GearJoint_IsActive_0 = Module["_emscripten_bind_b2GearJoint_IsActive_0"] = asm["_emscripten_bind_b2GearJoint_IsActive_0"];
var _emscripten_bind_b2EdgeShape_get_m_vertex0_0 = Module["_emscripten_bind_b2EdgeShape_get_m_vertex0_0"] = asm["_emscripten_bind_b2EdgeShape_get_m_vertex0_0"];
var _emscripten_bind_b2World_GetBodyCount_0 = Module["_emscripten_bind_b2World_GetBodyCount_0"] = asm["_emscripten_bind_b2World_GetBodyCount_0"];
var _emscripten_bind_b2Fixture_GetMassData_1 = Module["_emscripten_bind_b2Fixture_GetMassData_1"] = asm["_emscripten_bind_b2Fixture_GetMassData_1"];
var _emscripten_bind_b2WeldJointDef_get_collideConnected_0 = Module["_emscripten_bind_b2WeldJointDef_get_collideConnected_0"] = asm["_emscripten_bind_b2WeldJointDef_get_collideConnected_0"];
var _emscripten_bind_b2FrictionJoint_GetMaxTorque_0 = Module["_emscripten_bind_b2FrictionJoint_GetMaxTorque_0"] = asm["_emscripten_bind_b2FrictionJoint_GetMaxTorque_0"];
var _emscripten_bind_b2EdgeShape_RayCast_4 = Module["_emscripten_bind_b2EdgeShape_RayCast_4"] = asm["_emscripten_bind_b2EdgeShape_RayCast_4"];
var _emscripten_bind_b2BodyDef_set_allowSleep_1 = Module["_emscripten_bind_b2BodyDef_set_allowSleep_1"] = asm["_emscripten_bind_b2BodyDef_set_allowSleep_1"];
var _emscripten_bind_b2PulleyJoint_GetType_0 = Module["_emscripten_bind_b2PulleyJoint_GetType_0"] = asm["_emscripten_bind_b2PulleyJoint_GetType_0"];
var _emscripten_bind_b2WeldJointDef_set_localAnchorA_1 = Module["_emscripten_bind_b2WeldJointDef_set_localAnchorA_1"] = asm["_emscripten_bind_b2WeldJointDef_set_localAnchorA_1"];
var _emscripten_bind_b2Profile_set_step_1 = Module["_emscripten_bind_b2Profile_set_step_1"] = asm["_emscripten_bind_b2Profile_set_step_1"];
var _emscripten_bind_b2ContactEdge_set_other_1 = Module["_emscripten_bind_b2ContactEdge_set_other_1"] = asm["_emscripten_bind_b2ContactEdge_set_other_1"];
var _emscripten_enum_b2LimitState_e_atLowerLimit = Module["_emscripten_enum_b2LimitState_e_atLowerLimit"] = asm["_emscripten_enum_b2LimitState_e_atLowerLimit"];
var _emscripten_bind_b2Vec2_op_mul_1 = Module["_emscripten_bind_b2Vec2_op_mul_1"] = asm["_emscripten_bind_b2Vec2_op_mul_1"];
var _emscripten_bind_b2PrismaticJointDef_get_localAnchorA_0 = Module["_emscripten_bind_b2PrismaticJointDef_get_localAnchorA_0"] = asm["_emscripten_bind_b2PrismaticJointDef_get_localAnchorA_0"];
var _emscripten_bind_b2PrismaticJoint_SetUserData_1 = Module["_emscripten_bind_b2PrismaticJoint_SetUserData_1"] = asm["_emscripten_bind_b2PrismaticJoint_SetUserData_1"];
var _emscripten_bind_b2RopeJoint_GetAnchorA_0 = Module["_emscripten_bind_b2RopeJoint_GetAnchorA_0"] = asm["_emscripten_bind_b2RopeJoint_GetAnchorA_0"];
var _emscripten_bind_b2WheelJoint_GetLocalAnchorA_0 = Module["_emscripten_bind_b2WheelJoint_GetLocalAnchorA_0"] = asm["_emscripten_bind_b2WheelJoint_GetLocalAnchorA_0"];
var _emscripten_bind_b2DistanceJointDef_get_bodyA_0 = Module["_emscripten_bind_b2DistanceJointDef_get_bodyA_0"] = asm["_emscripten_bind_b2DistanceJointDef_get_bodyA_0"];
var _emscripten_bind_b2Vec2_get_x_0 = Module["_emscripten_bind_b2Vec2_get_x_0"] = asm["_emscripten_bind_b2Vec2_get_x_0"];
var _emscripten_bind_b2DistanceJointDef_set_userData_1 = Module["_emscripten_bind_b2DistanceJointDef_set_userData_1"] = asm["_emscripten_bind_b2DistanceJointDef_set_userData_1"];
var _emscripten_bind_b2ContactEdge_get_other_0 = Module["_emscripten_bind_b2ContactEdge_get_other_0"] = asm["_emscripten_bind_b2ContactEdge_get_other_0"];
var _emscripten_bind_b2RopeJoint_GetLocalAnchorB_0 = Module["_emscripten_bind_b2RopeJoint_GetLocalAnchorB_0"] = asm["_emscripten_bind_b2RopeJoint_GetLocalAnchorB_0"];
var _emscripten_bind_b2PulleyJointDef___destroy___0 = Module["_emscripten_bind_b2PulleyJointDef___destroy___0"] = asm["_emscripten_bind_b2PulleyJointDef___destroy___0"];
var _emscripten_bind_b2MouseJoint_GetBodyB_0 = Module["_emscripten_bind_b2MouseJoint_GetBodyB_0"] = asm["_emscripten_bind_b2MouseJoint_GetBodyB_0"];
var _emscripten_bind_b2PolygonShape_TestPoint_2 = Module["_emscripten_bind_b2PolygonShape_TestPoint_2"] = asm["_emscripten_bind_b2PolygonShape_TestPoint_2"];
var _emscripten_bind_b2EdgeShape_set_m_vertex3_1 = Module["_emscripten_bind_b2EdgeShape_set_m_vertex3_1"] = asm["_emscripten_bind_b2EdgeShape_set_m_vertex3_1"];
var _emscripten_bind_b2PolygonShape_b2PolygonShape_0 = Module["_emscripten_bind_b2PolygonShape_b2PolygonShape_0"] = asm["_emscripten_bind_b2PolygonShape_b2PolygonShape_0"];
var _emscripten_bind_b2GearJointDef_set_ratio_1 = Module["_emscripten_bind_b2GearJointDef_set_ratio_1"] = asm["_emscripten_bind_b2GearJointDef_set_ratio_1"];
var _emscripten_bind_b2WheelJoint_SetMaxMotorTorque_1 = Module["_emscripten_bind_b2WheelJoint_SetMaxMotorTorque_1"] = asm["_emscripten_bind_b2WheelJoint_SetMaxMotorTorque_1"];
var _emscripten_bind_b2GearJoint_GetReactionForce_1 = Module["_emscripten_bind_b2GearJoint_GetReactionForce_1"] = asm["_emscripten_bind_b2GearJoint_GetReactionForce_1"];
var _emscripten_bind_b2DistanceJointDef_get_localAnchorA_0 = Module["_emscripten_bind_b2DistanceJointDef_get_localAnchorA_0"] = asm["_emscripten_bind_b2DistanceJointDef_get_localAnchorA_0"];
var _emscripten_bind_b2MassData_set_center_1 = Module["_emscripten_bind_b2MassData_set_center_1"] = asm["_emscripten_bind_b2MassData_set_center_1"];
var _emscripten_bind_b2Body_GetInertia_0 = Module["_emscripten_bind_b2Body_GetInertia_0"] = asm["_emscripten_bind_b2Body_GetInertia_0"];
var _emscripten_bind_b2PrismaticJointDef_b2PrismaticJointDef_0 = Module["_emscripten_bind_b2PrismaticJointDef_b2PrismaticJointDef_0"] = asm["_emscripten_bind_b2PrismaticJointDef_b2PrismaticJointDef_0"];
var _emscripten_bind_b2BodyDef_get_active_0 = Module["_emscripten_bind_b2BodyDef_get_active_0"] = asm["_emscripten_bind_b2BodyDef_get_active_0"];
var _emscripten_bind_b2Body_GetAngularVelocity_0 = Module["_emscripten_bind_b2Body_GetAngularVelocity_0"] = asm["_emscripten_bind_b2Body_GetAngularVelocity_0"];
var _emscripten_bind_b2WeldJoint_GetBodyB_0 = Module["_emscripten_bind_b2WeldJoint_GetBodyB_0"] = asm["_emscripten_bind_b2WeldJoint_GetBodyB_0"];
var _emscripten_bind_b2Draw___destroy___0 = Module["_emscripten_bind_b2Draw___destroy___0"] = asm["_emscripten_bind_b2Draw___destroy___0"];
var _emscripten_bind_b2WheelJointDef_Initialize_4 = Module["_emscripten_bind_b2WheelJointDef_Initialize_4"] = asm["_emscripten_bind_b2WheelJointDef_Initialize_4"];
var _emscripten_bind_b2WeldJointDef_set_dampingRatio_1 = Module["_emscripten_bind_b2WeldJointDef_set_dampingRatio_1"] = asm["_emscripten_bind_b2WeldJointDef_set_dampingRatio_1"];
var _emscripten_bind_b2Contact_IsEnabled_0 = Module["_emscripten_bind_b2Contact_IsEnabled_0"] = asm["_emscripten_bind_b2Contact_IsEnabled_0"];
var _emscripten_bind_b2Joint_GetAnchorB_0 = Module["_emscripten_bind_b2Joint_GetAnchorB_0"] = asm["_emscripten_bind_b2Joint_GetAnchorB_0"];
var _emscripten_bind_b2Params_getFrame1_0 = Module["_emscripten_bind_b2Params_getFrame1_0"] = asm["_emscripten_bind_b2Params_getFrame1_0"];
var _emscripten_bind_b2PrismaticJointDef_get_userData_0 = Module["_emscripten_bind_b2PrismaticJointDef_get_userData_0"] = asm["_emscripten_bind_b2PrismaticJointDef_get_userData_0"];
var _emscripten_bind_b2ContactFeature_set_typeB_1 = Module["_emscripten_bind_b2ContactFeature_set_typeB_1"] = asm["_emscripten_bind_b2ContactFeature_set_typeB_1"];
var _emscripten_bind_b2RevoluteJoint_GetBodyA_0 = Module["_emscripten_bind_b2RevoluteJoint_GetBodyA_0"] = asm["_emscripten_bind_b2RevoluteJoint_GetBodyA_0"];
var _emscripten_bind_b2ContactID_set_cf_1 = Module["_emscripten_bind_b2ContactID_set_cf_1"] = asm["_emscripten_bind_b2ContactID_set_cf_1"];
var _emscripten_bind_b2Rot_GetXAxis_0 = Module["_emscripten_bind_b2Rot_GetXAxis_0"] = asm["_emscripten_bind_b2Rot_GetXAxis_0"];
var _emscripten_bind_b2ContactEdge_set_prev_1 = Module["_emscripten_bind_b2ContactEdge_set_prev_1"] = asm["_emscripten_bind_b2ContactEdge_set_prev_1"];
var _emscripten_bind_b2Vec3_Set_3 = Module["_emscripten_bind_b2Vec3_Set_3"] = asm["_emscripten_bind_b2Vec3_Set_3"];
var _emscripten_bind_b2Fixture_GetNext_0 = Module["_emscripten_bind_b2Fixture_GetNext_0"] = asm["_emscripten_bind_b2Fixture_GetNext_0"];
var _emscripten_bind_b2FrictionJointDef_set_localAnchorB_1 = Module["_emscripten_bind_b2FrictionJointDef_set_localAnchorB_1"] = asm["_emscripten_bind_b2FrictionJointDef_set_localAnchorB_1"];
var _emscripten_bind_b2PulleyJoint_GetNext_0 = Module["_emscripten_bind_b2PulleyJoint_GetNext_0"] = asm["_emscripten_bind_b2PulleyJoint_GetNext_0"];
var _emscripten_bind_b2ChainShape_get_m_type_0 = Module["_emscripten_bind_b2ChainShape_get_m_type_0"] = asm["_emscripten_bind_b2ChainShape_get_m_type_0"];
var _emscripten_bind_b2GearJointDef_get_bodyA_0 = Module["_emscripten_bind_b2GearJointDef_get_bodyA_0"] = asm["_emscripten_bind_b2GearJointDef_get_bodyA_0"];
var _emscripten_bind_b2DistanceJointDef_set_frequencyHz_1 = Module["_emscripten_bind_b2DistanceJointDef_set_frequencyHz_1"] = asm["_emscripten_bind_b2DistanceJointDef_set_frequencyHz_1"];
var _emscripten_bind_b2RevoluteJointDef_get_localAnchorB_0 = Module["_emscripten_bind_b2RevoluteJointDef_get_localAnchorB_0"] = asm["_emscripten_bind_b2RevoluteJointDef_get_localAnchorB_0"];
var _emscripten_bind_b2Counters_dump_0 = Module["_emscripten_bind_b2Counters_dump_0"] = asm["_emscripten_bind_b2Counters_dump_0"];
var _emscripten_bind_b2RevoluteJointDef_get_referenceAngle_0 = Module["_emscripten_bind_b2RevoluteJointDef_get_referenceAngle_0"] = asm["_emscripten_bind_b2RevoluteJointDef_get_referenceAngle_0"];
var _emscripten_bind_JSContactFilter___destroy___0 = Module["_emscripten_bind_JSContactFilter___destroy___0"] = asm["_emscripten_bind_JSContactFilter___destroy___0"];
var _emscripten_bind_b2RevoluteJoint_EnableLimit_1 = Module["_emscripten_bind_b2RevoluteJoint_EnableLimit_1"] = asm["_emscripten_bind_b2RevoluteJoint_EnableLimit_1"];
var _emscripten_bind_b2PolygonShape_get_m_radius_0 = Module["_emscripten_bind_b2PolygonShape_get_m_radius_0"] = asm["_emscripten_bind_b2PolygonShape_get_m_radius_0"];
var _emscripten_enum_b2BodyType_b2_kinematicBody = Module["_emscripten_enum_b2BodyType_b2_kinematicBody"] = asm["_emscripten_enum_b2BodyType_b2_kinematicBody"];
var _emscripten_bind_b2RopeJointDef_get_bodyA_0 = Module["_emscripten_bind_b2RopeJointDef_get_bodyA_0"] = asm["_emscripten_bind_b2RopeJointDef_get_bodyA_0"];
var _emscripten_bind_b2DistanceJointDef_get_dampingRatio_0 = Module["_emscripten_bind_b2DistanceJointDef_get_dampingRatio_0"] = asm["_emscripten_bind_b2DistanceJointDef_get_dampingRatio_0"];
var _emscripten_enum_b2ManifoldType_e_faceA = Module["_emscripten_enum_b2ManifoldType_e_faceA"] = asm["_emscripten_enum_b2ManifoldType_e_faceA"];
var _emscripten_enum_b2ManifoldType_e_faceB = Module["_emscripten_enum_b2ManifoldType_e_faceB"] = asm["_emscripten_enum_b2ManifoldType_e_faceB"];
var _emscripten_bind_b2RevoluteJointDef_get_bodyB_0 = Module["_emscripten_bind_b2RevoluteJointDef_get_bodyB_0"] = asm["_emscripten_bind_b2RevoluteJointDef_get_bodyB_0"];
var _emscripten_bind_b2FixtureDef_b2FixtureDef_0 = Module["_emscripten_bind_b2FixtureDef_b2FixtureDef_0"] = asm["_emscripten_bind_b2FixtureDef_b2FixtureDef_0"];
var _emscripten_bind_b2BodyDef_get_awake_0 = Module["_emscripten_bind_b2BodyDef_get_awake_0"] = asm["_emscripten_bind_b2BodyDef_get_awake_0"];
var _emscripten_bind_b2EdgeShape_get_m_hasVertex3_0 = Module["_emscripten_bind_b2EdgeShape_get_m_hasVertex3_0"] = asm["_emscripten_bind_b2EdgeShape_get_m_hasVertex3_0"];
var _emscripten_enum_b2ShapeType_e_edge = Module["_emscripten_enum_b2ShapeType_e_edge"] = asm["_emscripten_enum_b2ShapeType_e_edge"];
var _emscripten_bind_b2RevoluteJoint_GetMaxMotorTorque_0 = Module["_emscripten_bind_b2RevoluteJoint_GetMaxMotorTorque_0"] = asm["_emscripten_bind_b2RevoluteJoint_GetMaxMotorTorque_0"];
var _emscripten_bind_b2BodyDef_set_active_1 = Module["_emscripten_bind_b2BodyDef_set_active_1"] = asm["_emscripten_bind_b2BodyDef_set_active_1"];
var _emscripten_bind_b2DistanceJointDef_set_localAnchorB_1 = Module["_emscripten_bind_b2DistanceJointDef_set_localAnchorB_1"] = asm["_emscripten_bind_b2DistanceJointDef_set_localAnchorB_1"];
var _emscripten_bind_b2Body_GetWorldPoint_1 = Module["_emscripten_bind_b2Body_GetWorldPoint_1"] = asm["_emscripten_bind_b2Body_GetWorldPoint_1"];
var _emscripten_bind_b2ManifoldPoint_get_normalImpulse_0 = Module["_emscripten_bind_b2ManifoldPoint_get_normalImpulse_0"] = asm["_emscripten_bind_b2ManifoldPoint_get_normalImpulse_0"];
var _emscripten_bind_JSContactFilter_ShouldCollide_2 = Module["_emscripten_bind_JSContactFilter_ShouldCollide_2"] = asm["_emscripten_bind_JSContactFilter_ShouldCollide_2"];
var _emscripten_bind_b2Joint_GetReactionTorque_1 = Module["_emscripten_bind_b2Joint_GetReactionTorque_1"] = asm["_emscripten_bind_b2Joint_GetReactionTorque_1"];
var _emscripten_bind_b2RevoluteJointDef_set_type_1 = Module["_emscripten_bind_b2RevoluteJointDef_set_type_1"] = asm["_emscripten_bind_b2RevoluteJointDef_set_type_1"];
var _emscripten_bind_b2RopeJointDef_b2RopeJointDef_0 = Module["_emscripten_bind_b2RopeJointDef_b2RopeJointDef_0"] = asm["_emscripten_bind_b2RopeJointDef_b2RopeJointDef_0"];
var _emscripten_bind_b2BodyDef_get_linearDamping_0 = Module["_emscripten_bind_b2BodyDef_get_linearDamping_0"] = asm["_emscripten_bind_b2BodyDef_get_linearDamping_0"];
var _emscripten_bind_b2World_Step_3 = Module["_emscripten_bind_b2World_Step_3"] = asm["_emscripten_bind_b2World_Step_3"];
var _emscripten_bind_b2CircleShape_RayCast_4 = Module["_emscripten_bind_b2CircleShape_RayCast_4"] = asm["_emscripten_bind_b2CircleShape_RayCast_4"];
var _emscripten_bind_b2Profile_get_step_0 = Module["_emscripten_bind_b2Profile_get_step_0"] = asm["_emscripten_bind_b2Profile_get_step_0"];
var _emscripten_bind_b2Vec3_b2Vec3_0 = Module["_emscripten_bind_b2Vec3_b2Vec3_0"] = asm["_emscripten_bind_b2Vec3_b2Vec3_0"];
var _emscripten_bind_b2DistanceJoint_GetLength_0 = Module["_emscripten_bind_b2DistanceJoint_GetLength_0"] = asm["_emscripten_bind_b2DistanceJoint_GetLength_0"];
var _emscripten_bind_b2PulleyJoint_GetLengthB_0 = Module["_emscripten_bind_b2PulleyJoint_GetLengthB_0"] = asm["_emscripten_bind_b2PulleyJoint_GetLengthB_0"];
var _emscripten_bind_b2Filter_set_categoryBits_1 = Module["_emscripten_bind_b2Filter_set_categoryBits_1"] = asm["_emscripten_bind_b2Filter_set_categoryBits_1"];
var _emscripten_bind_b2PrismaticJoint_GetLocalAnchorA_0 = Module["_emscripten_bind_b2PrismaticJoint_GetLocalAnchorA_0"] = asm["_emscripten_bind_b2PrismaticJoint_GetLocalAnchorA_0"];
var _emscripten_bind_b2Shape_get_m_type_0 = Module["_emscripten_bind_b2Shape_get_m_type_0"] = asm["_emscripten_bind_b2Shape_get_m_type_0"];
var _emscripten_bind_b2MouseJoint_SetDampingRatio_1 = Module["_emscripten_bind_b2MouseJoint_SetDampingRatio_1"] = asm["_emscripten_bind_b2MouseJoint_SetDampingRatio_1"];
var _emscripten_bind_b2World_GetAutoClearForces_0 = Module["_emscripten_bind_b2World_GetAutoClearForces_0"] = asm["_emscripten_bind_b2World_GetAutoClearForces_0"];
var _emscripten_enum_b2ShapeType_e_circle = Module["_emscripten_enum_b2ShapeType_e_circle"] = asm["_emscripten_enum_b2ShapeType_e_circle"];
var _emscripten_bind_b2BodyDef_set_fixedRotation_1 = Module["_emscripten_bind_b2BodyDef_set_fixedRotation_1"] = asm["_emscripten_bind_b2BodyDef_set_fixedRotation_1"];
var _emscripten_bind_b2RopeJoint_GetLimitState_0 = Module["_emscripten_bind_b2RopeJoint_GetLimitState_0"] = asm["_emscripten_bind_b2RopeJoint_GetLimitState_0"];
var _emscripten_bind_b2JointDef_get_collideConnected_0 = Module["_emscripten_bind_b2JointDef_get_collideConnected_0"] = asm["_emscripten_bind_b2JointDef_get_collideConnected_0"];
var _emscripten_bind_b2FrictionJointDef_b2FrictionJointDef_0 = Module["_emscripten_bind_b2FrictionJointDef_b2FrictionJointDef_0"] = asm["_emscripten_bind_b2FrictionJointDef_b2FrictionJointDef_0"];
var _emscripten_bind_b2Body_Dump_0 = Module["_emscripten_bind_b2Body_Dump_0"] = asm["_emscripten_bind_b2Body_Dump_0"];
var _emscripten_bind_b2RevoluteJoint_GetLowerLimit_0 = Module["_emscripten_bind_b2RevoluteJoint_GetLowerLimit_0"] = asm["_emscripten_bind_b2RevoluteJoint_GetLowerLimit_0"];
var _emscripten_bind_b2Body_GetWorldCenter_0 = Module["_emscripten_bind_b2Body_GetWorldCenter_0"] = asm["_emscripten_bind_b2Body_GetWorldCenter_0"];
var _emscripten_bind_JSContactListener___destroy___0 = Module["_emscripten_bind_JSContactListener___destroy___0"] = asm["_emscripten_bind_JSContactListener___destroy___0"];
var _emscripten_bind_b2BodyDef_set_linearVelocity_1 = Module["_emscripten_bind_b2BodyDef_set_linearVelocity_1"] = asm["_emscripten_bind_b2BodyDef_set_linearVelocity_1"];
var _emscripten_bind_b2JointDef_set_collideConnected_1 = Module["_emscripten_bind_b2JointDef_set_collideConnected_1"] = asm["_emscripten_bind_b2JointDef_set_collideConnected_1"];
var _emscripten_bind_b2RopeJointDef_get_localAnchorB_0 = Module["_emscripten_bind_b2RopeJointDef_get_localAnchorB_0"] = asm["_emscripten_bind_b2RopeJointDef_get_localAnchorB_0"];
var _emscripten_bind_b2Body_GetUserData_0 = Module["_emscripten_bind_b2Body_GetUserData_0"] = asm["_emscripten_bind_b2Body_GetUserData_0"];
var _emscripten_bind_b2World_GetContinuousPhysics_0 = Module["_emscripten_bind_b2World_GetContinuousPhysics_0"] = asm["_emscripten_bind_b2World_GetContinuousPhysics_0"];
var _emscripten_bind_b2Fixture_RayCast_3 = Module["_emscripten_bind_b2Fixture_RayCast_3"] = asm["_emscripten_bind_b2Fixture_RayCast_3"];
var _emscripten_bind_b2JointDef_set_bodyA_1 = Module["_emscripten_bind_b2JointDef_set_bodyA_1"] = asm["_emscripten_bind_b2JointDef_set_bodyA_1"];
var _emscripten_bind_b2GearJointDef_get_collideConnected_0 = Module["_emscripten_bind_b2GearJointDef_get_collideConnected_0"] = asm["_emscripten_bind_b2GearJointDef_get_collideConnected_0"];
var _emscripten_bind_b2RopeJointDef_get_maxLength_0 = Module["_emscripten_bind_b2RopeJointDef_get_maxLength_0"] = asm["_emscripten_bind_b2RopeJointDef_get_maxLength_0"];
var _emscripten_bind_b2MouseJointDef_get_bodyA_0 = Module["_emscripten_bind_b2MouseJointDef_get_bodyA_0"] = asm["_emscripten_bind_b2MouseJointDef_get_bodyA_0"];
var _emscripten_bind_b2Body_SetBullet_1 = Module["_emscripten_bind_b2Body_SetBullet_1"] = asm["_emscripten_bind_b2Body_SetBullet_1"];
var _emscripten_bind_b2DistanceJoint_GetType_0 = Module["_emscripten_bind_b2DistanceJoint_GetType_0"] = asm["_emscripten_bind_b2DistanceJoint_GetType_0"];
var _emscripten_bind_b2FixtureDef_get_restitution_0 = Module["_emscripten_bind_b2FixtureDef_get_restitution_0"] = asm["_emscripten_bind_b2FixtureDef_get_restitution_0"];
var _emscripten_bind_b2Fixture_GetType_0 = Module["_emscripten_bind_b2Fixture_GetType_0"] = asm["_emscripten_bind_b2Fixture_GetType_0"];
var _emscripten_bind_b2WheelJointDef_set_enableMotor_1 = Module["_emscripten_bind_b2WheelJointDef_set_enableMotor_1"] = asm["_emscripten_bind_b2WheelJointDef_set_enableMotor_1"];
var _emscripten_bind_b2RevoluteJoint_GetBodyB_0 = Module["_emscripten_bind_b2RevoluteJoint_GetBodyB_0"] = asm["_emscripten_bind_b2RevoluteJoint_GetBodyB_0"];
var _emscripten_bind_b2Profile_set_solveInit_1 = Module["_emscripten_bind_b2Profile_set_solveInit_1"] = asm["_emscripten_bind_b2Profile_set_solveInit_1"];
var _emscripten_bind_b2RopeJointDef_set_type_1 = Module["_emscripten_bind_b2RopeJointDef_set_type_1"] = asm["_emscripten_bind_b2RopeJointDef_set_type_1"];
var _emscripten_bind_b2PrismaticJointDef_get_bodyB_0 = Module["_emscripten_bind_b2PrismaticJointDef_get_bodyB_0"] = asm["_emscripten_bind_b2PrismaticJointDef_get_bodyB_0"];
var _emscripten_bind_b2Body_SetLinearVelocity_1 = Module["_emscripten_bind_b2Body_SetLinearVelocity_1"] = asm["_emscripten_bind_b2Body_SetLinearVelocity_1"];
var _emscripten_bind_b2RevoluteJoint_GetReferenceAngle_0 = Module["_emscripten_bind_b2RevoluteJoint_GetReferenceAngle_0"] = asm["_emscripten_bind_b2RevoluteJoint_GetReferenceAngle_0"];
var _emscripten_bind_b2PulleyJointDef_get_userData_0 = Module["_emscripten_bind_b2PulleyJointDef_get_userData_0"] = asm["_emscripten_bind_b2PulleyJointDef_get_userData_0"];
var _emscripten_bind_b2PrismaticJointDef_set_bodyB_1 = Module["_emscripten_bind_b2PrismaticJointDef_set_bodyB_1"] = asm["_emscripten_bind_b2PrismaticJointDef_set_bodyB_1"];
var _emscripten_bind_b2ManifoldPoint_set_id_1 = Module["_emscripten_bind_b2ManifoldPoint_set_id_1"] = asm["_emscripten_bind_b2ManifoldPoint_set_id_1"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _free = Module["_free"] = asm["_free"];
var _emscripten_bind_b2Params_setDumpPos_1 = Module["_emscripten_bind_b2Params_setDumpPos_1"] = asm["_emscripten_bind_b2Params_setDumpPos_1"];
var _emscripten_bind_b2Manifold_get_localNormal_0 = Module["_emscripten_bind_b2Manifold_get_localNormal_0"] = asm["_emscripten_bind_b2Manifold_get_localNormal_0"];
var _emscripten_bind_b2AABB_RayCast_2 = Module["_emscripten_bind_b2AABB_RayCast_2"] = asm["_emscripten_bind_b2AABB_RayCast_2"];
var _emscripten_bind_b2FixtureDef_set_isSensor_1 = Module["_emscripten_bind_b2FixtureDef_set_isSensor_1"] = asm["_emscripten_bind_b2FixtureDef_set_isSensor_1"];
var _emscripten_bind_b2RopeJoint_GetBodyB_0 = Module["_emscripten_bind_b2RopeJoint_GetBodyB_0"] = asm["_emscripten_bind_b2RopeJoint_GetBodyB_0"];
var _emscripten_bind_b2PrismaticJoint_GetAnchorA_0 = Module["_emscripten_bind_b2PrismaticJoint_GetAnchorA_0"] = asm["_emscripten_bind_b2PrismaticJoint_GetAnchorA_0"];
var _emscripten_bind_b2ChainShape_set_m_count_1 = Module["_emscripten_bind_b2ChainShape_set_m_count_1"] = asm["_emscripten_bind_b2ChainShape_set_m_count_1"];
var _emscripten_bind_b2PrismaticJoint_IsMotorEnabled_0 = Module["_emscripten_bind_b2PrismaticJoint_IsMotorEnabled_0"] = asm["_emscripten_bind_b2PrismaticJoint_IsMotorEnabled_0"];
var _emscripten_bind_b2WeldJoint_GetFrequency_0 = Module["_emscripten_bind_b2WeldJoint_GetFrequency_0"] = asm["_emscripten_bind_b2WeldJoint_GetFrequency_0"];
var _emscripten_bind_b2Joint_GetUserData_0 = Module["_emscripten_bind_b2Joint_GetUserData_0"] = asm["_emscripten_bind_b2Joint_GetUserData_0"];
var _emscripten_bind_b2RevoluteJointDef_get_lowerAngle_0 = Module["_emscripten_bind_b2RevoluteJointDef_get_lowerAngle_0"] = asm["_emscripten_bind_b2RevoluteJointDef_get_lowerAngle_0"];
var _emscripten_bind_b2Manifold_set_type_1 = Module["_emscripten_bind_b2Manifold_set_type_1"] = asm["_emscripten_bind_b2Manifold_set_type_1"];
var _emscripten_bind_b2Vec3_b2Vec3_3 = Module["_emscripten_bind_b2Vec3_b2Vec3_3"] = asm["_emscripten_bind_b2Vec3_b2Vec3_3"];
var _emscripten_bind_b2RopeJointDef_set_maxLength_1 = Module["_emscripten_bind_b2RopeJointDef_set_maxLength_1"] = asm["_emscripten_bind_b2RopeJointDef_set_maxLength_1"];
var _emscripten_bind_b2ChainShape_TestPoint_2 = Module["_emscripten_bind_b2ChainShape_TestPoint_2"] = asm["_emscripten_bind_b2ChainShape_TestPoint_2"];
var _emscripten_bind_b2PrismaticJoint_GetReferenceAngle_0 = Module["_emscripten_bind_b2PrismaticJoint_GetReferenceAngle_0"] = asm["_emscripten_bind_b2PrismaticJoint_GetReferenceAngle_0"];
var _emscripten_bind_b2RayCastInput_get_p2_0 = Module["_emscripten_bind_b2RayCastInput_get_p2_0"] = asm["_emscripten_bind_b2RayCastInput_get_p2_0"];
var _emscripten_bind_b2Params_setSimd_1 = Module["_emscripten_bind_b2Params_setSimd_1"] = asm["_emscripten_bind_b2Params_setSimd_1"];
var _emscripten_bind_b2Shape_GetChildCount_0 = Module["_emscripten_bind_b2Shape_GetChildCount_0"] = asm["_emscripten_bind_b2Shape_GetChildCount_0"];
var _emscripten_bind_b2BodyDef_set_angle_1 = Module["_emscripten_bind_b2BodyDef_set_angle_1"] = asm["_emscripten_bind_b2BodyDef_set_angle_1"];
var _emscripten_bind_b2WeldJoint_GetUserData_0 = Module["_emscripten_bind_b2WeldJoint_GetUserData_0"] = asm["_emscripten_bind_b2WeldJoint_GetUserData_0"];
var _emscripten_bind_b2WheelJointDef_get_localAnchorA_0 = Module["_emscripten_bind_b2WheelJointDef_get_localAnchorA_0"] = asm["_emscripten_bind_b2WheelJointDef_get_localAnchorA_0"];
var _emscripten_bind_b2PulleyJointDef_set_type_1 = Module["_emscripten_bind_b2PulleyJointDef_set_type_1"] = asm["_emscripten_bind_b2PulleyJointDef_set_type_1"];
var _emscripten_bind_b2Body_IsBullet_0 = Module["_emscripten_bind_b2Body_IsBullet_0"] = asm["_emscripten_bind_b2Body_IsBullet_0"];
var _emscripten_bind_b2Body_ApplyLinearImpulse_2 = Module["_emscripten_bind_b2Body_ApplyLinearImpulse_2"] = asm["_emscripten_bind_b2Body_ApplyLinearImpulse_2"];
var _emscripten_bind_b2Mat33_GetSymInverse33_1 = Module["_emscripten_bind_b2Mat33_GetSymInverse33_1"] = asm["_emscripten_bind_b2Mat33_GetSymInverse33_1"];
var _emscripten_bind_b2PolygonShape_ComputeMass_2 = Module["_emscripten_bind_b2PolygonShape_ComputeMass_2"] = asm["_emscripten_bind_b2PolygonShape_ComputeMass_2"];
var _emscripten_bind_b2WeldJoint_GetLocalAnchorA_0 = Module["_emscripten_bind_b2WeldJoint_GetLocalAnchorA_0"] = asm["_emscripten_bind_b2WeldJoint_GetLocalAnchorA_0"];
var _emscripten_bind_b2MouseJoint_SetFrequency_1 = Module["_emscripten_bind_b2MouseJoint_SetFrequency_1"] = asm["_emscripten_bind_b2MouseJoint_SetFrequency_1"];
var _emscripten_bind_b2EdgeShape_get_m_vertex1_0 = Module["_emscripten_bind_b2EdgeShape_get_m_vertex1_0"] = asm["_emscripten_bind_b2EdgeShape_get_m_vertex1_0"];
var _emscripten_bind_b2BodyDef_set_awake_1 = Module["_emscripten_bind_b2BodyDef_set_awake_1"] = asm["_emscripten_bind_b2BodyDef_set_awake_1"];
var _emscripten_bind_b2Vec2_get_y_0 = Module["_emscripten_bind_b2Vec2_get_y_0"] = asm["_emscripten_bind_b2Vec2_get_y_0"];
var _emscripten_bind_b2Body_CreateFixture_1 = Module["_emscripten_bind_b2Body_CreateFixture_1"] = asm["_emscripten_bind_b2Body_CreateFixture_1"];
var _emscripten_bind_b2Body_CreateFixture_2 = Module["_emscripten_bind_b2Body_CreateFixture_2"] = asm["_emscripten_bind_b2Body_CreateFixture_2"];
var _emscripten_bind_b2PulleyJoint_GetUserData_0 = Module["_emscripten_bind_b2PulleyJoint_GetUserData_0"] = asm["_emscripten_bind_b2PulleyJoint_GetUserData_0"];
var _emscripten_bind_b2WheelJoint_SetSpringFrequencyHz_1 = Module["_emscripten_bind_b2WheelJoint_SetSpringFrequencyHz_1"] = asm["_emscripten_bind_b2WheelJoint_SetSpringFrequencyHz_1"];
var _emscripten_bind_b2Fixture_GetUserData_0 = Module["_emscripten_bind_b2Fixture_GetUserData_0"] = asm["_emscripten_bind_b2Fixture_GetUserData_0"];
var _emscripten_bind_b2PolygonShape_ComputeAABB_3 = Module["_emscripten_bind_b2PolygonShape_ComputeAABB_3"] = asm["_emscripten_bind_b2PolygonShape_ComputeAABB_3"];
var _emscripten_bind_b2ContactFeature_get_typeA_0 = Module["_emscripten_bind_b2ContactFeature_get_typeA_0"] = asm["_emscripten_bind_b2ContactFeature_get_typeA_0"];
var _emscripten_bind_b2MouseJoint_GetReactionForce_1 = Module["_emscripten_bind_b2MouseJoint_GetReactionForce_1"] = asm["_emscripten_bind_b2MouseJoint_GetReactionForce_1"];
var _emscripten_bind_b2FrictionJoint_GetReactionTorque_1 = Module["_emscripten_bind_b2FrictionJoint_GetReactionTorque_1"] = asm["_emscripten_bind_b2FrictionJoint_GetReactionTorque_1"];
var _emscripten_bind_b2EdgeShape_TestPoint_2 = Module["_emscripten_bind_b2EdgeShape_TestPoint_2"] = asm["_emscripten_bind_b2EdgeShape_TestPoint_2"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _emscripten_bind_b2PolygonShape_get_m_centroid_0 = Module["_emscripten_bind_b2PolygonShape_get_m_centroid_0"] = asm["_emscripten_bind_b2PolygonShape_get_m_centroid_0"];
var _emscripten_bind_b2ChainShape___destroy___0 = Module["_emscripten_bind_b2ChainShape___destroy___0"] = asm["_emscripten_bind_b2ChainShape___destroy___0"];
var _emscripten_bind_b2GearJoint_SetUserData_1 = Module["_emscripten_bind_b2GearJoint_SetUserData_1"] = asm["_emscripten_bind_b2GearJoint_SetUserData_1"];
var _emscripten_bind_b2Vec3_set_z_1 = Module["_emscripten_bind_b2Vec3_set_z_1"] = asm["_emscripten_bind_b2Vec3_set_z_1"];
var _emscripten_bind_b2PrismaticJointDef_set_enableLimit_1 = Module["_emscripten_bind_b2PrismaticJointDef_set_enableLimit_1"] = asm["_emscripten_bind_b2PrismaticJointDef_set_enableLimit_1"];
var _emscripten_bind_b2DistanceJoint_GetFrequency_0 = Module["_emscripten_bind_b2DistanceJoint_GetFrequency_0"] = asm["_emscripten_bind_b2DistanceJoint_GetFrequency_0"];
var _emscripten_bind_b2Body_SetGravityScale_1 = Module["_emscripten_bind_b2Body_SetGravityScale_1"] = asm["_emscripten_bind_b2Body_SetGravityScale_1"];
var _emscripten_bind_b2FrictionJointDef_get_userData_0 = Module["_emscripten_bind_b2FrictionJointDef_get_userData_0"] = asm["_emscripten_bind_b2FrictionJointDef_get_userData_0"];
var _emscripten_bind_b2AABB_GetPerimeter_0 = Module["_emscripten_bind_b2AABB_GetPerimeter_0"] = asm["_emscripten_bind_b2AABB_GetPerimeter_0"];
var _emscripten_bind_b2PulleyJointDef_get_lengthA_0 = Module["_emscripten_bind_b2PulleyJointDef_get_lengthA_0"] = asm["_emscripten_bind_b2PulleyJointDef_get_lengthA_0"];
var _emscripten_bind_b2Vec3_set_x_1 = Module["_emscripten_bind_b2Vec3_set_x_1"] = asm["_emscripten_bind_b2Vec3_set_x_1"];
var _emscripten_bind_b2PulleyJointDef_get_type_0 = Module["_emscripten_bind_b2PulleyJointDef_get_type_0"] = asm["_emscripten_bind_b2PulleyJointDef_get_type_0"];
var _emscripten_bind_JSDestructionListener_SayGoodbyeJoint_1 = Module["_emscripten_bind_JSDestructionListener_SayGoodbyeJoint_1"] = asm["_emscripten_bind_JSDestructionListener_SayGoodbyeJoint_1"];
var _emscripten_bind_b2Shape___destroy___0 = Module["_emscripten_bind_b2Shape___destroy___0"] = asm["_emscripten_bind_b2Shape___destroy___0"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _emscripten_bind_b2Joint_GetReactionForce_1 = Module["_emscripten_bind_b2Joint_GetReactionForce_1"] = asm["_emscripten_bind_b2Joint_GetReactionForce_1"];
var _emscripten_bind_b2FixtureDef_set_friction_1 = Module["_emscripten_bind_b2FixtureDef_set_friction_1"] = asm["_emscripten_bind_b2FixtureDef_set_friction_1"];
var _emscripten_bind_b2ContactID___destroy___0 = Module["_emscripten_bind_b2ContactID___destroy___0"] = asm["_emscripten_bind_b2ContactID___destroy___0"];
var _emscripten_bind_b2EdgeShape_get_m_hasVertex0_0 = Module["_emscripten_bind_b2EdgeShape_get_m_hasVertex0_0"] = asm["_emscripten_bind_b2EdgeShape_get_m_hasVertex0_0"];
var _emscripten_bind_JSRayCastCallback_ReportFixture_4 = Module["_emscripten_bind_JSRayCastCallback_ReportFixture_4"] = asm["_emscripten_bind_JSRayCastCallback_ReportFixture_4"];
var _emscripten_bind_b2Profile_set_solveVelocity_1 = Module["_emscripten_bind_b2Profile_set_solveVelocity_1"] = asm["_emscripten_bind_b2Profile_set_solveVelocity_1"];
var _emscripten_bind_b2PrismaticJoint_GetAnchorB_0 = Module["_emscripten_bind_b2PrismaticJoint_GetAnchorB_0"] = asm["_emscripten_bind_b2PrismaticJoint_GetAnchorB_0"];
var _emscripten_bind_b2WeldJointDef_b2WeldJointDef_0 = Module["_emscripten_bind_b2WeldJointDef_b2WeldJointDef_0"] = asm["_emscripten_bind_b2WeldJointDef_b2WeldJointDef_0"];
var _emscripten_enum_b2BodyType_b2_staticBody = Module["_emscripten_enum_b2BodyType_b2_staticBody"] = asm["_emscripten_enum_b2BodyType_b2_staticBody"];
var _emscripten_bind_b2RevoluteJointDef_set_upperAngle_1 = Module["_emscripten_bind_b2RevoluteJointDef_set_upperAngle_1"] = asm["_emscripten_bind_b2RevoluteJointDef_set_upperAngle_1"];
var _emscripten_bind_b2RevoluteJointDef_get_type_0 = Module["_emscripten_bind_b2RevoluteJointDef_get_type_0"] = asm["_emscripten_bind_b2RevoluteJointDef_get_type_0"];
var _emscripten_bind_b2GearJointDef_get_type_0 = Module["_emscripten_bind_b2GearJointDef_get_type_0"] = asm["_emscripten_bind_b2GearJointDef_get_type_0"];
var _emscripten_bind_b2ChainShape_GetType_0 = Module["_emscripten_bind_b2ChainShape_GetType_0"] = asm["_emscripten_bind_b2ChainShape_GetType_0"];
var _emscripten_bind_b2RayCastInput_get_maxFraction_0 = Module["_emscripten_bind_b2RayCastInput_get_maxFraction_0"] = asm["_emscripten_bind_b2RayCastInput_get_maxFraction_0"];
var _emscripten_bind_b2GearJoint_GetBodyA_0 = Module["_emscripten_bind_b2GearJoint_GetBodyA_0"] = asm["_emscripten_bind_b2GearJoint_GetBodyA_0"];
var _emscripten_bind_b2Body_GetLocalVector_1 = Module["_emscripten_bind_b2Body_GetLocalVector_1"] = asm["_emscripten_bind_b2Body_GetLocalVector_1"];
var _emscripten_bind_b2PrismaticJoint_EnableLimit_1 = Module["_emscripten_bind_b2PrismaticJoint_EnableLimit_1"] = asm["_emscripten_bind_b2PrismaticJoint_EnableLimit_1"];
var _emscripten_bind_b2Shape_get_m_radius_0 = Module["_emscripten_bind_b2Shape_get_m_radius_0"] = asm["_emscripten_bind_b2Shape_get_m_radius_0"];
var _emscripten_bind_b2BodyDef_set_angularVelocity_1 = Module["_emscripten_bind_b2BodyDef_set_angularVelocity_1"] = asm["_emscripten_bind_b2BodyDef_set_angularVelocity_1"];
var _emscripten_bind_b2Body_SetLinearDamping_1 = Module["_emscripten_bind_b2Body_SetLinearDamping_1"] = asm["_emscripten_bind_b2Body_SetLinearDamping_1"];
var _emscripten_bind_b2WheelJoint_GetBodyB_0 = Module["_emscripten_bind_b2WheelJoint_GetBodyB_0"] = asm["_emscripten_bind_b2WheelJoint_GetBodyB_0"];
var _emscripten_bind_b2GearJointDef_get_joint2_0 = Module["_emscripten_bind_b2GearJointDef_get_joint2_0"] = asm["_emscripten_bind_b2GearJointDef_get_joint2_0"];
var _emscripten_bind_b2PrismaticJoint_IsActive_0 = Module["_emscripten_bind_b2PrismaticJoint_IsActive_0"] = asm["_emscripten_bind_b2PrismaticJoint_IsActive_0"];
var _emscripten_enum_b2JointType_e_weldJoint = Module["_emscripten_enum_b2JointType_e_weldJoint"] = asm["_emscripten_enum_b2JointType_e_weldJoint"];
var _emscripten_bind_b2World_SetContinuousPhysics_1 = Module["_emscripten_bind_b2World_SetContinuousPhysics_1"] = asm["_emscripten_bind_b2World_SetContinuousPhysics_1"];
var _emscripten_bind_b2MouseJointDef_get_target_0 = Module["_emscripten_bind_b2MouseJointDef_get_target_0"] = asm["_emscripten_bind_b2MouseJointDef_get_target_0"];
var _emscripten_bind_b2Manifold_b2Manifold_0 = Module["_emscripten_bind_b2Manifold_b2Manifold_0"] = asm["_emscripten_bind_b2Manifold_b2Manifold_0"];
var _emscripten_bind_b2PulleyJointDef_set_userData_1 = Module["_emscripten_bind_b2PulleyJointDef_set_userData_1"] = asm["_emscripten_bind_b2PulleyJointDef_set_userData_1"];
var _emscripten_bind_b2FrictionJointDef_set_maxForce_1 = Module["_emscripten_bind_b2FrictionJointDef_set_maxForce_1"] = asm["_emscripten_bind_b2FrictionJointDef_set_maxForce_1"];
var _emscripten_bind_b2DistanceJointDef_b2DistanceJointDef_0 = Module["_emscripten_bind_b2DistanceJointDef_b2DistanceJointDef_0"] = asm["_emscripten_bind_b2DistanceJointDef_b2DistanceJointDef_0"];
var _emscripten_bind_b2PolygonShape_set_m_centroid_1 = Module["_emscripten_bind_b2PolygonShape_set_m_centroid_1"] = asm["_emscripten_bind_b2PolygonShape_set_m_centroid_1"];
var _emscripten_bind_b2Mat33_GetInverse22_1 = Module["_emscripten_bind_b2Mat33_GetInverse22_1"] = asm["_emscripten_bind_b2Mat33_GetInverse22_1"];
var _emscripten_bind_b2PolygonShape_SetAsBox_4 = Module["_emscripten_bind_b2PolygonShape_SetAsBox_4"] = asm["_emscripten_bind_b2PolygonShape_SetAsBox_4"];
var _emscripten_bind_b2Params_getTestOut_0 = Module["_emscripten_bind_b2Params_getTestOut_0"] = asm["_emscripten_bind_b2Params_getTestOut_0"];
var _emscripten_bind_b2EdgeShape_get_m_vertex2_0 = Module["_emscripten_bind_b2EdgeShape_get_m_vertex2_0"] = asm["_emscripten_bind_b2EdgeShape_get_m_vertex2_0"];
var _emscripten_bind_b2WheelJoint_GetReactionTorque_1 = Module["_emscripten_bind_b2WheelJoint_GetReactionTorque_1"] = asm["_emscripten_bind_b2WheelJoint_GetReactionTorque_1"];
var _emscripten_bind_b2RevoluteJointDef_b2RevoluteJointDef_0 = Module["_emscripten_bind_b2RevoluteJointDef_b2RevoluteJointDef_0"] = asm["_emscripten_bind_b2RevoluteJointDef_b2RevoluteJointDef_0"];
var _emscripten_bind_b2ContactFeature_set_typeA_1 = Module["_emscripten_bind_b2ContactFeature_set_typeA_1"] = asm["_emscripten_bind_b2ContactFeature_set_typeA_1"];
var _emscripten_bind_b2Fixture_Dump_1 = Module["_emscripten_bind_b2Fixture_Dump_1"] = asm["_emscripten_bind_b2Fixture_Dump_1"];
var _emscripten_bind_b2World_GetJointList_0 = Module["_emscripten_bind_b2World_GetJointList_0"] = asm["_emscripten_bind_b2World_GetJointList_0"];
var _emscripten_bind_b2Manifold_set_localPoint_1 = Module["_emscripten_bind_b2Manifold_set_localPoint_1"] = asm["_emscripten_bind_b2Manifold_set_localPoint_1"];
var _emscripten_bind_b2DistanceJoint_SetUserData_1 = Module["_emscripten_bind_b2DistanceJoint_SetUserData_1"] = asm["_emscripten_bind_b2DistanceJoint_SetUserData_1"];
var _emscripten_bind_b2BodyDef_set_bullet_1 = Module["_emscripten_bind_b2BodyDef_set_bullet_1"] = asm["_emscripten_bind_b2BodyDef_set_bullet_1"];
var _emscripten_bind_b2RayCastOutput___destroy___0 = Module["_emscripten_bind_b2RayCastOutput___destroy___0"] = asm["_emscripten_bind_b2RayCastOutput___destroy___0"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var _emscripten_bind_b2WheelJoint_GetNext_0 = Module["_emscripten_bind_b2WheelJoint_GetNext_0"] = asm["_emscripten_bind_b2WheelJoint_GetNext_0"];
var _emscripten_bind_b2AABB_GetCenter_0 = Module["_emscripten_bind_b2AABB_GetCenter_0"] = asm["_emscripten_bind_b2AABB_GetCenter_0"];
var _emscripten_bind_b2Filter_set_groupIndex_1 = Module["_emscripten_bind_b2Filter_set_groupIndex_1"] = asm["_emscripten_bind_b2Filter_set_groupIndex_1"];
var _emscripten_bind_b2JointDef_b2JointDef_0 = Module["_emscripten_bind_b2JointDef_b2JointDef_0"] = asm["_emscripten_bind_b2JointDef_b2JointDef_0"];
var _emscripten_bind_b2CircleShape_b2CircleShape_0 = Module["_emscripten_bind_b2CircleShape_b2CircleShape_0"] = asm["_emscripten_bind_b2CircleShape_b2CircleShape_0"];
var _emscripten_bind_b2GearJointDef_b2GearJointDef_0 = Module["_emscripten_bind_b2GearJointDef_b2GearJointDef_0"] = asm["_emscripten_bind_b2GearJointDef_b2GearJointDef_0"];
var _emscripten_bind_b2JointDef_get_bodyB_0 = Module["_emscripten_bind_b2JointDef_get_bodyB_0"] = asm["_emscripten_bind_b2JointDef_get_bodyB_0"];
var _emscripten_bind_b2DistanceJoint_GetReactionForce_1 = Module["_emscripten_bind_b2DistanceJoint_GetReactionForce_1"] = asm["_emscripten_bind_b2DistanceJoint_GetReactionForce_1"];
var _emscripten_bind_b2PrismaticJoint_GetJointSpeed_0 = Module["_emscripten_bind_b2PrismaticJoint_GetJointSpeed_0"] = asm["_emscripten_bind_b2PrismaticJoint_GetJointSpeed_0"];
var _emscripten_bind_b2PulleyJointDef_get_groundAnchorB_0 = Module["_emscripten_bind_b2PulleyJointDef_get_groundAnchorB_0"] = asm["_emscripten_bind_b2PulleyJointDef_get_groundAnchorB_0"];
var _emscripten_bind_b2Joint_GetAnchorA_0 = Module["_emscripten_bind_b2Joint_GetAnchorA_0"] = asm["_emscripten_bind_b2Joint_GetAnchorA_0"];
var _emscripten_bind_b2Contact_GetRestitution_0 = Module["_emscripten_bind_b2Contact_GetRestitution_0"] = asm["_emscripten_bind_b2Contact_GetRestitution_0"];
var _emscripten_bind_b2ContactEdge_get_contact_0 = Module["_emscripten_bind_b2ContactEdge_get_contact_0"] = asm["_emscripten_bind_b2ContactEdge_get_contact_0"];
var _emscripten_bind_b2RevoluteJointDef_get_userData_0 = Module["_emscripten_bind_b2RevoluteJointDef_get_userData_0"] = asm["_emscripten_bind_b2RevoluteJointDef_get_userData_0"];
var _emscripten_bind_b2Fixture_GetAABB_1 = Module["_emscripten_bind_b2Fixture_GetAABB_1"] = asm["_emscripten_bind_b2Fixture_GetAABB_1"];
var _emscripten_bind_b2DistanceJointDef_Initialize_4 = Module["_emscripten_bind_b2DistanceJointDef_Initialize_4"] = asm["_emscripten_bind_b2DistanceJointDef_Initialize_4"];
var _emscripten_bind_b2PrismaticJointDef_set_collideConnected_1 = Module["_emscripten_bind_b2PrismaticJointDef_set_collideConnected_1"] = asm["_emscripten_bind_b2PrismaticJointDef_set_collideConnected_1"];
var _emscripten_bind_b2PrismaticJointDef_set_localAxisA_1 = Module["_emscripten_bind_b2PrismaticJointDef_set_localAxisA_1"] = asm["_emscripten_bind_b2PrismaticJointDef_set_localAxisA_1"];
var _emscripten_bind_b2GearJointDef_get_bodyB_0 = Module["_emscripten_bind_b2GearJointDef_get_bodyB_0"] = asm["_emscripten_bind_b2GearJointDef_get_bodyB_0"];
var _emscripten_bind_b2WheelJointDef_get_bodyB_0 = Module["_emscripten_bind_b2WheelJointDef_get_bodyB_0"] = asm["_emscripten_bind_b2WheelJointDef_get_bodyB_0"];
var _emscripten_bind_b2WeldJoint_GetLocalAnchorB_0 = Module["_emscripten_bind_b2WeldJoint_GetLocalAnchorB_0"] = asm["_emscripten_bind_b2WeldJoint_GetLocalAnchorB_0"];
var _emscripten_bind_b2RevoluteJointDef_set_localAnchorB_1 = Module["_emscripten_bind_b2RevoluteJointDef_set_localAnchorB_1"] = asm["_emscripten_bind_b2RevoluteJointDef_set_localAnchorB_1"];
var _emscripten_bind_b2Body_DestroyFixture_1 = Module["_emscripten_bind_b2Body_DestroyFixture_1"] = asm["_emscripten_bind_b2Body_DestroyFixture_1"];
var _emscripten_bind_b2Profile_set_broadphase_1 = Module["_emscripten_bind_b2Profile_set_broadphase_1"] = asm["_emscripten_bind_b2Profile_set_broadphase_1"];
var _emscripten_bind_b2WheelJointDef_get_localAnchorB_0 = Module["_emscripten_bind_b2WheelJointDef_get_localAnchorB_0"] = asm["_emscripten_bind_b2WheelJointDef_get_localAnchorB_0"];
var _emscripten_bind_b2ContactImpulse_get_count_0 = Module["_emscripten_bind_b2ContactImpulse_get_count_0"] = asm["_emscripten_bind_b2ContactImpulse_get_count_0"];
var _emscripten_bind_b2World_GetJointCount_0 = Module["_emscripten_bind_b2World_GetJointCount_0"] = asm["_emscripten_bind_b2World_GetJointCount_0"];
var _emscripten_bind_b2WheelJoint_GetMotorSpeed_0 = Module["_emscripten_bind_b2WheelJoint_GetMotorSpeed_0"] = asm["_emscripten_bind_b2WheelJoint_GetMotorSpeed_0"];
var _emscripten_bind_b2Body_GetAngularDamping_0 = Module["_emscripten_bind_b2Body_GetAngularDamping_0"] = asm["_emscripten_bind_b2Body_GetAngularDamping_0"];
var _emscripten_bind_b2WheelJointDef_get_dampingRatio_0 = Module["_emscripten_bind_b2WheelJointDef_get_dampingRatio_0"] = asm["_emscripten_bind_b2WheelJointDef_get_dampingRatio_0"];
var _emscripten_bind_b2RayCastOutput_get_fraction_0 = Module["_emscripten_bind_b2RayCastOutput_get_fraction_0"] = asm["_emscripten_bind_b2RayCastOutput_get_fraction_0"];
var _emscripten_enum_b2ManifoldType_e_circles = Module["_emscripten_enum_b2ManifoldType_e_circles"] = asm["_emscripten_enum_b2ManifoldType_e_circles"];
var _emscripten_bind_b2GearJoint_SetRatio_1 = Module["_emscripten_bind_b2GearJoint_SetRatio_1"] = asm["_emscripten_bind_b2GearJoint_SetRatio_1"];
var _emscripten_bind_JSDraw_DrawPolygon_3 = Module["_emscripten_bind_JSDraw_DrawPolygon_3"] = asm["_emscripten_bind_JSDraw_DrawPolygon_3"];
var _emscripten_bind_b2Filter___destroy___0 = Module["_emscripten_bind_b2Filter___destroy___0"] = asm["_emscripten_bind_b2Filter___destroy___0"];
var _emscripten_bind_b2JointEdge_set_next_1 = Module["_emscripten_bind_b2JointEdge_set_next_1"] = asm["_emscripten_bind_b2JointEdge_set_next_1"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var _emscripten_bind_b2BodyDef_get_fixedRotation_0 = Module["_emscripten_bind_b2BodyDef_get_fixedRotation_0"] = asm["_emscripten_bind_b2BodyDef_get_fixedRotation_0"];
var _emscripten_bind_b2PrismaticJointDef_set_motorSpeed_1 = Module["_emscripten_bind_b2PrismaticJointDef_set_motorSpeed_1"] = asm["_emscripten_bind_b2PrismaticJointDef_set_motorSpeed_1"];
var _emscripten_bind_b2ChainShape_SetPrevVertex_1 = Module["_emscripten_bind_b2ChainShape_SetPrevVertex_1"] = asm["_emscripten_bind_b2ChainShape_SetPrevVertex_1"];
var _emscripten_bind_b2Filter_get_categoryBits_0 = Module["_emscripten_bind_b2Filter_get_categoryBits_0"] = asm["_emscripten_bind_b2Filter_get_categoryBits_0"];
var _emscripten_bind_b2MouseJoint_GetReactionTorque_1 = Module["_emscripten_bind_b2MouseJoint_GetReactionTorque_1"] = asm["_emscripten_bind_b2MouseJoint_GetReactionTorque_1"];
var _emscripten_bind_b2MouseJoint_GetUserData_0 = Module["_emscripten_bind_b2MouseJoint_GetUserData_0"] = asm["_emscripten_bind_b2MouseJoint_GetUserData_0"];
var _emscripten_bind_b2Params_setFrame10_1 = Module["_emscripten_bind_b2Params_setFrame10_1"] = asm["_emscripten_bind_b2Params_setFrame10_1"];
var _emscripten_bind_b2WheelJoint_GetUserData_0 = Module["_emscripten_bind_b2WheelJoint_GetUserData_0"] = asm["_emscripten_bind_b2WheelJoint_GetUserData_0"];
var _emscripten_bind_b2Vec3_op_sub_1 = Module["_emscripten_bind_b2Vec3_op_sub_1"] = asm["_emscripten_bind_b2Vec3_op_sub_1"];
var _emscripten_bind_b2BodyDef_get_gravityScale_0 = Module["_emscripten_bind_b2BodyDef_get_gravityScale_0"] = asm["_emscripten_bind_b2BodyDef_get_gravityScale_0"];
var _emscripten_bind_b2Shape_GetType_0 = Module["_emscripten_bind_b2Shape_GetType_0"] = asm["_emscripten_bind_b2Shape_GetType_0"];
var _emscripten_bind_b2AABB_IsValid_0 = Module["_emscripten_bind_b2AABB_IsValid_0"] = asm["_emscripten_bind_b2AABB_IsValid_0"];
var _emscripten_bind_b2WheelJoint_GetBodyA_0 = Module["_emscripten_bind_b2WheelJoint_GetBodyA_0"] = asm["_emscripten_bind_b2WheelJoint_GetBodyA_0"];
var _emscripten_bind_JSDraw_DrawTransform_1 = Module["_emscripten_bind_JSDraw_DrawTransform_1"] = asm["_emscripten_bind_JSDraw_DrawTransform_1"];
var _emscripten_bind_b2PulleyJoint_GetLengthA_0 = Module["_emscripten_bind_b2PulleyJoint_GetLengthA_0"] = asm["_emscripten_bind_b2PulleyJoint_GetLengthA_0"];
var _emscripten_bind_b2DistanceJointDef_get_frequencyHz_0 = Module["_emscripten_bind_b2DistanceJointDef_get_frequencyHz_0"] = asm["_emscripten_bind_b2DistanceJointDef_get_frequencyHz_0"];
var _emscripten_bind_b2RevoluteJoint_SetMotorSpeed_1 = Module["_emscripten_bind_b2RevoluteJoint_SetMotorSpeed_1"] = asm["_emscripten_bind_b2RevoluteJoint_SetMotorSpeed_1"];
var _emscripten_bind_b2World___destroy___0 = Module["_emscripten_bind_b2World___destroy___0"] = asm["_emscripten_bind_b2World___destroy___0"];
var _emscripten_bind_b2ChainShape_get_m_hasNextVertex_0 = Module["_emscripten_bind_b2ChainShape_get_m_hasNextVertex_0"] = asm["_emscripten_bind_b2ChainShape_get_m_hasNextVertex_0"];
var _emscripten_bind_b2ChainShape_SetNextVertex_1 = Module["_emscripten_bind_b2ChainShape_SetNextVertex_1"] = asm["_emscripten_bind_b2ChainShape_SetNextVertex_1"];
var _emscripten_bind_b2Body_SetType_1 = Module["_emscripten_bind_b2Body_SetType_1"] = asm["_emscripten_bind_b2Body_SetType_1"];
var _emscripten_bind_b2Body_GetMass_0 = Module["_emscripten_bind_b2Body_GetMass_0"] = asm["_emscripten_bind_b2Body_GetMass_0"];
var _emscripten_bind_b2Rot_b2Rot_0 = Module["_emscripten_bind_b2Rot_b2Rot_0"] = asm["_emscripten_bind_b2Rot_b2Rot_0"];
var _emscripten_bind_b2Rot_b2Rot_1 = Module["_emscripten_bind_b2Rot_b2Rot_1"] = asm["_emscripten_bind_b2Rot_b2Rot_1"];
var _emscripten_enum_b2JointType_e_distanceJoint = Module["_emscripten_enum_b2JointType_e_distanceJoint"] = asm["_emscripten_enum_b2JointType_e_distanceJoint"];
var _emscripten_bind_b2PulleyJoint___destroy___0 = Module["_emscripten_bind_b2PulleyJoint___destroy___0"] = asm["_emscripten_bind_b2PulleyJoint___destroy___0"];
var _emscripten_bind_b2PrismaticJoint_GetLocalAnchorB_0 = Module["_emscripten_bind_b2PrismaticJoint_GetLocalAnchorB_0"] = asm["_emscripten_bind_b2PrismaticJoint_GetLocalAnchorB_0"];
var _emscripten_bind_b2MouseJoint_GetType_0 = Module["_emscripten_bind_b2MouseJoint_GetType_0"] = asm["_emscripten_bind_b2MouseJoint_GetType_0"];
var _memset = Module["_memset"] = asm["_memset"];
var _emscripten_bind_JSQueryCallback___destroy___0 = Module["_emscripten_bind_JSQueryCallback___destroy___0"] = asm["_emscripten_bind_JSQueryCallback___destroy___0"];
var _emscripten_bind_b2RevoluteJointDef_set_lowerAngle_1 = Module["_emscripten_bind_b2RevoluteJointDef_set_lowerAngle_1"] = asm["_emscripten_bind_b2RevoluteJointDef_set_lowerAngle_1"];
var _emscripten_bind_b2Params_getFrame10_0 = Module["_emscripten_bind_b2Params_getFrame10_0"] = asm["_emscripten_bind_b2Params_getFrame10_0"];
var _emscripten_bind_b2JointEdge___destroy___0 = Module["_emscripten_bind_b2JointEdge___destroy___0"] = asm["_emscripten_bind_b2JointEdge___destroy___0"];
var _emscripten_bind_b2PulleyJoint_GetRatio_0 = Module["_emscripten_bind_b2PulleyJoint_GetRatio_0"] = asm["_emscripten_bind_b2PulleyJoint_GetRatio_0"];
var _emscripten_bind_JSContactListener_BeginContact_1 = Module["_emscripten_bind_JSContactListener_BeginContact_1"] = asm["_emscripten_bind_JSContactListener_BeginContact_1"];
var _emscripten_bind_b2JointEdge_get_next_0 = Module["_emscripten_bind_b2JointEdge_get_next_0"] = asm["_emscripten_bind_b2JointEdge_get_next_0"];
var _emscripten_bind_b2RayCastInput_set_maxFraction_1 = Module["_emscripten_bind_b2RayCastInput_set_maxFraction_1"] = asm["_emscripten_bind_b2RayCastInput_set_maxFraction_1"];
var _emscripten_bind_b2WheelJointDef_get_bodyA_0 = Module["_emscripten_bind_b2WheelJointDef_get_bodyA_0"] = asm["_emscripten_bind_b2WheelJointDef_get_bodyA_0"];
var _emscripten_bind_b2MouseJoint_GetBodyA_0 = Module["_emscripten_bind_b2MouseJoint_GetBodyA_0"] = asm["_emscripten_bind_b2MouseJoint_GetBodyA_0"];
var _emscripten_bind_b2Profile_set_collide_1 = Module["_emscripten_bind_b2Profile_set_collide_1"] = asm["_emscripten_bind_b2Profile_set_collide_1"];
var _emscripten_bind_b2AABB_b2AABB_0 = Module["_emscripten_bind_b2AABB_b2AABB_0"] = asm["_emscripten_bind_b2AABB_b2AABB_0"];
var _emscripten_bind_b2Fixture_Refilter_0 = Module["_emscripten_bind_b2Fixture_Refilter_0"] = asm["_emscripten_bind_b2Fixture_Refilter_0"];
var _emscripten_bind_b2World_CreateBody_1 = Module["_emscripten_bind_b2World_CreateBody_1"] = asm["_emscripten_bind_b2World_CreateBody_1"];
var _emscripten_bind_b2RopeJointDef_set_userData_1 = Module["_emscripten_bind_b2RopeJointDef_set_userData_1"] = asm["_emscripten_bind_b2RopeJointDef_set_userData_1"];
var _emscripten_bind_b2Fixture_IsSensor_0 = Module["_emscripten_bind_b2Fixture_IsSensor_0"] = asm["_emscripten_bind_b2Fixture_IsSensor_0"];
var _emscripten_bind_b2WeldJoint_GetType_0 = Module["_emscripten_bind_b2WeldJoint_GetType_0"] = asm["_emscripten_bind_b2WeldJoint_GetType_0"];
var _emscripten_bind_b2PrismaticJointDef_get_motorSpeed_0 = Module["_emscripten_bind_b2PrismaticJointDef_get_motorSpeed_0"] = asm["_emscripten_bind_b2PrismaticJointDef_get_motorSpeed_0"];
var _emscripten_bind_b2Rot___destroy___0 = Module["_emscripten_bind_b2Rot___destroy___0"] = asm["_emscripten_bind_b2Rot___destroy___0"];
var _emscripten_bind_b2Filter_get_maskBits_0 = Module["_emscripten_bind_b2Filter_get_maskBits_0"] = asm["_emscripten_bind_b2Filter_get_maskBits_0"];
var _emscripten_bind_b2Body_GetFixtureList_0 = Module["_emscripten_bind_b2Body_GetFixtureList_0"] = asm["_emscripten_bind_b2Body_GetFixtureList_0"];
var _emscripten_bind_b2RevoluteJointDef_get_enableMotor_0 = Module["_emscripten_bind_b2RevoluteJointDef_get_enableMotor_0"] = asm["_emscripten_bind_b2RevoluteJointDef_get_enableMotor_0"];
var _emscripten_bind_b2MouseJointDef_set_dampingRatio_1 = Module["_emscripten_bind_b2MouseJointDef_set_dampingRatio_1"] = asm["_emscripten_bind_b2MouseJointDef_set_dampingRatio_1"];
var _emscripten_bind_JSRayCastCallback___destroy___0 = Module["_emscripten_bind_JSRayCastCallback___destroy___0"] = asm["_emscripten_bind_JSRayCastCallback___destroy___0"];
var _emscripten_bind_b2ContactListener___destroy___0 = Module["_emscripten_bind_b2ContactListener___destroy___0"] = asm["_emscripten_bind_b2ContactListener___destroy___0"];
var _emscripten_bind_b2PrismaticJointDef_set_localAnchorB_1 = Module["_emscripten_bind_b2PrismaticJointDef_set_localAnchorB_1"] = asm["_emscripten_bind_b2PrismaticJointDef_set_localAnchorB_1"];
var _emscripten_enum_b2DrawFlag_e_pairBit = Module["_emscripten_enum_b2DrawFlag_e_pairBit"] = asm["_emscripten_enum_b2DrawFlag_e_pairBit"];
var _emscripten_bind_b2FrictionJoint___destroy___0 = Module["_emscripten_bind_b2FrictionJoint___destroy___0"] = asm["_emscripten_bind_b2FrictionJoint___destroy___0"];
var _emscripten_bind_b2WeldJoint_Dump_0 = Module["_emscripten_bind_b2WeldJoint_Dump_0"] = asm["_emscripten_bind_b2WeldJoint_Dump_0"];
var _emscripten_bind_b2WheelJointDef_get_type_0 = Module["_emscripten_bind_b2WheelJointDef_get_type_0"] = asm["_emscripten_bind_b2WheelJointDef_get_type_0"];
var _emscripten_bind_b2MouseJoint_GetFrequency_0 = Module["_emscripten_bind_b2MouseJoint_GetFrequency_0"] = asm["_emscripten_bind_b2MouseJoint_GetFrequency_0"];
var _emscripten_bind_b2FrictionJoint_GetLocalAnchorA_0 = Module["_emscripten_bind_b2FrictionJoint_GetLocalAnchorA_0"] = asm["_emscripten_bind_b2FrictionJoint_GetLocalAnchorA_0"];
var _emscripten_bind_b2WeldJointDef_get_localAnchorB_0 = Module["_emscripten_bind_b2WeldJointDef_get_localAnchorB_0"] = asm["_emscripten_bind_b2WeldJointDef_get_localAnchorB_0"];
var _emscripten_bind_b2PrismaticJointDef_get_bodyA_0 = Module["_emscripten_bind_b2PrismaticJointDef_get_bodyA_0"] = asm["_emscripten_bind_b2PrismaticJointDef_get_bodyA_0"];
var _emscripten_bind_b2Vec2_IsValid_0 = Module["_emscripten_bind_b2Vec2_IsValid_0"] = asm["_emscripten_bind_b2Vec2_IsValid_0"];
var _emscripten_bind_b2World_SetGravity_1 = Module["_emscripten_bind_b2World_SetGravity_1"] = asm["_emscripten_bind_b2World_SetGravity_1"];
var _emscripten_bind_b2World_GetWarmStarting_0 = Module["_emscripten_bind_b2World_GetWarmStarting_0"] = asm["_emscripten_bind_b2World_GetWarmStarting_0"];
var _emscripten_bind_b2RevoluteJointDef_set_enableLimit_1 = Module["_emscripten_bind_b2RevoluteJointDef_set_enableLimit_1"] = asm["_emscripten_bind_b2RevoluteJointDef_set_enableLimit_1"];
var _emscripten_bind_b2Mat22_Solve_1 = Module["_emscripten_bind_b2Mat22_Solve_1"] = asm["_emscripten_bind_b2Mat22_Solve_1"];
var _emscripten_bind_b2World_GetProfile_0 = Module["_emscripten_bind_b2World_GetProfile_0"] = asm["_emscripten_bind_b2World_GetProfile_0"];
var _emscripten_bind_b2RopeJoint_GetNext_0 = Module["_emscripten_bind_b2RopeJoint_GetNext_0"] = asm["_emscripten_bind_b2RopeJoint_GetNext_0"];
var _emscripten_bind_b2Filter_b2Filter_0 = Module["_emscripten_bind_b2Filter_b2Filter_0"] = asm["_emscripten_bind_b2Filter_b2Filter_0"];
var _emscripten_bind_b2PolygonShape_GetChildCount_0 = Module["_emscripten_bind_b2PolygonShape_GetChildCount_0"] = asm["_emscripten_bind_b2PolygonShape_GetChildCount_0"];
var _emscripten_bind_b2GearJointDef_get_ratio_0 = Module["_emscripten_bind_b2GearJointDef_get_ratio_0"] = asm["_emscripten_bind_b2GearJointDef_get_ratio_0"];
var _emscripten_bind_b2Mat33_Solve33_1 = Module["_emscripten_bind_b2Mat33_Solve33_1"] = asm["_emscripten_bind_b2Mat33_Solve33_1"];
var _emscripten_bind_b2RevoluteJoint_SetMaxMotorTorque_1 = Module["_emscripten_bind_b2RevoluteJoint_SetMaxMotorTorque_1"] = asm["_emscripten_bind_b2RevoluteJoint_SetMaxMotorTorque_1"];
var _emscripten_bind_b2WheelJoint_GetCollideConnected_0 = Module["_emscripten_bind_b2WheelJoint_GetCollideConnected_0"] = asm["_emscripten_bind_b2WheelJoint_GetCollideConnected_0"];
var _emscripten_bind_b2WheelJoint_SetSpringDampingRatio_1 = Module["_emscripten_bind_b2WheelJoint_SetSpringDampingRatio_1"] = asm["_emscripten_bind_b2WheelJoint_SetSpringDampingRatio_1"];
var _emscripten_bind_b2RevoluteJointDef___destroy___0 = Module["_emscripten_bind_b2RevoluteJointDef___destroy___0"] = asm["_emscripten_bind_b2RevoluteJointDef___destroy___0"];
var _emscripten_bind_b2PolygonShape_set_m_vertexCount_1 = Module["_emscripten_bind_b2PolygonShape_set_m_vertexCount_1"] = asm["_emscripten_bind_b2PolygonShape_set_m_vertexCount_1"];
var _emscripten_bind_b2ContactFeature_get_typeB_0 = Module["_emscripten_bind_b2ContactFeature_get_typeB_0"] = asm["_emscripten_bind_b2ContactFeature_get_typeB_0"];
var _emscripten_bind_b2ContactID_get_key_0 = Module["_emscripten_bind_b2ContactID_get_key_0"] = asm["_emscripten_bind_b2ContactID_get_key_0"];
var _emscripten_bind_b2Rot_GetAngle_0 = Module["_emscripten_bind_b2Rot_GetAngle_0"] = asm["_emscripten_bind_b2Rot_GetAngle_0"];
var _emscripten_bind_b2World_SetAllowSleeping_1 = Module["_emscripten_bind_b2World_SetAllowSleeping_1"] = asm["_emscripten_bind_b2World_SetAllowSleeping_1"];
var _emscripten_enum_b2DrawFlag_e_centerOfMassBit = Module["_emscripten_enum_b2DrawFlag_e_centerOfMassBit"] = asm["_emscripten_enum_b2DrawFlag_e_centerOfMassBit"];
var _emscripten_bind_b2WheelJoint_SetUserData_1 = Module["_emscripten_bind_b2WheelJoint_SetUserData_1"] = asm["_emscripten_bind_b2WheelJoint_SetUserData_1"];
var _emscripten_bind_b2FrictionJoint_GetCollideConnected_0 = Module["_emscripten_bind_b2FrictionJoint_GetCollideConnected_0"] = asm["_emscripten_bind_b2FrictionJoint_GetCollideConnected_0"];
var _emscripten_bind_b2WeldJointDef___destroy___0 = Module["_emscripten_bind_b2WeldJointDef___destroy___0"] = asm["_emscripten_bind_b2WeldJointDef___destroy___0"];
var _emscripten_bind_b2Mat22_get_ex_0 = Module["_emscripten_bind_b2Mat22_get_ex_0"] = asm["_emscripten_bind_b2Mat22_get_ex_0"];
var _emscripten_bind_b2Fixture_GetDensity_0 = Module["_emscripten_bind_b2Fixture_GetDensity_0"] = asm["_emscripten_bind_b2Fixture_GetDensity_0"];
var _emscripten_bind_b2PolygonShape_get_m_type_0 = Module["_emscripten_bind_b2PolygonShape_get_m_type_0"] = asm["_emscripten_bind_b2PolygonShape_get_m_type_0"];
var _emscripten_bind_b2Vec2_Set_2 = Module["_emscripten_bind_b2Vec2_Set_2"] = asm["_emscripten_bind_b2Vec2_Set_2"];
var _emscripten_bind_b2WeldJointDef_get_type_0 = Module["_emscripten_bind_b2WeldJointDef_get_type_0"] = asm["_emscripten_bind_b2WeldJointDef_get_type_0"];
var _emscripten_bind_b2MouseJointDef_b2MouseJointDef_0 = Module["_emscripten_bind_b2MouseJointDef_b2MouseJointDef_0"] = asm["_emscripten_bind_b2MouseJointDef_b2MouseJointDef_0"];
var _emscripten_bind_b2Rot_get_s_0 = Module["_emscripten_bind_b2Rot_get_s_0"] = asm["_emscripten_bind_b2Rot_get_s_0"];
var _emscripten_bind_b2FrictionJoint_SetMaxTorque_1 = Module["_emscripten_bind_b2FrictionJoint_SetMaxTorque_1"] = asm["_emscripten_bind_b2FrictionJoint_SetMaxTorque_1"];
var _emscripten_bind_b2MouseJointDef_get_frequencyHz_0 = Module["_emscripten_bind_b2MouseJointDef_get_frequencyHz_0"] = asm["_emscripten_bind_b2MouseJointDef_get_frequencyHz_0"];
var _emscripten_bind_b2FrictionJoint_SetUserData_1 = Module["_emscripten_bind_b2FrictionJoint_SetUserData_1"] = asm["_emscripten_bind_b2FrictionJoint_SetUserData_1"];
var _emscripten_bind_b2FixtureDef_set_userData_1 = Module["_emscripten_bind_b2FixtureDef_set_userData_1"] = asm["_emscripten_bind_b2FixtureDef_set_userData_1"];
var _emscripten_bind_b2JointDef_get_userData_0 = Module["_emscripten_bind_b2JointDef_get_userData_0"] = asm["_emscripten_bind_b2JointDef_get_userData_0"];
var _emscripten_bind_b2DistanceJointDef_get_collideConnected_0 = Module["_emscripten_bind_b2DistanceJointDef_get_collideConnected_0"] = asm["_emscripten_bind_b2DistanceJointDef_get_collideConnected_0"];
var _emscripten_bind_b2RevoluteJointDef_set_referenceAngle_1 = Module["_emscripten_bind_b2RevoluteJointDef_set_referenceAngle_1"] = asm["_emscripten_bind_b2RevoluteJointDef_set_referenceAngle_1"];
var _emscripten_bind_b2ContactFeature___destroy___0 = Module["_emscripten_bind_b2ContactFeature___destroy___0"] = asm["_emscripten_bind_b2ContactFeature___destroy___0"];
var _emscripten_bind_b2DistanceJointDef_set_bodyB_1 = Module["_emscripten_bind_b2DistanceJointDef_set_bodyB_1"] = asm["_emscripten_bind_b2DistanceJointDef_set_bodyB_1"];
var _emscripten_bind_JSQueryCallback_JSQueryCallback_0 = Module["_emscripten_bind_JSQueryCallback_JSQueryCallback_0"] = asm["_emscripten_bind_JSQueryCallback_JSQueryCallback_0"];
var _emscripten_bind_b2ChainShape_GetChildCount_0 = Module["_emscripten_bind_b2ChainShape_GetChildCount_0"] = asm["_emscripten_bind_b2ChainShape_GetChildCount_0"];
var _emscripten_bind_b2MassData_b2MassData_0 = Module["_emscripten_bind_b2MassData_b2MassData_0"] = asm["_emscripten_bind_b2MassData_b2MassData_0"];
var _emscripten_bind_b2Vec3_set_y_1 = Module["_emscripten_bind_b2Vec3_set_y_1"] = asm["_emscripten_bind_b2Vec3_set_y_1"];
var _emscripten_bind_b2AABB_Combine_1 = Module["_emscripten_bind_b2AABB_Combine_1"] = asm["_emscripten_bind_b2AABB_Combine_1"];
var _emscripten_bind_b2AABB_Combine_2 = Module["_emscripten_bind_b2AABB_Combine_2"] = asm["_emscripten_bind_b2AABB_Combine_2"];
var _emscripten_bind_b2PrismaticJoint_GetBodyA_0 = Module["_emscripten_bind_b2PrismaticJoint_GetBodyA_0"] = asm["_emscripten_bind_b2PrismaticJoint_GetBodyA_0"];
var _emscripten_bind_b2PrismaticJoint_GetMaxMotorForce_0 = Module["_emscripten_bind_b2PrismaticJoint_GetMaxMotorForce_0"] = asm["_emscripten_bind_b2PrismaticJoint_GetMaxMotorForce_0"];
var _emscripten_bind_b2AABB___destroy___0 = Module["_emscripten_bind_b2AABB___destroy___0"] = asm["_emscripten_bind_b2AABB___destroy___0"];
var _emscripten_bind_b2Body_IsSleepingAllowed_0 = Module["_emscripten_bind_b2Body_IsSleepingAllowed_0"] = asm["_emscripten_bind_b2Body_IsSleepingAllowed_0"];
var _emscripten_bind_b2MouseJointDef_set_maxForce_1 = Module["_emscripten_bind_b2MouseJointDef_set_maxForce_1"] = asm["_emscripten_bind_b2MouseJointDef_set_maxForce_1"];
var _emscripten_bind_b2Profile_get_solve_0 = Module["_emscripten_bind_b2Profile_get_solve_0"] = asm["_emscripten_bind_b2Profile_get_solve_0"];
var _emscripten_bind_JSDestructionListener_SayGoodbyeFixture_1 = Module["_emscripten_bind_JSDestructionListener_SayGoodbyeFixture_1"] = asm["_emscripten_bind_JSDestructionListener_SayGoodbyeFixture_1"];
var _emscripten_bind_b2PolygonShape_GetVertexCount_0 = Module["_emscripten_bind_b2PolygonShape_GetVertexCount_0"] = asm["_emscripten_bind_b2PolygonShape_GetVertexCount_0"];
var _emscripten_bind_b2Rot_get_c_0 = Module["_emscripten_bind_b2Rot_get_c_0"] = asm["_emscripten_bind_b2Rot_get_c_0"];
var _emscripten_bind_b2AABB_set_lowerBound_1 = Module["_emscripten_bind_b2AABB_set_lowerBound_1"] = asm["_emscripten_bind_b2AABB_set_lowerBound_1"];
var _emscripten_bind_b2RevoluteJoint___destroy___0 = Module["_emscripten_bind_b2RevoluteJoint___destroy___0"] = asm["_emscripten_bind_b2RevoluteJoint___destroy___0"];
var _emscripten_bind_b2MouseJoint_SetMaxForce_1 = Module["_emscripten_bind_b2MouseJoint_SetMaxForce_1"] = asm["_emscripten_bind_b2MouseJoint_SetMaxForce_1"];
var _emscripten_bind_b2WheelJoint_IsMotorEnabled_0 = Module["_emscripten_bind_b2WheelJoint_IsMotorEnabled_0"] = asm["_emscripten_bind_b2WheelJoint_IsMotorEnabled_0"];
var _emscripten_bind_b2JointDef_set_userData_1 = Module["_emscripten_bind_b2JointDef_set_userData_1"] = asm["_emscripten_bind_b2JointDef_set_userData_1"];
var _emscripten_bind_b2Body_GetLocalCenter_0 = Module["_emscripten_bind_b2Body_GetLocalCenter_0"] = asm["_emscripten_bind_b2Body_GetLocalCenter_0"];
var _emscripten_bind_b2ManifoldPoint_get_tangentImpulse_0 = Module["_emscripten_bind_b2ManifoldPoint_get_tangentImpulse_0"] = asm["_emscripten_bind_b2ManifoldPoint_get_tangentImpulse_0"];
var _emscripten_bind_b2RevoluteJointDef_get_maxMotorTorque_0 = Module["_emscripten_bind_b2RevoluteJointDef_get_maxMotorTorque_0"] = asm["_emscripten_bind_b2RevoluteJointDef_get_maxMotorTorque_0"];
var _emscripten_bind_b2WeldJointDef_get_dampingRatio_0 = Module["_emscripten_bind_b2WeldJointDef_get_dampingRatio_0"] = asm["_emscripten_bind_b2WeldJointDef_get_dampingRatio_0"];
var _emscripten_bind_b2MouseJoint___destroy___0 = Module["_emscripten_bind_b2MouseJoint___destroy___0"] = asm["_emscripten_bind_b2MouseJoint___destroy___0"];
var _emscripten_bind_b2EdgeShape_b2EdgeShape_0 = Module["_emscripten_bind_b2EdgeShape_b2EdgeShape_0"] = asm["_emscripten_bind_b2EdgeShape_b2EdgeShape_0"];
var _emscripten_bind_b2FrictionJoint_GetReactionForce_1 = Module["_emscripten_bind_b2FrictionJoint_GetReactionForce_1"] = asm["_emscripten_bind_b2FrictionJoint_GetReactionForce_1"];
var _emscripten_bind_b2Params_getDebug_0 = Module["_emscripten_bind_b2Params_getDebug_0"] = asm["_emscripten_bind_b2Params_getDebug_0"];
var _emscripten_bind_b2DistanceJointDef_set_type_1 = Module["_emscripten_bind_b2DistanceJointDef_set_type_1"] = asm["_emscripten_bind_b2DistanceJointDef_set_type_1"];
var _emscripten_bind_b2WeldJoint___destroy___0 = Module["_emscripten_bind_b2WeldJoint___destroy___0"] = asm["_emscripten_bind_b2WeldJoint___destroy___0"];
var _emscripten_bind_JSContactListener_PostSolve_2 = Module["_emscripten_bind_JSContactListener_PostSolve_2"] = asm["_emscripten_bind_JSContactListener_PostSolve_2"];
var _emscripten_bind_b2PulleyJoint_GetBodyA_0 = Module["_emscripten_bind_b2PulleyJoint_GetBodyA_0"] = asm["_emscripten_bind_b2PulleyJoint_GetBodyA_0"];
var _emscripten_bind_b2RopeJointDef_get_type_0 = Module["_emscripten_bind_b2RopeJointDef_get_type_0"] = asm["_emscripten_bind_b2RopeJointDef_get_type_0"];
var _emscripten_bind_b2CircleShape_ComputeMass_2 = Module["_emscripten_bind_b2CircleShape_ComputeMass_2"] = asm["_emscripten_bind_b2CircleShape_ComputeMass_2"];
var _emscripten_bind_b2DistanceJointDef_get_localAnchorB_0 = Module["_emscripten_bind_b2DistanceJointDef_get_localAnchorB_0"] = asm["_emscripten_bind_b2DistanceJointDef_get_localAnchorB_0"];
var _emscripten_bind_b2GearJointDef___destroy___0 = Module["_emscripten_bind_b2GearJointDef___destroy___0"] = asm["_emscripten_bind_b2GearJointDef___destroy___0"];
var _emscripten_bind_b2RevoluteJointDef_set_bodyA_1 = Module["_emscripten_bind_b2RevoluteJointDef_set_bodyA_1"] = asm["_emscripten_bind_b2RevoluteJointDef_set_bodyA_1"];
var _emscripten_enum_b2BodyType_b2_dynamicBody = Module["_emscripten_enum_b2BodyType_b2_dynamicBody"] = asm["_emscripten_enum_b2BodyType_b2_dynamicBody"];
var _emscripten_bind_b2CircleShape_TestPoint_2 = Module["_emscripten_bind_b2CircleShape_TestPoint_2"] = asm["_emscripten_bind_b2CircleShape_TestPoint_2"];
var _emscripten_bind_b2Body_GetLinearVelocityFromLocalPoint_1 = Module["_emscripten_bind_b2Body_GetLinearVelocityFromLocalPoint_1"] = asm["_emscripten_bind_b2Body_GetLinearVelocityFromLocalPoint_1"];
var _emscripten_bind_b2FrictionJointDef_set_bodyB_1 = Module["_emscripten_bind_b2FrictionJointDef_set_bodyB_1"] = asm["_emscripten_bind_b2FrictionJointDef_set_bodyB_1"];
var _emscripten_bind_b2MouseJoint_GetAnchorB_0 = Module["_emscripten_bind_b2MouseJoint_GetAnchorB_0"] = asm["_emscripten_bind_b2MouseJoint_GetAnchorB_0"];
var _emscripten_bind_b2Manifold_get_localPoint_0 = Module["_emscripten_bind_b2Manifold_get_localPoint_0"] = asm["_emscripten_bind_b2Manifold_get_localPoint_0"];
var _emscripten_bind_b2GearJoint_GetBodyB_0 = Module["_emscripten_bind_b2GearJoint_GetBodyB_0"] = asm["_emscripten_bind_b2GearJoint_GetBodyB_0"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _emscripten_bind_b2CircleShape___destroy___0 = Module["_emscripten_bind_b2CircleShape___destroy___0"] = asm["_emscripten_bind_b2CircleShape___destroy___0"];
var _emscripten_bind_b2EdgeShape___destroy___0 = Module["_emscripten_bind_b2EdgeShape___destroy___0"] = asm["_emscripten_bind_b2EdgeShape___destroy___0"];
var _emscripten_bind_b2World_GetContactCount_0 = Module["_emscripten_bind_b2World_GetContactCount_0"] = asm["_emscripten_bind_b2World_GetContactCount_0"];
var _emscripten_bind_b2Contact_SetRestitution_1 = Module["_emscripten_bind_b2Contact_SetRestitution_1"] = asm["_emscripten_bind_b2Contact_SetRestitution_1"];
var _emscripten_bind_b2BodyDef_get_angularDamping_0 = Module["_emscripten_bind_b2BodyDef_get_angularDamping_0"] = asm["_emscripten_bind_b2BodyDef_get_angularDamping_0"];
var _emscripten_bind_b2EdgeShape_get_m_vertex3_0 = Module["_emscripten_bind_b2EdgeShape_get_m_vertex3_0"] = asm["_emscripten_bind_b2EdgeShape_get_m_vertex3_0"];
var _emscripten_bind_b2Fixture_SetUserData_1 = Module["_emscripten_bind_b2Fixture_SetUserData_1"] = asm["_emscripten_bind_b2Fixture_SetUserData_1"];
var _emscripten_bind_b2Transform_SetIdentity_0 = Module["_emscripten_bind_b2Transform_SetIdentity_0"] = asm["_emscripten_bind_b2Transform_SetIdentity_0"];
var _emscripten_bind_b2GearJointDef_set_joint1_1 = Module["_emscripten_bind_b2GearJointDef_set_joint1_1"] = asm["_emscripten_bind_b2GearJointDef_set_joint1_1"];
var _emscripten_bind_b2EdgeShape_set_m_vertex2_1 = Module["_emscripten_bind_b2EdgeShape_set_m_vertex2_1"] = asm["_emscripten_bind_b2EdgeShape_set_m_vertex2_1"];
var _emscripten_bind_b2ContactEdge_get_next_0 = Module["_emscripten_bind_b2ContactEdge_get_next_0"] = asm["_emscripten_bind_b2ContactEdge_get_next_0"];
var _emscripten_bind_b2ContactFeature_set_indexB_1 = Module["_emscripten_bind_b2ContactFeature_set_indexB_1"] = asm["_emscripten_bind_b2ContactFeature_set_indexB_1"];
var _emscripten_bind_b2Body_GetLinearVelocityFromWorldPoint_1 = Module["_emscripten_bind_b2Body_GetLinearVelocityFromWorldPoint_1"] = asm["_emscripten_bind_b2Body_GetLinearVelocityFromWorldPoint_1"];
var _emscripten_bind_b2WeldJoint_GetCollideConnected_0 = Module["_emscripten_bind_b2WeldJoint_GetCollideConnected_0"] = asm["_emscripten_bind_b2WeldJoint_GetCollideConnected_0"];
var _emscripten_bind_b2WeldJointDef_get_bodyA_0 = Module["_emscripten_bind_b2WeldJointDef_get_bodyA_0"] = asm["_emscripten_bind_b2WeldJointDef_get_bodyA_0"];
var _emscripten_bind_b2Mat22_set_ey_1 = Module["_emscripten_bind_b2Mat22_set_ey_1"] = asm["_emscripten_bind_b2Mat22_set_ey_1"];
var _emscripten_bind_b2WheelJointDef_set_frequencyHz_1 = Module["_emscripten_bind_b2WheelJointDef_set_frequencyHz_1"] = asm["_emscripten_bind_b2WheelJointDef_set_frequencyHz_1"];
var _emscripten_bind_b2World_GetSubStepping_0 = Module["_emscripten_bind_b2World_GetSubStepping_0"] = asm["_emscripten_bind_b2World_GetSubStepping_0"];
var _emscripten_bind_b2Rot_GetYAxis_0 = Module["_emscripten_bind_b2Rot_GetYAxis_0"] = asm["_emscripten_bind_b2Rot_GetYAxis_0"];
var _emscripten_bind_b2Contact_GetChildIndexB_0 = Module["_emscripten_bind_b2Contact_GetChildIndexB_0"] = asm["_emscripten_bind_b2Contact_GetChildIndexB_0"];
var _emscripten_bind_b2WheelJointDef_set_localAnchorB_1 = Module["_emscripten_bind_b2WheelJointDef_set_localAnchorB_1"] = asm["_emscripten_bind_b2WheelJointDef_set_localAnchorB_1"];
var _emscripten_bind_b2DistanceJoint___destroy___0 = Module["_emscripten_bind_b2DistanceJoint___destroy___0"] = asm["_emscripten_bind_b2DistanceJoint___destroy___0"];
var _emscripten_bind_b2EdgeShape_GetType_0 = Module["_emscripten_bind_b2EdgeShape_GetType_0"] = asm["_emscripten_bind_b2EdgeShape_GetType_0"];
var _emscripten_bind_b2WheelJointDef_set_dampingRatio_1 = Module["_emscripten_bind_b2WheelJointDef_set_dampingRatio_1"] = asm["_emscripten_bind_b2WheelJointDef_set_dampingRatio_1"];
var _emscripten_bind_b2ManifoldPoint___destroy___0 = Module["_emscripten_bind_b2ManifoldPoint___destroy___0"] = asm["_emscripten_bind_b2ManifoldPoint___destroy___0"];
var _emscripten_enum_b2JointType_e_prismaticJoint = Module["_emscripten_enum_b2JointType_e_prismaticJoint"] = asm["_emscripten_enum_b2JointType_e_prismaticJoint"];
var _emscripten_bind_b2WeldJointDef_get_referenceAngle_0 = Module["_emscripten_bind_b2WeldJointDef_get_referenceAngle_0"] = asm["_emscripten_bind_b2WeldJointDef_get_referenceAngle_0"];
var _emscripten_bind_b2Vec2_Length_0 = Module["_emscripten_bind_b2Vec2_Length_0"] = asm["_emscripten_bind_b2Vec2_Length_0"];
var _emscripten_bind_b2Vec2_SetZero_0 = Module["_emscripten_bind_b2Vec2_SetZero_0"] = asm["_emscripten_bind_b2Vec2_SetZero_0"];
var _emscripten_bind_b2RopeJoint___destroy___0 = Module["_emscripten_bind_b2RopeJoint___destroy___0"] = asm["_emscripten_bind_b2RopeJoint___destroy___0"];
var _emscripten_bind_b2World_DestroyJoint_1 = Module["_emscripten_bind_b2World_DestroyJoint_1"] = asm["_emscripten_bind_b2World_DestroyJoint_1"];
var _emscripten_bind_b2JointDef_set_bodyB_1 = Module["_emscripten_bind_b2JointDef_set_bodyB_1"] = asm["_emscripten_bind_b2JointDef_set_bodyB_1"];
var _emscripten_bind_b2Mat22_Set_2 = Module["_emscripten_bind_b2Mat22_Set_2"] = asm["_emscripten_bind_b2Mat22_Set_2"];
var _emscripten_bind_b2Body_GetType_0 = Module["_emscripten_bind_b2Body_GetType_0"] = asm["_emscripten_bind_b2Body_GetType_0"];
var _emscripten_bind_b2WeldJoint_GetAnchorB_0 = Module["_emscripten_bind_b2WeldJoint_GetAnchorB_0"] = asm["_emscripten_bind_b2WeldJoint_GetAnchorB_0"];
var _emscripten_bind_b2WeldJoint_GetNext_0 = Module["_emscripten_bind_b2WeldJoint_GetNext_0"] = asm["_emscripten_bind_b2WeldJoint_GetNext_0"];
var _emscripten_bind_b2EdgeShape_ComputeAABB_3 = Module["_emscripten_bind_b2EdgeShape_ComputeAABB_3"] = asm["_emscripten_bind_b2EdgeShape_ComputeAABB_3"];
var _emscripten_bind_b2BodyDef_get_type_0 = Module["_emscripten_bind_b2BodyDef_get_type_0"] = asm["_emscripten_bind_b2BodyDef_get_type_0"];
var _emscripten_bind_b2WheelJointDef_set_collideConnected_1 = Module["_emscripten_bind_b2WheelJointDef_set_collideConnected_1"] = asm["_emscripten_bind_b2WheelJointDef_set_collideConnected_1"];
var _emscripten_bind_JSDestructionListener___destroy___0 = Module["_emscripten_bind_JSDestructionListener___destroy___0"] = asm["_emscripten_bind_JSDestructionListener___destroy___0"];
var _emscripten_bind_b2RopeJoint_GetLocalAnchorA_0 = Module["_emscripten_bind_b2RopeJoint_GetLocalAnchorA_0"] = asm["_emscripten_bind_b2RopeJoint_GetLocalAnchorA_0"];
var _emscripten_bind_b2BodyDef_set_linearDamping_1 = Module["_emscripten_bind_b2BodyDef_set_linearDamping_1"] = asm["_emscripten_bind_b2BodyDef_set_linearDamping_1"];
var _emscripten_bind_b2FrictionJoint_GetUserData_0 = Module["_emscripten_bind_b2FrictionJoint_GetUserData_0"] = asm["_emscripten_bind_b2FrictionJoint_GetUserData_0"];
var _emscripten_bind_b2Contact_SetFriction_1 = Module["_emscripten_bind_b2Contact_SetFriction_1"] = asm["_emscripten_bind_b2Contact_SetFriction_1"];
var _emscripten_bind_b2Manifold_set_localNormal_1 = Module["_emscripten_bind_b2Manifold_set_localNormal_1"] = asm["_emscripten_bind_b2Manifold_set_localNormal_1"];
var _emscripten_bind_b2JointDef_get_bodyA_0 = Module["_emscripten_bind_b2JointDef_get_bodyA_0"] = asm["_emscripten_bind_b2JointDef_get_bodyA_0"];
var _emscripten_bind_b2Body_GetLinearDamping_0 = Module["_emscripten_bind_b2Body_GetLinearDamping_0"] = asm["_emscripten_bind_b2Body_GetLinearDamping_0"];
var _emscripten_bind_b2WeldJointDef_set_frequencyHz_1 = Module["_emscripten_bind_b2WeldJointDef_set_frequencyHz_1"] = asm["_emscripten_bind_b2WeldJointDef_set_frequencyHz_1"];
var _emscripten_bind_b2Body_ResetMassData_0 = Module["_emscripten_bind_b2Body_ResetMassData_0"] = asm["_emscripten_bind_b2Body_ResetMassData_0"];
var _emscripten_bind_b2PrismaticJointDef_set_enableMotor_1 = Module["_emscripten_bind_b2PrismaticJointDef_set_enableMotor_1"] = asm["_emscripten_bind_b2PrismaticJointDef_set_enableMotor_1"];
var _emscripten_bind_b2Vec2_Skew_0 = Module["_emscripten_bind_b2Vec2_Skew_0"] = asm["_emscripten_bind_b2Vec2_Skew_0"];
var _emscripten_bind_b2MouseJoint_GetDampingRatio_0 = Module["_emscripten_bind_b2MouseJoint_GetDampingRatio_0"] = asm["_emscripten_bind_b2MouseJoint_GetDampingRatio_0"];
var _emscripten_bind_b2RevoluteJoint_GetAnchorA_0 = Module["_emscripten_bind_b2RevoluteJoint_GetAnchorA_0"] = asm["_emscripten_bind_b2RevoluteJoint_GetAnchorA_0"];
var _emscripten_bind_b2ChainShape_set_m_prevVertex_1 = Module["_emscripten_bind_b2ChainShape_set_m_prevVertex_1"] = asm["_emscripten_bind_b2ChainShape_set_m_prevVertex_1"];
var _emscripten_bind_b2ChainShape_get_m_hasPrevVertex_0 = Module["_emscripten_bind_b2ChainShape_get_m_hasPrevVertex_0"] = asm["_emscripten_bind_b2ChainShape_get_m_hasPrevVertex_0"];
var _emscripten_bind_b2FrictionJoint_GetNext_0 = Module["_emscripten_bind_b2FrictionJoint_GetNext_0"] = asm["_emscripten_bind_b2FrictionJoint_GetNext_0"];
var _emscripten_bind_b2RopeJointDef_set_localAnchorB_1 = Module["_emscripten_bind_b2RopeJointDef_set_localAnchorB_1"] = asm["_emscripten_bind_b2RopeJointDef_set_localAnchorB_1"];
var _emscripten_bind_b2PrismaticJointDef_set_userData_1 = Module["_emscripten_bind_b2PrismaticJointDef_set_userData_1"] = asm["_emscripten_bind_b2PrismaticJointDef_set_userData_1"];
var _emscripten_bind_b2GearJointDef_set_userData_1 = Module["_emscripten_bind_b2GearJointDef_set_userData_1"] = asm["_emscripten_bind_b2GearJointDef_set_userData_1"];
var _emscripten_bind_b2FrictionJointDef_set_type_1 = Module["_emscripten_bind_b2FrictionJointDef_set_type_1"] = asm["_emscripten_bind_b2FrictionJointDef_set_type_1"];
var _emscripten_bind_b2FrictionJointDef_Initialize_3 = Module["_emscripten_bind_b2FrictionJointDef_Initialize_3"] = asm["_emscripten_bind_b2FrictionJointDef_Initialize_3"];
var _emscripten_bind_b2FrictionJointDef_get_collideConnected_0 = Module["_emscripten_bind_b2FrictionJointDef_get_collideConnected_0"] = asm["_emscripten_bind_b2FrictionJointDef_get_collideConnected_0"];
var _emscripten_bind_b2WeldJointDef_set_referenceAngle_1 = Module["_emscripten_bind_b2WeldJointDef_set_referenceAngle_1"] = asm["_emscripten_bind_b2WeldJointDef_set_referenceAngle_1"];
var _emscripten_bind_b2FrictionJoint_GetAnchorA_0 = Module["_emscripten_bind_b2FrictionJoint_GetAnchorA_0"] = asm["_emscripten_bind_b2FrictionJoint_GetAnchorA_0"];
var _emscripten_bind_b2RopeJoint_GetType_0 = Module["_emscripten_bind_b2RopeJoint_GetType_0"] = asm["_emscripten_bind_b2RopeJoint_GetType_0"];
var _emscripten_bind_b2MassData_get_I_0 = Module["_emscripten_bind_b2MassData_get_I_0"] = asm["_emscripten_bind_b2MassData_get_I_0"];
var _emscripten_bind_b2WheelJointDef_get_motorSpeed_0 = Module["_emscripten_bind_b2WheelJointDef_get_motorSpeed_0"] = asm["_emscripten_bind_b2WheelJointDef_get_motorSpeed_0"];
var _emscripten_bind_b2Filter_set_maskBits_1 = Module["_emscripten_bind_b2Filter_set_maskBits_1"] = asm["_emscripten_bind_b2Filter_set_maskBits_1"];
var _emscripten_bind_b2EdgeShape_set_m_radius_1 = Module["_emscripten_bind_b2EdgeShape_set_m_radius_1"] = asm["_emscripten_bind_b2EdgeShape_set_m_radius_1"];
var _emscripten_bind_b2Mat22_b2Mat22_2 = Module["_emscripten_bind_b2Mat22_b2Mat22_2"] = asm["_emscripten_bind_b2Mat22_b2Mat22_2"];
var _emscripten_bind_b2WheelJointDef_set_maxMotorTorque_1 = Module["_emscripten_bind_b2WheelJointDef_set_maxMotorTorque_1"] = asm["_emscripten_bind_b2WheelJointDef_set_maxMotorTorque_1"];
var _emscripten_bind_b2Mat22_b2Mat22_0 = Module["_emscripten_bind_b2Mat22_b2Mat22_0"] = asm["_emscripten_bind_b2Mat22_b2Mat22_0"];
var _emscripten_bind_b2Mat22_b2Mat22_4 = Module["_emscripten_bind_b2Mat22_b2Mat22_4"] = asm["_emscripten_bind_b2Mat22_b2Mat22_4"];
var _emscripten_bind_b2ChainShape_set_m_hasNextVertex_1 = Module["_emscripten_bind_b2ChainShape_set_m_hasNextVertex_1"] = asm["_emscripten_bind_b2ChainShape_set_m_hasNextVertex_1"];
var _emscripten_bind_b2Mat22_GetInverse_0 = Module["_emscripten_bind_b2Mat22_GetInverse_0"] = asm["_emscripten_bind_b2Mat22_GetInverse_0"];
var _emscripten_bind_b2PrismaticJoint_EnableMotor_1 = Module["_emscripten_bind_b2PrismaticJoint_EnableMotor_1"] = asm["_emscripten_bind_b2PrismaticJoint_EnableMotor_1"];
var _emscripten_bind_b2CircleShape_get_m_type_0 = Module["_emscripten_bind_b2CircleShape_get_m_type_0"] = asm["_emscripten_bind_b2CircleShape_get_m_type_0"];
var _emscripten_bind_b2DistanceJoint_GetLocalAnchorA_0 = Module["_emscripten_bind_b2DistanceJoint_GetLocalAnchorA_0"] = asm["_emscripten_bind_b2DistanceJoint_GetLocalAnchorA_0"];
var _emscripten_bind_b2ContactEdge_b2ContactEdge_0 = Module["_emscripten_bind_b2ContactEdge_b2ContactEdge_0"] = asm["_emscripten_bind_b2ContactEdge_b2ContactEdge_0"];
var _emscripten_bind_b2BodyDef___destroy___0 = Module["_emscripten_bind_b2BodyDef___destroy___0"] = asm["_emscripten_bind_b2BodyDef___destroy___0"];
var _emscripten_bind_b2FrictionJointDef_set_maxTorque_1 = Module["_emscripten_bind_b2FrictionJointDef_set_maxTorque_1"] = asm["_emscripten_bind_b2FrictionJointDef_set_maxTorque_1"];
var _emscripten_bind_b2PolygonShape_GetVertex_1 = Module["_emscripten_bind_b2PolygonShape_GetVertex_1"] = asm["_emscripten_bind_b2PolygonShape_GetVertex_1"];
var _emscripten_bind_b2PulleyJointDef_set_groundAnchorB_1 = Module["_emscripten_bind_b2PulleyJointDef_set_groundAnchorB_1"] = asm["_emscripten_bind_b2PulleyJointDef_set_groundAnchorB_1"];
var _emscripten_bind_b2RevoluteJointDef_get_collideConnected_0 = Module["_emscripten_bind_b2RevoluteJointDef_get_collideConnected_0"] = asm["_emscripten_bind_b2RevoluteJointDef_get_collideConnected_0"];
var _emscripten_bind_b2DistanceJointDef_set_bodyA_1 = Module["_emscripten_bind_b2DistanceJointDef_set_bodyA_1"] = asm["_emscripten_bind_b2DistanceJointDef_set_bodyA_1"];
var _emscripten_bind_b2RevoluteJoint_SetLimits_2 = Module["_emscripten_bind_b2RevoluteJoint_SetLimits_2"] = asm["_emscripten_bind_b2RevoluteJoint_SetLimits_2"];
var _emscripten_bind_b2WeldJointDef_set_type_1 = Module["_emscripten_bind_b2WeldJointDef_set_type_1"] = asm["_emscripten_bind_b2WeldJointDef_set_type_1"];
var _emscripten_bind_b2FixtureDef_set_density_1 = Module["_emscripten_bind_b2FixtureDef_set_density_1"] = asm["_emscripten_bind_b2FixtureDef_set_density_1"];
var _emscripten_bind_b2Shape_set_m_type_1 = Module["_emscripten_bind_b2Shape_set_m_type_1"] = asm["_emscripten_bind_b2Shape_set_m_type_1"];
var _emscripten_bind_b2WheelJoint_GetJointTranslation_0 = Module["_emscripten_bind_b2WheelJoint_GetJointTranslation_0"] = asm["_emscripten_bind_b2WheelJoint_GetJointTranslation_0"];
var _emscripten_bind_b2WheelJoint_GetMotorTorque_1 = Module["_emscripten_bind_b2WheelJoint_GetMotorTorque_1"] = asm["_emscripten_bind_b2WheelJoint_GetMotorTorque_1"];
var _emscripten_bind_b2RopeJoint_SetUserData_1 = Module["_emscripten_bind_b2RopeJoint_SetUserData_1"] = asm["_emscripten_bind_b2RopeJoint_SetUserData_1"];
var _emscripten_bind_b2RopeJointDef___destroy___0 = Module["_emscripten_bind_b2RopeJointDef___destroy___0"] = asm["_emscripten_bind_b2RopeJointDef___destroy___0"];
var _emscripten_bind_b2WheelJoint_IsActive_0 = Module["_emscripten_bind_b2WheelJoint_IsActive_0"] = asm["_emscripten_bind_b2WheelJoint_IsActive_0"];
var _emscripten_bind_b2PrismaticJointDef_get_enableMotor_0 = Module["_emscripten_bind_b2PrismaticJointDef_get_enableMotor_0"] = asm["_emscripten_bind_b2PrismaticJointDef_get_enableMotor_0"];
var _emscripten_bind_b2FrictionJointDef___destroy___0 = Module["_emscripten_bind_b2FrictionJointDef___destroy___0"] = asm["_emscripten_bind_b2FrictionJointDef___destroy___0"];
var _emscripten_bind_b2WeldJoint_GetReactionForce_1 = Module["_emscripten_bind_b2WeldJoint_GetReactionForce_1"] = asm["_emscripten_bind_b2WeldJoint_GetReactionForce_1"];
var _emscripten_bind_b2ChainShape_RayCast_4 = Module["_emscripten_bind_b2ChainShape_RayCast_4"] = asm["_emscripten_bind_b2ChainShape_RayCast_4"];
var _emscripten_bind_b2PrismaticJoint_SetMotorSpeed_1 = Module["_emscripten_bind_b2PrismaticJoint_SetMotorSpeed_1"] = asm["_emscripten_bind_b2PrismaticJoint_SetMotorSpeed_1"];
var _emscripten_bind_b2ContactID_get_cf_0 = Module["_emscripten_bind_b2ContactID_get_cf_0"] = asm["_emscripten_bind_b2ContactID_get_cf_0"];
var _emscripten_bind_b2MouseJointDef_set_frequencyHz_1 = Module["_emscripten_bind_b2MouseJointDef_set_frequencyHz_1"] = asm["_emscripten_bind_b2MouseJointDef_set_frequencyHz_1"];
var _emscripten_bind_b2ChainShape_get_m_radius_0 = Module["_emscripten_bind_b2ChainShape_get_m_radius_0"] = asm["_emscripten_bind_b2ChainShape_get_m_radius_0"];
var _emscripten_bind_b2Body_GetLinearVelocity_0 = Module["_emscripten_bind_b2Body_GetLinearVelocity_0"] = asm["_emscripten_bind_b2Body_GetLinearVelocity_0"];
var _emscripten_bind_b2ChainShape_set_m_radius_1 = Module["_emscripten_bind_b2ChainShape_set_m_radius_1"] = asm["_emscripten_bind_b2ChainShape_set_m_radius_1"];
var _emscripten_bind_b2DistanceJoint_GetReactionTorque_1 = Module["_emscripten_bind_b2DistanceJoint_GetReactionTorque_1"] = asm["_emscripten_bind_b2DistanceJoint_GetReactionTorque_1"];
var _emscripten_bind_b2World_Dump_0 = Module["_emscripten_bind_b2World_Dump_0"] = asm["_emscripten_bind_b2World_Dump_0"];
var _emscripten_bind_b2RevoluteJoint_GetLocalAnchorB_0 = Module["_emscripten_bind_b2RevoluteJoint_GetLocalAnchorB_0"] = asm["_emscripten_bind_b2RevoluteJoint_GetLocalAnchorB_0"];
var _emscripten_bind_b2Profile_set_solve_1 = Module["_emscripten_bind_b2Profile_set_solve_1"] = asm["_emscripten_bind_b2Profile_set_solve_1"];
var _emscripten_bind_b2WeldJoint_GetDampingRatio_0 = Module["_emscripten_bind_b2WeldJoint_GetDampingRatio_0"] = asm["_emscripten_bind_b2WeldJoint_GetDampingRatio_0"];
var _emscripten_bind_b2Color_get_b_0 = Module["_emscripten_bind_b2Color_get_b_0"] = asm["_emscripten_bind_b2Color_get_b_0"];
var _emscripten_bind_b2RopeJoint_GetReactionForce_1 = Module["_emscripten_bind_b2RopeJoint_GetReactionForce_1"] = asm["_emscripten_bind_b2RopeJoint_GetReactionForce_1"];
var _emscripten_bind_b2PrismaticJointDef_get_enableLimit_0 = Module["_emscripten_bind_b2PrismaticJointDef_get_enableLimit_0"] = asm["_emscripten_bind_b2PrismaticJointDef_get_enableLimit_0"];
var _emscripten_bind_b2ManifoldPoint_set_localPoint_1 = Module["_emscripten_bind_b2ManifoldPoint_set_localPoint_1"] = asm["_emscripten_bind_b2ManifoldPoint_set_localPoint_1"];
var _emscripten_bind_b2Fixture_GetFilterData_0 = Module["_emscripten_bind_b2Fixture_GetFilterData_0"] = asm["_emscripten_bind_b2Fixture_GetFilterData_0"];
var _emscripten_bind_b2Color_get_r_0 = Module["_emscripten_bind_b2Color_get_r_0"] = asm["_emscripten_bind_b2Color_get_r_0"];
var _emscripten_bind_b2Shape_ComputeMass_2 = Module["_emscripten_bind_b2Shape_ComputeMass_2"] = asm["_emscripten_bind_b2Shape_ComputeMass_2"];
var _emscripten_bind_b2Joint_GetNext_0 = Module["_emscripten_bind_b2Joint_GetNext_0"] = asm["_emscripten_bind_b2Joint_GetNext_0"];
var _emscripten_bind_b2PrismaticJointDef_get_collideConnected_0 = Module["_emscripten_bind_b2PrismaticJointDef_get_collideConnected_0"] = asm["_emscripten_bind_b2PrismaticJointDef_get_collideConnected_0"];
var _emscripten_bind_b2World_RayCast_3 = Module["_emscripten_bind_b2World_RayCast_3"] = asm["_emscripten_bind_b2World_RayCast_3"];
var _emscripten_bind_b2MassData_set_I_1 = Module["_emscripten_bind_b2MassData_set_I_1"] = asm["_emscripten_bind_b2MassData_set_I_1"];
var _emscripten_bind_b2MassData___destroy___0 = Module["_emscripten_bind_b2MassData___destroy___0"] = asm["_emscripten_bind_b2MassData___destroy___0"];
var _emscripten_bind_b2Profile_get_collide_0 = Module["_emscripten_bind_b2Profile_get_collide_0"] = asm["_emscripten_bind_b2Profile_get_collide_0"];
var _emscripten_bind_b2Color_b2Color_3 = Module["_emscripten_bind_b2Color_b2Color_3"] = asm["_emscripten_bind_b2Color_b2Color_3"];
var _emscripten_bind_b2Color_b2Color_0 = Module["_emscripten_bind_b2Color_b2Color_0"] = asm["_emscripten_bind_b2Color_b2Color_0"];
var _emscripten_bind_b2CircleShape_ComputeAABB_3 = Module["_emscripten_bind_b2CircleShape_ComputeAABB_3"] = asm["_emscripten_bind_b2CircleShape_ComputeAABB_3"];
var _emscripten_bind_b2WeldJointDef_Initialize_3 = Module["_emscripten_bind_b2WeldJointDef_Initialize_3"] = asm["_emscripten_bind_b2WeldJointDef_Initialize_3"];
var _emscripten_bind_b2RevoluteJoint_GetMotorTorque_1 = Module["_emscripten_bind_b2RevoluteJoint_GetMotorTorque_1"] = asm["_emscripten_bind_b2RevoluteJoint_GetMotorTorque_1"];
var _emscripten_enum_b2JointType_e_gearJoint = Module["_emscripten_enum_b2JointType_e_gearJoint"] = asm["_emscripten_enum_b2JointType_e_gearJoint"];
var _emscripten_bind_b2FixtureDef_get_friction_0 = Module["_emscripten_bind_b2FixtureDef_get_friction_0"] = asm["_emscripten_bind_b2FixtureDef_get_friction_0"];
var _emscripten_bind_b2PrismaticJointDef_set_localAnchorA_1 = Module["_emscripten_bind_b2PrismaticJointDef_set_localAnchorA_1"] = asm["_emscripten_bind_b2PrismaticJointDef_set_localAnchorA_1"];
var _emscripten_bind_b2Contact_GetManifold_0 = Module["_emscripten_bind_b2Contact_GetManifold_0"] = asm["_emscripten_bind_b2Contact_GetManifold_0"];
var _emscripten_bind_b2MouseJoint_GetTarget_0 = Module["_emscripten_bind_b2MouseJoint_GetTarget_0"] = asm["_emscripten_bind_b2MouseJoint_GetTarget_0"];
var _emscripten_bind_b2WeldJointDef_get_localAnchorA_0 = Module["_emscripten_bind_b2WeldJointDef_get_localAnchorA_0"] = asm["_emscripten_bind_b2WeldJointDef_get_localAnchorA_0"];
var _emscripten_bind_b2MouseJoint_SetUserData_1 = Module["_emscripten_bind_b2MouseJoint_SetUserData_1"] = asm["_emscripten_bind_b2MouseJoint_SetUserData_1"];
var _emscripten_bind_b2JointEdge_get_other_0 = Module["_emscripten_bind_b2JointEdge_get_other_0"] = asm["_emscripten_bind_b2JointEdge_get_other_0"];
var _emscripten_bind_b2ChainShape_GetChildEdge_2 = Module["_emscripten_bind_b2ChainShape_GetChildEdge_2"] = asm["_emscripten_bind_b2ChainShape_GetChildEdge_2"];
var _emscripten_bind_b2GearJointDef_set_collideConnected_1 = Module["_emscripten_bind_b2GearJointDef_set_collideConnected_1"] = asm["_emscripten_bind_b2GearJointDef_set_collideConnected_1"];
var _emscripten_bind_b2PrismaticJoint_GetUpperLimit_0 = Module["_emscripten_bind_b2PrismaticJoint_GetUpperLimit_0"] = asm["_emscripten_bind_b2PrismaticJoint_GetUpperLimit_0"];
var _emscripten_bind_b2DistanceJoint_GetCollideConnected_0 = Module["_emscripten_bind_b2DistanceJoint_GetCollideConnected_0"] = asm["_emscripten_bind_b2DistanceJoint_GetCollideConnected_0"];
var _emscripten_bind_b2MouseJoint_GetMaxForce_0 = Module["_emscripten_bind_b2MouseJoint_GetMaxForce_0"] = asm["_emscripten_bind_b2MouseJoint_GetMaxForce_0"];
var _emscripten_bind_b2PrismaticJointDef_set_bodyA_1 = Module["_emscripten_bind_b2PrismaticJointDef_set_bodyA_1"] = asm["_emscripten_bind_b2PrismaticJointDef_set_bodyA_1"];
var _emscripten_bind_b2Mat22_SetZero_0 = Module["_emscripten_bind_b2Mat22_SetZero_0"] = asm["_emscripten_bind_b2Mat22_SetZero_0"];
var _emscripten_bind_b2Contact_GetChildIndexA_0 = Module["_emscripten_bind_b2Contact_GetChildIndexA_0"] = asm["_emscripten_bind_b2Contact_GetChildIndexA_0"];
var _emscripten_bind_b2Color_get_g_0 = Module["_emscripten_bind_b2Color_get_g_0"] = asm["_emscripten_bind_b2Color_get_g_0"];
var _emscripten_bind_b2Body_GetTransform_0 = Module["_emscripten_bind_b2Body_GetTransform_0"] = asm["_emscripten_bind_b2Body_GetTransform_0"];
var _emscripten_bind_b2ContactEdge___destroy___0 = Module["_emscripten_bind_b2ContactEdge___destroy___0"] = asm["_emscripten_bind_b2ContactEdge___destroy___0"];
var _emscripten_bind_b2Mat33_set_ex_1 = Module["_emscripten_bind_b2Mat33_set_ex_1"] = asm["_emscripten_bind_b2Mat33_set_ex_1"];
var _emscripten_bind_b2AABB_GetExtents_0 = Module["_emscripten_bind_b2AABB_GetExtents_0"] = asm["_emscripten_bind_b2AABB_GetExtents_0"];
var _emscripten_bind_b2RevoluteJointDef_get_bodyA_0 = Module["_emscripten_bind_b2RevoluteJointDef_get_bodyA_0"] = asm["_emscripten_bind_b2RevoluteJointDef_get_bodyA_0"];
var _emscripten_bind_b2PrismaticJoint_GetBodyB_0 = Module["_emscripten_bind_b2PrismaticJoint_GetBodyB_0"] = asm["_emscripten_bind_b2PrismaticJoint_GetBodyB_0"];
var _emscripten_bind_b2WheelJointDef_set_bodyA_1 = Module["_emscripten_bind_b2WheelJointDef_set_bodyA_1"] = asm["_emscripten_bind_b2WheelJointDef_set_bodyA_1"];
var _emscripten_bind_b2DistanceJointDef_set_collideConnected_1 = Module["_emscripten_bind_b2DistanceJointDef_set_collideConnected_1"] = asm["_emscripten_bind_b2DistanceJointDef_set_collideConnected_1"];
var _emscripten_bind_b2BodyDef_get_angle_0 = Module["_emscripten_bind_b2BodyDef_get_angle_0"] = asm["_emscripten_bind_b2BodyDef_get_angle_0"];
var _emscripten_bind_b2PulleyJoint_GetReactionTorque_1 = Module["_emscripten_bind_b2PulleyJoint_GetReactionTorque_1"] = asm["_emscripten_bind_b2PulleyJoint_GetReactionTorque_1"];
var _emscripten_bind_b2FixtureDef_get_shape_0 = Module["_emscripten_bind_b2FixtureDef_get_shape_0"] = asm["_emscripten_bind_b2FixtureDef_get_shape_0"];
var _emscripten_bind_b2WeldJointDef_get_userData_0 = Module["_emscripten_bind_b2WeldJointDef_get_userData_0"] = asm["_emscripten_bind_b2WeldJointDef_get_userData_0"];
var _emscripten_bind_b2WheelJointDef_get_enableMotor_0 = Module["_emscripten_bind_b2WheelJointDef_get_enableMotor_0"] = asm["_emscripten_bind_b2WheelJointDef_get_enableMotor_0"];
var _emscripten_bind_b2Mat33_b2Mat33_3 = Module["_emscripten_bind_b2Mat33_b2Mat33_3"] = asm["_emscripten_bind_b2Mat33_b2Mat33_3"];
var _emscripten_bind_b2Vec3_get_y_0 = Module["_emscripten_bind_b2Vec3_get_y_0"] = asm["_emscripten_bind_b2Vec3_get_y_0"];
var _emscripten_bind_b2JointDef_get_type_0 = Module["_emscripten_bind_b2JointDef_get_type_0"] = asm["_emscripten_bind_b2JointDef_get_type_0"];
var _emscripten_bind_JSQueryCallback_ReportFixture_1 = Module["_emscripten_bind_JSQueryCallback_ReportFixture_1"] = asm["_emscripten_bind_JSQueryCallback_ReportFixture_1"];
var _emscripten_bind_b2Fixture_TestPoint_1 = Module["_emscripten_bind_b2Fixture_TestPoint_1"] = asm["_emscripten_bind_b2Fixture_TestPoint_1"];
var _emscripten_bind_b2RevoluteJoint_GetCollideConnected_0 = Module["_emscripten_bind_b2RevoluteJoint_GetCollideConnected_0"] = asm["_emscripten_bind_b2RevoluteJoint_GetCollideConnected_0"];
var _emscripten_bind_JSDraw_JSDraw_0 = Module["_emscripten_bind_JSDraw_JSDraw_0"] = asm["_emscripten_bind_JSDraw_JSDraw_0"];
var _emscripten_bind_b2MouseJoint_GetAnchorA_0 = Module["_emscripten_bind_b2MouseJoint_GetAnchorA_0"] = asm["_emscripten_bind_b2MouseJoint_GetAnchorA_0"];
var _emscripten_bind_b2Transform_get_p_0 = Module["_emscripten_bind_b2Transform_get_p_0"] = asm["_emscripten_bind_b2Transform_get_p_0"];
var _emscripten_bind_b2FrictionJoint_SetMaxForce_1 = Module["_emscripten_bind_b2FrictionJoint_SetMaxForce_1"] = asm["_emscripten_bind_b2FrictionJoint_SetMaxForce_1"];
var _emscripten_bind_b2EdgeShape_ComputeMass_2 = Module["_emscripten_bind_b2EdgeShape_ComputeMass_2"] = asm["_emscripten_bind_b2EdgeShape_ComputeMass_2"];
var _emscripten_bind_VoidPtr___destroy___0 = Module["_emscripten_bind_VoidPtr___destroy___0"] = asm["_emscripten_bind_VoidPtr___destroy___0"];
var _emscripten_bind_b2DistanceJointDef___destroy___0 = Module["_emscripten_bind_b2DistanceJointDef___destroy___0"] = asm["_emscripten_bind_b2DistanceJointDef___destroy___0"];
var _emscripten_bind_b2RopeJointDef_set_bodyA_1 = Module["_emscripten_bind_b2RopeJointDef_set_bodyA_1"] = asm["_emscripten_bind_b2RopeJointDef_set_bodyA_1"];
var _emscripten_bind_b2JointDef_set_type_1 = Module["_emscripten_bind_b2JointDef_set_type_1"] = asm["_emscripten_bind_b2JointDef_set_type_1"];
var _emscripten_bind_b2Draw_AppendFlags_1 = Module["_emscripten_bind_b2Draw_AppendFlags_1"] = asm["_emscripten_bind_b2Draw_AppendFlags_1"];
var _emscripten_bind_b2Body_SetActive_1 = Module["_emscripten_bind_b2Body_SetActive_1"] = asm["_emscripten_bind_b2Body_SetActive_1"];
var _emscripten_bind_b2World_GetContactList_0 = Module["_emscripten_bind_b2World_GetContactList_0"] = asm["_emscripten_bind_b2World_GetContactList_0"];
var _emscripten_bind_b2Mat33_set_ez_1 = Module["_emscripten_bind_b2Mat33_set_ez_1"] = asm["_emscripten_bind_b2Mat33_set_ez_1"];
var _emscripten_bind_b2JointEdge_b2JointEdge_0 = Module["_emscripten_bind_b2JointEdge_b2JointEdge_0"] = asm["_emscripten_bind_b2JointEdge_b2JointEdge_0"];
var _emscripten_bind_b2FrictionJointDef_get_bodyA_0 = Module["_emscripten_bind_b2FrictionJointDef_get_bodyA_0"] = asm["_emscripten_bind_b2FrictionJointDef_get_bodyA_0"];
var _emscripten_bind_b2Body_ApplyForce_2 = Module["_emscripten_bind_b2Body_ApplyForce_2"] = asm["_emscripten_bind_b2Body_ApplyForce_2"];
var _emscripten_bind_b2WeldJoint_SetUserData_1 = Module["_emscripten_bind_b2WeldJoint_SetUserData_1"] = asm["_emscripten_bind_b2WeldJoint_SetUserData_1"];
var _emscripten_bind_b2RevoluteJoint_GetReactionForce_1 = Module["_emscripten_bind_b2RevoluteJoint_GetReactionForce_1"] = asm["_emscripten_bind_b2RevoluteJoint_GetReactionForce_1"];
var _emscripten_bind_b2PulleyJointDef_set_collideConnected_1 = Module["_emscripten_bind_b2PulleyJointDef_set_collideConnected_1"] = asm["_emscripten_bind_b2PulleyJointDef_set_collideConnected_1"];
var _emscripten_bind_b2RopeJoint_GetCollideConnected_0 = Module["_emscripten_bind_b2RopeJoint_GetCollideConnected_0"] = asm["_emscripten_bind_b2RopeJoint_GetCollideConnected_0"];
var _emscripten_bind_b2GearJointDef_set_joint2_1 = Module["_emscripten_bind_b2GearJointDef_set_joint2_1"] = asm["_emscripten_bind_b2GearJointDef_set_joint2_1"];
var _emscripten_bind_b2BodyDef_set_userData_1 = Module["_emscripten_bind_b2BodyDef_set_userData_1"] = asm["_emscripten_bind_b2BodyDef_set_userData_1"];
var _emscripten_bind_b2GearJoint_GetAnchorB_0 = Module["_emscripten_bind_b2GearJoint_GetAnchorB_0"] = asm["_emscripten_bind_b2GearJoint_GetAnchorB_0"];
var _emscripten_bind_b2RopeJoint_IsActive_0 = Module["_emscripten_bind_b2RopeJoint_IsActive_0"] = asm["_emscripten_bind_b2RopeJoint_IsActive_0"];
var _emscripten_bind_b2Fixture_GetFriction_0 = Module["_emscripten_bind_b2Fixture_GetFriction_0"] = asm["_emscripten_bind_b2Fixture_GetFriction_0"];
var _emscripten_bind_b2Body_GetAngle_0 = Module["_emscripten_bind_b2Body_GetAngle_0"] = asm["_emscripten_bind_b2Body_GetAngle_0"];
var _emscripten_enum_b2DrawFlag_e_aabbBit = Module["_emscripten_enum_b2DrawFlag_e_aabbBit"] = asm["_emscripten_enum_b2DrawFlag_e_aabbBit"];
var _emscripten_bind_b2RevoluteJointDef_Initialize_3 = Module["_emscripten_bind_b2RevoluteJointDef_Initialize_3"] = asm["_emscripten_bind_b2RevoluteJointDef_Initialize_3"];
var _emscripten_bind_b2DistanceJointDef_set_localAnchorA_1 = Module["_emscripten_bind_b2DistanceJointDef_set_localAnchorA_1"] = asm["_emscripten_bind_b2DistanceJointDef_set_localAnchorA_1"];
var _emscripten_bind_b2EdgeShape_Set_2 = Module["_emscripten_bind_b2EdgeShape_Set_2"] = asm["_emscripten_bind_b2EdgeShape_Set_2"];
var _emscripten_bind_b2Mat33_SetZero_0 = Module["_emscripten_bind_b2Mat33_SetZero_0"] = asm["_emscripten_bind_b2Mat33_SetZero_0"];
var _emscripten_bind_b2WheelJointDef_b2WheelJointDef_0 = Module["_emscripten_bind_b2WheelJointDef_b2WheelJointDef_0"] = asm["_emscripten_bind_b2WheelJointDef_b2WheelJointDef_0"];
var _emscripten_bind_b2PrismaticJointDef_get_localAxisA_0 = Module["_emscripten_bind_b2PrismaticJointDef_get_localAxisA_0"] = asm["_emscripten_bind_b2PrismaticJointDef_get_localAxisA_0"];
var _emscripten_bind_b2Mat22_get_ey_0 = Module["_emscripten_bind_b2Mat22_get_ey_0"] = asm["_emscripten_bind_b2Mat22_get_ey_0"];
var _emscripten_bind_b2Mat22_SetIdentity_0 = Module["_emscripten_bind_b2Mat22_SetIdentity_0"] = asm["_emscripten_bind_b2Mat22_SetIdentity_0"];
var _emscripten_bind_b2Joint_IsActive_0 = Module["_emscripten_bind_b2Joint_IsActive_0"] = asm["_emscripten_bind_b2Joint_IsActive_0"];
var _emscripten_bind_b2BodyDef_get_allowSleep_0 = Module["_emscripten_bind_b2BodyDef_get_allowSleep_0"] = asm["_emscripten_bind_b2BodyDef_get_allowSleep_0"];
var _emscripten_bind_b2GearJoint_GetJoint2_0 = Module["_emscripten_bind_b2GearJoint_GetJoint2_0"] = asm["_emscripten_bind_b2GearJoint_GetJoint2_0"];
var _emscripten_bind_b2EdgeShape_set_m_vertex1_1 = Module["_emscripten_bind_b2EdgeShape_set_m_vertex1_1"] = asm["_emscripten_bind_b2EdgeShape_set_m_vertex1_1"];
var _emscripten_bind_b2Body_GetWorld_0 = Module["_emscripten_bind_b2Body_GetWorld_0"] = asm["_emscripten_bind_b2Body_GetWorld_0"];
var _emscripten_enum_b2LimitState_e_inactiveLimit = Module["_emscripten_enum_b2LimitState_e_inactiveLimit"] = asm["_emscripten_enum_b2LimitState_e_inactiveLimit"];
var _emscripten_bind_b2PulleyJointDef_set_lengthB_1 = Module["_emscripten_bind_b2PulleyJointDef_set_lengthB_1"] = asm["_emscripten_bind_b2PulleyJointDef_set_lengthB_1"];
var _emscripten_bind_b2Body_SetAwake_1 = Module["_emscripten_bind_b2Body_SetAwake_1"] = asm["_emscripten_bind_b2Body_SetAwake_1"];
var _emscripten_bind_b2PrismaticJointDef_set_upperTranslation_1 = Module["_emscripten_bind_b2PrismaticJointDef_set_upperTranslation_1"] = asm["_emscripten_bind_b2PrismaticJointDef_set_upperTranslation_1"];
var _emscripten_bind_b2Vec2___destroy___0 = Module["_emscripten_bind_b2Vec2___destroy___0"] = asm["_emscripten_bind_b2Vec2___destroy___0"];
var _emscripten_bind_b2RayCastInput_set_p1_1 = Module["_emscripten_bind_b2RayCastInput_set_p1_1"] = asm["_emscripten_bind_b2RayCastInput_set_p1_1"];
var _emscripten_bind_b2Contact_ResetFriction_0 = Module["_emscripten_bind_b2Contact_ResetFriction_0"] = asm["_emscripten_bind_b2Contact_ResetFriction_0"];
var _emscripten_bind_b2PulleyJoint_GetAnchorA_0 = Module["_emscripten_bind_b2PulleyJoint_GetAnchorA_0"] = asm["_emscripten_bind_b2PulleyJoint_GetAnchorA_0"];
var _emscripten_bind_b2BodyDef_get_linearVelocity_0 = Module["_emscripten_bind_b2BodyDef_get_linearVelocity_0"] = asm["_emscripten_bind_b2BodyDef_get_linearVelocity_0"];
var _emscripten_bind_b2DistanceJointDef_get_bodyB_0 = Module["_emscripten_bind_b2DistanceJointDef_get_bodyB_0"] = asm["_emscripten_bind_b2DistanceJointDef_get_bodyB_0"];
var _emscripten_bind_b2Mat22___destroy___0 = Module["_emscripten_bind_b2Mat22___destroy___0"] = asm["_emscripten_bind_b2Mat22___destroy___0"];
var _emscripten_bind_b2RevoluteJoint_GetNext_0 = Module["_emscripten_bind_b2RevoluteJoint_GetNext_0"] = asm["_emscripten_bind_b2RevoluteJoint_GetNext_0"];
var _emscripten_bind_b2Color___destroy___0 = Module["_emscripten_bind_b2Color___destroy___0"] = asm["_emscripten_bind_b2Color___destroy___0"];
var _emscripten_bind_b2Fixture_GetShape_0 = Module["_emscripten_bind_b2Fixture_GetShape_0"] = asm["_emscripten_bind_b2Fixture_GetShape_0"];
var _emscripten_bind_b2PolygonShape_SetAsBox_2 = Module["_emscripten_bind_b2PolygonShape_SetAsBox_2"] = asm["_emscripten_bind_b2PolygonShape_SetAsBox_2"];
var _emscripten_bind_b2Vec3_op_mul_1 = Module["_emscripten_bind_b2Vec3_op_mul_1"] = asm["_emscripten_bind_b2Vec3_op_mul_1"];
var _emscripten_bind_b2PolygonShape_set_m_type_1 = Module["_emscripten_bind_b2PolygonShape_set_m_type_1"] = asm["_emscripten_bind_b2PolygonShape_set_m_type_1"];
var _emscripten_bind_b2Cycles_b2Cycles_0 = Module["_emscripten_bind_b2Cycles_b2Cycles_0"] = asm["_emscripten_bind_b2Cycles_b2Cycles_0"];
var _emscripten_bind_b2WheelJoint_GetType_0 = Module["_emscripten_bind_b2WheelJoint_GetType_0"] = asm["_emscripten_bind_b2WheelJoint_GetType_0"];
var _emscripten_bind_b2RevoluteJoint_IsActive_0 = Module["_emscripten_bind_b2RevoluteJoint_IsActive_0"] = asm["_emscripten_bind_b2RevoluteJoint_IsActive_0"];
var _emscripten_bind_b2GearJoint_GetNext_0 = Module["_emscripten_bind_b2GearJoint_GetNext_0"] = asm["_emscripten_bind_b2GearJoint_GetNext_0"];
var _emscripten_bind_b2MouseJointDef_get_maxForce_0 = Module["_emscripten_bind_b2MouseJointDef_get_maxForce_0"] = asm["_emscripten_bind_b2MouseJointDef_get_maxForce_0"];
var _emscripten_bind_b2DestructionListenerWrapper___destroy___0 = Module["_emscripten_bind_b2DestructionListenerWrapper___destroy___0"] = asm["_emscripten_bind_b2DestructionListenerWrapper___destroy___0"];
var _emscripten_bind_b2EdgeShape_set_m_type_1 = Module["_emscripten_bind_b2EdgeShape_set_m_type_1"] = asm["_emscripten_bind_b2EdgeShape_set_m_type_1"];
var _emscripten_bind_b2WheelJoint_GetLocalAxisA_0 = Module["_emscripten_bind_b2WheelJoint_GetLocalAxisA_0"] = asm["_emscripten_bind_b2WheelJoint_GetLocalAxisA_0"];
var _emscripten_bind_b2Body_GetNext_0 = Module["_emscripten_bind_b2Body_GetNext_0"] = asm["_emscripten_bind_b2Body_GetNext_0"];
var _emscripten_bind_b2RopeJoint_GetBodyA_0 = Module["_emscripten_bind_b2RopeJoint_GetBodyA_0"] = asm["_emscripten_bind_b2RopeJoint_GetBodyA_0"];
var _emscripten_enum_b2JointType_e_unknownJoint = Module["_emscripten_enum_b2JointType_e_unknownJoint"] = asm["_emscripten_enum_b2JointType_e_unknownJoint"];
var _emscripten_bind_b2ContactFeature_set_indexA_1 = Module["_emscripten_bind_b2ContactFeature_set_indexA_1"] = asm["_emscripten_bind_b2ContactFeature_set_indexA_1"];
var _emscripten_bind_b2Profile_get_solveInit_0 = Module["_emscripten_bind_b2Profile_get_solveInit_0"] = asm["_emscripten_bind_b2Profile_get_solveInit_0"];
var _emscripten_bind_b2BodyDef_set_angularDamping_1 = Module["_emscripten_bind_b2BodyDef_set_angularDamping_1"] = asm["_emscripten_bind_b2BodyDef_set_angularDamping_1"];
var _emscripten_bind_b2FrictionJoint_GetAnchorB_0 = Module["_emscripten_bind_b2FrictionJoint_GetAnchorB_0"] = asm["_emscripten_bind_b2FrictionJoint_GetAnchorB_0"];
var _emscripten_bind_b2World_QueryAABB_2 = Module["_emscripten_bind_b2World_QueryAABB_2"] = asm["_emscripten_bind_b2World_QueryAABB_2"];
var _emscripten_bind_b2BodyDef_get_userData_0 = Module["_emscripten_bind_b2BodyDef_get_userData_0"] = asm["_emscripten_bind_b2BodyDef_get_userData_0"];
var _emscripten_bind_b2Body_SetAngularVelocity_1 = Module["_emscripten_bind_b2Body_SetAngularVelocity_1"] = asm["_emscripten_bind_b2Body_SetAngularVelocity_1"];
var _emscripten_bind_b2WheelJointDef_get_userData_0 = Module["_emscripten_bind_b2WheelJointDef_get_userData_0"] = asm["_emscripten_bind_b2WheelJointDef_get_userData_0"];
var _emscripten_bind_b2DistanceJoint_GetBodyB_0 = Module["_emscripten_bind_b2DistanceJoint_GetBodyB_0"] = asm["_emscripten_bind_b2DistanceJoint_GetBodyB_0"];
var _emscripten_bind_b2RevoluteJointDef_set_maxMotorTorque_1 = Module["_emscripten_bind_b2RevoluteJointDef_set_maxMotorTorque_1"] = asm["_emscripten_bind_b2RevoluteJointDef_set_maxMotorTorque_1"];
var _emscripten_bind_b2WeldJointDef_set_bodyB_1 = Module["_emscripten_bind_b2WeldJointDef_set_bodyB_1"] = asm["_emscripten_bind_b2WeldJointDef_set_bodyB_1"];
var _emscripten_bind_b2RevoluteJoint_SetUserData_1 = Module["_emscripten_bind_b2RevoluteJoint_SetUserData_1"] = asm["_emscripten_bind_b2RevoluteJoint_SetUserData_1"];
var _emscripten_bind_b2DistanceJoint_SetLength_1 = Module["_emscripten_bind_b2DistanceJoint_SetLength_1"] = asm["_emscripten_bind_b2DistanceJoint_SetLength_1"];
var _emscripten_bind_b2JointEdge_get_joint_0 = Module["_emscripten_bind_b2JointEdge_get_joint_0"] = asm["_emscripten_bind_b2JointEdge_get_joint_0"];
var _emscripten_bind_b2Params_getDumpCon_0 = Module["_emscripten_bind_b2Params_getDumpCon_0"] = asm["_emscripten_bind_b2Params_getDumpCon_0"];
var _emscripten_bind_b2FixtureDef___destroy___0 = Module["_emscripten_bind_b2FixtureDef___destroy___0"] = asm["_emscripten_bind_b2FixtureDef___destroy___0"];
var _emscripten_bind_b2FixtureDef_set_shape_1 = Module["_emscripten_bind_b2FixtureDef_set_shape_1"] = asm["_emscripten_bind_b2FixtureDef_set_shape_1"];
var _emscripten_bind_b2WeldJoint_GetAnchorA_0 = Module["_emscripten_bind_b2WeldJoint_GetAnchorA_0"] = asm["_emscripten_bind_b2WeldJoint_GetAnchorA_0"];
var _emscripten_bind_b2Profile_get_solveVelocity_0 = Module["_emscripten_bind_b2Profile_get_solveVelocity_0"] = asm["_emscripten_bind_b2Profile_get_solveVelocity_0"];
var _emscripten_bind_b2WeldJointDef_get_bodyB_0 = Module["_emscripten_bind_b2WeldJointDef_get_bodyB_0"] = asm["_emscripten_bind_b2WeldJointDef_get_bodyB_0"];
var _emscripten_bind_b2Body_SetAngularDamping_1 = Module["_emscripten_bind_b2Body_SetAngularDamping_1"] = asm["_emscripten_bind_b2Body_SetAngularDamping_1"];
var _emscripten_bind_b2PulleyJointDef_Initialize_7 = Module["_emscripten_bind_b2PulleyJointDef_Initialize_7"] = asm["_emscripten_bind_b2PulleyJointDef_Initialize_7"];
var _emscripten_bind_b2GearJointDef_set_bodyB_1 = Module["_emscripten_bind_b2GearJointDef_set_bodyB_1"] = asm["_emscripten_bind_b2GearJointDef_set_bodyB_1"];
var _emscripten_bind_b2RopeJoint_GetReactionTorque_1 = Module["_emscripten_bind_b2RopeJoint_GetReactionTorque_1"] = asm["_emscripten_bind_b2RopeJoint_GetReactionTorque_1"];
var _emscripten_bind_b2Mat22_set_ex_1 = Module["_emscripten_bind_b2Mat22_set_ex_1"] = asm["_emscripten_bind_b2Mat22_set_ex_1"];
var _emscripten_bind_b2GearJoint_GetType_0 = Module["_emscripten_bind_b2GearJoint_GetType_0"] = asm["_emscripten_bind_b2GearJoint_GetType_0"];
var _emscripten_bind_b2ChainShape_b2ChainShape_0 = Module["_emscripten_bind_b2ChainShape_b2ChainShape_0"] = asm["_emscripten_bind_b2ChainShape_b2ChainShape_0"];
var _emscripten_bind_b2PolygonShape_get_m_vertexCount_0 = Module["_emscripten_bind_b2PolygonShape_get_m_vertexCount_0"] = asm["_emscripten_bind_b2PolygonShape_get_m_vertexCount_0"];
var _emscripten_bind_b2PrismaticJoint_GetUserData_0 = Module["_emscripten_bind_b2PrismaticJoint_GetUserData_0"] = asm["_emscripten_bind_b2PrismaticJoint_GetUserData_0"];
var _emscripten_bind_b2RevoluteJoint_GetUpperLimit_0 = Module["_emscripten_bind_b2RevoluteJoint_GetUpperLimit_0"] = asm["_emscripten_bind_b2RevoluteJoint_GetUpperLimit_0"];
var _emscripten_enum_b2ShapeType_e_polygon = Module["_emscripten_enum_b2ShapeType_e_polygon"] = asm["_emscripten_enum_b2ShapeType_e_polygon"];
var _emscripten_bind_b2ChainShape_CreateLoop_2 = Module["_emscripten_bind_b2ChainShape_CreateLoop_2"] = asm["_emscripten_bind_b2ChainShape_CreateLoop_2"];
var _emscripten_bind_b2EdgeShape_get_m_radius_0 = Module["_emscripten_bind_b2EdgeShape_get_m_radius_0"] = asm["_emscripten_bind_b2EdgeShape_get_m_radius_0"];
var _emscripten_bind_b2Contact_GetFixtureB_0 = Module["_emscripten_bind_b2Contact_GetFixtureB_0"] = asm["_emscripten_bind_b2Contact_GetFixtureB_0"];
var _emscripten_bind_b2ChainShape_ComputeMass_2 = Module["_emscripten_bind_b2ChainShape_ComputeMass_2"] = asm["_emscripten_bind_b2ChainShape_ComputeMass_2"];
var _emscripten_bind_b2Vec2_set_y_1 = Module["_emscripten_bind_b2Vec2_set_y_1"] = asm["_emscripten_bind_b2Vec2_set_y_1"];
var _emscripten_bind_b2PrismaticJoint_IsLimitEnabled_0 = Module["_emscripten_bind_b2PrismaticJoint_IsLimitEnabled_0"] = asm["_emscripten_bind_b2PrismaticJoint_IsLimitEnabled_0"];
var _emscripten_bind_b2RopeJointDef_get_bodyB_0 = Module["_emscripten_bind_b2RopeJointDef_get_bodyB_0"] = asm["_emscripten_bind_b2RopeJointDef_get_bodyB_0"];
var _emscripten_bind_b2BodyDef_b2BodyDef_0 = Module["_emscripten_bind_b2BodyDef_b2BodyDef_0"] = asm["_emscripten_bind_b2BodyDef_b2BodyDef_0"];
var _emscripten_bind_b2MassData_get_mass_0 = Module["_emscripten_bind_b2MassData_get_mass_0"] = asm["_emscripten_bind_b2MassData_get_mass_0"];
var _emscripten_bind_b2WheelJoint___destroy___0 = Module["_emscripten_bind_b2WheelJoint___destroy___0"] = asm["_emscripten_bind_b2WheelJoint___destroy___0"];
var _emscripten_bind_b2Joint_GetBodyB_0 = Module["_emscripten_bind_b2Joint_GetBodyB_0"] = asm["_emscripten_bind_b2Joint_GetBodyB_0"];
var _emscripten_bind_b2MouseJointDef_set_collideConnected_1 = Module["_emscripten_bind_b2MouseJointDef_set_collideConnected_1"] = asm["_emscripten_bind_b2MouseJointDef_set_collideConnected_1"];
var _emscripten_bind_b2WheelJointDef_set_localAxisA_1 = Module["_emscripten_bind_b2WheelJointDef_set_localAxisA_1"] = asm["_emscripten_bind_b2WheelJointDef_set_localAxisA_1"];
var _emscripten_bind_b2Joint_Dump_0 = Module["_emscripten_bind_b2Joint_Dump_0"] = asm["_emscripten_bind_b2Joint_Dump_0"];
var _emscripten_bind_b2World_GetBodyList_0 = Module["_emscripten_bind_b2World_GetBodyList_0"] = asm["_emscripten_bind_b2World_GetBodyList_0"];
var _emscripten_bind_b2WheelJointDef_set_motorSpeed_1 = Module["_emscripten_bind_b2WheelJointDef_set_motorSpeed_1"] = asm["_emscripten_bind_b2WheelJointDef_set_motorSpeed_1"];
var _emscripten_bind_b2Cycles_dump_0 = Module["_emscripten_bind_b2Cycles_dump_0"] = asm["_emscripten_bind_b2Cycles_dump_0"];
var _emscripten_bind_b2Vec2_LengthSquared_0 = Module["_emscripten_bind_b2Vec2_LengthSquared_0"] = asm["_emscripten_bind_b2Vec2_LengthSquared_0"];
var _emscripten_bind_b2FrictionJointDef_set_bodyA_1 = Module["_emscripten_bind_b2FrictionJointDef_set_bodyA_1"] = asm["_emscripten_bind_b2FrictionJointDef_set_bodyA_1"];
var _emscripten_bind_b2WheelJoint_GetSpringFrequencyHz_0 = Module["_emscripten_bind_b2WheelJoint_GetSpringFrequencyHz_0"] = asm["_emscripten_bind_b2WheelJoint_GetSpringFrequencyHz_0"];
var _emscripten_bind_b2ContactFeature_get_indexB_0 = Module["_emscripten_bind_b2ContactFeature_get_indexB_0"] = asm["_emscripten_bind_b2ContactFeature_get_indexB_0"];
var _emscripten_bind_b2Body_GetJointList_0 = Module["_emscripten_bind_b2Body_GetJointList_0"] = asm["_emscripten_bind_b2Body_GetJointList_0"];
var _emscripten_bind_b2FrictionJoint_GetBodyA_0 = Module["_emscripten_bind_b2FrictionJoint_GetBodyA_0"] = asm["_emscripten_bind_b2FrictionJoint_GetBodyA_0"];
var _emscripten_bind_b2ManifoldPoint_get_localPoint_0 = Module["_emscripten_bind_b2ManifoldPoint_get_localPoint_0"] = asm["_emscripten_bind_b2ManifoldPoint_get_localPoint_0"];
var _emscripten_bind_b2RevoluteJoint_IsLimitEnabled_0 = Module["_emscripten_bind_b2RevoluteJoint_IsLimitEnabled_0"] = asm["_emscripten_bind_b2RevoluteJoint_IsLimitEnabled_0"];
var _emscripten_bind_b2PrismaticJointDef_get_maxMotorForce_0 = Module["_emscripten_bind_b2PrismaticJointDef_get_maxMotorForce_0"] = asm["_emscripten_bind_b2PrismaticJointDef_get_maxMotorForce_0"];
var _emscripten_bind_b2Body_SetUserData_1 = Module["_emscripten_bind_b2Body_SetUserData_1"] = asm["_emscripten_bind_b2Body_SetUserData_1"];
var _emscripten_bind_b2DistanceJoint_GetUserData_0 = Module["_emscripten_bind_b2DistanceJoint_GetUserData_0"] = asm["_emscripten_bind_b2DistanceJoint_GetUserData_0"];
var _emscripten_bind_b2PulleyJointDef_set_bodyA_1 = Module["_emscripten_bind_b2PulleyJointDef_set_bodyA_1"] = asm["_emscripten_bind_b2PulleyJointDef_set_bodyA_1"];
var _emscripten_bind_b2Joint_GetType_0 = Module["_emscripten_bind_b2Joint_GetType_0"] = asm["_emscripten_bind_b2Joint_GetType_0"];
var _emscripten_bind_b2Manifold_get_pointCount_0 = Module["_emscripten_bind_b2Manifold_get_pointCount_0"] = asm["_emscripten_bind_b2Manifold_get_pointCount_0"];
var _emscripten_bind_b2Mat33_get_ez_0 = Module["_emscripten_bind_b2Mat33_get_ez_0"] = asm["_emscripten_bind_b2Mat33_get_ez_0"];
var _emscripten_bind_b2Color_Set_3 = Module["_emscripten_bind_b2Color_Set_3"] = asm["_emscripten_bind_b2Color_Set_3"];
var _emscripten_bind_b2ManifoldPoint_set_normalImpulse_1 = Module["_emscripten_bind_b2ManifoldPoint_set_normalImpulse_1"] = asm["_emscripten_bind_b2ManifoldPoint_set_normalImpulse_1"];
var _emscripten_enum_b2LimitState_e_atUpperLimit = Module["_emscripten_enum_b2LimitState_e_atUpperLimit"] = asm["_emscripten_enum_b2LimitState_e_atUpperLimit"];
var _emscripten_bind_b2PulleyJointDef_set_groundAnchorA_1 = Module["_emscripten_bind_b2PulleyJointDef_set_groundAnchorA_1"] = asm["_emscripten_bind_b2PulleyJointDef_set_groundAnchorA_1"];
var _emscripten_bind_b2MouseJointDef_get_type_0 = Module["_emscripten_bind_b2MouseJointDef_get_type_0"] = asm["_emscripten_bind_b2MouseJointDef_get_type_0"];
var _emscripten_bind_b2MouseJointDef_get_userData_0 = Module["_emscripten_bind_b2MouseJointDef_get_userData_0"] = asm["_emscripten_bind_b2MouseJointDef_get_userData_0"];
var _emscripten_bind_b2PulleyJointDef_get_collideConnected_0 = Module["_emscripten_bind_b2PulleyJointDef_get_collideConnected_0"] = asm["_emscripten_bind_b2PulleyJointDef_get_collideConnected_0"];
var _emscripten_bind_b2RopeJoint_SetMaxLength_1 = Module["_emscripten_bind_b2RopeJoint_SetMaxLength_1"] = asm["_emscripten_bind_b2RopeJoint_SetMaxLength_1"];
var _emscripten_bind_b2Joint_SetUserData_1 = Module["_emscripten_bind_b2Joint_SetUserData_1"] = asm["_emscripten_bind_b2Joint_SetUserData_1"];
var _emscripten_bind_b2PolygonShape_set_m_radius_1 = Module["_emscripten_bind_b2PolygonShape_set_m_radius_1"] = asm["_emscripten_bind_b2PolygonShape_set_m_radius_1"];
var _emscripten_bind_b2PrismaticJoint_SetMaxMotorForce_1 = Module["_emscripten_bind_b2PrismaticJoint_SetMaxMotorForce_1"] = asm["_emscripten_bind_b2PrismaticJoint_SetMaxMotorForce_1"];
var _emscripten_bind_JSContactListener_JSContactListener_0 = Module["_emscripten_bind_JSContactListener_JSContactListener_0"] = asm["_emscripten_bind_JSContactListener_JSContactListener_0"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_did = Module["dynCall_did"] = asm["dynCall_did"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_diiiid = Module["dynCall_diiiid"] = asm["dynCall_diiiid"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viidii = Module["dynCall_viidii"] = asm["dynCall_viidii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viidi = Module["dynCall_viidi"] = asm["dynCall_viidi"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_viid = Module["dynCall_viid"] = asm["dynCall_viid"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
  
  Runtime.stackAlloc = asm['stackAlloc'];
  Runtime.stackSave = asm['stackSave'];
  Runtime.stackRestore = asm['stackRestore'];
  Runtime.setTempRet0 = asm['setTempRet0'];
  Runtime.getTempRet0 = asm['getTempRet0'];
  

// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (typeof Module['locateFile'] === 'function') {
    memoryInitializer = Module['locateFile'](memoryInitializer);
  } else if (Module['memoryInitializerPrefixURL']) {
    memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  if (Module['noExitRuntime']) {
    return;
  }

  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.';

  throw 'abort() at ' + stackTrace() + extra;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}






// Bindings utilities

function WrapperObject() {
}
WrapperObject.prototype = Object.create(WrapperObject.prototype);
WrapperObject.prototype.constructor = WrapperObject;
WrapperObject.prototype.__class__ = WrapperObject;
WrapperObject.__cache__ = {};
Module['WrapperObject'] = WrapperObject;

function getCache(__class__) {
  return (__class__ || WrapperObject).__cache__;
}
Module['getCache'] = getCache;

function wrapPointer(ptr, __class__) {
  var cache = getCache(__class__);
  var ret = cache[ptr];
  if (ret) return ret;
  ret = Object.create((__class__ || WrapperObject).prototype);
  ret.ptr = ptr;
  return cache[ptr] = ret;
}
Module['wrapPointer'] = wrapPointer;

function castObject(obj, __class__) {
  return wrapPointer(obj.ptr, __class__);
}
Module['castObject'] = castObject;

Module['NULL'] = wrapPointer(0);

function destroy(obj) {
  if (!obj['__destroy__']) throw 'Error: Cannot destroy object. (Did you create it yourself?)';
  obj['__destroy__']();
  // Remove from cache, so the object can be GC'd and refs added onto it released
  delete getCache(obj.__class__)[obj.ptr];
}
Module['destroy'] = destroy;

function compare(obj1, obj2) {
  return obj1.ptr === obj2.ptr;
}
Module['compare'] = compare;

function getPointer(obj) {
  return obj.ptr;
}
Module['getPointer'] = getPointer;

function getClass(obj) {
  return obj.__class__;
}
Module['getClass'] = getClass;

// Converts a value into a C-style string.
function ensureString(value) {
  if (typeof value == 'string') return allocate(intArrayFromString(value), 'i8', ALLOC_STACK);
  return value;
}


// b2Color
function b2Color(arg0, arg1, arg2) {
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  if (arg0 === undefined) { this.ptr = _emscripten_bind_b2Color_b2Color_0(); getCache(b2Color)[this.ptr] = this;return }
  if (arg1 === undefined) { this.ptr = _emscripten_bind_b2Color_b2Color_1(arg0); getCache(b2Color)[this.ptr] = this;return }
  if (arg2 === undefined) { this.ptr = _emscripten_bind_b2Color_b2Color_2(arg0, arg1); getCache(b2Color)[this.ptr] = this;return }
  this.ptr = _emscripten_bind_b2Color_b2Color_3(arg0, arg1, arg2);
  getCache(b2Color)[this.ptr] = this;
};
b2Color.prototype = Object.create(WrapperObject.prototype);
b2Color.prototype.constructor = b2Color;
b2Color.prototype.__class__ = b2Color;
b2Color.__cache__ = {};
Module['b2Color'] = b2Color;

b2Color.prototype['Set'] = function(arg0, arg1, arg2) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  _emscripten_bind_b2Color_Set_3(self, arg0, arg1, arg2);
};

  b2Color.prototype['get_r']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2Color_get_r_0(self);
}
    b2Color.prototype['set_r']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Color_set_r_1(self, arg0);
}
  b2Color.prototype['get_g']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2Color_get_g_0(self);
}
    b2Color.prototype['set_g']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Color_set_g_1(self, arg0);
}
  b2Color.prototype['get_b']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2Color_get_b_0(self);
}
    b2Color.prototype['set_b']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Color_set_b_1(self, arg0);
}
  b2Color.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2Color___destroy___0(self);
}
// JSDestructionListener
function JSDestructionListener() {
  this.ptr = _emscripten_bind_JSDestructionListener_JSDestructionListener_0();
  getCache(JSDestructionListener)[this.ptr] = this;
};
JSDestructionListener.prototype = Object.create(b2DestructionListenerWrapper.prototype);
JSDestructionListener.prototype.constructor = JSDestructionListener;
JSDestructionListener.prototype.__class__ = JSDestructionListener;
JSDestructionListener.__cache__ = {};
Module['JSDestructionListener'] = JSDestructionListener;

JSDestructionListener.prototype['SayGoodbyeJoint'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_JSDestructionListener_SayGoodbyeJoint_1(self, arg0);
};

JSDestructionListener.prototype['SayGoodbyeFixture'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_JSDestructionListener_SayGoodbyeFixture_1(self, arg0);
};

  JSDestructionListener.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_JSDestructionListener___destroy___0(self);
}
// b2ContactImpulse
function b2ContactImpulse() { throw "cannot construct a b2ContactImpulse, no constructor in IDL" }
b2ContactImpulse.prototype = Object.create(WrapperObject.prototype);
b2ContactImpulse.prototype.constructor = b2ContactImpulse;
b2ContactImpulse.prototype.__class__ = b2ContactImpulse;
b2ContactImpulse.__cache__ = {};
Module['b2ContactImpulse'] = b2ContactImpulse;

  b2ContactImpulse.prototype['get_count']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2ContactImpulse_get_count_0(self);
}
    b2ContactImpulse.prototype['set_count']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2ContactImpulse_set_count_1(self, arg0);
}
  b2ContactImpulse.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2ContactImpulse___destroy___0(self);
}
// b2DistanceJoint
function b2DistanceJoint() { throw "cannot construct a b2DistanceJoint, no constructor in IDL" }
b2DistanceJoint.prototype = Object.create(b2Joint.prototype);
b2DistanceJoint.prototype.constructor = b2DistanceJoint;
b2DistanceJoint.prototype.__class__ = b2DistanceJoint;
b2DistanceJoint.__cache__ = {};
Module['b2DistanceJoint'] = b2DistanceJoint;

b2DistanceJoint.prototype['GetLocalAnchorA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2DistanceJoint_GetLocalAnchorA_0(self), b2Vec2);
};

b2DistanceJoint.prototype['GetLocalAnchorB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2DistanceJoint_GetLocalAnchorB_0(self), b2Vec2);
};

b2DistanceJoint.prototype['SetLength'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2DistanceJoint_SetLength_1(self, arg0);
};

b2DistanceJoint.prototype['GetLength'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2DistanceJoint_GetLength_0(self);
};

b2DistanceJoint.prototype['SetFrequency'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2DistanceJoint_SetFrequency_1(self, arg0);
};

b2DistanceJoint.prototype['GetFrequency'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2DistanceJoint_GetFrequency_0(self);
};

b2DistanceJoint.prototype['SetDampingRatio'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2DistanceJoint_SetDampingRatio_1(self, arg0);
};

b2DistanceJoint.prototype['GetDampingRatio'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2DistanceJoint_GetDampingRatio_0(self);
};

b2DistanceJoint.prototype['GetType'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2DistanceJoint_GetType_0(self);
};

b2DistanceJoint.prototype['GetBodyA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2DistanceJoint_GetBodyA_0(self), b2Body);
};

b2DistanceJoint.prototype['GetBodyB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2DistanceJoint_GetBodyB_0(self), b2Body);
};

b2DistanceJoint.prototype['GetAnchorA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2DistanceJoint_GetAnchorA_0(self), b2Vec2);
};

b2DistanceJoint.prototype['GetAnchorB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2DistanceJoint_GetAnchorB_0(self), b2Vec2);
};

b2DistanceJoint.prototype['GetReactionForce'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return wrapPointer(_emscripten_bind_b2DistanceJoint_GetReactionForce_1(self, arg0), b2Vec2);
};

b2DistanceJoint.prototype['GetReactionTorque'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return _emscripten_bind_b2DistanceJoint_GetReactionTorque_1(self, arg0);
};

b2DistanceJoint.prototype['GetNext'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2DistanceJoint_GetNext_0(self), b2Joint);
};

b2DistanceJoint.prototype['GetUserData'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2DistanceJoint_GetUserData_0(self);
};

b2DistanceJoint.prototype['SetUserData'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2DistanceJoint_SetUserData_1(self, arg0);
};

b2DistanceJoint.prototype['IsActive'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2DistanceJoint_IsActive_0(self);
};

b2DistanceJoint.prototype['GetCollideConnected'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2DistanceJoint_GetCollideConnected_0(self);
};

  b2DistanceJoint.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2DistanceJoint___destroy___0(self);
}
// b2Mat33
function b2Mat33(arg0, arg1, arg2) {
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  if (arg0 === undefined) { this.ptr = _emscripten_bind_b2Mat33_b2Mat33_0(); getCache(b2Mat33)[this.ptr] = this;return }
  if (arg1 === undefined) { this.ptr = _emscripten_bind_b2Mat33_b2Mat33_1(arg0); getCache(b2Mat33)[this.ptr] = this;return }
  if (arg2 === undefined) { this.ptr = _emscripten_bind_b2Mat33_b2Mat33_2(arg0, arg1); getCache(b2Mat33)[this.ptr] = this;return }
  this.ptr = _emscripten_bind_b2Mat33_b2Mat33_3(arg0, arg1, arg2);
  getCache(b2Mat33)[this.ptr] = this;
};
b2Mat33.prototype = Object.create(WrapperObject.prototype);
b2Mat33.prototype.constructor = b2Mat33;
b2Mat33.prototype.__class__ = b2Mat33;
b2Mat33.__cache__ = {};
Module['b2Mat33'] = b2Mat33;

b2Mat33.prototype['SetZero'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2Mat33_SetZero_0(self);
};

b2Mat33.prototype['Solve33'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return wrapPointer(_emscripten_bind_b2Mat33_Solve33_1(self, arg0), b2Vec3);
};

b2Mat33.prototype['Solve22'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return wrapPointer(_emscripten_bind_b2Mat33_Solve22_1(self, arg0), b2Vec2);
};

b2Mat33.prototype['GetInverse22'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Mat33_GetInverse22_1(self, arg0);
};

b2Mat33.prototype['GetSymInverse33'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Mat33_GetSymInverse33_1(self, arg0);
};

  b2Mat33.prototype['get_ex']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Mat33_get_ex_0(self), b2Vec3);
}
    b2Mat33.prototype['set_ex']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Mat33_set_ex_1(self, arg0);
}
  b2Mat33.prototype['get_ey']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Mat33_get_ey_0(self), b2Vec3);
}
    b2Mat33.prototype['set_ey']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Mat33_set_ey_1(self, arg0);
}
  b2Mat33.prototype['get_ez']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Mat33_get_ez_0(self), b2Vec3);
}
    b2Mat33.prototype['set_ez']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Mat33_set_ez_1(self, arg0);
}
  b2Mat33.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2Mat33___destroy___0(self);
}
// b2Fixture
function b2Fixture() { throw "cannot construct a b2Fixture, no constructor in IDL" }
b2Fixture.prototype = Object.create(WrapperObject.prototype);
b2Fixture.prototype.constructor = b2Fixture;
b2Fixture.prototype.__class__ = b2Fixture;
b2Fixture.__cache__ = {};
Module['b2Fixture'] = b2Fixture;

b2Fixture.prototype['GetType'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Fixture_GetType_0(self);
};

b2Fixture.prototype['GetShape'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Fixture_GetShape_0(self), b2Shape);
};

b2Fixture.prototype['SetSensor'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Fixture_SetSensor_1(self, arg0);
};

b2Fixture.prototype['IsSensor'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Fixture_IsSensor_0(self);
};

b2Fixture.prototype['SetFilterData'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Fixture_SetFilterData_1(self, arg0);
};

b2Fixture.prototype['GetFilterData'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Fixture_GetFilterData_0(self), b2Filter);
};

b2Fixture.prototype['Refilter'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2Fixture_Refilter_0(self);
};

b2Fixture.prototype['GetBody'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Fixture_GetBody_0(self), b2Body);
};

b2Fixture.prototype['GetNext'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Fixture_GetNext_0(self), b2Fixture);
};

b2Fixture.prototype['GetUserData'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Fixture_GetUserData_0(self);
};

b2Fixture.prototype['SetUserData'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Fixture_SetUserData_1(self, arg0);
};

b2Fixture.prototype['TestPoint'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return _emscripten_bind_b2Fixture_TestPoint_1(self, arg0);
};

b2Fixture.prototype['RayCast'] = function(arg0, arg1, arg2) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  return _emscripten_bind_b2Fixture_RayCast_3(self, arg0, arg1, arg2);
};

b2Fixture.prototype['GetMassData'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Fixture_GetMassData_1(self, arg0);
};

b2Fixture.prototype['SetDensity'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Fixture_SetDensity_1(self, arg0);
};

b2Fixture.prototype['GetDensity'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Fixture_GetDensity_0(self);
};

b2Fixture.prototype['GetFriction'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Fixture_GetFriction_0(self);
};

b2Fixture.prototype['SetFriction'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Fixture_SetFriction_1(self, arg0);
};

b2Fixture.prototype['GetRestitution'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Fixture_GetRestitution_0(self);
};

b2Fixture.prototype['SetRestitution'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Fixture_SetRestitution_1(self, arg0);
};

b2Fixture.prototype['GetAABB'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return wrapPointer(_emscripten_bind_b2Fixture_GetAABB_1(self, arg0), b2AABB);
};

b2Fixture.prototype['Dump'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Fixture_Dump_1(self, arg0);
};

  b2Fixture.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2Fixture___destroy___0(self);
}
// b2Filter
function b2Filter() {
  this.ptr = _emscripten_bind_b2Filter_b2Filter_0();
  getCache(b2Filter)[this.ptr] = this;
};
b2Filter.prototype = Object.create(WrapperObject.prototype);
b2Filter.prototype.constructor = b2Filter;
b2Filter.prototype.__class__ = b2Filter;
b2Filter.__cache__ = {};
Module['b2Filter'] = b2Filter;

  b2Filter.prototype['get_categoryBits']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2Filter_get_categoryBits_0(self);
}
    b2Filter.prototype['set_categoryBits']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Filter_set_categoryBits_1(self, arg0);
}
  b2Filter.prototype['get_maskBits']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2Filter_get_maskBits_0(self);
}
    b2Filter.prototype['set_maskBits']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Filter_set_maskBits_1(self, arg0);
}
  b2Filter.prototype['get_groupIndex']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2Filter_get_groupIndex_0(self);
}
    b2Filter.prototype['set_groupIndex']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Filter_set_groupIndex_1(self, arg0);
}
  b2Filter.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2Filter___destroy___0(self);
}
// JSQueryCallback
function JSQueryCallback() {
  this.ptr = _emscripten_bind_JSQueryCallback_JSQueryCallback_0();
  getCache(JSQueryCallback)[this.ptr] = this;
};
JSQueryCallback.prototype = Object.create(b2QueryCallback.prototype);
JSQueryCallback.prototype.constructor = JSQueryCallback;
JSQueryCallback.prototype.__class__ = JSQueryCallback;
JSQueryCallback.__cache__ = {};
Module['JSQueryCallback'] = JSQueryCallback;

JSQueryCallback.prototype['ReportFixture'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return _emscripten_bind_JSQueryCallback_ReportFixture_1(self, arg0);
};

  JSQueryCallback.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_JSQueryCallback___destroy___0(self);
}
// b2MouseJoint
function b2MouseJoint() { throw "cannot construct a b2MouseJoint, no constructor in IDL" }
b2MouseJoint.prototype = Object.create(b2Joint.prototype);
b2MouseJoint.prototype.constructor = b2MouseJoint;
b2MouseJoint.prototype.__class__ = b2MouseJoint;
b2MouseJoint.__cache__ = {};
Module['b2MouseJoint'] = b2MouseJoint;

b2MouseJoint.prototype['SetTarget'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2MouseJoint_SetTarget_1(self, arg0);
};

b2MouseJoint.prototype['GetTarget'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2MouseJoint_GetTarget_0(self), b2Vec2);
};

b2MouseJoint.prototype['SetMaxForce'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2MouseJoint_SetMaxForce_1(self, arg0);
};

b2MouseJoint.prototype['GetMaxForce'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2MouseJoint_GetMaxForce_0(self);
};

b2MouseJoint.prototype['SetFrequency'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2MouseJoint_SetFrequency_1(self, arg0);
};

b2MouseJoint.prototype['GetFrequency'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2MouseJoint_GetFrequency_0(self);
};

b2MouseJoint.prototype['SetDampingRatio'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2MouseJoint_SetDampingRatio_1(self, arg0);
};

b2MouseJoint.prototype['GetDampingRatio'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2MouseJoint_GetDampingRatio_0(self);
};

b2MouseJoint.prototype['GetType'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2MouseJoint_GetType_0(self);
};

b2MouseJoint.prototype['GetBodyA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2MouseJoint_GetBodyA_0(self), b2Body);
};

b2MouseJoint.prototype['GetBodyB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2MouseJoint_GetBodyB_0(self), b2Body);
};

b2MouseJoint.prototype['GetAnchorA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2MouseJoint_GetAnchorA_0(self), b2Vec2);
};

b2MouseJoint.prototype['GetAnchorB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2MouseJoint_GetAnchorB_0(self), b2Vec2);
};

b2MouseJoint.prototype['GetReactionForce'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return wrapPointer(_emscripten_bind_b2MouseJoint_GetReactionForce_1(self, arg0), b2Vec2);
};

b2MouseJoint.prototype['GetReactionTorque'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return _emscripten_bind_b2MouseJoint_GetReactionTorque_1(self, arg0);
};

b2MouseJoint.prototype['GetNext'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2MouseJoint_GetNext_0(self), b2Joint);
};

b2MouseJoint.prototype['GetUserData'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2MouseJoint_GetUserData_0(self);
};

b2MouseJoint.prototype['SetUserData'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2MouseJoint_SetUserData_1(self, arg0);
};

b2MouseJoint.prototype['IsActive'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2MouseJoint_IsActive_0(self);
};

b2MouseJoint.prototype['GetCollideConnected'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2MouseJoint_GetCollideConnected_0(self);
};

  b2MouseJoint.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2MouseJoint___destroy___0(self);
}
// b2Rot
function b2Rot(arg0) {
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg0 === undefined) { this.ptr = _emscripten_bind_b2Rot_b2Rot_0(); getCache(b2Rot)[this.ptr] = this;return }
  this.ptr = _emscripten_bind_b2Rot_b2Rot_1(arg0);
  getCache(b2Rot)[this.ptr] = this;
};
b2Rot.prototype = Object.create(WrapperObject.prototype);
b2Rot.prototype.constructor = b2Rot;
b2Rot.prototype.__class__ = b2Rot;
b2Rot.__cache__ = {};
Module['b2Rot'] = b2Rot;

b2Rot.prototype['Set'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Rot_Set_1(self, arg0);
};

b2Rot.prototype['SetIdentity'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2Rot_SetIdentity_0(self);
};

b2Rot.prototype['GetAngle'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Rot_GetAngle_0(self);
};

b2Rot.prototype['GetXAxis'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Rot_GetXAxis_0(self), b2Vec2);
};

b2Rot.prototype['GetYAxis'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Rot_GetYAxis_0(self), b2Vec2);
};

  b2Rot.prototype['get_s']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2Rot_get_s_0(self);
}
    b2Rot.prototype['set_s']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Rot_set_s_1(self, arg0);
}
  b2Rot.prototype['get_c']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2Rot_get_c_0(self);
}
    b2Rot.prototype['set_c']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Rot_set_c_1(self, arg0);
}
  b2Rot.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2Rot___destroy___0(self);
}
// b2Profile
function b2Profile() { throw "cannot construct a b2Profile, no constructor in IDL" }
b2Profile.prototype = Object.create(WrapperObject.prototype);
b2Profile.prototype.constructor = b2Profile;
b2Profile.prototype.__class__ = b2Profile;
b2Profile.__cache__ = {};
Module['b2Profile'] = b2Profile;

  b2Profile.prototype['get_step']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2Profile_get_step_0(self);
}
    b2Profile.prototype['set_step']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Profile_set_step_1(self, arg0);
}
  b2Profile.prototype['get_collide']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2Profile_get_collide_0(self);
}
    b2Profile.prototype['set_collide']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Profile_set_collide_1(self, arg0);
}
  b2Profile.prototype['get_solve']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2Profile_get_solve_0(self);
}
    b2Profile.prototype['set_solve']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Profile_set_solve_1(self, arg0);
}
  b2Profile.prototype['get_solveInit']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2Profile_get_solveInit_0(self);
}
    b2Profile.prototype['set_solveInit']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Profile_set_solveInit_1(self, arg0);
}
  b2Profile.prototype['get_solveVelocity']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2Profile_get_solveVelocity_0(self);
}
    b2Profile.prototype['set_solveVelocity']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Profile_set_solveVelocity_1(self, arg0);
}
  b2Profile.prototype['get_solvePosition']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2Profile_get_solvePosition_0(self);
}
    b2Profile.prototype['set_solvePosition']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Profile_set_solvePosition_1(self, arg0);
}
  b2Profile.prototype['get_broadphase']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2Profile_get_broadphase_0(self);
}
    b2Profile.prototype['set_broadphase']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Profile_set_broadphase_1(self, arg0);
}
  b2Profile.prototype['get_solveTOI']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2Profile_get_solveTOI_0(self);
}
    b2Profile.prototype['set_solveTOI']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Profile_set_solveTOI_1(self, arg0);
}
  b2Profile.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2Profile___destroy___0(self);
}
// VoidPtr
function VoidPtr() { throw "cannot construct a VoidPtr, no constructor in IDL" }
VoidPtr.prototype = Object.create(WrapperObject.prototype);
VoidPtr.prototype.constructor = VoidPtr;
VoidPtr.prototype.__class__ = VoidPtr;
VoidPtr.__cache__ = {};
Module['VoidPtr'] = VoidPtr;

  VoidPtr.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_VoidPtr___destroy___0(self);
}
// b2BodyDef
function b2BodyDef() {
  this.ptr = _emscripten_bind_b2BodyDef_b2BodyDef_0();
  getCache(b2BodyDef)[this.ptr] = this;
};
b2BodyDef.prototype = Object.create(WrapperObject.prototype);
b2BodyDef.prototype.constructor = b2BodyDef;
b2BodyDef.prototype.__class__ = b2BodyDef;
b2BodyDef.__cache__ = {};
Module['b2BodyDef'] = b2BodyDef;

  b2BodyDef.prototype['get_type']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2BodyDef_get_type_0(self);
}
    b2BodyDef.prototype['set_type']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2BodyDef_set_type_1(self, arg0);
}
  b2BodyDef.prototype['get_position']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2BodyDef_get_position_0(self), b2Vec2);
}
    b2BodyDef.prototype['set_position']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2BodyDef_set_position_1(self, arg0);
}
  b2BodyDef.prototype['get_angle']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2BodyDef_get_angle_0(self);
}
    b2BodyDef.prototype['set_angle']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2BodyDef_set_angle_1(self, arg0);
}
  b2BodyDef.prototype['get_linearVelocity']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2BodyDef_get_linearVelocity_0(self), b2Vec2);
}
    b2BodyDef.prototype['set_linearVelocity']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2BodyDef_set_linearVelocity_1(self, arg0);
}
  b2BodyDef.prototype['get_angularVelocity']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2BodyDef_get_angularVelocity_0(self);
}
    b2BodyDef.prototype['set_angularVelocity']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2BodyDef_set_angularVelocity_1(self, arg0);
}
  b2BodyDef.prototype['get_linearDamping']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2BodyDef_get_linearDamping_0(self);
}
    b2BodyDef.prototype['set_linearDamping']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2BodyDef_set_linearDamping_1(self, arg0);
}
  b2BodyDef.prototype['get_angularDamping']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2BodyDef_get_angularDamping_0(self);
}
    b2BodyDef.prototype['set_angularDamping']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2BodyDef_set_angularDamping_1(self, arg0);
}
  b2BodyDef.prototype['get_allowSleep']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2BodyDef_get_allowSleep_0(self);
}
    b2BodyDef.prototype['set_allowSleep']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2BodyDef_set_allowSleep_1(self, arg0);
}
  b2BodyDef.prototype['get_awake']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2BodyDef_get_awake_0(self);
}
    b2BodyDef.prototype['set_awake']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2BodyDef_set_awake_1(self, arg0);
}
  b2BodyDef.prototype['get_fixedRotation']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2BodyDef_get_fixedRotation_0(self);
}
    b2BodyDef.prototype['set_fixedRotation']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2BodyDef_set_fixedRotation_1(self, arg0);
}
  b2BodyDef.prototype['get_bullet']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2BodyDef_get_bullet_0(self);
}
    b2BodyDef.prototype['set_bullet']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2BodyDef_set_bullet_1(self, arg0);
}
  b2BodyDef.prototype['get_active']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2BodyDef_get_active_0(self);
}
    b2BodyDef.prototype['set_active']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2BodyDef_set_active_1(self, arg0);
}
  b2BodyDef.prototype['get_userData']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2BodyDef_get_userData_0(self);
}
    b2BodyDef.prototype['set_userData']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2BodyDef_set_userData_1(self, arg0);
}
  b2BodyDef.prototype['get_gravityScale']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2BodyDef_get_gravityScale_0(self);
}
    b2BodyDef.prototype['set_gravityScale']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2BodyDef_set_gravityScale_1(self, arg0);
}
  b2BodyDef.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2BodyDef___destroy___0(self);
}
// JSRayCastCallback
function JSRayCastCallback() {
  this.ptr = _emscripten_bind_JSRayCastCallback_JSRayCastCallback_0();
  getCache(JSRayCastCallback)[this.ptr] = this;
};
JSRayCastCallback.prototype = Object.create(b2RayCastCallback.prototype);
JSRayCastCallback.prototype.constructor = JSRayCastCallback;
JSRayCastCallback.prototype.__class__ = JSRayCastCallback;
JSRayCastCallback.__cache__ = {};
Module['JSRayCastCallback'] = JSRayCastCallback;

JSRayCastCallback.prototype['ReportFixture'] = function(arg0, arg1, arg2, arg3) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  if (arg3 && typeof arg3 === 'object') arg3 = arg3.ptr;
  else arg3 = ensureString(arg3);
  return _emscripten_bind_JSRayCastCallback_ReportFixture_4(self, arg0, arg1, arg2, arg3);
};

  JSRayCastCallback.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_JSRayCastCallback___destroy___0(self);
}
// b2ContactFeature
function b2ContactFeature() { throw "cannot construct a b2ContactFeature, no constructor in IDL" }
b2ContactFeature.prototype = Object.create(WrapperObject.prototype);
b2ContactFeature.prototype.constructor = b2ContactFeature;
b2ContactFeature.prototype.__class__ = b2ContactFeature;
b2ContactFeature.__cache__ = {};
Module['b2ContactFeature'] = b2ContactFeature;

  b2ContactFeature.prototype['get_indexA']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2ContactFeature_get_indexA_0(self);
}
    b2ContactFeature.prototype['set_indexA']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2ContactFeature_set_indexA_1(self, arg0);
}
  b2ContactFeature.prototype['get_indexB']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2ContactFeature_get_indexB_0(self);
}
    b2ContactFeature.prototype['set_indexB']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2ContactFeature_set_indexB_1(self, arg0);
}
  b2ContactFeature.prototype['get_typeA']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2ContactFeature_get_typeA_0(self);
}
    b2ContactFeature.prototype['set_typeA']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2ContactFeature_set_typeA_1(self, arg0);
}
  b2ContactFeature.prototype['get_typeB']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2ContactFeature_get_typeB_0(self);
}
    b2ContactFeature.prototype['set_typeB']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2ContactFeature_set_typeB_1(self, arg0);
}
  b2ContactFeature.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2ContactFeature___destroy___0(self);
}
// b2Vec2
function b2Vec2(arg0, arg1) {
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg0 === undefined) { this.ptr = _emscripten_bind_b2Vec2_b2Vec2_0(); getCache(b2Vec2)[this.ptr] = this;return }
  if (arg1 === undefined) { this.ptr = _emscripten_bind_b2Vec2_b2Vec2_1(arg0); getCache(b2Vec2)[this.ptr] = this;return }
  this.ptr = _emscripten_bind_b2Vec2_b2Vec2_2(arg0, arg1);
  getCache(b2Vec2)[this.ptr] = this;
};
b2Vec2.prototype = Object.create(WrapperObject.prototype);
b2Vec2.prototype.constructor = b2Vec2;
b2Vec2.prototype.__class__ = b2Vec2;
b2Vec2.__cache__ = {};
Module['b2Vec2'] = b2Vec2;

b2Vec2.prototype['SetZero'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2Vec2_SetZero_0(self);
};

b2Vec2.prototype['Set'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  _emscripten_bind_b2Vec2_Set_2(self, arg0, arg1);
};

b2Vec2.prototype['op_add'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Vec2_op_add_1(self, arg0);
};

b2Vec2.prototype['op_sub'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Vec2_op_sub_1(self, arg0);
};

b2Vec2.prototype['op_mul'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Vec2_op_mul_1(self, arg0);
};

b2Vec2.prototype['Length'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Vec2_Length_0(self);
};

b2Vec2.prototype['LengthSquared'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Vec2_LengthSquared_0(self);
};

b2Vec2.prototype['Normalize'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Vec2_Normalize_0(self);
};

b2Vec2.prototype['IsValid'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Vec2_IsValid_0(self);
};

b2Vec2.prototype['Skew'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Vec2_Skew_0(self), b2Vec2);
};

  b2Vec2.prototype['get_x']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2Vec2_get_x_0(self);
}
    b2Vec2.prototype['set_x']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Vec2_set_x_1(self, arg0);
}
  b2Vec2.prototype['get_y']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2Vec2_get_y_0(self);
}
    b2Vec2.prototype['set_y']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Vec2_set_y_1(self, arg0);
}
  b2Vec2.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2Vec2___destroy___0(self);
}
// b2Vec3
function b2Vec3(arg0, arg1, arg2) {
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  if (arg0 === undefined) { this.ptr = _emscripten_bind_b2Vec3_b2Vec3_0(); getCache(b2Vec3)[this.ptr] = this;return }
  if (arg1 === undefined) { this.ptr = _emscripten_bind_b2Vec3_b2Vec3_1(arg0); getCache(b2Vec3)[this.ptr] = this;return }
  if (arg2 === undefined) { this.ptr = _emscripten_bind_b2Vec3_b2Vec3_2(arg0, arg1); getCache(b2Vec3)[this.ptr] = this;return }
  this.ptr = _emscripten_bind_b2Vec3_b2Vec3_3(arg0, arg1, arg2);
  getCache(b2Vec3)[this.ptr] = this;
};
b2Vec3.prototype = Object.create(WrapperObject.prototype);
b2Vec3.prototype.constructor = b2Vec3;
b2Vec3.prototype.__class__ = b2Vec3;
b2Vec3.__cache__ = {};
Module['b2Vec3'] = b2Vec3;

b2Vec3.prototype['SetZero'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2Vec3_SetZero_0(self);
};

b2Vec3.prototype['Set'] = function(arg0, arg1, arg2) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  _emscripten_bind_b2Vec3_Set_3(self, arg0, arg1, arg2);
};

b2Vec3.prototype['op_add'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Vec3_op_add_1(self, arg0);
};

b2Vec3.prototype['op_sub'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Vec3_op_sub_1(self, arg0);
};

b2Vec3.prototype['op_mul'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Vec3_op_mul_1(self, arg0);
};

  b2Vec3.prototype['get_x']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2Vec3_get_x_0(self);
}
    b2Vec3.prototype['set_x']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Vec3_set_x_1(self, arg0);
}
  b2Vec3.prototype['get_y']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2Vec3_get_y_0(self);
}
    b2Vec3.prototype['set_y']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Vec3_set_y_1(self, arg0);
}
  b2Vec3.prototype['get_z']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2Vec3_get_z_0(self);
}
    b2Vec3.prototype['set_z']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Vec3_set_z_1(self, arg0);
}
  b2Vec3.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2Vec3___destroy___0(self);
}
// b2AABB
function b2AABB() {
  this.ptr = _emscripten_bind_b2AABB_b2AABB_0();
  getCache(b2AABB)[this.ptr] = this;
};
b2AABB.prototype = Object.create(WrapperObject.prototype);
b2AABB.prototype.constructor = b2AABB;
b2AABB.prototype.__class__ = b2AABB;
b2AABB.__cache__ = {};
Module['b2AABB'] = b2AABB;

b2AABB.prototype['IsValid'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2AABB_IsValid_0(self);
};

b2AABB.prototype['GetCenter'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2AABB_GetCenter_0(self), b2Vec2);
};

b2AABB.prototype['GetExtents'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2AABB_GetExtents_0(self), b2Vec2);
};

b2AABB.prototype['GetPerimeter'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2AABB_GetPerimeter_0(self);
};

b2AABB.prototype['Combine'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg1 === undefined) { _emscripten_bind_b2AABB_Combine_1(self, arg0);  return }
  _emscripten_bind_b2AABB_Combine_2(self, arg0, arg1);
};

b2AABB.prototype['Contains'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return _emscripten_bind_b2AABB_Contains_1(self, arg0);
};

b2AABB.prototype['RayCast'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  return _emscripten_bind_b2AABB_RayCast_2(self, arg0, arg1);
};

  b2AABB.prototype['get_lowerBound']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2AABB_get_lowerBound_0(self), b2Vec2);
}
    b2AABB.prototype['set_lowerBound']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2AABB_set_lowerBound_1(self, arg0);
}
  b2AABB.prototype['get_upperBound']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2AABB_get_upperBound_0(self), b2Vec2);
}
    b2AABB.prototype['set_upperBound']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2AABB_set_upperBound_1(self, arg0);
}
  b2AABB.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2AABB___destroy___0(self);
}
// b2FixtureDef
function b2FixtureDef() {
  this.ptr = _emscripten_bind_b2FixtureDef_b2FixtureDef_0();
  getCache(b2FixtureDef)[this.ptr] = this;
};
b2FixtureDef.prototype = Object.create(WrapperObject.prototype);
b2FixtureDef.prototype.constructor = b2FixtureDef;
b2FixtureDef.prototype.__class__ = b2FixtureDef;
b2FixtureDef.__cache__ = {};
Module['b2FixtureDef'] = b2FixtureDef;

  b2FixtureDef.prototype['get_shape']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2FixtureDef_get_shape_0(self), b2Shape);
}
    b2FixtureDef.prototype['set_shape']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2FixtureDef_set_shape_1(self, arg0);
}
  b2FixtureDef.prototype['get_userData']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2FixtureDef_get_userData_0(self);
}
    b2FixtureDef.prototype['set_userData']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2FixtureDef_set_userData_1(self, arg0);
}
  b2FixtureDef.prototype['get_friction']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2FixtureDef_get_friction_0(self);
}
    b2FixtureDef.prototype['set_friction']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2FixtureDef_set_friction_1(self, arg0);
}
  b2FixtureDef.prototype['get_restitution']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2FixtureDef_get_restitution_0(self);
}
    b2FixtureDef.prototype['set_restitution']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2FixtureDef_set_restitution_1(self, arg0);
}
  b2FixtureDef.prototype['get_density']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2FixtureDef_get_density_0(self);
}
    b2FixtureDef.prototype['set_density']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2FixtureDef_set_density_1(self, arg0);
}
  b2FixtureDef.prototype['get_isSensor']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2FixtureDef_get_isSensor_0(self);
}
    b2FixtureDef.prototype['set_isSensor']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2FixtureDef_set_isSensor_1(self, arg0);
}
  b2FixtureDef.prototype['get_filter']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2FixtureDef_get_filter_0(self), b2Filter);
}
    b2FixtureDef.prototype['set_filter']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2FixtureDef_set_filter_1(self, arg0);
}
  b2FixtureDef.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2FixtureDef___destroy___0(self);
}
// b2Cycles
function b2Cycles() {
  this.ptr = _emscripten_bind_b2Cycles_b2Cycles_0();
  getCache(b2Cycles)[this.ptr] = this;
};
b2Cycles.prototype = Object.create(WrapperObject.prototype);
b2Cycles.prototype.constructor = b2Cycles;
b2Cycles.prototype.__class__ = b2Cycles;
b2Cycles.__cache__ = {};
Module['b2Cycles'] = b2Cycles;

b2Cycles.prototype['dump'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2Cycles_dump_0(self);
};

// b2Manifold
function b2Manifold() {
  this.ptr = _emscripten_bind_b2Manifold_b2Manifold_0();
  getCache(b2Manifold)[this.ptr] = this;
};
b2Manifold.prototype = Object.create(WrapperObject.prototype);
b2Manifold.prototype.constructor = b2Manifold;
b2Manifold.prototype.__class__ = b2Manifold;
b2Manifold.__cache__ = {};
Module['b2Manifold'] = b2Manifold;

  b2Manifold.prototype['get_localNormal']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Manifold_get_localNormal_0(self), b2Vec2);
}
    b2Manifold.prototype['set_localNormal']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Manifold_set_localNormal_1(self, arg0);
}
  b2Manifold.prototype['get_localPoint']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Manifold_get_localPoint_0(self), b2Vec2);
}
    b2Manifold.prototype['set_localPoint']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Manifold_set_localPoint_1(self, arg0);
}
  b2Manifold.prototype['get_type']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2Manifold_get_type_0(self);
}
    b2Manifold.prototype['set_type']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Manifold_set_type_1(self, arg0);
}
  b2Manifold.prototype['get_pointCount']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2Manifold_get_pointCount_0(self);
}
    b2Manifold.prototype['set_pointCount']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Manifold_set_pointCount_1(self, arg0);
}
  b2Manifold.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2Manifold___destroy___0(self);
}
// b2PrismaticJointDef
function b2PrismaticJointDef() {
  this.ptr = _emscripten_bind_b2PrismaticJointDef_b2PrismaticJointDef_0();
  getCache(b2PrismaticJointDef)[this.ptr] = this;
};
b2PrismaticJointDef.prototype = Object.create(b2JointDef.prototype);
b2PrismaticJointDef.prototype.constructor = b2PrismaticJointDef;
b2PrismaticJointDef.prototype.__class__ = b2PrismaticJointDef;
b2PrismaticJointDef.__cache__ = {};
Module['b2PrismaticJointDef'] = b2PrismaticJointDef;

b2PrismaticJointDef.prototype['Initialize'] = function(arg0, arg1, arg2, arg3) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  if (arg3 && typeof arg3 === 'object') arg3 = arg3.ptr;
  else arg3 = ensureString(arg3);
  _emscripten_bind_b2PrismaticJointDef_Initialize_4(self, arg0, arg1, arg2, arg3);
};

  b2PrismaticJointDef.prototype['get_localAnchorA']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2PrismaticJointDef_get_localAnchorA_0(self), b2Vec2);
}
    b2PrismaticJointDef.prototype['set_localAnchorA']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PrismaticJointDef_set_localAnchorA_1(self, arg0);
}
  b2PrismaticJointDef.prototype['get_localAnchorB']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2PrismaticJointDef_get_localAnchorB_0(self), b2Vec2);
}
    b2PrismaticJointDef.prototype['set_localAnchorB']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PrismaticJointDef_set_localAnchorB_1(self, arg0);
}
  b2PrismaticJointDef.prototype['get_localAxisA']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2PrismaticJointDef_get_localAxisA_0(self), b2Vec2);
}
    b2PrismaticJointDef.prototype['set_localAxisA']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PrismaticJointDef_set_localAxisA_1(self, arg0);
}
  b2PrismaticJointDef.prototype['get_referenceAngle']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2PrismaticJointDef_get_referenceAngle_0(self);
}
    b2PrismaticJointDef.prototype['set_referenceAngle']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PrismaticJointDef_set_referenceAngle_1(self, arg0);
}
  b2PrismaticJointDef.prototype['get_enableLimit']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2PrismaticJointDef_get_enableLimit_0(self);
}
    b2PrismaticJointDef.prototype['set_enableLimit']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PrismaticJointDef_set_enableLimit_1(self, arg0);
}
  b2PrismaticJointDef.prototype['get_lowerTranslation']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2PrismaticJointDef_get_lowerTranslation_0(self);
}
    b2PrismaticJointDef.prototype['set_lowerTranslation']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PrismaticJointDef_set_lowerTranslation_1(self, arg0);
}
  b2PrismaticJointDef.prototype['get_upperTranslation']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2PrismaticJointDef_get_upperTranslation_0(self);
}
    b2PrismaticJointDef.prototype['set_upperTranslation']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PrismaticJointDef_set_upperTranslation_1(self, arg0);
}
  b2PrismaticJointDef.prototype['get_enableMotor']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2PrismaticJointDef_get_enableMotor_0(self);
}
    b2PrismaticJointDef.prototype['set_enableMotor']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PrismaticJointDef_set_enableMotor_1(self, arg0);
}
  b2PrismaticJointDef.prototype['get_maxMotorForce']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2PrismaticJointDef_get_maxMotorForce_0(self);
}
    b2PrismaticJointDef.prototype['set_maxMotorForce']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PrismaticJointDef_set_maxMotorForce_1(self, arg0);
}
  b2PrismaticJointDef.prototype['get_motorSpeed']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2PrismaticJointDef_get_motorSpeed_0(self);
}
    b2PrismaticJointDef.prototype['set_motorSpeed']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PrismaticJointDef_set_motorSpeed_1(self, arg0);
}
  b2PrismaticJointDef.prototype['get_type']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2PrismaticJointDef_get_type_0(self);
}
    b2PrismaticJointDef.prototype['set_type']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PrismaticJointDef_set_type_1(self, arg0);
}
  b2PrismaticJointDef.prototype['get_userData']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2PrismaticJointDef_get_userData_0(self);
}
    b2PrismaticJointDef.prototype['set_userData']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PrismaticJointDef_set_userData_1(self, arg0);
}
  b2PrismaticJointDef.prototype['get_bodyA']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2PrismaticJointDef_get_bodyA_0(self), b2Body);
}
    b2PrismaticJointDef.prototype['set_bodyA']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PrismaticJointDef_set_bodyA_1(self, arg0);
}
  b2PrismaticJointDef.prototype['get_bodyB']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2PrismaticJointDef_get_bodyB_0(self), b2Body);
}
    b2PrismaticJointDef.prototype['set_bodyB']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PrismaticJointDef_set_bodyB_1(self, arg0);
}
  b2PrismaticJointDef.prototype['get_collideConnected']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2PrismaticJointDef_get_collideConnected_0(self);
}
    b2PrismaticJointDef.prototype['set_collideConnected']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PrismaticJointDef_set_collideConnected_1(self, arg0);
}
  b2PrismaticJointDef.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2PrismaticJointDef___destroy___0(self);
}
// b2World
function b2World(arg0) {
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  this.ptr = _emscripten_bind_b2World_b2World_1(arg0);
  getCache(b2World)[this.ptr] = this;
};
b2World.prototype = Object.create(WrapperObject.prototype);
b2World.prototype.constructor = b2World;
b2World.prototype.__class__ = b2World;
b2World.__cache__ = {};
Module['b2World'] = b2World;

b2World.prototype['SetDestructionListener'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2World_SetDestructionListener_1(self, arg0);
};

b2World.prototype['SetContactListener'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2World_SetContactListener_1(self, arg0);
};

b2World.prototype['SetDebugDraw'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2World_SetDebugDraw_1(self, arg0);
};

b2World.prototype['CreateBody'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return wrapPointer(_emscripten_bind_b2World_CreateBody_1(self, arg0), b2Body);
};

b2World.prototype['DestroyBody'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2World_DestroyBody_1(self, arg0);
};

b2World.prototype['CreateJoint'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return wrapPointer(_emscripten_bind_b2World_CreateJoint_1(self, arg0), b2Joint);
};

b2World.prototype['DestroyJoint'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2World_DestroyJoint_1(self, arg0);
};

b2World.prototype['Step'] = function(arg0, arg1, arg2) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  _emscripten_bind_b2World_Step_3(self, arg0, arg1, arg2);
};

b2World.prototype['ClearForces'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2World_ClearForces_0(self);
};

b2World.prototype['DrawDebugData'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2World_DrawDebugData_0(self);
};

b2World.prototype['QueryAABB'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  _emscripten_bind_b2World_QueryAABB_2(self, arg0, arg1);
};

b2World.prototype['RayCast'] = function(arg0, arg1, arg2) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  _emscripten_bind_b2World_RayCast_3(self, arg0, arg1, arg2);
};

b2World.prototype['GetBodyList'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2World_GetBodyList_0(self), b2Body);
};

b2World.prototype['GetJointList'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2World_GetJointList_0(self), b2Joint);
};

b2World.prototype['GetContactList'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2World_GetContactList_0(self), b2Contact);
};

b2World.prototype['SetAllowSleeping'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2World_SetAllowSleeping_1(self, arg0);
};

b2World.prototype['GetAllowSleeping'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2World_GetAllowSleeping_0(self);
};

b2World.prototype['SetWarmStarting'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2World_SetWarmStarting_1(self, arg0);
};

b2World.prototype['GetWarmStarting'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2World_GetWarmStarting_0(self);
};

b2World.prototype['SetContinuousPhysics'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2World_SetContinuousPhysics_1(self, arg0);
};

b2World.prototype['GetContinuousPhysics'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2World_GetContinuousPhysics_0(self);
};

b2World.prototype['SetSubStepping'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2World_SetSubStepping_1(self, arg0);
};

b2World.prototype['GetSubStepping'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2World_GetSubStepping_0(self);
};

b2World.prototype['GetProxyCount'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2World_GetProxyCount_0(self);
};

b2World.prototype['GetBodyCount'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2World_GetBodyCount_0(self);
};

b2World.prototype['GetJointCount'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2World_GetJointCount_0(self);
};

b2World.prototype['GetContactCount'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2World_GetContactCount_0(self);
};

b2World.prototype['GetTreeHeight'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2World_GetTreeHeight_0(self);
};

b2World.prototype['GetTreeBalance'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2World_GetTreeBalance_0(self);
};

b2World.prototype['GetTreeQuality'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2World_GetTreeQuality_0(self);
};

b2World.prototype['SetGravity'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2World_SetGravity_1(self, arg0);
};

b2World.prototype['GetGravity'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2World_GetGravity_0(self), b2Vec2);
};

b2World.prototype['IsLocked'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2World_IsLocked_0(self);
};

b2World.prototype['SetAutoClearForces'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2World_SetAutoClearForces_1(self, arg0);
};

b2World.prototype['GetAutoClearForces'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2World_GetAutoClearForces_0(self);
};

b2World.prototype['GetProfile'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2World_GetProfile_0(self), b2Profile);
};

b2World.prototype['Dump'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2World_Dump_0(self);
};

  b2World.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2World___destroy___0(self);
}
// b2PrismaticJoint
function b2PrismaticJoint() { throw "cannot construct a b2PrismaticJoint, no constructor in IDL" }
b2PrismaticJoint.prototype = Object.create(b2Joint.prototype);
b2PrismaticJoint.prototype.constructor = b2PrismaticJoint;
b2PrismaticJoint.prototype.__class__ = b2PrismaticJoint;
b2PrismaticJoint.__cache__ = {};
Module['b2PrismaticJoint'] = b2PrismaticJoint;

b2PrismaticJoint.prototype['GetLocalAnchorA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2PrismaticJoint_GetLocalAnchorA_0(self), b2Vec2);
};

b2PrismaticJoint.prototype['GetLocalAnchorB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2PrismaticJoint_GetLocalAnchorB_0(self), b2Vec2);
};

b2PrismaticJoint.prototype['GetLocalAxisA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2PrismaticJoint_GetLocalAxisA_0(self), b2Vec2);
};

b2PrismaticJoint.prototype['GetReferenceAngle'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2PrismaticJoint_GetReferenceAngle_0(self);
};

b2PrismaticJoint.prototype['GetJointTranslation'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2PrismaticJoint_GetJointTranslation_0(self);
};

b2PrismaticJoint.prototype['GetJointSpeed'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2PrismaticJoint_GetJointSpeed_0(self);
};

b2PrismaticJoint.prototype['IsLimitEnabled'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2PrismaticJoint_IsLimitEnabled_0(self);
};

b2PrismaticJoint.prototype['EnableLimit'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PrismaticJoint_EnableLimit_1(self, arg0);
};

b2PrismaticJoint.prototype['GetLowerLimit'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2PrismaticJoint_GetLowerLimit_0(self);
};

b2PrismaticJoint.prototype['GetUpperLimit'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2PrismaticJoint_GetUpperLimit_0(self);
};

b2PrismaticJoint.prototype['SetLimits'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  _emscripten_bind_b2PrismaticJoint_SetLimits_2(self, arg0, arg1);
};

b2PrismaticJoint.prototype['IsMotorEnabled'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2PrismaticJoint_IsMotorEnabled_0(self);
};

b2PrismaticJoint.prototype['EnableMotor'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PrismaticJoint_EnableMotor_1(self, arg0);
};

b2PrismaticJoint.prototype['SetMotorSpeed'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PrismaticJoint_SetMotorSpeed_1(self, arg0);
};

b2PrismaticJoint.prototype['GetMotorSpeed'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2PrismaticJoint_GetMotorSpeed_0(self);
};

b2PrismaticJoint.prototype['SetMaxMotorForce'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PrismaticJoint_SetMaxMotorForce_1(self, arg0);
};

b2PrismaticJoint.prototype['GetMaxMotorForce'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2PrismaticJoint_GetMaxMotorForce_0(self);
};

b2PrismaticJoint.prototype['GetMotorForce'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return _emscripten_bind_b2PrismaticJoint_GetMotorForce_1(self, arg0);
};

b2PrismaticJoint.prototype['GetType'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2PrismaticJoint_GetType_0(self);
};

b2PrismaticJoint.prototype['GetBodyA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2PrismaticJoint_GetBodyA_0(self), b2Body);
};

b2PrismaticJoint.prototype['GetBodyB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2PrismaticJoint_GetBodyB_0(self), b2Body);
};

b2PrismaticJoint.prototype['GetAnchorA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2PrismaticJoint_GetAnchorA_0(self), b2Vec2);
};

b2PrismaticJoint.prototype['GetAnchorB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2PrismaticJoint_GetAnchorB_0(self), b2Vec2);
};

b2PrismaticJoint.prototype['GetReactionForce'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return wrapPointer(_emscripten_bind_b2PrismaticJoint_GetReactionForce_1(self, arg0), b2Vec2);
};

b2PrismaticJoint.prototype['GetReactionTorque'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return _emscripten_bind_b2PrismaticJoint_GetReactionTorque_1(self, arg0);
};

b2PrismaticJoint.prototype['GetNext'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2PrismaticJoint_GetNext_0(self), b2Joint);
};

b2PrismaticJoint.prototype['GetUserData'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2PrismaticJoint_GetUserData_0(self);
};

b2PrismaticJoint.prototype['SetUserData'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PrismaticJoint_SetUserData_1(self, arg0);
};

b2PrismaticJoint.prototype['IsActive'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2PrismaticJoint_IsActive_0(self);
};

b2PrismaticJoint.prototype['GetCollideConnected'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2PrismaticJoint_GetCollideConnected_0(self);
};

  b2PrismaticJoint.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2PrismaticJoint___destroy___0(self);
}
// b2RayCastOutput
function b2RayCastOutput() { throw "cannot construct a b2RayCastOutput, no constructor in IDL" }
b2RayCastOutput.prototype = Object.create(WrapperObject.prototype);
b2RayCastOutput.prototype.constructor = b2RayCastOutput;
b2RayCastOutput.prototype.__class__ = b2RayCastOutput;
b2RayCastOutput.__cache__ = {};
Module['b2RayCastOutput'] = b2RayCastOutput;

  b2RayCastOutput.prototype['get_normal']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2RayCastOutput_get_normal_0(self), b2Vec2);
}
    b2RayCastOutput.prototype['set_normal']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RayCastOutput_set_normal_1(self, arg0);
}
  b2RayCastOutput.prototype['get_fraction']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2RayCastOutput_get_fraction_0(self);
}
    b2RayCastOutput.prototype['set_fraction']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RayCastOutput_set_fraction_1(self, arg0);
}
  b2RayCastOutput.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2RayCastOutput___destroy___0(self);
}
// b2ContactID
function b2ContactID() { throw "cannot construct a b2ContactID, no constructor in IDL" }
b2ContactID.prototype = Object.create(WrapperObject.prototype);
b2ContactID.prototype.constructor = b2ContactID;
b2ContactID.prototype.__class__ = b2ContactID;
b2ContactID.__cache__ = {};
Module['b2ContactID'] = b2ContactID;

  b2ContactID.prototype['get_cf']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2ContactID_get_cf_0(self), b2ContactFeature);
}
    b2ContactID.prototype['set_cf']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2ContactID_set_cf_1(self, arg0);
}
  b2ContactID.prototype['get_key']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2ContactID_get_key_0(self);
}
    b2ContactID.prototype['set_key']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2ContactID_set_key_1(self, arg0);
}
  b2ContactID.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2ContactID___destroy___0(self);
}
// b2DestructionListenerWrapper
function b2DestructionListenerWrapper() { throw "cannot construct a b2DestructionListenerWrapper, no constructor in IDL" }
b2DestructionListenerWrapper.prototype = Object.create(WrapperObject.prototype);
b2DestructionListenerWrapper.prototype.constructor = b2DestructionListenerWrapper;
b2DestructionListenerWrapper.prototype.__class__ = b2DestructionListenerWrapper;
b2DestructionListenerWrapper.__cache__ = {};
Module['b2DestructionListenerWrapper'] = b2DestructionListenerWrapper;

  b2DestructionListenerWrapper.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2DestructionListenerWrapper___destroy___0(self);
}
// JSContactListener
function JSContactListener() {
  this.ptr = _emscripten_bind_JSContactListener_JSContactListener_0();
  getCache(JSContactListener)[this.ptr] = this;
};
JSContactListener.prototype = Object.create(b2ContactListener.prototype);
JSContactListener.prototype.constructor = JSContactListener;
JSContactListener.prototype.__class__ = JSContactListener;
JSContactListener.__cache__ = {};
Module['JSContactListener'] = JSContactListener;

JSContactListener.prototype['BeginContact'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_JSContactListener_BeginContact_1(self, arg0);
};

JSContactListener.prototype['EndContact'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_JSContactListener_EndContact_1(self, arg0);
};

JSContactListener.prototype['PreSolve'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  _emscripten_bind_JSContactListener_PreSolve_2(self, arg0, arg1);
};

JSContactListener.prototype['PostSolve'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  _emscripten_bind_JSContactListener_PostSolve_2(self, arg0, arg1);
};

  JSContactListener.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_JSContactListener___destroy___0(self);
}
// b2Mat22
function b2Mat22(arg0, arg1, arg2, arg3) {
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  if (arg3 && typeof arg3 === 'object') arg3 = arg3.ptr;
  else arg3 = ensureString(arg3);
  if (arg0 === undefined) { this.ptr = _emscripten_bind_b2Mat22_b2Mat22_0(); getCache(b2Mat22)[this.ptr] = this;return }
  if (arg1 === undefined) { this.ptr = _emscripten_bind_b2Mat22_b2Mat22_1(arg0); getCache(b2Mat22)[this.ptr] = this;return }
  if (arg2 === undefined) { this.ptr = _emscripten_bind_b2Mat22_b2Mat22_2(arg0, arg1); getCache(b2Mat22)[this.ptr] = this;return }
  if (arg3 === undefined) { this.ptr = _emscripten_bind_b2Mat22_b2Mat22_3(arg0, arg1, arg2); getCache(b2Mat22)[this.ptr] = this;return }
  this.ptr = _emscripten_bind_b2Mat22_b2Mat22_4(arg0, arg1, arg2, arg3);
  getCache(b2Mat22)[this.ptr] = this;
};
b2Mat22.prototype = Object.create(WrapperObject.prototype);
b2Mat22.prototype.constructor = b2Mat22;
b2Mat22.prototype.__class__ = b2Mat22;
b2Mat22.__cache__ = {};
Module['b2Mat22'] = b2Mat22;

b2Mat22.prototype['Set'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  _emscripten_bind_b2Mat22_Set_2(self, arg0, arg1);
};

b2Mat22.prototype['SetIdentity'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2Mat22_SetIdentity_0(self);
};

b2Mat22.prototype['SetZero'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2Mat22_SetZero_0(self);
};

b2Mat22.prototype['GetInverse'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Mat22_GetInverse_0(self), b2Mat22);
};

b2Mat22.prototype['Solve'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return wrapPointer(_emscripten_bind_b2Mat22_Solve_1(self, arg0), b2Vec2);
};

  b2Mat22.prototype['get_ex']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Mat22_get_ex_0(self), b2Vec2);
}
    b2Mat22.prototype['set_ex']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Mat22_set_ex_1(self, arg0);
}
  b2Mat22.prototype['get_ey']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Mat22_get_ey_0(self), b2Vec2);
}
    b2Mat22.prototype['set_ey']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Mat22_set_ey_1(self, arg0);
}
  b2Mat22.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2Mat22___destroy___0(self);
}
// b2Counters
function b2Counters() {
  this.ptr = _emscripten_bind_b2Counters_b2Counters_0();
  getCache(b2Counters)[this.ptr] = this;
};
b2Counters.prototype = Object.create(WrapperObject.prototype);
b2Counters.prototype.constructor = b2Counters;
b2Counters.prototype.__class__ = b2Counters;
b2Counters.__cache__ = {};
Module['b2Counters'] = b2Counters;

b2Counters.prototype['dump'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2Counters_dump_0(self);
};

// b2CircleShape
function b2CircleShape() {
  this.ptr = _emscripten_bind_b2CircleShape_b2CircleShape_0();
  getCache(b2CircleShape)[this.ptr] = this;
};
b2CircleShape.prototype = Object.create(b2Shape.prototype);
b2CircleShape.prototype.constructor = b2CircleShape;
b2CircleShape.prototype.__class__ = b2CircleShape;
b2CircleShape.__cache__ = {};
Module['b2CircleShape'] = b2CircleShape;

b2CircleShape.prototype['GetType'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2CircleShape_GetType_0(self);
};

b2CircleShape.prototype['GetChildCount'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2CircleShape_GetChildCount_0(self);
};

b2CircleShape.prototype['TestPoint'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  return _emscripten_bind_b2CircleShape_TestPoint_2(self, arg0, arg1);
};

b2CircleShape.prototype['RayCast'] = function(arg0, arg1, arg2, arg3) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  if (arg3 && typeof arg3 === 'object') arg3 = arg3.ptr;
  else arg3 = ensureString(arg3);
  return _emscripten_bind_b2CircleShape_RayCast_4(self, arg0, arg1, arg2, arg3);
};

b2CircleShape.prototype['ComputeAABB'] = function(arg0, arg1, arg2) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  _emscripten_bind_b2CircleShape_ComputeAABB_3(self, arg0, arg1, arg2);
};

b2CircleShape.prototype['ComputeMass'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  _emscripten_bind_b2CircleShape_ComputeMass_2(self, arg0, arg1);
};

  b2CircleShape.prototype['get_m_p']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2CircleShape_get_m_p_0(self), b2Vec2);
}
    b2CircleShape.prototype['set_m_p']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2CircleShape_set_m_p_1(self, arg0);
}
  b2CircleShape.prototype['get_m_type']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2CircleShape_get_m_type_0(self);
}
    b2CircleShape.prototype['set_m_type']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2CircleShape_set_m_type_1(self, arg0);
}
  b2CircleShape.prototype['get_m_radius']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2CircleShape_get_m_radius_0(self);
}
    b2CircleShape.prototype['set_m_radius']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2CircleShape_set_m_radius_1(self, arg0);
}
  b2CircleShape.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2CircleShape___destroy___0(self);
}
// b2WeldJointDef
function b2WeldJointDef() {
  this.ptr = _emscripten_bind_b2WeldJointDef_b2WeldJointDef_0();
  getCache(b2WeldJointDef)[this.ptr] = this;
};
b2WeldJointDef.prototype = Object.create(b2JointDef.prototype);
b2WeldJointDef.prototype.constructor = b2WeldJointDef;
b2WeldJointDef.prototype.__class__ = b2WeldJointDef;
b2WeldJointDef.__cache__ = {};
Module['b2WeldJointDef'] = b2WeldJointDef;

b2WeldJointDef.prototype['Initialize'] = function(arg0, arg1, arg2) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  _emscripten_bind_b2WeldJointDef_Initialize_3(self, arg0, arg1, arg2);
};

  b2WeldJointDef.prototype['get_localAnchorA']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2WeldJointDef_get_localAnchorA_0(self), b2Vec2);
}
    b2WeldJointDef.prototype['set_localAnchorA']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WeldJointDef_set_localAnchorA_1(self, arg0);
}
  b2WeldJointDef.prototype['get_localAnchorB']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2WeldJointDef_get_localAnchorB_0(self), b2Vec2);
}
    b2WeldJointDef.prototype['set_localAnchorB']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WeldJointDef_set_localAnchorB_1(self, arg0);
}
  b2WeldJointDef.prototype['get_referenceAngle']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2WeldJointDef_get_referenceAngle_0(self);
}
    b2WeldJointDef.prototype['set_referenceAngle']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WeldJointDef_set_referenceAngle_1(self, arg0);
}
  b2WeldJointDef.prototype['get_frequencyHz']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2WeldJointDef_get_frequencyHz_0(self);
}
    b2WeldJointDef.prototype['set_frequencyHz']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WeldJointDef_set_frequencyHz_1(self, arg0);
}
  b2WeldJointDef.prototype['get_dampingRatio']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2WeldJointDef_get_dampingRatio_0(self);
}
    b2WeldJointDef.prototype['set_dampingRatio']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WeldJointDef_set_dampingRatio_1(self, arg0);
}
  b2WeldJointDef.prototype['get_type']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2WeldJointDef_get_type_0(self);
}
    b2WeldJointDef.prototype['set_type']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WeldJointDef_set_type_1(self, arg0);
}
  b2WeldJointDef.prototype['get_userData']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2WeldJointDef_get_userData_0(self);
}
    b2WeldJointDef.prototype['set_userData']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WeldJointDef_set_userData_1(self, arg0);
}
  b2WeldJointDef.prototype['get_bodyA']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2WeldJointDef_get_bodyA_0(self), b2Body);
}
    b2WeldJointDef.prototype['set_bodyA']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WeldJointDef_set_bodyA_1(self, arg0);
}
  b2WeldJointDef.prototype['get_bodyB']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2WeldJointDef_get_bodyB_0(self), b2Body);
}
    b2WeldJointDef.prototype['set_bodyB']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WeldJointDef_set_bodyB_1(self, arg0);
}
  b2WeldJointDef.prototype['get_collideConnected']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2WeldJointDef_get_collideConnected_0(self);
}
    b2WeldJointDef.prototype['set_collideConnected']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WeldJointDef_set_collideConnected_1(self, arg0);
}
  b2WeldJointDef.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2WeldJointDef___destroy___0(self);
}
// b2Draw
function b2Draw() { throw "cannot construct a b2Draw, no constructor in IDL" }
b2Draw.prototype = Object.create(WrapperObject.prototype);
b2Draw.prototype.constructor = b2Draw;
b2Draw.prototype.__class__ = b2Draw;
b2Draw.__cache__ = {};
Module['b2Draw'] = b2Draw;

b2Draw.prototype['SetFlags'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Draw_SetFlags_1(self, arg0);
};

b2Draw.prototype['GetFlags'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Draw_GetFlags_0(self);
};

b2Draw.prototype['AppendFlags'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Draw_AppendFlags_1(self, arg0);
};

b2Draw.prototype['ClearFlags'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Draw_ClearFlags_1(self, arg0);
};

  b2Draw.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2Draw___destroy___0(self);
}
// b2MassData
function b2MassData() {
  this.ptr = _emscripten_bind_b2MassData_b2MassData_0();
  getCache(b2MassData)[this.ptr] = this;
};
b2MassData.prototype = Object.create(WrapperObject.prototype);
b2MassData.prototype.constructor = b2MassData;
b2MassData.prototype.__class__ = b2MassData;
b2MassData.__cache__ = {};
Module['b2MassData'] = b2MassData;

  b2MassData.prototype['get_mass']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2MassData_get_mass_0(self);
}
    b2MassData.prototype['set_mass']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2MassData_set_mass_1(self, arg0);
}
  b2MassData.prototype['get_center']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2MassData_get_center_0(self), b2Vec2);
}
    b2MassData.prototype['set_center']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2MassData_set_center_1(self, arg0);
}
  b2MassData.prototype['get_I']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2MassData_get_I_0(self);
}
    b2MassData.prototype['set_I']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2MassData_set_I_1(self, arg0);
}
  b2MassData.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2MassData___destroy___0(self);
}
// b2Joint
function b2Joint() { throw "cannot construct a b2Joint, no constructor in IDL" }
b2Joint.prototype = Object.create(WrapperObject.prototype);
b2Joint.prototype.constructor = b2Joint;
b2Joint.prototype.__class__ = b2Joint;
b2Joint.__cache__ = {};
Module['b2Joint'] = b2Joint;

b2Joint.prototype['GetType'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Joint_GetType_0(self);
};

b2Joint.prototype['GetBodyA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Joint_GetBodyA_0(self), b2Body);
};

b2Joint.prototype['GetBodyB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Joint_GetBodyB_0(self), b2Body);
};

b2Joint.prototype['GetAnchorA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Joint_GetAnchorA_0(self), b2Vec2);
};

b2Joint.prototype['GetAnchorB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Joint_GetAnchorB_0(self), b2Vec2);
};

b2Joint.prototype['GetReactionForce'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return wrapPointer(_emscripten_bind_b2Joint_GetReactionForce_1(self, arg0), b2Vec2);
};

b2Joint.prototype['GetReactionTorque'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return _emscripten_bind_b2Joint_GetReactionTorque_1(self, arg0);
};

b2Joint.prototype['GetNext'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Joint_GetNext_0(self), b2Joint);
};

b2Joint.prototype['GetUserData'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Joint_GetUserData_0(self);
};

b2Joint.prototype['SetUserData'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Joint_SetUserData_1(self, arg0);
};

b2Joint.prototype['IsActive'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Joint_IsActive_0(self);
};

b2Joint.prototype['GetCollideConnected'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Joint_GetCollideConnected_0(self);
};

b2Joint.prototype['Dump'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2Joint_Dump_0(self);
};

// b2GearJoint
function b2GearJoint() { throw "cannot construct a b2GearJoint, no constructor in IDL" }
b2GearJoint.prototype = Object.create(b2Joint.prototype);
b2GearJoint.prototype.constructor = b2GearJoint;
b2GearJoint.prototype.__class__ = b2GearJoint;
b2GearJoint.__cache__ = {};
Module['b2GearJoint'] = b2GearJoint;

b2GearJoint.prototype['GetJoint1'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2GearJoint_GetJoint1_0(self), b2Joint);
};

b2GearJoint.prototype['GetJoint2'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2GearJoint_GetJoint2_0(self), b2Joint);
};

b2GearJoint.prototype['SetRatio'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2GearJoint_SetRatio_1(self, arg0);
};

b2GearJoint.prototype['GetRatio'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2GearJoint_GetRatio_0(self);
};

b2GearJoint.prototype['GetType'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2GearJoint_GetType_0(self);
};

b2GearJoint.prototype['GetBodyA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2GearJoint_GetBodyA_0(self), b2Body);
};

b2GearJoint.prototype['GetBodyB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2GearJoint_GetBodyB_0(self), b2Body);
};

b2GearJoint.prototype['GetAnchorA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2GearJoint_GetAnchorA_0(self), b2Vec2);
};

b2GearJoint.prototype['GetAnchorB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2GearJoint_GetAnchorB_0(self), b2Vec2);
};

b2GearJoint.prototype['GetReactionForce'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return wrapPointer(_emscripten_bind_b2GearJoint_GetReactionForce_1(self, arg0), b2Vec2);
};

b2GearJoint.prototype['GetReactionTorque'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return _emscripten_bind_b2GearJoint_GetReactionTorque_1(self, arg0);
};

b2GearJoint.prototype['GetNext'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2GearJoint_GetNext_0(self), b2Joint);
};

b2GearJoint.prototype['GetUserData'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2GearJoint_GetUserData_0(self);
};

b2GearJoint.prototype['SetUserData'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2GearJoint_SetUserData_1(self, arg0);
};

b2GearJoint.prototype['IsActive'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2GearJoint_IsActive_0(self);
};

b2GearJoint.prototype['GetCollideConnected'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2GearJoint_GetCollideConnected_0(self);
};

  b2GearJoint.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2GearJoint___destroy___0(self);
}
// b2RayCastCallback
function b2RayCastCallback() { throw "cannot construct a b2RayCastCallback, no constructor in IDL" }
b2RayCastCallback.prototype = Object.create(WrapperObject.prototype);
b2RayCastCallback.prototype.constructor = b2RayCastCallback;
b2RayCastCallback.prototype.__class__ = b2RayCastCallback;
b2RayCastCallback.__cache__ = {};
Module['b2RayCastCallback'] = b2RayCastCallback;

  b2RayCastCallback.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2RayCastCallback___destroy___0(self);
}
// b2WeldJoint
function b2WeldJoint() { throw "cannot construct a b2WeldJoint, no constructor in IDL" }
b2WeldJoint.prototype = Object.create(b2Joint.prototype);
b2WeldJoint.prototype.constructor = b2WeldJoint;
b2WeldJoint.prototype.__class__ = b2WeldJoint;
b2WeldJoint.__cache__ = {};
Module['b2WeldJoint'] = b2WeldJoint;

b2WeldJoint.prototype['GetLocalAnchorA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2WeldJoint_GetLocalAnchorA_0(self), b2Vec2);
};

b2WeldJoint.prototype['GetLocalAnchorB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2WeldJoint_GetLocalAnchorB_0(self), b2Vec2);
};

b2WeldJoint.prototype['SetFrequency'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WeldJoint_SetFrequency_1(self, arg0);
};

b2WeldJoint.prototype['GetFrequency'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2WeldJoint_GetFrequency_0(self);
};

b2WeldJoint.prototype['SetDampingRatio'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WeldJoint_SetDampingRatio_1(self, arg0);
};

b2WeldJoint.prototype['GetDampingRatio'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2WeldJoint_GetDampingRatio_0(self);
};

b2WeldJoint.prototype['Dump'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2WeldJoint_Dump_0(self);
};

b2WeldJoint.prototype['GetType'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2WeldJoint_GetType_0(self);
};

b2WeldJoint.prototype['GetBodyA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2WeldJoint_GetBodyA_0(self), b2Body);
};

b2WeldJoint.prototype['GetBodyB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2WeldJoint_GetBodyB_0(self), b2Body);
};

b2WeldJoint.prototype['GetAnchorA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2WeldJoint_GetAnchorA_0(self), b2Vec2);
};

b2WeldJoint.prototype['GetAnchorB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2WeldJoint_GetAnchorB_0(self), b2Vec2);
};

b2WeldJoint.prototype['GetReactionForce'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return wrapPointer(_emscripten_bind_b2WeldJoint_GetReactionForce_1(self, arg0), b2Vec2);
};

b2WeldJoint.prototype['GetReactionTorque'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return _emscripten_bind_b2WeldJoint_GetReactionTorque_1(self, arg0);
};

b2WeldJoint.prototype['GetNext'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2WeldJoint_GetNext_0(self), b2Joint);
};

b2WeldJoint.prototype['GetUserData'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2WeldJoint_GetUserData_0(self);
};

b2WeldJoint.prototype['SetUserData'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WeldJoint_SetUserData_1(self, arg0);
};

b2WeldJoint.prototype['IsActive'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2WeldJoint_IsActive_0(self);
};

b2WeldJoint.prototype['GetCollideConnected'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2WeldJoint_GetCollideConnected_0(self);
};

  b2WeldJoint.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2WeldJoint___destroy___0(self);
}
// b2JointEdge
function b2JointEdge() {
  this.ptr = _emscripten_bind_b2JointEdge_b2JointEdge_0();
  getCache(b2JointEdge)[this.ptr] = this;
};
b2JointEdge.prototype = Object.create(WrapperObject.prototype);
b2JointEdge.prototype.constructor = b2JointEdge;
b2JointEdge.prototype.__class__ = b2JointEdge;
b2JointEdge.__cache__ = {};
Module['b2JointEdge'] = b2JointEdge;

  b2JointEdge.prototype['get_other']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2JointEdge_get_other_0(self), b2Body);
}
    b2JointEdge.prototype['set_other']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2JointEdge_set_other_1(self, arg0);
}
  b2JointEdge.prototype['get_joint']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2JointEdge_get_joint_0(self), b2Joint);
}
    b2JointEdge.prototype['set_joint']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2JointEdge_set_joint_1(self, arg0);
}
  b2JointEdge.prototype['get_prev']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2JointEdge_get_prev_0(self), b2JointEdge);
}
    b2JointEdge.prototype['set_prev']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2JointEdge_set_prev_1(self, arg0);
}
  b2JointEdge.prototype['get_next']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2JointEdge_get_next_0(self), b2JointEdge);
}
    b2JointEdge.prototype['set_next']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2JointEdge_set_next_1(self, arg0);
}
  b2JointEdge.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2JointEdge___destroy___0(self);
}
// b2PulleyJointDef
function b2PulleyJointDef() {
  this.ptr = _emscripten_bind_b2PulleyJointDef_b2PulleyJointDef_0();
  getCache(b2PulleyJointDef)[this.ptr] = this;
};
b2PulleyJointDef.prototype = Object.create(b2JointDef.prototype);
b2PulleyJointDef.prototype.constructor = b2PulleyJointDef;
b2PulleyJointDef.prototype.__class__ = b2PulleyJointDef;
b2PulleyJointDef.__cache__ = {};
Module['b2PulleyJointDef'] = b2PulleyJointDef;

b2PulleyJointDef.prototype['Initialize'] = function(arg0, arg1, arg2, arg3, arg4, arg5, arg6) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  if (arg3 && typeof arg3 === 'object') arg3 = arg3.ptr;
  else arg3 = ensureString(arg3);
  if (arg4 && typeof arg4 === 'object') arg4 = arg4.ptr;
  else arg4 = ensureString(arg4);
  if (arg5 && typeof arg5 === 'object') arg5 = arg5.ptr;
  else arg5 = ensureString(arg5);
  if (arg6 && typeof arg6 === 'object') arg6 = arg6.ptr;
  else arg6 = ensureString(arg6);
  _emscripten_bind_b2PulleyJointDef_Initialize_7(self, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
};

  b2PulleyJointDef.prototype['get_groundAnchorA']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2PulleyJointDef_get_groundAnchorA_0(self), b2Vec2);
}
    b2PulleyJointDef.prototype['set_groundAnchorA']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PulleyJointDef_set_groundAnchorA_1(self, arg0);
}
  b2PulleyJointDef.prototype['get_groundAnchorB']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2PulleyJointDef_get_groundAnchorB_0(self), b2Vec2);
}
    b2PulleyJointDef.prototype['set_groundAnchorB']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PulleyJointDef_set_groundAnchorB_1(self, arg0);
}
  b2PulleyJointDef.prototype['get_localAnchorA']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2PulleyJointDef_get_localAnchorA_0(self), b2Vec2);
}
    b2PulleyJointDef.prototype['set_localAnchorA']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PulleyJointDef_set_localAnchorA_1(self, arg0);
}
  b2PulleyJointDef.prototype['get_localAnchorB']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2PulleyJointDef_get_localAnchorB_0(self), b2Vec2);
}
    b2PulleyJointDef.prototype['set_localAnchorB']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PulleyJointDef_set_localAnchorB_1(self, arg0);
}
  b2PulleyJointDef.prototype['get_lengthA']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2PulleyJointDef_get_lengthA_0(self);
}
    b2PulleyJointDef.prototype['set_lengthA']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PulleyJointDef_set_lengthA_1(self, arg0);
}
  b2PulleyJointDef.prototype['get_lengthB']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2PulleyJointDef_get_lengthB_0(self);
}
    b2PulleyJointDef.prototype['set_lengthB']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PulleyJointDef_set_lengthB_1(self, arg0);
}
  b2PulleyJointDef.prototype['get_ratio']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2PulleyJointDef_get_ratio_0(self);
}
    b2PulleyJointDef.prototype['set_ratio']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PulleyJointDef_set_ratio_1(self, arg0);
}
  b2PulleyJointDef.prototype['get_type']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2PulleyJointDef_get_type_0(self);
}
    b2PulleyJointDef.prototype['set_type']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PulleyJointDef_set_type_1(self, arg0);
}
  b2PulleyJointDef.prototype['get_userData']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2PulleyJointDef_get_userData_0(self);
}
    b2PulleyJointDef.prototype['set_userData']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PulleyJointDef_set_userData_1(self, arg0);
}
  b2PulleyJointDef.prototype['get_bodyA']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2PulleyJointDef_get_bodyA_0(self), b2Body);
}
    b2PulleyJointDef.prototype['set_bodyA']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PulleyJointDef_set_bodyA_1(self, arg0);
}
  b2PulleyJointDef.prototype['get_bodyB']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2PulleyJointDef_get_bodyB_0(self), b2Body);
}
    b2PulleyJointDef.prototype['set_bodyB']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PulleyJointDef_set_bodyB_1(self, arg0);
}
  b2PulleyJointDef.prototype['get_collideConnected']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2PulleyJointDef_get_collideConnected_0(self);
}
    b2PulleyJointDef.prototype['set_collideConnected']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PulleyJointDef_set_collideConnected_1(self, arg0);
}
  b2PulleyJointDef.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2PulleyJointDef___destroy___0(self);
}
// b2ContactListener
function b2ContactListener() { throw "cannot construct a b2ContactListener, no constructor in IDL" }
b2ContactListener.prototype = Object.create(WrapperObject.prototype);
b2ContactListener.prototype.constructor = b2ContactListener;
b2ContactListener.prototype.__class__ = b2ContactListener;
b2ContactListener.__cache__ = {};
Module['b2ContactListener'] = b2ContactListener;

  b2ContactListener.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2ContactListener___destroy___0(self);
}
// b2ManifoldPoint
function b2ManifoldPoint() {
  this.ptr = _emscripten_bind_b2ManifoldPoint_b2ManifoldPoint_0();
  getCache(b2ManifoldPoint)[this.ptr] = this;
};
b2ManifoldPoint.prototype = Object.create(WrapperObject.prototype);
b2ManifoldPoint.prototype.constructor = b2ManifoldPoint;
b2ManifoldPoint.prototype.__class__ = b2ManifoldPoint;
b2ManifoldPoint.__cache__ = {};
Module['b2ManifoldPoint'] = b2ManifoldPoint;

  b2ManifoldPoint.prototype['get_localPoint']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2ManifoldPoint_get_localPoint_0(self), b2Vec2);
}
    b2ManifoldPoint.prototype['set_localPoint']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2ManifoldPoint_set_localPoint_1(self, arg0);
}
  b2ManifoldPoint.prototype['get_normalImpulse']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2ManifoldPoint_get_normalImpulse_0(self);
}
    b2ManifoldPoint.prototype['set_normalImpulse']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2ManifoldPoint_set_normalImpulse_1(self, arg0);
}
  b2ManifoldPoint.prototype['get_tangentImpulse']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2ManifoldPoint_get_tangentImpulse_0(self);
}
    b2ManifoldPoint.prototype['set_tangentImpulse']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2ManifoldPoint_set_tangentImpulse_1(self, arg0);
}
  b2ManifoldPoint.prototype['get_id']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2ManifoldPoint_get_id_0(self), b2ContactID);
}
    b2ManifoldPoint.prototype['set_id']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2ManifoldPoint_set_id_1(self, arg0);
}
  b2ManifoldPoint.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2ManifoldPoint___destroy___0(self);
}
// b2QueryCallback
function b2QueryCallback() { throw "cannot construct a b2QueryCallback, no constructor in IDL" }
b2QueryCallback.prototype = Object.create(WrapperObject.prototype);
b2QueryCallback.prototype.constructor = b2QueryCallback;
b2QueryCallback.prototype.__class__ = b2QueryCallback;
b2QueryCallback.__cache__ = {};
Module['b2QueryCallback'] = b2QueryCallback;

  b2QueryCallback.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2QueryCallback___destroy___0(self);
}
// b2JointDef
function b2JointDef() {
  this.ptr = _emscripten_bind_b2JointDef_b2JointDef_0();
  getCache(b2JointDef)[this.ptr] = this;
};
b2JointDef.prototype = Object.create(WrapperObject.prototype);
b2JointDef.prototype.constructor = b2JointDef;
b2JointDef.prototype.__class__ = b2JointDef;
b2JointDef.__cache__ = {};
Module['b2JointDef'] = b2JointDef;

  b2JointDef.prototype['get_type']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2JointDef_get_type_0(self);
}
    b2JointDef.prototype['set_type']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2JointDef_set_type_1(self, arg0);
}
  b2JointDef.prototype['get_userData']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2JointDef_get_userData_0(self);
}
    b2JointDef.prototype['set_userData']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2JointDef_set_userData_1(self, arg0);
}
  b2JointDef.prototype['get_bodyA']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2JointDef_get_bodyA_0(self), b2Body);
}
    b2JointDef.prototype['set_bodyA']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2JointDef_set_bodyA_1(self, arg0);
}
  b2JointDef.prototype['get_bodyB']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2JointDef_get_bodyB_0(self), b2Body);
}
    b2JointDef.prototype['set_bodyB']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2JointDef_set_bodyB_1(self, arg0);
}
  b2JointDef.prototype['get_collideConnected']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2JointDef_get_collideConnected_0(self);
}
    b2JointDef.prototype['set_collideConnected']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2JointDef_set_collideConnected_1(self, arg0);
}
  b2JointDef.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2JointDef___destroy___0(self);
}
// b2Transform
function b2Transform(arg0, arg1) {
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg0 === undefined) { this.ptr = _emscripten_bind_b2Transform_b2Transform_0(); getCache(b2Transform)[this.ptr] = this;return }
  if (arg1 === undefined) { this.ptr = _emscripten_bind_b2Transform_b2Transform_1(arg0); getCache(b2Transform)[this.ptr] = this;return }
  this.ptr = _emscripten_bind_b2Transform_b2Transform_2(arg0, arg1);
  getCache(b2Transform)[this.ptr] = this;
};
b2Transform.prototype = Object.create(WrapperObject.prototype);
b2Transform.prototype.constructor = b2Transform;
b2Transform.prototype.__class__ = b2Transform;
b2Transform.__cache__ = {};
Module['b2Transform'] = b2Transform;

b2Transform.prototype['SetIdentity'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2Transform_SetIdentity_0(self);
};

b2Transform.prototype['Set'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  _emscripten_bind_b2Transform_Set_2(self, arg0, arg1);
};

  b2Transform.prototype['get_p']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Transform_get_p_0(self), b2Vec2);
}
    b2Transform.prototype['set_p']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Transform_set_p_1(self, arg0);
}
  b2Transform.prototype['get_q']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Transform_get_q_0(self), b2Rot);
}
    b2Transform.prototype['set_q']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Transform_set_q_1(self, arg0);
}
  b2Transform.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2Transform___destroy___0(self);
}
// b2ChainShape
function b2ChainShape() {
  this.ptr = _emscripten_bind_b2ChainShape_b2ChainShape_0();
  getCache(b2ChainShape)[this.ptr] = this;
};
b2ChainShape.prototype = Object.create(b2Shape.prototype);
b2ChainShape.prototype.constructor = b2ChainShape;
b2ChainShape.prototype.__class__ = b2ChainShape;
b2ChainShape.__cache__ = {};
Module['b2ChainShape'] = b2ChainShape;

b2ChainShape.prototype['CreateLoop'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  _emscripten_bind_b2ChainShape_CreateLoop_2(self, arg0, arg1);
};

b2ChainShape.prototype['CreateChain'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  _emscripten_bind_b2ChainShape_CreateChain_2(self, arg0, arg1);
};

b2ChainShape.prototype['SetPrevVertex'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2ChainShape_SetPrevVertex_1(self, arg0);
};

b2ChainShape.prototype['SetNextVertex'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2ChainShape_SetNextVertex_1(self, arg0);
};

b2ChainShape.prototype['GetChildEdge'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  _emscripten_bind_b2ChainShape_GetChildEdge_2(self, arg0, arg1);
};

b2ChainShape.prototype['GetType'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2ChainShape_GetType_0(self);
};

b2ChainShape.prototype['GetChildCount'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2ChainShape_GetChildCount_0(self);
};

b2ChainShape.prototype['TestPoint'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  return _emscripten_bind_b2ChainShape_TestPoint_2(self, arg0, arg1);
};

b2ChainShape.prototype['RayCast'] = function(arg0, arg1, arg2, arg3) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  if (arg3 && typeof arg3 === 'object') arg3 = arg3.ptr;
  else arg3 = ensureString(arg3);
  return _emscripten_bind_b2ChainShape_RayCast_4(self, arg0, arg1, arg2, arg3);
};

b2ChainShape.prototype['ComputeAABB'] = function(arg0, arg1, arg2) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  _emscripten_bind_b2ChainShape_ComputeAABB_3(self, arg0, arg1, arg2);
};

b2ChainShape.prototype['ComputeMass'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  _emscripten_bind_b2ChainShape_ComputeMass_2(self, arg0, arg1);
};

  b2ChainShape.prototype['get_m_vertices']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2ChainShape_get_m_vertices_0(self), b2Vec2);
}
    b2ChainShape.prototype['set_m_vertices']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2ChainShape_set_m_vertices_1(self, arg0);
}
  b2ChainShape.prototype['get_m_count']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2ChainShape_get_m_count_0(self);
}
    b2ChainShape.prototype['set_m_count']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2ChainShape_set_m_count_1(self, arg0);
}
  b2ChainShape.prototype['get_m_prevVertex']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2ChainShape_get_m_prevVertex_0(self), b2Vec2);
}
    b2ChainShape.prototype['set_m_prevVertex']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2ChainShape_set_m_prevVertex_1(self, arg0);
}
  b2ChainShape.prototype['get_m_nextVertex']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2ChainShape_get_m_nextVertex_0(self), b2Vec2);
}
    b2ChainShape.prototype['set_m_nextVertex']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2ChainShape_set_m_nextVertex_1(self, arg0);
}
  b2ChainShape.prototype['get_m_hasPrevVertex']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2ChainShape_get_m_hasPrevVertex_0(self);
}
    b2ChainShape.prototype['set_m_hasPrevVertex']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2ChainShape_set_m_hasPrevVertex_1(self, arg0);
}
  b2ChainShape.prototype['get_m_hasNextVertex']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2ChainShape_get_m_hasNextVertex_0(self);
}
    b2ChainShape.prototype['set_m_hasNextVertex']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2ChainShape_set_m_hasNextVertex_1(self, arg0);
}
  b2ChainShape.prototype['get_m_type']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2ChainShape_get_m_type_0(self);
}
    b2ChainShape.prototype['set_m_type']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2ChainShape_set_m_type_1(self, arg0);
}
  b2ChainShape.prototype['get_m_radius']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2ChainShape_get_m_radius_0(self);
}
    b2ChainShape.prototype['set_m_radius']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2ChainShape_set_m_radius_1(self, arg0);
}
  b2ChainShape.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2ChainShape___destroy___0(self);
}
// b2Params
function b2Params() {
  this.ptr = _emscripten_bind_b2Params_b2Params_0();
  getCache(b2Params)[this.ptr] = this;
};
b2Params.prototype = Object.create(WrapperObject.prototype);
b2Params.prototype.constructor = b2Params;
b2Params.prototype.__class__ = b2Params;
b2Params.__cache__ = {};
Module['b2Params'] = b2Params;

b2Params.prototype['setSimd'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Params_setSimd_1(self, arg0);
};

b2Params.prototype['getSimd'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Params_getSimd_0(self);
};

b2Params.prototype['setDumpPos'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Params_setDumpPos_1(self, arg0);
};

b2Params.prototype['getDumpPos'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Params_getDumpPos_0(self);
};

b2Params.prototype['setDumpCon'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Params_setDumpCon_1(self, arg0);
};

b2Params.prototype['getDumpCon'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Params_getDumpCon_0(self);
};

b2Params.prototype['setTestOut'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Params_setTestOut_1(self, arg0);
};

b2Params.prototype['getTestOut'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Params_getTestOut_0(self);
};

b2Params.prototype['setDebug'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Params_setDebug_1(self, arg0);
};

b2Params.prototype['getDebug'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Params_getDebug_0(self);
};

b2Params.prototype['setFrame1'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Params_setFrame1_1(self, arg0);
};

b2Params.prototype['getFrame1'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Params_getFrame1_0(self);
};

b2Params.prototype['setFrame10'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Params_setFrame10_1(self, arg0);
};

b2Params.prototype['getFrame10'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Params_getFrame10_0(self);
};

b2Params.prototype['setSortCon'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Params_setSortCon_1(self, arg0);
};

b2Params.prototype['getSortCon'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Params_getSortCon_0(self);
};

// b2RopeJoint
function b2RopeJoint() { throw "cannot construct a b2RopeJoint, no constructor in IDL" }
b2RopeJoint.prototype = Object.create(b2Joint.prototype);
b2RopeJoint.prototype.constructor = b2RopeJoint;
b2RopeJoint.prototype.__class__ = b2RopeJoint;
b2RopeJoint.__cache__ = {};
Module['b2RopeJoint'] = b2RopeJoint;

b2RopeJoint.prototype['GetLocalAnchorA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2RopeJoint_GetLocalAnchorA_0(self), b2Vec2);
};

b2RopeJoint.prototype['GetLocalAnchorB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2RopeJoint_GetLocalAnchorB_0(self), b2Vec2);
};

b2RopeJoint.prototype['SetMaxLength'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RopeJoint_SetMaxLength_1(self, arg0);
};

b2RopeJoint.prototype['GetMaxLength'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2RopeJoint_GetMaxLength_0(self);
};

b2RopeJoint.prototype['GetLimitState'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2RopeJoint_GetLimitState_0(self);
};

b2RopeJoint.prototype['GetType'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2RopeJoint_GetType_0(self);
};

b2RopeJoint.prototype['GetBodyA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2RopeJoint_GetBodyA_0(self), b2Body);
};

b2RopeJoint.prototype['GetBodyB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2RopeJoint_GetBodyB_0(self), b2Body);
};

b2RopeJoint.prototype['GetAnchorA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2RopeJoint_GetAnchorA_0(self), b2Vec2);
};

b2RopeJoint.prototype['GetAnchorB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2RopeJoint_GetAnchorB_0(self), b2Vec2);
};

b2RopeJoint.prototype['GetReactionForce'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return wrapPointer(_emscripten_bind_b2RopeJoint_GetReactionForce_1(self, arg0), b2Vec2);
};

b2RopeJoint.prototype['GetReactionTorque'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return _emscripten_bind_b2RopeJoint_GetReactionTorque_1(self, arg0);
};

b2RopeJoint.prototype['GetNext'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2RopeJoint_GetNext_0(self), b2Joint);
};

b2RopeJoint.prototype['GetUserData'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2RopeJoint_GetUserData_0(self);
};

b2RopeJoint.prototype['SetUserData'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RopeJoint_SetUserData_1(self, arg0);
};

b2RopeJoint.prototype['IsActive'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2RopeJoint_IsActive_0(self);
};

b2RopeJoint.prototype['GetCollideConnected'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2RopeJoint_GetCollideConnected_0(self);
};

  b2RopeJoint.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2RopeJoint___destroy___0(self);
}
// b2RevoluteJoint
function b2RevoluteJoint() { throw "cannot construct a b2RevoluteJoint, no constructor in IDL" }
b2RevoluteJoint.prototype = Object.create(b2Joint.prototype);
b2RevoluteJoint.prototype.constructor = b2RevoluteJoint;
b2RevoluteJoint.prototype.__class__ = b2RevoluteJoint;
b2RevoluteJoint.__cache__ = {};
Module['b2RevoluteJoint'] = b2RevoluteJoint;

b2RevoluteJoint.prototype['GetLocalAnchorA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2RevoluteJoint_GetLocalAnchorA_0(self), b2Vec2);
};

b2RevoluteJoint.prototype['GetLocalAnchorB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2RevoluteJoint_GetLocalAnchorB_0(self), b2Vec2);
};

b2RevoluteJoint.prototype['GetReferenceAngle'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2RevoluteJoint_GetReferenceAngle_0(self);
};

b2RevoluteJoint.prototype['GetJointAngle'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2RevoluteJoint_GetJointAngle_0(self);
};

b2RevoluteJoint.prototype['GetJointSpeed'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2RevoluteJoint_GetJointSpeed_0(self);
};

b2RevoluteJoint.prototype['IsLimitEnabled'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2RevoluteJoint_IsLimitEnabled_0(self);
};

b2RevoluteJoint.prototype['EnableLimit'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RevoluteJoint_EnableLimit_1(self, arg0);
};

b2RevoluteJoint.prototype['GetLowerLimit'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2RevoluteJoint_GetLowerLimit_0(self);
};

b2RevoluteJoint.prototype['GetUpperLimit'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2RevoluteJoint_GetUpperLimit_0(self);
};

b2RevoluteJoint.prototype['SetLimits'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  _emscripten_bind_b2RevoluteJoint_SetLimits_2(self, arg0, arg1);
};

b2RevoluteJoint.prototype['IsMotorEnabled'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2RevoluteJoint_IsMotorEnabled_0(self);
};

b2RevoluteJoint.prototype['EnableMotor'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RevoluteJoint_EnableMotor_1(self, arg0);
};

b2RevoluteJoint.prototype['SetMotorSpeed'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RevoluteJoint_SetMotorSpeed_1(self, arg0);
};

b2RevoluteJoint.prototype['GetMotorSpeed'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2RevoluteJoint_GetMotorSpeed_0(self);
};

b2RevoluteJoint.prototype['SetMaxMotorTorque'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RevoluteJoint_SetMaxMotorTorque_1(self, arg0);
};

b2RevoluteJoint.prototype['GetMaxMotorTorque'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2RevoluteJoint_GetMaxMotorTorque_0(self);
};

b2RevoluteJoint.prototype['GetMotorTorque'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return _emscripten_bind_b2RevoluteJoint_GetMotorTorque_1(self, arg0);
};

b2RevoluteJoint.prototype['GetType'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2RevoluteJoint_GetType_0(self);
};

b2RevoluteJoint.prototype['GetBodyA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2RevoluteJoint_GetBodyA_0(self), b2Body);
};

b2RevoluteJoint.prototype['GetBodyB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2RevoluteJoint_GetBodyB_0(self), b2Body);
};

b2RevoluteJoint.prototype['GetAnchorA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2RevoluteJoint_GetAnchorA_0(self), b2Vec2);
};

b2RevoluteJoint.prototype['GetAnchorB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2RevoluteJoint_GetAnchorB_0(self), b2Vec2);
};

b2RevoluteJoint.prototype['GetReactionForce'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return wrapPointer(_emscripten_bind_b2RevoluteJoint_GetReactionForce_1(self, arg0), b2Vec2);
};

b2RevoluteJoint.prototype['GetReactionTorque'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return _emscripten_bind_b2RevoluteJoint_GetReactionTorque_1(self, arg0);
};

b2RevoluteJoint.prototype['GetNext'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2RevoluteJoint_GetNext_0(self), b2Joint);
};

b2RevoluteJoint.prototype['GetUserData'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2RevoluteJoint_GetUserData_0(self);
};

b2RevoluteJoint.prototype['SetUserData'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RevoluteJoint_SetUserData_1(self, arg0);
};

b2RevoluteJoint.prototype['IsActive'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2RevoluteJoint_IsActive_0(self);
};

b2RevoluteJoint.prototype['GetCollideConnected'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2RevoluteJoint_GetCollideConnected_0(self);
};

  b2RevoluteJoint.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2RevoluteJoint___destroy___0(self);
}
// b2RayCastInput
function b2RayCastInput() { throw "cannot construct a b2RayCastInput, no constructor in IDL" }
b2RayCastInput.prototype = Object.create(WrapperObject.prototype);
b2RayCastInput.prototype.constructor = b2RayCastInput;
b2RayCastInput.prototype.__class__ = b2RayCastInput;
b2RayCastInput.__cache__ = {};
Module['b2RayCastInput'] = b2RayCastInput;

  b2RayCastInput.prototype['get_p1']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2RayCastInput_get_p1_0(self), b2Vec2);
}
    b2RayCastInput.prototype['set_p1']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RayCastInput_set_p1_1(self, arg0);
}
  b2RayCastInput.prototype['get_p2']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2RayCastInput_get_p2_0(self), b2Vec2);
}
    b2RayCastInput.prototype['set_p2']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RayCastInput_set_p2_1(self, arg0);
}
  b2RayCastInput.prototype['get_maxFraction']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2RayCastInput_get_maxFraction_0(self);
}
    b2RayCastInput.prototype['set_maxFraction']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RayCastInput_set_maxFraction_1(self, arg0);
}
  b2RayCastInput.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2RayCastInput___destroy___0(self);
}
// b2PolygonShape
function b2PolygonShape() {
  this.ptr = _emscripten_bind_b2PolygonShape_b2PolygonShape_0();
  getCache(b2PolygonShape)[this.ptr] = this;
};
b2PolygonShape.prototype = Object.create(b2Shape.prototype);
b2PolygonShape.prototype.constructor = b2PolygonShape;
b2PolygonShape.prototype.__class__ = b2PolygonShape;
b2PolygonShape.__cache__ = {};
Module['b2PolygonShape'] = b2PolygonShape;

b2PolygonShape.prototype['Set'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  _emscripten_bind_b2PolygonShape_Set_2(self, arg0, arg1);
};

b2PolygonShape.prototype['SetAsBox'] = function(arg0, arg1, arg2, arg3) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  if (arg3 && typeof arg3 === 'object') arg3 = arg3.ptr;
  else arg3 = ensureString(arg3);
  if (arg2 === undefined) { _emscripten_bind_b2PolygonShape_SetAsBox_2(self, arg0, arg1);  return }
  if (arg3 === undefined) { _emscripten_bind_b2PolygonShape_SetAsBox_3(self, arg0, arg1, arg2);  return }
  _emscripten_bind_b2PolygonShape_SetAsBox_4(self, arg0, arg1, arg2, arg3);
};

b2PolygonShape.prototype['GetVertexCount'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2PolygonShape_GetVertexCount_0(self);
};

b2PolygonShape.prototype['GetVertex'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return wrapPointer(_emscripten_bind_b2PolygonShape_GetVertex_1(self, arg0), b2Vec2);
};

b2PolygonShape.prototype['GetType'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2PolygonShape_GetType_0(self);
};

b2PolygonShape.prototype['GetChildCount'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2PolygonShape_GetChildCount_0(self);
};

b2PolygonShape.prototype['TestPoint'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  return _emscripten_bind_b2PolygonShape_TestPoint_2(self, arg0, arg1);
};

b2PolygonShape.prototype['RayCast'] = function(arg0, arg1, arg2, arg3) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  if (arg3 && typeof arg3 === 'object') arg3 = arg3.ptr;
  else arg3 = ensureString(arg3);
  return _emscripten_bind_b2PolygonShape_RayCast_4(self, arg0, arg1, arg2, arg3);
};

b2PolygonShape.prototype['ComputeAABB'] = function(arg0, arg1, arg2) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  _emscripten_bind_b2PolygonShape_ComputeAABB_3(self, arg0, arg1, arg2);
};

b2PolygonShape.prototype['ComputeMass'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  _emscripten_bind_b2PolygonShape_ComputeMass_2(self, arg0, arg1);
};

  b2PolygonShape.prototype['get_m_centroid']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2PolygonShape_get_m_centroid_0(self), b2Vec2);
}
    b2PolygonShape.prototype['set_m_centroid']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PolygonShape_set_m_centroid_1(self, arg0);
}
  b2PolygonShape.prototype['get_m_vertexCount']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2PolygonShape_get_m_vertexCount_0(self);
}
    b2PolygonShape.prototype['set_m_vertexCount']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PolygonShape_set_m_vertexCount_1(self, arg0);
}
  b2PolygonShape.prototype['get_m_type']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2PolygonShape_get_m_type_0(self);
}
    b2PolygonShape.prototype['set_m_type']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PolygonShape_set_m_type_1(self, arg0);
}
  b2PolygonShape.prototype['get_m_radius']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2PolygonShape_get_m_radius_0(self);
}
    b2PolygonShape.prototype['set_m_radius']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PolygonShape_set_m_radius_1(self, arg0);
}
  b2PolygonShape.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2PolygonShape___destroy___0(self);
}
// b2WheelJointDef
function b2WheelJointDef() {
  this.ptr = _emscripten_bind_b2WheelJointDef_b2WheelJointDef_0();
  getCache(b2WheelJointDef)[this.ptr] = this;
};
b2WheelJointDef.prototype = Object.create(b2JointDef.prototype);
b2WheelJointDef.prototype.constructor = b2WheelJointDef;
b2WheelJointDef.prototype.__class__ = b2WheelJointDef;
b2WheelJointDef.__cache__ = {};
Module['b2WheelJointDef'] = b2WheelJointDef;

b2WheelJointDef.prototype['Initialize'] = function(arg0, arg1, arg2, arg3) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  if (arg3 && typeof arg3 === 'object') arg3 = arg3.ptr;
  else arg3 = ensureString(arg3);
  _emscripten_bind_b2WheelJointDef_Initialize_4(self, arg0, arg1, arg2, arg3);
};

  b2WheelJointDef.prototype['get_localAnchorA']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2WheelJointDef_get_localAnchorA_0(self), b2Vec2);
}
    b2WheelJointDef.prototype['set_localAnchorA']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WheelJointDef_set_localAnchorA_1(self, arg0);
}
  b2WheelJointDef.prototype['get_localAnchorB']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2WheelJointDef_get_localAnchorB_0(self), b2Vec2);
}
    b2WheelJointDef.prototype['set_localAnchorB']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WheelJointDef_set_localAnchorB_1(self, arg0);
}
  b2WheelJointDef.prototype['get_localAxisA']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2WheelJointDef_get_localAxisA_0(self), b2Vec2);
}
    b2WheelJointDef.prototype['set_localAxisA']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WheelJointDef_set_localAxisA_1(self, arg0);
}
  b2WheelJointDef.prototype['get_enableMotor']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2WheelJointDef_get_enableMotor_0(self);
}
    b2WheelJointDef.prototype['set_enableMotor']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WheelJointDef_set_enableMotor_1(self, arg0);
}
  b2WheelJointDef.prototype['get_maxMotorTorque']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2WheelJointDef_get_maxMotorTorque_0(self);
}
    b2WheelJointDef.prototype['set_maxMotorTorque']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WheelJointDef_set_maxMotorTorque_1(self, arg0);
}
  b2WheelJointDef.prototype['get_motorSpeed']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2WheelJointDef_get_motorSpeed_0(self);
}
    b2WheelJointDef.prototype['set_motorSpeed']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WheelJointDef_set_motorSpeed_1(self, arg0);
}
  b2WheelJointDef.prototype['get_frequencyHz']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2WheelJointDef_get_frequencyHz_0(self);
}
    b2WheelJointDef.prototype['set_frequencyHz']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WheelJointDef_set_frequencyHz_1(self, arg0);
}
  b2WheelJointDef.prototype['get_dampingRatio']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2WheelJointDef_get_dampingRatio_0(self);
}
    b2WheelJointDef.prototype['set_dampingRatio']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WheelJointDef_set_dampingRatio_1(self, arg0);
}
  b2WheelJointDef.prototype['get_type']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2WheelJointDef_get_type_0(self);
}
    b2WheelJointDef.prototype['set_type']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WheelJointDef_set_type_1(self, arg0);
}
  b2WheelJointDef.prototype['get_userData']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2WheelJointDef_get_userData_0(self);
}
    b2WheelJointDef.prototype['set_userData']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WheelJointDef_set_userData_1(self, arg0);
}
  b2WheelJointDef.prototype['get_bodyA']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2WheelJointDef_get_bodyA_0(self), b2Body);
}
    b2WheelJointDef.prototype['set_bodyA']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WheelJointDef_set_bodyA_1(self, arg0);
}
  b2WheelJointDef.prototype['get_bodyB']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2WheelJointDef_get_bodyB_0(self), b2Body);
}
    b2WheelJointDef.prototype['set_bodyB']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WheelJointDef_set_bodyB_1(self, arg0);
}
  b2WheelJointDef.prototype['get_collideConnected']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2WheelJointDef_get_collideConnected_0(self);
}
    b2WheelJointDef.prototype['set_collideConnected']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WheelJointDef_set_collideConnected_1(self, arg0);
}
  b2WheelJointDef.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2WheelJointDef___destroy___0(self);
}
// b2EdgeShape
function b2EdgeShape() {
  this.ptr = _emscripten_bind_b2EdgeShape_b2EdgeShape_0();
  getCache(b2EdgeShape)[this.ptr] = this;
};
b2EdgeShape.prototype = Object.create(b2Shape.prototype);
b2EdgeShape.prototype.constructor = b2EdgeShape;
b2EdgeShape.prototype.__class__ = b2EdgeShape;
b2EdgeShape.__cache__ = {};
Module['b2EdgeShape'] = b2EdgeShape;

b2EdgeShape.prototype['Set'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  _emscripten_bind_b2EdgeShape_Set_2(self, arg0, arg1);
};

b2EdgeShape.prototype['GetType'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2EdgeShape_GetType_0(self);
};

b2EdgeShape.prototype['GetChildCount'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2EdgeShape_GetChildCount_0(self);
};

b2EdgeShape.prototype['TestPoint'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  return _emscripten_bind_b2EdgeShape_TestPoint_2(self, arg0, arg1);
};

b2EdgeShape.prototype['RayCast'] = function(arg0, arg1, arg2, arg3) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  if (arg3 && typeof arg3 === 'object') arg3 = arg3.ptr;
  else arg3 = ensureString(arg3);
  return _emscripten_bind_b2EdgeShape_RayCast_4(self, arg0, arg1, arg2, arg3);
};

b2EdgeShape.prototype['ComputeAABB'] = function(arg0, arg1, arg2) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  _emscripten_bind_b2EdgeShape_ComputeAABB_3(self, arg0, arg1, arg2);
};

b2EdgeShape.prototype['ComputeMass'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  _emscripten_bind_b2EdgeShape_ComputeMass_2(self, arg0, arg1);
};

  b2EdgeShape.prototype['get_m_vertex1']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2EdgeShape_get_m_vertex1_0(self), b2Vec2);
}
    b2EdgeShape.prototype['set_m_vertex1']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2EdgeShape_set_m_vertex1_1(self, arg0);
}
  b2EdgeShape.prototype['get_m_vertex2']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2EdgeShape_get_m_vertex2_0(self), b2Vec2);
}
    b2EdgeShape.prototype['set_m_vertex2']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2EdgeShape_set_m_vertex2_1(self, arg0);
}
  b2EdgeShape.prototype['get_m_vertex0']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2EdgeShape_get_m_vertex0_0(self), b2Vec2);
}
    b2EdgeShape.prototype['set_m_vertex0']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2EdgeShape_set_m_vertex0_1(self, arg0);
}
  b2EdgeShape.prototype['get_m_vertex3']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2EdgeShape_get_m_vertex3_0(self), b2Vec2);
}
    b2EdgeShape.prototype['set_m_vertex3']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2EdgeShape_set_m_vertex3_1(self, arg0);
}
  b2EdgeShape.prototype['get_m_hasVertex0']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2EdgeShape_get_m_hasVertex0_0(self);
}
    b2EdgeShape.prototype['set_m_hasVertex0']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2EdgeShape_set_m_hasVertex0_1(self, arg0);
}
  b2EdgeShape.prototype['get_m_hasVertex3']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2EdgeShape_get_m_hasVertex3_0(self);
}
    b2EdgeShape.prototype['set_m_hasVertex3']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2EdgeShape_set_m_hasVertex3_1(self, arg0);
}
  b2EdgeShape.prototype['get_m_type']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2EdgeShape_get_m_type_0(self);
}
    b2EdgeShape.prototype['set_m_type']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2EdgeShape_set_m_type_1(self, arg0);
}
  b2EdgeShape.prototype['get_m_radius']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2EdgeShape_get_m_radius_0(self);
}
    b2EdgeShape.prototype['set_m_radius']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2EdgeShape_set_m_radius_1(self, arg0);
}
  b2EdgeShape.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2EdgeShape___destroy___0(self);
}
// JSContactFilter
function JSContactFilter() { throw "cannot construct a JSContactFilter, no constructor in IDL" }
JSContactFilter.prototype = Object.create(b2ContactFilter.prototype);
JSContactFilter.prototype.constructor = JSContactFilter;
JSContactFilter.prototype.__class__ = JSContactFilter;
JSContactFilter.__cache__ = {};
Module['JSContactFilter'] = JSContactFilter;

JSContactFilter.prototype['JSContactListener'] = function() {
  var self = this.ptr;
  _emscripten_bind_JSContactFilter_JSContactListener_0(self);
};

JSContactFilter.prototype['ShouldCollide'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  return _emscripten_bind_JSContactFilter_ShouldCollide_2(self, arg0, arg1);
};

  JSContactFilter.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_JSContactFilter___destroy___0(self);
}
// b2RevoluteJointDef
function b2RevoluteJointDef() {
  this.ptr = _emscripten_bind_b2RevoluteJointDef_b2RevoluteJointDef_0();
  getCache(b2RevoluteJointDef)[this.ptr] = this;
};
b2RevoluteJointDef.prototype = Object.create(b2JointDef.prototype);
b2RevoluteJointDef.prototype.constructor = b2RevoluteJointDef;
b2RevoluteJointDef.prototype.__class__ = b2RevoluteJointDef;
b2RevoluteJointDef.__cache__ = {};
Module['b2RevoluteJointDef'] = b2RevoluteJointDef;

b2RevoluteJointDef.prototype['Initialize'] = function(arg0, arg1, arg2) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  _emscripten_bind_b2RevoluteJointDef_Initialize_3(self, arg0, arg1, arg2);
};

  b2RevoluteJointDef.prototype['get_localAnchorA']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2RevoluteJointDef_get_localAnchorA_0(self), b2Vec2);
}
    b2RevoluteJointDef.prototype['set_localAnchorA']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RevoluteJointDef_set_localAnchorA_1(self, arg0);
}
  b2RevoluteJointDef.prototype['get_localAnchorB']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2RevoluteJointDef_get_localAnchorB_0(self), b2Vec2);
}
    b2RevoluteJointDef.prototype['set_localAnchorB']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RevoluteJointDef_set_localAnchorB_1(self, arg0);
}
  b2RevoluteJointDef.prototype['get_referenceAngle']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2RevoluteJointDef_get_referenceAngle_0(self);
}
    b2RevoluteJointDef.prototype['set_referenceAngle']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RevoluteJointDef_set_referenceAngle_1(self, arg0);
}
  b2RevoluteJointDef.prototype['get_enableLimit']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2RevoluteJointDef_get_enableLimit_0(self);
}
    b2RevoluteJointDef.prototype['set_enableLimit']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RevoluteJointDef_set_enableLimit_1(self, arg0);
}
  b2RevoluteJointDef.prototype['get_lowerAngle']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2RevoluteJointDef_get_lowerAngle_0(self);
}
    b2RevoluteJointDef.prototype['set_lowerAngle']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RevoluteJointDef_set_lowerAngle_1(self, arg0);
}
  b2RevoluteJointDef.prototype['get_upperAngle']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2RevoluteJointDef_get_upperAngle_0(self);
}
    b2RevoluteJointDef.prototype['set_upperAngle']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RevoluteJointDef_set_upperAngle_1(self, arg0);
}
  b2RevoluteJointDef.prototype['get_enableMotor']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2RevoluteJointDef_get_enableMotor_0(self);
}
    b2RevoluteJointDef.prototype['set_enableMotor']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RevoluteJointDef_set_enableMotor_1(self, arg0);
}
  b2RevoluteJointDef.prototype['get_motorSpeed']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2RevoluteJointDef_get_motorSpeed_0(self);
}
    b2RevoluteJointDef.prototype['set_motorSpeed']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RevoluteJointDef_set_motorSpeed_1(self, arg0);
}
  b2RevoluteJointDef.prototype['get_maxMotorTorque']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2RevoluteJointDef_get_maxMotorTorque_0(self);
}
    b2RevoluteJointDef.prototype['set_maxMotorTorque']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RevoluteJointDef_set_maxMotorTorque_1(self, arg0);
}
  b2RevoluteJointDef.prototype['get_type']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2RevoluteJointDef_get_type_0(self);
}
    b2RevoluteJointDef.prototype['set_type']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RevoluteJointDef_set_type_1(self, arg0);
}
  b2RevoluteJointDef.prototype['get_userData']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2RevoluteJointDef_get_userData_0(self);
}
    b2RevoluteJointDef.prototype['set_userData']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RevoluteJointDef_set_userData_1(self, arg0);
}
  b2RevoluteJointDef.prototype['get_bodyA']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2RevoluteJointDef_get_bodyA_0(self), b2Body);
}
    b2RevoluteJointDef.prototype['set_bodyA']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RevoluteJointDef_set_bodyA_1(self, arg0);
}
  b2RevoluteJointDef.prototype['get_bodyB']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2RevoluteJointDef_get_bodyB_0(self), b2Body);
}
    b2RevoluteJointDef.prototype['set_bodyB']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RevoluteJointDef_set_bodyB_1(self, arg0);
}
  b2RevoluteJointDef.prototype['get_collideConnected']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2RevoluteJointDef_get_collideConnected_0(self);
}
    b2RevoluteJointDef.prototype['set_collideConnected']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RevoluteJointDef_set_collideConnected_1(self, arg0);
}
  b2RevoluteJointDef.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2RevoluteJointDef___destroy___0(self);
}
// JSDraw
function JSDraw() {
  this.ptr = _emscripten_bind_JSDraw_JSDraw_0();
  getCache(JSDraw)[this.ptr] = this;
};
JSDraw.prototype = Object.create(b2Draw.prototype);
JSDraw.prototype.constructor = JSDraw;
JSDraw.prototype.__class__ = JSDraw;
JSDraw.__cache__ = {};
Module['JSDraw'] = JSDraw;

JSDraw.prototype['DrawPolygon'] = function(arg0, arg1, arg2) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  _emscripten_bind_JSDraw_DrawPolygon_3(self, arg0, arg1, arg2);
};

JSDraw.prototype['DrawSolidPolygon'] = function(arg0, arg1, arg2) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  _emscripten_bind_JSDraw_DrawSolidPolygon_3(self, arg0, arg1, arg2);
};

JSDraw.prototype['DrawCircle'] = function(arg0, arg1, arg2) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  _emscripten_bind_JSDraw_DrawCircle_3(self, arg0, arg1, arg2);
};

JSDraw.prototype['DrawSolidCircle'] = function(arg0, arg1, arg2, arg3) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  if (arg3 && typeof arg3 === 'object') arg3 = arg3.ptr;
  else arg3 = ensureString(arg3);
  _emscripten_bind_JSDraw_DrawSolidCircle_4(self, arg0, arg1, arg2, arg3);
};

JSDraw.prototype['DrawSegment'] = function(arg0, arg1, arg2) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  _emscripten_bind_JSDraw_DrawSegment_3(self, arg0, arg1, arg2);
};

JSDraw.prototype['DrawTransform'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_JSDraw_DrawTransform_1(self, arg0);
};

  JSDraw.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_JSDraw___destroy___0(self);
}
// b2WheelJoint
function b2WheelJoint() { throw "cannot construct a b2WheelJoint, no constructor in IDL" }
b2WheelJoint.prototype = Object.create(b2Joint.prototype);
b2WheelJoint.prototype.constructor = b2WheelJoint;
b2WheelJoint.prototype.__class__ = b2WheelJoint;
b2WheelJoint.__cache__ = {};
Module['b2WheelJoint'] = b2WheelJoint;

b2WheelJoint.prototype['GetLocalAnchorA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2WheelJoint_GetLocalAnchorA_0(self), b2Vec2);
};

b2WheelJoint.prototype['GetLocalAnchorB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2WheelJoint_GetLocalAnchorB_0(self), b2Vec2);
};

b2WheelJoint.prototype['GetLocalAxisA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2WheelJoint_GetLocalAxisA_0(self), b2Vec2);
};

b2WheelJoint.prototype['GetJointTranslation'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2WheelJoint_GetJointTranslation_0(self);
};

b2WheelJoint.prototype['GetJointSpeed'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2WheelJoint_GetJointSpeed_0(self);
};

b2WheelJoint.prototype['IsMotorEnabled'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2WheelJoint_IsMotorEnabled_0(self);
};

b2WheelJoint.prototype['EnableMotor'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WheelJoint_EnableMotor_1(self, arg0);
};

b2WheelJoint.prototype['SetMotorSpeed'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WheelJoint_SetMotorSpeed_1(self, arg0);
};

b2WheelJoint.prototype['GetMotorSpeed'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2WheelJoint_GetMotorSpeed_0(self);
};

b2WheelJoint.prototype['SetMaxMotorTorque'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WheelJoint_SetMaxMotorTorque_1(self, arg0);
};

b2WheelJoint.prototype['GetMaxMotorTorque'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2WheelJoint_GetMaxMotorTorque_0(self);
};

b2WheelJoint.prototype['GetMotorTorque'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return _emscripten_bind_b2WheelJoint_GetMotorTorque_1(self, arg0);
};

b2WheelJoint.prototype['SetSpringFrequencyHz'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WheelJoint_SetSpringFrequencyHz_1(self, arg0);
};

b2WheelJoint.prototype['GetSpringFrequencyHz'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2WheelJoint_GetSpringFrequencyHz_0(self);
};

b2WheelJoint.prototype['SetSpringDampingRatio'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WheelJoint_SetSpringDampingRatio_1(self, arg0);
};

b2WheelJoint.prototype['GetSpringDampingRatio'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2WheelJoint_GetSpringDampingRatio_0(self);
};

b2WheelJoint.prototype['GetType'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2WheelJoint_GetType_0(self);
};

b2WheelJoint.prototype['GetBodyA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2WheelJoint_GetBodyA_0(self), b2Body);
};

b2WheelJoint.prototype['GetBodyB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2WheelJoint_GetBodyB_0(self), b2Body);
};

b2WheelJoint.prototype['GetAnchorA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2WheelJoint_GetAnchorA_0(self), b2Vec2);
};

b2WheelJoint.prototype['GetAnchorB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2WheelJoint_GetAnchorB_0(self), b2Vec2);
};

b2WheelJoint.prototype['GetReactionForce'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return wrapPointer(_emscripten_bind_b2WheelJoint_GetReactionForce_1(self, arg0), b2Vec2);
};

b2WheelJoint.prototype['GetReactionTorque'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return _emscripten_bind_b2WheelJoint_GetReactionTorque_1(self, arg0);
};

b2WheelJoint.prototype['GetNext'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2WheelJoint_GetNext_0(self), b2Joint);
};

b2WheelJoint.prototype['GetUserData'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2WheelJoint_GetUserData_0(self);
};

b2WheelJoint.prototype['SetUserData'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WheelJoint_SetUserData_1(self, arg0);
};

b2WheelJoint.prototype['IsActive'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2WheelJoint_IsActive_0(self);
};

b2WheelJoint.prototype['GetCollideConnected'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2WheelJoint_GetCollideConnected_0(self);
};

  b2WheelJoint.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2WheelJoint___destroy___0(self);
}
// b2PulleyJoint
function b2PulleyJoint() { throw "cannot construct a b2PulleyJoint, no constructor in IDL" }
b2PulleyJoint.prototype = Object.create(b2Joint.prototype);
b2PulleyJoint.prototype.constructor = b2PulleyJoint;
b2PulleyJoint.prototype.__class__ = b2PulleyJoint;
b2PulleyJoint.__cache__ = {};
Module['b2PulleyJoint'] = b2PulleyJoint;

b2PulleyJoint.prototype['GetGroundAnchorA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2PulleyJoint_GetGroundAnchorA_0(self), b2Vec2);
};

b2PulleyJoint.prototype['GetGroundAnchorB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2PulleyJoint_GetGroundAnchorB_0(self), b2Vec2);
};

b2PulleyJoint.prototype['GetLengthA'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2PulleyJoint_GetLengthA_0(self);
};

b2PulleyJoint.prototype['GetLengthB'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2PulleyJoint_GetLengthB_0(self);
};

b2PulleyJoint.prototype['GetRatio'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2PulleyJoint_GetRatio_0(self);
};

b2PulleyJoint.prototype['GetType'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2PulleyJoint_GetType_0(self);
};

b2PulleyJoint.prototype['GetBodyA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2PulleyJoint_GetBodyA_0(self), b2Body);
};

b2PulleyJoint.prototype['GetBodyB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2PulleyJoint_GetBodyB_0(self), b2Body);
};

b2PulleyJoint.prototype['GetAnchorA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2PulleyJoint_GetAnchorA_0(self), b2Vec2);
};

b2PulleyJoint.prototype['GetAnchorB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2PulleyJoint_GetAnchorB_0(self), b2Vec2);
};

b2PulleyJoint.prototype['GetReactionForce'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return wrapPointer(_emscripten_bind_b2PulleyJoint_GetReactionForce_1(self, arg0), b2Vec2);
};

b2PulleyJoint.prototype['GetReactionTorque'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return _emscripten_bind_b2PulleyJoint_GetReactionTorque_1(self, arg0);
};

b2PulleyJoint.prototype['GetNext'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2PulleyJoint_GetNext_0(self), b2Joint);
};

b2PulleyJoint.prototype['GetUserData'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2PulleyJoint_GetUserData_0(self);
};

b2PulleyJoint.prototype['SetUserData'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PulleyJoint_SetUserData_1(self, arg0);
};

b2PulleyJoint.prototype['IsActive'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2PulleyJoint_IsActive_0(self);
};

b2PulleyJoint.prototype['GetCollideConnected'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2PulleyJoint_GetCollideConnected_0(self);
};

  b2PulleyJoint.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2PulleyJoint___destroy___0(self);
}
// b2MouseJointDef
function b2MouseJointDef() {
  this.ptr = _emscripten_bind_b2MouseJointDef_b2MouseJointDef_0();
  getCache(b2MouseJointDef)[this.ptr] = this;
};
b2MouseJointDef.prototype = Object.create(b2JointDef.prototype);
b2MouseJointDef.prototype.constructor = b2MouseJointDef;
b2MouseJointDef.prototype.__class__ = b2MouseJointDef;
b2MouseJointDef.__cache__ = {};
Module['b2MouseJointDef'] = b2MouseJointDef;

  b2MouseJointDef.prototype['get_target']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2MouseJointDef_get_target_0(self), b2Vec2);
}
    b2MouseJointDef.prototype['set_target']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2MouseJointDef_set_target_1(self, arg0);
}
  b2MouseJointDef.prototype['get_maxForce']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2MouseJointDef_get_maxForce_0(self);
}
    b2MouseJointDef.prototype['set_maxForce']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2MouseJointDef_set_maxForce_1(self, arg0);
}
  b2MouseJointDef.prototype['get_frequencyHz']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2MouseJointDef_get_frequencyHz_0(self);
}
    b2MouseJointDef.prototype['set_frequencyHz']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2MouseJointDef_set_frequencyHz_1(self, arg0);
}
  b2MouseJointDef.prototype['get_dampingRatio']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2MouseJointDef_get_dampingRatio_0(self);
}
    b2MouseJointDef.prototype['set_dampingRatio']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2MouseJointDef_set_dampingRatio_1(self, arg0);
}
  b2MouseJointDef.prototype['get_type']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2MouseJointDef_get_type_0(self);
}
    b2MouseJointDef.prototype['set_type']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2MouseJointDef_set_type_1(self, arg0);
}
  b2MouseJointDef.prototype['get_userData']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2MouseJointDef_get_userData_0(self);
}
    b2MouseJointDef.prototype['set_userData']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2MouseJointDef_set_userData_1(self, arg0);
}
  b2MouseJointDef.prototype['get_bodyA']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2MouseJointDef_get_bodyA_0(self), b2Body);
}
    b2MouseJointDef.prototype['set_bodyA']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2MouseJointDef_set_bodyA_1(self, arg0);
}
  b2MouseJointDef.prototype['get_bodyB']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2MouseJointDef_get_bodyB_0(self), b2Body);
}
    b2MouseJointDef.prototype['set_bodyB']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2MouseJointDef_set_bodyB_1(self, arg0);
}
  b2MouseJointDef.prototype['get_collideConnected']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2MouseJointDef_get_collideConnected_0(self);
}
    b2MouseJointDef.prototype['set_collideConnected']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2MouseJointDef_set_collideConnected_1(self, arg0);
}
  b2MouseJointDef.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2MouseJointDef___destroy___0(self);
}
// b2Contact
function b2Contact() { throw "cannot construct a b2Contact, no constructor in IDL" }
b2Contact.prototype = Object.create(WrapperObject.prototype);
b2Contact.prototype.constructor = b2Contact;
b2Contact.prototype.__class__ = b2Contact;
b2Contact.__cache__ = {};
Module['b2Contact'] = b2Contact;

b2Contact.prototype['GetManifold'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Contact_GetManifold_0(self), b2Manifold);
};

b2Contact.prototype['IsTouching'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Contact_IsTouching_0(self);
};

b2Contact.prototype['SetEnabled'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Contact_SetEnabled_1(self, arg0);
};

b2Contact.prototype['IsEnabled'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Contact_IsEnabled_0(self);
};

b2Contact.prototype['GetNext'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Contact_GetNext_0(self), b2Contact);
};

b2Contact.prototype['GetFixtureA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Contact_GetFixtureA_0(self), b2Fixture);
};

b2Contact.prototype['GetChildIndexA'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Contact_GetChildIndexA_0(self);
};

b2Contact.prototype['GetFixtureB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Contact_GetFixtureB_0(self), b2Fixture);
};

b2Contact.prototype['GetChildIndexB'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Contact_GetChildIndexB_0(self);
};

b2Contact.prototype['SetFriction'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Contact_SetFriction_1(self, arg0);
};

b2Contact.prototype['GetFriction'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Contact_GetFriction_0(self);
};

b2Contact.prototype['ResetFriction'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2Contact_ResetFriction_0(self);
};

b2Contact.prototype['SetRestitution'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Contact_SetRestitution_1(self, arg0);
};

b2Contact.prototype['GetRestitution'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Contact_GetRestitution_0(self);
};

b2Contact.prototype['ResetRestitution'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2Contact_ResetRestitution_0(self);
};

// b2Shape
function b2Shape() { throw "cannot construct a b2Shape, no constructor in IDL" }
b2Shape.prototype = Object.create(WrapperObject.prototype);
b2Shape.prototype.constructor = b2Shape;
b2Shape.prototype.__class__ = b2Shape;
b2Shape.__cache__ = {};
Module['b2Shape'] = b2Shape;

b2Shape.prototype['GetType'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Shape_GetType_0(self);
};

b2Shape.prototype['GetChildCount'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Shape_GetChildCount_0(self);
};

b2Shape.prototype['TestPoint'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  return _emscripten_bind_b2Shape_TestPoint_2(self, arg0, arg1);
};

b2Shape.prototype['RayCast'] = function(arg0, arg1, arg2, arg3) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  if (arg3 && typeof arg3 === 'object') arg3 = arg3.ptr;
  else arg3 = ensureString(arg3);
  return _emscripten_bind_b2Shape_RayCast_4(self, arg0, arg1, arg2, arg3);
};

b2Shape.prototype['ComputeAABB'] = function(arg0, arg1, arg2) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  _emscripten_bind_b2Shape_ComputeAABB_3(self, arg0, arg1, arg2);
};

b2Shape.prototype['ComputeMass'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  _emscripten_bind_b2Shape_ComputeMass_2(self, arg0, arg1);
};

  b2Shape.prototype['get_m_type']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2Shape_get_m_type_0(self);
}
    b2Shape.prototype['set_m_type']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Shape_set_m_type_1(self, arg0);
}
  b2Shape.prototype['get_m_radius']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2Shape_get_m_radius_0(self);
}
    b2Shape.prototype['set_m_radius']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Shape_set_m_radius_1(self, arg0);
}
  b2Shape.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2Shape___destroy___0(self);
}
// b2DistanceJointDef
function b2DistanceJointDef() {
  this.ptr = _emscripten_bind_b2DistanceJointDef_b2DistanceJointDef_0();
  getCache(b2DistanceJointDef)[this.ptr] = this;
};
b2DistanceJointDef.prototype = Object.create(b2JointDef.prototype);
b2DistanceJointDef.prototype.constructor = b2DistanceJointDef;
b2DistanceJointDef.prototype.__class__ = b2DistanceJointDef;
b2DistanceJointDef.__cache__ = {};
Module['b2DistanceJointDef'] = b2DistanceJointDef;

b2DistanceJointDef.prototype['Initialize'] = function(arg0, arg1, arg2, arg3) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  if (arg3 && typeof arg3 === 'object') arg3 = arg3.ptr;
  else arg3 = ensureString(arg3);
  _emscripten_bind_b2DistanceJointDef_Initialize_4(self, arg0, arg1, arg2, arg3);
};

  b2DistanceJointDef.prototype['get_localAnchorA']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2DistanceJointDef_get_localAnchorA_0(self), b2Vec2);
}
    b2DistanceJointDef.prototype['set_localAnchorA']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2DistanceJointDef_set_localAnchorA_1(self, arg0);
}
  b2DistanceJointDef.prototype['get_localAnchorB']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2DistanceJointDef_get_localAnchorB_0(self), b2Vec2);
}
    b2DistanceJointDef.prototype['set_localAnchorB']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2DistanceJointDef_set_localAnchorB_1(self, arg0);
}
  b2DistanceJointDef.prototype['get_length']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2DistanceJointDef_get_length_0(self);
}
    b2DistanceJointDef.prototype['set_length']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2DistanceJointDef_set_length_1(self, arg0);
}
  b2DistanceJointDef.prototype['get_frequencyHz']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2DistanceJointDef_get_frequencyHz_0(self);
}
    b2DistanceJointDef.prototype['set_frequencyHz']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2DistanceJointDef_set_frequencyHz_1(self, arg0);
}
  b2DistanceJointDef.prototype['get_dampingRatio']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2DistanceJointDef_get_dampingRatio_0(self);
}
    b2DistanceJointDef.prototype['set_dampingRatio']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2DistanceJointDef_set_dampingRatio_1(self, arg0);
}
  b2DistanceJointDef.prototype['get_type']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2DistanceJointDef_get_type_0(self);
}
    b2DistanceJointDef.prototype['set_type']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2DistanceJointDef_set_type_1(self, arg0);
}
  b2DistanceJointDef.prototype['get_userData']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2DistanceJointDef_get_userData_0(self);
}
    b2DistanceJointDef.prototype['set_userData']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2DistanceJointDef_set_userData_1(self, arg0);
}
  b2DistanceJointDef.prototype['get_bodyA']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2DistanceJointDef_get_bodyA_0(self), b2Body);
}
    b2DistanceJointDef.prototype['set_bodyA']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2DistanceJointDef_set_bodyA_1(self, arg0);
}
  b2DistanceJointDef.prototype['get_bodyB']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2DistanceJointDef_get_bodyB_0(self), b2Body);
}
    b2DistanceJointDef.prototype['set_bodyB']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2DistanceJointDef_set_bodyB_1(self, arg0);
}
  b2DistanceJointDef.prototype['get_collideConnected']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2DistanceJointDef_get_collideConnected_0(self);
}
    b2DistanceJointDef.prototype['set_collideConnected']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2DistanceJointDef_set_collideConnected_1(self, arg0);
}
  b2DistanceJointDef.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2DistanceJointDef___destroy___0(self);
}
// b2Body
function b2Body() { throw "cannot construct a b2Body, no constructor in IDL" }
b2Body.prototype = Object.create(WrapperObject.prototype);
b2Body.prototype.constructor = b2Body;
b2Body.prototype.__class__ = b2Body;
b2Body.__cache__ = {};
Module['b2Body'] = b2Body;

b2Body.prototype['CreateFixture'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg1 === undefined) { return wrapPointer(_emscripten_bind_b2Body_CreateFixture_1(self, arg0), b2Fixture) }
  return wrapPointer(_emscripten_bind_b2Body_CreateFixture_2(self, arg0, arg1), b2Fixture);
};

b2Body.prototype['DestroyFixture'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Body_DestroyFixture_1(self, arg0);
};

b2Body.prototype['SetTransform'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  _emscripten_bind_b2Body_SetTransform_2(self, arg0, arg1);
};

b2Body.prototype['GetTransform'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Body_GetTransform_0(self), b2Transform);
};

b2Body.prototype['GetPosition'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Body_GetPosition_0(self), b2Vec2);
};

b2Body.prototype['GetAngle'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Body_GetAngle_0(self);
};

b2Body.prototype['GetWorldCenter'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Body_GetWorldCenter_0(self), b2Vec2);
};

b2Body.prototype['GetLocalCenter'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Body_GetLocalCenter_0(self), b2Vec2);
};

b2Body.prototype['SetLinearVelocity'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Body_SetLinearVelocity_1(self, arg0);
};

b2Body.prototype['GetLinearVelocity'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Body_GetLinearVelocity_0(self), b2Vec2);
};

b2Body.prototype['SetAngularVelocity'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Body_SetAngularVelocity_1(self, arg0);
};

b2Body.prototype['GetAngularVelocity'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Body_GetAngularVelocity_0(self);
};

b2Body.prototype['ApplyForce'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  _emscripten_bind_b2Body_ApplyForce_2(self, arg0, arg1);
};

b2Body.prototype['ApplyForceToCenter'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Body_ApplyForceToCenter_1(self, arg0);
};

b2Body.prototype['ApplyTorque'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Body_ApplyTorque_1(self, arg0);
};

b2Body.prototype['ApplyLinearImpulse'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  _emscripten_bind_b2Body_ApplyLinearImpulse_2(self, arg0, arg1);
};

b2Body.prototype['ApplyAngularImpulse'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Body_ApplyAngularImpulse_1(self, arg0);
};

b2Body.prototype['GetMass'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Body_GetMass_0(self);
};

b2Body.prototype['GetInertia'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Body_GetInertia_0(self);
};

b2Body.prototype['GetMassData'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Body_GetMassData_1(self, arg0);
};

b2Body.prototype['SetMassData'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Body_SetMassData_1(self, arg0);
};

b2Body.prototype['ResetMassData'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2Body_ResetMassData_0(self);
};

b2Body.prototype['GetWorldPoint'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return wrapPointer(_emscripten_bind_b2Body_GetWorldPoint_1(self, arg0), b2Vec2);
};

b2Body.prototype['GetWorldVector'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return wrapPointer(_emscripten_bind_b2Body_GetWorldVector_1(self, arg0), b2Vec2);
};

b2Body.prototype['GetLocalPoint'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return wrapPointer(_emscripten_bind_b2Body_GetLocalPoint_1(self, arg0), b2Vec2);
};

b2Body.prototype['GetLocalVector'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return wrapPointer(_emscripten_bind_b2Body_GetLocalVector_1(self, arg0), b2Vec2);
};

b2Body.prototype['GetLinearVelocityFromWorldPoint'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return wrapPointer(_emscripten_bind_b2Body_GetLinearVelocityFromWorldPoint_1(self, arg0), b2Vec2);
};

b2Body.prototype['GetLinearVelocityFromLocalPoint'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return wrapPointer(_emscripten_bind_b2Body_GetLinearVelocityFromLocalPoint_1(self, arg0), b2Vec2);
};

b2Body.prototype['GetLinearDamping'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Body_GetLinearDamping_0(self);
};

b2Body.prototype['SetLinearDamping'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Body_SetLinearDamping_1(self, arg0);
};

b2Body.prototype['GetAngularDamping'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Body_GetAngularDamping_0(self);
};

b2Body.prototype['SetAngularDamping'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Body_SetAngularDamping_1(self, arg0);
};

b2Body.prototype['GetGravityScale'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Body_GetGravityScale_0(self);
};

b2Body.prototype['SetGravityScale'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Body_SetGravityScale_1(self, arg0);
};

b2Body.prototype['SetType'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Body_SetType_1(self, arg0);
};

b2Body.prototype['GetType'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Body_GetType_0(self);
};

b2Body.prototype['SetBullet'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Body_SetBullet_1(self, arg0);
};

b2Body.prototype['IsBullet'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Body_IsBullet_0(self);
};

b2Body.prototype['SetSleepingAllowed'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Body_SetSleepingAllowed_1(self, arg0);
};

b2Body.prototype['IsSleepingAllowed'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Body_IsSleepingAllowed_0(self);
};

b2Body.prototype['SetAwake'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Body_SetAwake_1(self, arg0);
};

b2Body.prototype['IsAwake'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Body_IsAwake_0(self);
};

b2Body.prototype['SetActive'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Body_SetActive_1(self, arg0);
};

b2Body.prototype['IsActive'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Body_IsActive_0(self);
};

b2Body.prototype['SetFixedRotation'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Body_SetFixedRotation_1(self, arg0);
};

b2Body.prototype['IsFixedRotation'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Body_IsFixedRotation_0(self);
};

b2Body.prototype['GetFixtureList'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Body_GetFixtureList_0(self), b2Fixture);
};

b2Body.prototype['GetJointList'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Body_GetJointList_0(self), b2JointEdge);
};

b2Body.prototype['GetContactList'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Body_GetContactList_0(self), b2ContactEdge);
};

b2Body.prototype['GetNext'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Body_GetNext_0(self), b2Body);
};

b2Body.prototype['GetUserData'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Body_GetUserData_0(self);
};

b2Body.prototype['SetUserData'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Body_SetUserData_1(self, arg0);
};

b2Body.prototype['GetWorld'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Body_GetWorld_0(self), b2World);
};

b2Body.prototype['Dump'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2Body_Dump_0(self);
};

// b2FrictionJoint
function b2FrictionJoint() { throw "cannot construct a b2FrictionJoint, no constructor in IDL" }
b2FrictionJoint.prototype = Object.create(b2Joint.prototype);
b2FrictionJoint.prototype.constructor = b2FrictionJoint;
b2FrictionJoint.prototype.__class__ = b2FrictionJoint;
b2FrictionJoint.__cache__ = {};
Module['b2FrictionJoint'] = b2FrictionJoint;

b2FrictionJoint.prototype['GetLocalAnchorA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2FrictionJoint_GetLocalAnchorA_0(self), b2Vec2);
};

b2FrictionJoint.prototype['GetLocalAnchorB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2FrictionJoint_GetLocalAnchorB_0(self), b2Vec2);
};

b2FrictionJoint.prototype['SetMaxForce'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2FrictionJoint_SetMaxForce_1(self, arg0);
};

b2FrictionJoint.prototype['GetMaxForce'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2FrictionJoint_GetMaxForce_0(self);
};

b2FrictionJoint.prototype['SetMaxTorque'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2FrictionJoint_SetMaxTorque_1(self, arg0);
};

b2FrictionJoint.prototype['GetMaxTorque'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2FrictionJoint_GetMaxTorque_0(self);
};

b2FrictionJoint.prototype['GetType'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2FrictionJoint_GetType_0(self);
};

b2FrictionJoint.prototype['GetBodyA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2FrictionJoint_GetBodyA_0(self), b2Body);
};

b2FrictionJoint.prototype['GetBodyB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2FrictionJoint_GetBodyB_0(self), b2Body);
};

b2FrictionJoint.prototype['GetAnchorA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2FrictionJoint_GetAnchorA_0(self), b2Vec2);
};

b2FrictionJoint.prototype['GetAnchorB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2FrictionJoint_GetAnchorB_0(self), b2Vec2);
};

b2FrictionJoint.prototype['GetReactionForce'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return wrapPointer(_emscripten_bind_b2FrictionJoint_GetReactionForce_1(self, arg0), b2Vec2);
};

b2FrictionJoint.prototype['GetReactionTorque'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return _emscripten_bind_b2FrictionJoint_GetReactionTorque_1(self, arg0);
};

b2FrictionJoint.prototype['GetNext'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2FrictionJoint_GetNext_0(self), b2Joint);
};

b2FrictionJoint.prototype['GetUserData'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2FrictionJoint_GetUserData_0(self);
};

b2FrictionJoint.prototype['SetUserData'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2FrictionJoint_SetUserData_1(self, arg0);
};

b2FrictionJoint.prototype['IsActive'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2FrictionJoint_IsActive_0(self);
};

b2FrictionJoint.prototype['GetCollideConnected'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2FrictionJoint_GetCollideConnected_0(self);
};

  b2FrictionJoint.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2FrictionJoint___destroy___0(self);
}
// b2DestructionListener
function b2DestructionListener() { throw "cannot construct a b2DestructionListener, no constructor in IDL" }
b2DestructionListener.prototype = Object.create(WrapperObject.prototype);
b2DestructionListener.prototype.constructor = b2DestructionListener;
b2DestructionListener.prototype.__class__ = b2DestructionListener;
b2DestructionListener.__cache__ = {};
Module['b2DestructionListener'] = b2DestructionListener;

  b2DestructionListener.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2DestructionListener___destroy___0(self);
}
// b2GearJointDef
function b2GearJointDef() {
  this.ptr = _emscripten_bind_b2GearJointDef_b2GearJointDef_0();
  getCache(b2GearJointDef)[this.ptr] = this;
};
b2GearJointDef.prototype = Object.create(b2JointDef.prototype);
b2GearJointDef.prototype.constructor = b2GearJointDef;
b2GearJointDef.prototype.__class__ = b2GearJointDef;
b2GearJointDef.__cache__ = {};
Module['b2GearJointDef'] = b2GearJointDef;

  b2GearJointDef.prototype['get_joint1']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2GearJointDef_get_joint1_0(self), b2Joint);
}
    b2GearJointDef.prototype['set_joint1']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2GearJointDef_set_joint1_1(self, arg0);
}
  b2GearJointDef.prototype['get_joint2']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2GearJointDef_get_joint2_0(self), b2Joint);
}
    b2GearJointDef.prototype['set_joint2']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2GearJointDef_set_joint2_1(self, arg0);
}
  b2GearJointDef.prototype['get_ratio']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2GearJointDef_get_ratio_0(self);
}
    b2GearJointDef.prototype['set_ratio']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2GearJointDef_set_ratio_1(self, arg0);
}
  b2GearJointDef.prototype['get_type']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2GearJointDef_get_type_0(self);
}
    b2GearJointDef.prototype['set_type']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2GearJointDef_set_type_1(self, arg0);
}
  b2GearJointDef.prototype['get_userData']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2GearJointDef_get_userData_0(self);
}
    b2GearJointDef.prototype['set_userData']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2GearJointDef_set_userData_1(self, arg0);
}
  b2GearJointDef.prototype['get_bodyA']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2GearJointDef_get_bodyA_0(self), b2Body);
}
    b2GearJointDef.prototype['set_bodyA']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2GearJointDef_set_bodyA_1(self, arg0);
}
  b2GearJointDef.prototype['get_bodyB']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2GearJointDef_get_bodyB_0(self), b2Body);
}
    b2GearJointDef.prototype['set_bodyB']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2GearJointDef_set_bodyB_1(self, arg0);
}
  b2GearJointDef.prototype['get_collideConnected']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2GearJointDef_get_collideConnected_0(self);
}
    b2GearJointDef.prototype['set_collideConnected']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2GearJointDef_set_collideConnected_1(self, arg0);
}
  b2GearJointDef.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2GearJointDef___destroy___0(self);
}
// b2FrictionJointDef
function b2FrictionJointDef() {
  this.ptr = _emscripten_bind_b2FrictionJointDef_b2FrictionJointDef_0();
  getCache(b2FrictionJointDef)[this.ptr] = this;
};
b2FrictionJointDef.prototype = Object.create(b2JointDef.prototype);
b2FrictionJointDef.prototype.constructor = b2FrictionJointDef;
b2FrictionJointDef.prototype.__class__ = b2FrictionJointDef;
b2FrictionJointDef.__cache__ = {};
Module['b2FrictionJointDef'] = b2FrictionJointDef;

b2FrictionJointDef.prototype['Initialize'] = function(arg0, arg1, arg2) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  _emscripten_bind_b2FrictionJointDef_Initialize_3(self, arg0, arg1, arg2);
};

  b2FrictionJointDef.prototype['get_localAnchorA']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2FrictionJointDef_get_localAnchorA_0(self), b2Vec2);
}
    b2FrictionJointDef.prototype['set_localAnchorA']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2FrictionJointDef_set_localAnchorA_1(self, arg0);
}
  b2FrictionJointDef.prototype['get_localAnchorB']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2FrictionJointDef_get_localAnchorB_0(self), b2Vec2);
}
    b2FrictionJointDef.prototype['set_localAnchorB']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2FrictionJointDef_set_localAnchorB_1(self, arg0);
}
  b2FrictionJointDef.prototype['get_maxForce']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2FrictionJointDef_get_maxForce_0(self);
}
    b2FrictionJointDef.prototype['set_maxForce']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2FrictionJointDef_set_maxForce_1(self, arg0);
}
  b2FrictionJointDef.prototype['get_maxTorque']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2FrictionJointDef_get_maxTorque_0(self);
}
    b2FrictionJointDef.prototype['set_maxTorque']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2FrictionJointDef_set_maxTorque_1(self, arg0);
}
  b2FrictionJointDef.prototype['get_type']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2FrictionJointDef_get_type_0(self);
}
    b2FrictionJointDef.prototype['set_type']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2FrictionJointDef_set_type_1(self, arg0);
}
  b2FrictionJointDef.prototype['get_userData']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2FrictionJointDef_get_userData_0(self);
}
    b2FrictionJointDef.prototype['set_userData']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2FrictionJointDef_set_userData_1(self, arg0);
}
  b2FrictionJointDef.prototype['get_bodyA']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2FrictionJointDef_get_bodyA_0(self), b2Body);
}
    b2FrictionJointDef.prototype['set_bodyA']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2FrictionJointDef_set_bodyA_1(self, arg0);
}
  b2FrictionJointDef.prototype['get_bodyB']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2FrictionJointDef_get_bodyB_0(self), b2Body);
}
    b2FrictionJointDef.prototype['set_bodyB']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2FrictionJointDef_set_bodyB_1(self, arg0);
}
  b2FrictionJointDef.prototype['get_collideConnected']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2FrictionJointDef_get_collideConnected_0(self);
}
    b2FrictionJointDef.prototype['set_collideConnected']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2FrictionJointDef_set_collideConnected_1(self, arg0);
}
  b2FrictionJointDef.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2FrictionJointDef___destroy___0(self);
}
// b2ContactFilter
function b2ContactFilter() { throw "cannot construct a b2ContactFilter, no constructor in IDL" }
b2ContactFilter.prototype = Object.create(WrapperObject.prototype);
b2ContactFilter.prototype.constructor = b2ContactFilter;
b2ContactFilter.prototype.__class__ = b2ContactFilter;
b2ContactFilter.__cache__ = {};
Module['b2ContactFilter'] = b2ContactFilter;

  b2ContactFilter.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2ContactFilter___destroy___0(self);
}
// b2ContactEdge
function b2ContactEdge() {
  this.ptr = _emscripten_bind_b2ContactEdge_b2ContactEdge_0();
  getCache(b2ContactEdge)[this.ptr] = this;
};
b2ContactEdge.prototype = Object.create(WrapperObject.prototype);
b2ContactEdge.prototype.constructor = b2ContactEdge;
b2ContactEdge.prototype.__class__ = b2ContactEdge;
b2ContactEdge.__cache__ = {};
Module['b2ContactEdge'] = b2ContactEdge;

  b2ContactEdge.prototype['get_other']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2ContactEdge_get_other_0(self), b2Body);
}
    b2ContactEdge.prototype['set_other']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2ContactEdge_set_other_1(self, arg0);
}
  b2ContactEdge.prototype['get_contact']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2ContactEdge_get_contact_0(self), b2Contact);
}
    b2ContactEdge.prototype['set_contact']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2ContactEdge_set_contact_1(self, arg0);
}
  b2ContactEdge.prototype['get_prev']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2ContactEdge_get_prev_0(self), b2ContactEdge);
}
    b2ContactEdge.prototype['set_prev']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2ContactEdge_set_prev_1(self, arg0);
}
  b2ContactEdge.prototype['get_next']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2ContactEdge_get_next_0(self), b2ContactEdge);
}
    b2ContactEdge.prototype['set_next']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2ContactEdge_set_next_1(self, arg0);
}
  b2ContactEdge.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2ContactEdge___destroy___0(self);
}
// b2RopeJointDef
function b2RopeJointDef() {
  this.ptr = _emscripten_bind_b2RopeJointDef_b2RopeJointDef_0();
  getCache(b2RopeJointDef)[this.ptr] = this;
};
b2RopeJointDef.prototype = Object.create(b2JointDef.prototype);
b2RopeJointDef.prototype.constructor = b2RopeJointDef;
b2RopeJointDef.prototype.__class__ = b2RopeJointDef;
b2RopeJointDef.__cache__ = {};
Module['b2RopeJointDef'] = b2RopeJointDef;

  b2RopeJointDef.prototype['get_localAnchorA']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2RopeJointDef_get_localAnchorA_0(self), b2Vec2);
}
    b2RopeJointDef.prototype['set_localAnchorA']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RopeJointDef_set_localAnchorA_1(self, arg0);
}
  b2RopeJointDef.prototype['get_localAnchorB']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2RopeJointDef_get_localAnchorB_0(self), b2Vec2);
}
    b2RopeJointDef.prototype['set_localAnchorB']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RopeJointDef_set_localAnchorB_1(self, arg0);
}
  b2RopeJointDef.prototype['get_maxLength']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2RopeJointDef_get_maxLength_0(self);
}
    b2RopeJointDef.prototype['set_maxLength']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RopeJointDef_set_maxLength_1(self, arg0);
}
  b2RopeJointDef.prototype['get_type']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2RopeJointDef_get_type_0(self);
}
    b2RopeJointDef.prototype['set_type']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RopeJointDef_set_type_1(self, arg0);
}
  b2RopeJointDef.prototype['get_userData']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2RopeJointDef_get_userData_0(self);
}
    b2RopeJointDef.prototype['set_userData']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RopeJointDef_set_userData_1(self, arg0);
}
  b2RopeJointDef.prototype['get_bodyA']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2RopeJointDef_get_bodyA_0(self), b2Body);
}
    b2RopeJointDef.prototype['set_bodyA']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RopeJointDef_set_bodyA_1(self, arg0);
}
  b2RopeJointDef.prototype['get_bodyB']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2RopeJointDef_get_bodyB_0(self), b2Body);
}
    b2RopeJointDef.prototype['set_bodyB']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RopeJointDef_set_bodyB_1(self, arg0);
}
  b2RopeJointDef.prototype['get_collideConnected']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2RopeJointDef_get_collideConnected_0(self);
}
    b2RopeJointDef.prototype['set_collideConnected']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RopeJointDef_set_collideConnected_1(self, arg0);
}
  b2RopeJointDef.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2RopeJointDef___destroy___0(self);
}
// b2ShapeType
Module['b2Shape']['e_circle'] = _emscripten_enum_b2ShapeType_e_circle();
Module['b2Shape']['e_edge'] = _emscripten_enum_b2ShapeType_e_edge();
Module['b2Shape']['e_polygon'] = _emscripten_enum_b2ShapeType_e_polygon();
Module['b2Shape']['e_chain'] = _emscripten_enum_b2ShapeType_e_chain();
Module['b2Shape']['e_typeCount'] = _emscripten_enum_b2ShapeType_e_typeCount();

// b2JointType
Module['e_unknownJoint'] = _emscripten_enum_b2JointType_e_unknownJoint();
Module['e_revoluteJoint'] = _emscripten_enum_b2JointType_e_revoluteJoint();
Module['e_prismaticJoint'] = _emscripten_enum_b2JointType_e_prismaticJoint();
Module['e_distanceJoint'] = _emscripten_enum_b2JointType_e_distanceJoint();
Module['e_pulleyJoint'] = _emscripten_enum_b2JointType_e_pulleyJoint();
Module['e_mouseJoint'] = _emscripten_enum_b2JointType_e_mouseJoint();
Module['e_gearJoint'] = _emscripten_enum_b2JointType_e_gearJoint();
Module['e_wheelJoint'] = _emscripten_enum_b2JointType_e_wheelJoint();
Module['e_weldJoint'] = _emscripten_enum_b2JointType_e_weldJoint();
Module['e_frictionJoint'] = _emscripten_enum_b2JointType_e_frictionJoint();
Module['e_ropeJoint'] = _emscripten_enum_b2JointType_e_ropeJoint();

// b2LimitState
Module['e_inactiveLimit'] = _emscripten_enum_b2LimitState_e_inactiveLimit();
Module['e_atLowerLimit'] = _emscripten_enum_b2LimitState_e_atLowerLimit();
Module['e_atUpperLimit'] = _emscripten_enum_b2LimitState_e_atUpperLimit();
Module['e_equalLimits'] = _emscripten_enum_b2LimitState_e_equalLimits();

// b2ManifoldType
Module['b2Manifold']['e_circles'] = _emscripten_enum_b2ManifoldType_e_circles();
Module['b2Manifold']['e_faceA'] = _emscripten_enum_b2ManifoldType_e_faceA();
Module['b2Manifold']['e_faceB'] = _emscripten_enum_b2ManifoldType_e_faceB();

// b2BodyType
Module['b2_staticBody'] = _emscripten_enum_b2BodyType_b2_staticBody();
Module['b2_kinematicBody'] = _emscripten_enum_b2BodyType_b2_kinematicBody();
Module['b2_dynamicBody'] = _emscripten_enum_b2BodyType_b2_dynamicBody();

// b2DrawFlag
Module['b2Draw']['e_shapeBit'] = _emscripten_enum_b2DrawFlag_e_shapeBit();
Module['b2Draw']['e_jointBit'] = _emscripten_enum_b2DrawFlag_e_jointBit();
Module['b2Draw']['e_aabbBit'] = _emscripten_enum_b2DrawFlag_e_aabbBit();
Module['b2Draw']['e_pairBit'] = _emscripten_enum_b2DrawFlag_e_pairBit();
Module['b2Draw']['e_centerOfMassBit'] = _emscripten_enum_b2DrawFlag_e_centerOfMassBit();

// b2ContactFeatureType
Module['b2ContactFeature']['e_vertex'] = _emscripten_enum_b2ContactFeatureType_e_vertex();
Module['b2ContactFeature']['e_face'] = _emscripten_enum_b2ContactFeatureType_e_face();



// Bindings utilities

function WrapperObject() {
}
WrapperObject.prototype = Object.create(WrapperObject.prototype);
WrapperObject.prototype.constructor = WrapperObject;
WrapperObject.prototype.__class__ = WrapperObject;
WrapperObject.__cache__ = {};
Module['WrapperObject'] = WrapperObject;

function getCache(__class__) {
  return (__class__ || WrapperObject).__cache__;
}
Module['getCache'] = getCache;

function wrapPointer(ptr, __class__) {
  var cache = getCache(__class__);
  var ret = cache[ptr];
  if (ret) return ret;
  ret = Object.create((__class__ || WrapperObject).prototype);
  ret.ptr = ptr;
  return cache[ptr] = ret;
}
Module['wrapPointer'] = wrapPointer;

function castObject(obj, __class__) {
  return wrapPointer(obj.ptr, __class__);
}
Module['castObject'] = castObject;

Module['NULL'] = wrapPointer(0);

function destroy(obj) {
  if (!obj['__destroy__']) throw 'Error: Cannot destroy object. (Did you create it yourself?)';
  obj['__destroy__']();
  // Remove from cache, so the object can be GC'd and refs added onto it released
  delete getCache(obj.__class__)[obj.ptr];
}
Module['destroy'] = destroy;

function compare(obj1, obj2) {
  return obj1.ptr === obj2.ptr;
}
Module['compare'] = compare;

function getPointer(obj) {
  return obj.ptr;
}
Module['getPointer'] = getPointer;

function getClass(obj) {
  return obj.__class__;
}
Module['getClass'] = getClass;

// Converts a value into a C-style string.
function ensureString(value) {
  if (typeof value == 'string') return allocate(intArrayFromString(value), 'i8', ALLOC_STACK);
  return value;
}


// b2Color
function b2Color(arg0, arg1, arg2) {
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  if (arg0 === undefined) { this.ptr = _emscripten_bind_b2Color_b2Color_0(); getCache(b2Color)[this.ptr] = this;return }
  if (arg1 === undefined) { this.ptr = _emscripten_bind_b2Color_b2Color_1(arg0); getCache(b2Color)[this.ptr] = this;return }
  if (arg2 === undefined) { this.ptr = _emscripten_bind_b2Color_b2Color_2(arg0, arg1); getCache(b2Color)[this.ptr] = this;return }
  this.ptr = _emscripten_bind_b2Color_b2Color_3(arg0, arg1, arg2);
  getCache(b2Color)[this.ptr] = this;
};
b2Color.prototype = Object.create(WrapperObject.prototype);
b2Color.prototype.constructor = b2Color;
b2Color.prototype.__class__ = b2Color;
b2Color.__cache__ = {};
Module['b2Color'] = b2Color;

b2Color.prototype['Set'] = function(arg0, arg1, arg2) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  _emscripten_bind_b2Color_Set_3(self, arg0, arg1, arg2);
};

  b2Color.prototype['get_r']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2Color_get_r_0(self);
}
    b2Color.prototype['set_r']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Color_set_r_1(self, arg0);
}
  b2Color.prototype['get_g']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2Color_get_g_0(self);
}
    b2Color.prototype['set_g']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Color_set_g_1(self, arg0);
}
  b2Color.prototype['get_b']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2Color_get_b_0(self);
}
    b2Color.prototype['set_b']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Color_set_b_1(self, arg0);
}
  b2Color.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2Color___destroy___0(self);
}
// JSDestructionListener
function JSDestructionListener() {
  this.ptr = _emscripten_bind_JSDestructionListener_JSDestructionListener_0();
  getCache(JSDestructionListener)[this.ptr] = this;
};
JSDestructionListener.prototype = Object.create(b2DestructionListenerWrapper.prototype);
JSDestructionListener.prototype.constructor = JSDestructionListener;
JSDestructionListener.prototype.__class__ = JSDestructionListener;
JSDestructionListener.__cache__ = {};
Module['JSDestructionListener'] = JSDestructionListener;

JSDestructionListener.prototype['SayGoodbyeJoint'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_JSDestructionListener_SayGoodbyeJoint_1(self, arg0);
};

JSDestructionListener.prototype['SayGoodbyeFixture'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_JSDestructionListener_SayGoodbyeFixture_1(self, arg0);
};

  JSDestructionListener.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_JSDestructionListener___destroy___0(self);
}
// b2ContactImpulse
function b2ContactImpulse() { throw "cannot construct a b2ContactImpulse, no constructor in IDL" }
b2ContactImpulse.prototype = Object.create(WrapperObject.prototype);
b2ContactImpulse.prototype.constructor = b2ContactImpulse;
b2ContactImpulse.prototype.__class__ = b2ContactImpulse;
b2ContactImpulse.__cache__ = {};
Module['b2ContactImpulse'] = b2ContactImpulse;

  b2ContactImpulse.prototype['get_count']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2ContactImpulse_get_count_0(self);
}
    b2ContactImpulse.prototype['set_count']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2ContactImpulse_set_count_1(self, arg0);
}
  b2ContactImpulse.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2ContactImpulse___destroy___0(self);
}
// b2DistanceJoint
function b2DistanceJoint() { throw "cannot construct a b2DistanceJoint, no constructor in IDL" }
b2DistanceJoint.prototype = Object.create(b2Joint.prototype);
b2DistanceJoint.prototype.constructor = b2DistanceJoint;
b2DistanceJoint.prototype.__class__ = b2DistanceJoint;
b2DistanceJoint.__cache__ = {};
Module['b2DistanceJoint'] = b2DistanceJoint;

b2DistanceJoint.prototype['GetLocalAnchorA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2DistanceJoint_GetLocalAnchorA_0(self), b2Vec2);
};

b2DistanceJoint.prototype['GetLocalAnchorB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2DistanceJoint_GetLocalAnchorB_0(self), b2Vec2);
};

b2DistanceJoint.prototype['SetLength'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2DistanceJoint_SetLength_1(self, arg0);
};

b2DistanceJoint.prototype['GetLength'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2DistanceJoint_GetLength_0(self);
};

b2DistanceJoint.prototype['SetFrequency'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2DistanceJoint_SetFrequency_1(self, arg0);
};

b2DistanceJoint.prototype['GetFrequency'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2DistanceJoint_GetFrequency_0(self);
};

b2DistanceJoint.prototype['SetDampingRatio'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2DistanceJoint_SetDampingRatio_1(self, arg0);
};

b2DistanceJoint.prototype['GetDampingRatio'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2DistanceJoint_GetDampingRatio_0(self);
};

b2DistanceJoint.prototype['GetType'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2DistanceJoint_GetType_0(self);
};

b2DistanceJoint.prototype['GetBodyA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2DistanceJoint_GetBodyA_0(self), b2Body);
};

b2DistanceJoint.prototype['GetBodyB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2DistanceJoint_GetBodyB_0(self), b2Body);
};

b2DistanceJoint.prototype['GetAnchorA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2DistanceJoint_GetAnchorA_0(self), b2Vec2);
};

b2DistanceJoint.prototype['GetAnchorB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2DistanceJoint_GetAnchorB_0(self), b2Vec2);
};

b2DistanceJoint.prototype['GetReactionForce'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return wrapPointer(_emscripten_bind_b2DistanceJoint_GetReactionForce_1(self, arg0), b2Vec2);
};

b2DistanceJoint.prototype['GetReactionTorque'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return _emscripten_bind_b2DistanceJoint_GetReactionTorque_1(self, arg0);
};

b2DistanceJoint.prototype['GetNext'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2DistanceJoint_GetNext_0(self), b2Joint);
};

b2DistanceJoint.prototype['GetUserData'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2DistanceJoint_GetUserData_0(self);
};

b2DistanceJoint.prototype['SetUserData'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2DistanceJoint_SetUserData_1(self, arg0);
};

b2DistanceJoint.prototype['IsActive'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2DistanceJoint_IsActive_0(self);
};

b2DistanceJoint.prototype['GetCollideConnected'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2DistanceJoint_GetCollideConnected_0(self);
};

  b2DistanceJoint.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2DistanceJoint___destroy___0(self);
}
// b2Mat33
function b2Mat33(arg0, arg1, arg2) {
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  if (arg0 === undefined) { this.ptr = _emscripten_bind_b2Mat33_b2Mat33_0(); getCache(b2Mat33)[this.ptr] = this;return }
  if (arg1 === undefined) { this.ptr = _emscripten_bind_b2Mat33_b2Mat33_1(arg0); getCache(b2Mat33)[this.ptr] = this;return }
  if (arg2 === undefined) { this.ptr = _emscripten_bind_b2Mat33_b2Mat33_2(arg0, arg1); getCache(b2Mat33)[this.ptr] = this;return }
  this.ptr = _emscripten_bind_b2Mat33_b2Mat33_3(arg0, arg1, arg2);
  getCache(b2Mat33)[this.ptr] = this;
};
b2Mat33.prototype = Object.create(WrapperObject.prototype);
b2Mat33.prototype.constructor = b2Mat33;
b2Mat33.prototype.__class__ = b2Mat33;
b2Mat33.__cache__ = {};
Module['b2Mat33'] = b2Mat33;

b2Mat33.prototype['SetZero'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2Mat33_SetZero_0(self);
};

b2Mat33.prototype['Solve33'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return wrapPointer(_emscripten_bind_b2Mat33_Solve33_1(self, arg0), b2Vec3);
};

b2Mat33.prototype['Solve22'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return wrapPointer(_emscripten_bind_b2Mat33_Solve22_1(self, arg0), b2Vec2);
};

b2Mat33.prototype['GetInverse22'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Mat33_GetInverse22_1(self, arg0);
};

b2Mat33.prototype['GetSymInverse33'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Mat33_GetSymInverse33_1(self, arg0);
};

  b2Mat33.prototype['get_ex']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Mat33_get_ex_0(self), b2Vec3);
}
    b2Mat33.prototype['set_ex']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Mat33_set_ex_1(self, arg0);
}
  b2Mat33.prototype['get_ey']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Mat33_get_ey_0(self), b2Vec3);
}
    b2Mat33.prototype['set_ey']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Mat33_set_ey_1(self, arg0);
}
  b2Mat33.prototype['get_ez']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Mat33_get_ez_0(self), b2Vec3);
}
    b2Mat33.prototype['set_ez']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Mat33_set_ez_1(self, arg0);
}
  b2Mat33.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2Mat33___destroy___0(self);
}
// b2Fixture
function b2Fixture() { throw "cannot construct a b2Fixture, no constructor in IDL" }
b2Fixture.prototype = Object.create(WrapperObject.prototype);
b2Fixture.prototype.constructor = b2Fixture;
b2Fixture.prototype.__class__ = b2Fixture;
b2Fixture.__cache__ = {};
Module['b2Fixture'] = b2Fixture;

b2Fixture.prototype['GetType'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Fixture_GetType_0(self);
};

b2Fixture.prototype['GetShape'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Fixture_GetShape_0(self), b2Shape);
};

b2Fixture.prototype['SetSensor'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Fixture_SetSensor_1(self, arg0);
};

b2Fixture.prototype['IsSensor'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Fixture_IsSensor_0(self);
};

b2Fixture.prototype['SetFilterData'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Fixture_SetFilterData_1(self, arg0);
};

b2Fixture.prototype['GetFilterData'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Fixture_GetFilterData_0(self), b2Filter);
};

b2Fixture.prototype['Refilter'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2Fixture_Refilter_0(self);
};

b2Fixture.prototype['GetBody'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Fixture_GetBody_0(self), b2Body);
};

b2Fixture.prototype['GetNext'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Fixture_GetNext_0(self), b2Fixture);
};

b2Fixture.prototype['GetUserData'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Fixture_GetUserData_0(self);
};

b2Fixture.prototype['SetUserData'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Fixture_SetUserData_1(self, arg0);
};

b2Fixture.prototype['TestPoint'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return _emscripten_bind_b2Fixture_TestPoint_1(self, arg0);
};

b2Fixture.prototype['RayCast'] = function(arg0, arg1, arg2) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  return _emscripten_bind_b2Fixture_RayCast_3(self, arg0, arg1, arg2);
};

b2Fixture.prototype['GetMassData'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Fixture_GetMassData_1(self, arg0);
};

b2Fixture.prototype['SetDensity'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Fixture_SetDensity_1(self, arg0);
};

b2Fixture.prototype['GetDensity'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Fixture_GetDensity_0(self);
};

b2Fixture.prototype['GetFriction'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Fixture_GetFriction_0(self);
};

b2Fixture.prototype['SetFriction'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Fixture_SetFriction_1(self, arg0);
};

b2Fixture.prototype['GetRestitution'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Fixture_GetRestitution_0(self);
};

b2Fixture.prototype['SetRestitution'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Fixture_SetRestitution_1(self, arg0);
};

b2Fixture.prototype['GetAABB'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return wrapPointer(_emscripten_bind_b2Fixture_GetAABB_1(self, arg0), b2AABB);
};

b2Fixture.prototype['Dump'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Fixture_Dump_1(self, arg0);
};

  b2Fixture.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2Fixture___destroy___0(self);
}
// b2Filter
function b2Filter() {
  this.ptr = _emscripten_bind_b2Filter_b2Filter_0();
  getCache(b2Filter)[this.ptr] = this;
};
b2Filter.prototype = Object.create(WrapperObject.prototype);
b2Filter.prototype.constructor = b2Filter;
b2Filter.prototype.__class__ = b2Filter;
b2Filter.__cache__ = {};
Module['b2Filter'] = b2Filter;

  b2Filter.prototype['get_categoryBits']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2Filter_get_categoryBits_0(self);
}
    b2Filter.prototype['set_categoryBits']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Filter_set_categoryBits_1(self, arg0);
}
  b2Filter.prototype['get_maskBits']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2Filter_get_maskBits_0(self);
}
    b2Filter.prototype['set_maskBits']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Filter_set_maskBits_1(self, arg0);
}
  b2Filter.prototype['get_groupIndex']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2Filter_get_groupIndex_0(self);
}
    b2Filter.prototype['set_groupIndex']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Filter_set_groupIndex_1(self, arg0);
}
  b2Filter.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2Filter___destroy___0(self);
}
// JSQueryCallback
function JSQueryCallback() {
  this.ptr = _emscripten_bind_JSQueryCallback_JSQueryCallback_0();
  getCache(JSQueryCallback)[this.ptr] = this;
};
JSQueryCallback.prototype = Object.create(b2QueryCallback.prototype);
JSQueryCallback.prototype.constructor = JSQueryCallback;
JSQueryCallback.prototype.__class__ = JSQueryCallback;
JSQueryCallback.__cache__ = {};
Module['JSQueryCallback'] = JSQueryCallback;

JSQueryCallback.prototype['ReportFixture'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return _emscripten_bind_JSQueryCallback_ReportFixture_1(self, arg0);
};

  JSQueryCallback.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_JSQueryCallback___destroy___0(self);
}
// b2MouseJoint
function b2MouseJoint() { throw "cannot construct a b2MouseJoint, no constructor in IDL" }
b2MouseJoint.prototype = Object.create(b2Joint.prototype);
b2MouseJoint.prototype.constructor = b2MouseJoint;
b2MouseJoint.prototype.__class__ = b2MouseJoint;
b2MouseJoint.__cache__ = {};
Module['b2MouseJoint'] = b2MouseJoint;

b2MouseJoint.prototype['SetTarget'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2MouseJoint_SetTarget_1(self, arg0);
};

b2MouseJoint.prototype['GetTarget'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2MouseJoint_GetTarget_0(self), b2Vec2);
};

b2MouseJoint.prototype['SetMaxForce'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2MouseJoint_SetMaxForce_1(self, arg0);
};

b2MouseJoint.prototype['GetMaxForce'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2MouseJoint_GetMaxForce_0(self);
};

b2MouseJoint.prototype['SetFrequency'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2MouseJoint_SetFrequency_1(self, arg0);
};

b2MouseJoint.prototype['GetFrequency'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2MouseJoint_GetFrequency_0(self);
};

b2MouseJoint.prototype['SetDampingRatio'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2MouseJoint_SetDampingRatio_1(self, arg0);
};

b2MouseJoint.prototype['GetDampingRatio'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2MouseJoint_GetDampingRatio_0(self);
};

b2MouseJoint.prototype['GetType'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2MouseJoint_GetType_0(self);
};

b2MouseJoint.prototype['GetBodyA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2MouseJoint_GetBodyA_0(self), b2Body);
};

b2MouseJoint.prototype['GetBodyB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2MouseJoint_GetBodyB_0(self), b2Body);
};

b2MouseJoint.prototype['GetAnchorA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2MouseJoint_GetAnchorA_0(self), b2Vec2);
};

b2MouseJoint.prototype['GetAnchorB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2MouseJoint_GetAnchorB_0(self), b2Vec2);
};

b2MouseJoint.prototype['GetReactionForce'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return wrapPointer(_emscripten_bind_b2MouseJoint_GetReactionForce_1(self, arg0), b2Vec2);
};

b2MouseJoint.prototype['GetReactionTorque'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return _emscripten_bind_b2MouseJoint_GetReactionTorque_1(self, arg0);
};

b2MouseJoint.prototype['GetNext'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2MouseJoint_GetNext_0(self), b2Joint);
};

b2MouseJoint.prototype['GetUserData'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2MouseJoint_GetUserData_0(self);
};

b2MouseJoint.prototype['SetUserData'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2MouseJoint_SetUserData_1(self, arg0);
};

b2MouseJoint.prototype['IsActive'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2MouseJoint_IsActive_0(self);
};

b2MouseJoint.prototype['GetCollideConnected'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2MouseJoint_GetCollideConnected_0(self);
};

  b2MouseJoint.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2MouseJoint___destroy___0(self);
}
// b2Rot
function b2Rot(arg0) {
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg0 === undefined) { this.ptr = _emscripten_bind_b2Rot_b2Rot_0(); getCache(b2Rot)[this.ptr] = this;return }
  this.ptr = _emscripten_bind_b2Rot_b2Rot_1(arg0);
  getCache(b2Rot)[this.ptr] = this;
};
b2Rot.prototype = Object.create(WrapperObject.prototype);
b2Rot.prototype.constructor = b2Rot;
b2Rot.prototype.__class__ = b2Rot;
b2Rot.__cache__ = {};
Module['b2Rot'] = b2Rot;

b2Rot.prototype['Set'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Rot_Set_1(self, arg0);
};

b2Rot.prototype['SetIdentity'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2Rot_SetIdentity_0(self);
};

b2Rot.prototype['GetAngle'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Rot_GetAngle_0(self);
};

b2Rot.prototype['GetXAxis'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Rot_GetXAxis_0(self), b2Vec2);
};

b2Rot.prototype['GetYAxis'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Rot_GetYAxis_0(self), b2Vec2);
};

  b2Rot.prototype['get_s']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2Rot_get_s_0(self);
}
    b2Rot.prototype['set_s']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Rot_set_s_1(self, arg0);
}
  b2Rot.prototype['get_c']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2Rot_get_c_0(self);
}
    b2Rot.prototype['set_c']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Rot_set_c_1(self, arg0);
}
  b2Rot.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2Rot___destroy___0(self);
}
// b2Profile
function b2Profile() { throw "cannot construct a b2Profile, no constructor in IDL" }
b2Profile.prototype = Object.create(WrapperObject.prototype);
b2Profile.prototype.constructor = b2Profile;
b2Profile.prototype.__class__ = b2Profile;
b2Profile.__cache__ = {};
Module['b2Profile'] = b2Profile;

  b2Profile.prototype['get_step']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2Profile_get_step_0(self);
}
    b2Profile.prototype['set_step']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Profile_set_step_1(self, arg0);
}
  b2Profile.prototype['get_collide']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2Profile_get_collide_0(self);
}
    b2Profile.prototype['set_collide']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Profile_set_collide_1(self, arg0);
}
  b2Profile.prototype['get_solve']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2Profile_get_solve_0(self);
}
    b2Profile.prototype['set_solve']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Profile_set_solve_1(self, arg0);
}
  b2Profile.prototype['get_solveInit']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2Profile_get_solveInit_0(self);
}
    b2Profile.prototype['set_solveInit']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Profile_set_solveInit_1(self, arg0);
}
  b2Profile.prototype['get_solveVelocity']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2Profile_get_solveVelocity_0(self);
}
    b2Profile.prototype['set_solveVelocity']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Profile_set_solveVelocity_1(self, arg0);
}
  b2Profile.prototype['get_solvePosition']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2Profile_get_solvePosition_0(self);
}
    b2Profile.prototype['set_solvePosition']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Profile_set_solvePosition_1(self, arg0);
}
  b2Profile.prototype['get_broadphase']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2Profile_get_broadphase_0(self);
}
    b2Profile.prototype['set_broadphase']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Profile_set_broadphase_1(self, arg0);
}
  b2Profile.prototype['get_solveTOI']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2Profile_get_solveTOI_0(self);
}
    b2Profile.prototype['set_solveTOI']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Profile_set_solveTOI_1(self, arg0);
}
  b2Profile.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2Profile___destroy___0(self);
}
// VoidPtr
function VoidPtr() { throw "cannot construct a VoidPtr, no constructor in IDL" }
VoidPtr.prototype = Object.create(WrapperObject.prototype);
VoidPtr.prototype.constructor = VoidPtr;
VoidPtr.prototype.__class__ = VoidPtr;
VoidPtr.__cache__ = {};
Module['VoidPtr'] = VoidPtr;

  VoidPtr.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_VoidPtr___destroy___0(self);
}
// b2BodyDef
function b2BodyDef() {
  this.ptr = _emscripten_bind_b2BodyDef_b2BodyDef_0();
  getCache(b2BodyDef)[this.ptr] = this;
};
b2BodyDef.prototype = Object.create(WrapperObject.prototype);
b2BodyDef.prototype.constructor = b2BodyDef;
b2BodyDef.prototype.__class__ = b2BodyDef;
b2BodyDef.__cache__ = {};
Module['b2BodyDef'] = b2BodyDef;

  b2BodyDef.prototype['get_type']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2BodyDef_get_type_0(self);
}
    b2BodyDef.prototype['set_type']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2BodyDef_set_type_1(self, arg0);
}
  b2BodyDef.prototype['get_position']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2BodyDef_get_position_0(self), b2Vec2);
}
    b2BodyDef.prototype['set_position']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2BodyDef_set_position_1(self, arg0);
}
  b2BodyDef.prototype['get_angle']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2BodyDef_get_angle_0(self);
}
    b2BodyDef.prototype['set_angle']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2BodyDef_set_angle_1(self, arg0);
}
  b2BodyDef.prototype['get_linearVelocity']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2BodyDef_get_linearVelocity_0(self), b2Vec2);
}
    b2BodyDef.prototype['set_linearVelocity']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2BodyDef_set_linearVelocity_1(self, arg0);
}
  b2BodyDef.prototype['get_angularVelocity']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2BodyDef_get_angularVelocity_0(self);
}
    b2BodyDef.prototype['set_angularVelocity']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2BodyDef_set_angularVelocity_1(self, arg0);
}
  b2BodyDef.prototype['get_linearDamping']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2BodyDef_get_linearDamping_0(self);
}
    b2BodyDef.prototype['set_linearDamping']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2BodyDef_set_linearDamping_1(self, arg0);
}
  b2BodyDef.prototype['get_angularDamping']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2BodyDef_get_angularDamping_0(self);
}
    b2BodyDef.prototype['set_angularDamping']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2BodyDef_set_angularDamping_1(self, arg0);
}
  b2BodyDef.prototype['get_allowSleep']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2BodyDef_get_allowSleep_0(self);
}
    b2BodyDef.prototype['set_allowSleep']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2BodyDef_set_allowSleep_1(self, arg0);
}
  b2BodyDef.prototype['get_awake']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2BodyDef_get_awake_0(self);
}
    b2BodyDef.prototype['set_awake']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2BodyDef_set_awake_1(self, arg0);
}
  b2BodyDef.prototype['get_fixedRotation']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2BodyDef_get_fixedRotation_0(self);
}
    b2BodyDef.prototype['set_fixedRotation']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2BodyDef_set_fixedRotation_1(self, arg0);
}
  b2BodyDef.prototype['get_bullet']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2BodyDef_get_bullet_0(self);
}
    b2BodyDef.prototype['set_bullet']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2BodyDef_set_bullet_1(self, arg0);
}
  b2BodyDef.prototype['get_active']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2BodyDef_get_active_0(self);
}
    b2BodyDef.prototype['set_active']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2BodyDef_set_active_1(self, arg0);
}
  b2BodyDef.prototype['get_userData']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2BodyDef_get_userData_0(self);
}
    b2BodyDef.prototype['set_userData']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2BodyDef_set_userData_1(self, arg0);
}
  b2BodyDef.prototype['get_gravityScale']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2BodyDef_get_gravityScale_0(self);
}
    b2BodyDef.prototype['set_gravityScale']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2BodyDef_set_gravityScale_1(self, arg0);
}
  b2BodyDef.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2BodyDef___destroy___0(self);
}
// JSRayCastCallback
function JSRayCastCallback() {
  this.ptr = _emscripten_bind_JSRayCastCallback_JSRayCastCallback_0();
  getCache(JSRayCastCallback)[this.ptr] = this;
};
JSRayCastCallback.prototype = Object.create(b2RayCastCallback.prototype);
JSRayCastCallback.prototype.constructor = JSRayCastCallback;
JSRayCastCallback.prototype.__class__ = JSRayCastCallback;
JSRayCastCallback.__cache__ = {};
Module['JSRayCastCallback'] = JSRayCastCallback;

JSRayCastCallback.prototype['ReportFixture'] = function(arg0, arg1, arg2, arg3) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  if (arg3 && typeof arg3 === 'object') arg3 = arg3.ptr;
  else arg3 = ensureString(arg3);
  return _emscripten_bind_JSRayCastCallback_ReportFixture_4(self, arg0, arg1, arg2, arg3);
};

  JSRayCastCallback.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_JSRayCastCallback___destroy___0(self);
}
// b2ContactFeature
function b2ContactFeature() { throw "cannot construct a b2ContactFeature, no constructor in IDL" }
b2ContactFeature.prototype = Object.create(WrapperObject.prototype);
b2ContactFeature.prototype.constructor = b2ContactFeature;
b2ContactFeature.prototype.__class__ = b2ContactFeature;
b2ContactFeature.__cache__ = {};
Module['b2ContactFeature'] = b2ContactFeature;

  b2ContactFeature.prototype['get_indexA']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2ContactFeature_get_indexA_0(self);
}
    b2ContactFeature.prototype['set_indexA']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2ContactFeature_set_indexA_1(self, arg0);
}
  b2ContactFeature.prototype['get_indexB']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2ContactFeature_get_indexB_0(self);
}
    b2ContactFeature.prototype['set_indexB']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2ContactFeature_set_indexB_1(self, arg0);
}
  b2ContactFeature.prototype['get_typeA']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2ContactFeature_get_typeA_0(self);
}
    b2ContactFeature.prototype['set_typeA']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2ContactFeature_set_typeA_1(self, arg0);
}
  b2ContactFeature.prototype['get_typeB']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2ContactFeature_get_typeB_0(self);
}
    b2ContactFeature.prototype['set_typeB']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2ContactFeature_set_typeB_1(self, arg0);
}
  b2ContactFeature.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2ContactFeature___destroy___0(self);
}
// b2Vec2
function b2Vec2(arg0, arg1) {
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg0 === undefined) { this.ptr = _emscripten_bind_b2Vec2_b2Vec2_0(); getCache(b2Vec2)[this.ptr] = this;return }
  if (arg1 === undefined) { this.ptr = _emscripten_bind_b2Vec2_b2Vec2_1(arg0); getCache(b2Vec2)[this.ptr] = this;return }
  this.ptr = _emscripten_bind_b2Vec2_b2Vec2_2(arg0, arg1);
  getCache(b2Vec2)[this.ptr] = this;
};
b2Vec2.prototype = Object.create(WrapperObject.prototype);
b2Vec2.prototype.constructor = b2Vec2;
b2Vec2.prototype.__class__ = b2Vec2;
b2Vec2.__cache__ = {};
Module['b2Vec2'] = b2Vec2;

b2Vec2.prototype['SetZero'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2Vec2_SetZero_0(self);
};

b2Vec2.prototype['Set'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  _emscripten_bind_b2Vec2_Set_2(self, arg0, arg1);
};

b2Vec2.prototype['op_add'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Vec2_op_add_1(self, arg0);
};

b2Vec2.prototype['op_sub'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Vec2_op_sub_1(self, arg0);
};

b2Vec2.prototype['op_mul'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Vec2_op_mul_1(self, arg0);
};

b2Vec2.prototype['Length'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Vec2_Length_0(self);
};

b2Vec2.prototype['LengthSquared'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Vec2_LengthSquared_0(self);
};

b2Vec2.prototype['Normalize'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Vec2_Normalize_0(self);
};

b2Vec2.prototype['IsValid'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Vec2_IsValid_0(self);
};

b2Vec2.prototype['Skew'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Vec2_Skew_0(self), b2Vec2);
};

  b2Vec2.prototype['get_x']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2Vec2_get_x_0(self);
}
    b2Vec2.prototype['set_x']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Vec2_set_x_1(self, arg0);
}
  b2Vec2.prototype['get_y']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2Vec2_get_y_0(self);
}
    b2Vec2.prototype['set_y']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Vec2_set_y_1(self, arg0);
}
  b2Vec2.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2Vec2___destroy___0(self);
}
// b2Vec3
function b2Vec3(arg0, arg1, arg2) {
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  if (arg0 === undefined) { this.ptr = _emscripten_bind_b2Vec3_b2Vec3_0(); getCache(b2Vec3)[this.ptr] = this;return }
  if (arg1 === undefined) { this.ptr = _emscripten_bind_b2Vec3_b2Vec3_1(arg0); getCache(b2Vec3)[this.ptr] = this;return }
  if (arg2 === undefined) { this.ptr = _emscripten_bind_b2Vec3_b2Vec3_2(arg0, arg1); getCache(b2Vec3)[this.ptr] = this;return }
  this.ptr = _emscripten_bind_b2Vec3_b2Vec3_3(arg0, arg1, arg2);
  getCache(b2Vec3)[this.ptr] = this;
};
b2Vec3.prototype = Object.create(WrapperObject.prototype);
b2Vec3.prototype.constructor = b2Vec3;
b2Vec3.prototype.__class__ = b2Vec3;
b2Vec3.__cache__ = {};
Module['b2Vec3'] = b2Vec3;

b2Vec3.prototype['SetZero'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2Vec3_SetZero_0(self);
};

b2Vec3.prototype['Set'] = function(arg0, arg1, arg2) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  _emscripten_bind_b2Vec3_Set_3(self, arg0, arg1, arg2);
};

b2Vec3.prototype['op_add'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Vec3_op_add_1(self, arg0);
};

b2Vec3.prototype['op_sub'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Vec3_op_sub_1(self, arg0);
};

b2Vec3.prototype['op_mul'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Vec3_op_mul_1(self, arg0);
};

  b2Vec3.prototype['get_x']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2Vec3_get_x_0(self);
}
    b2Vec3.prototype['set_x']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Vec3_set_x_1(self, arg0);
}
  b2Vec3.prototype['get_y']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2Vec3_get_y_0(self);
}
    b2Vec3.prototype['set_y']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Vec3_set_y_1(self, arg0);
}
  b2Vec3.prototype['get_z']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2Vec3_get_z_0(self);
}
    b2Vec3.prototype['set_z']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Vec3_set_z_1(self, arg0);
}
  b2Vec3.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2Vec3___destroy___0(self);
}
// b2AABB
function b2AABB() {
  this.ptr = _emscripten_bind_b2AABB_b2AABB_0();
  getCache(b2AABB)[this.ptr] = this;
};
b2AABB.prototype = Object.create(WrapperObject.prototype);
b2AABB.prototype.constructor = b2AABB;
b2AABB.prototype.__class__ = b2AABB;
b2AABB.__cache__ = {};
Module['b2AABB'] = b2AABB;

b2AABB.prototype['IsValid'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2AABB_IsValid_0(self);
};

b2AABB.prototype['GetCenter'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2AABB_GetCenter_0(self), b2Vec2);
};

b2AABB.prototype['GetExtents'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2AABB_GetExtents_0(self), b2Vec2);
};

b2AABB.prototype['GetPerimeter'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2AABB_GetPerimeter_0(self);
};

b2AABB.prototype['Combine'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg1 === undefined) { _emscripten_bind_b2AABB_Combine_1(self, arg0);  return }
  _emscripten_bind_b2AABB_Combine_2(self, arg0, arg1);
};

b2AABB.prototype['Contains'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return _emscripten_bind_b2AABB_Contains_1(self, arg0);
};

b2AABB.prototype['RayCast'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  return _emscripten_bind_b2AABB_RayCast_2(self, arg0, arg1);
};

  b2AABB.prototype['get_lowerBound']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2AABB_get_lowerBound_0(self), b2Vec2);
}
    b2AABB.prototype['set_lowerBound']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2AABB_set_lowerBound_1(self, arg0);
}
  b2AABB.prototype['get_upperBound']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2AABB_get_upperBound_0(self), b2Vec2);
}
    b2AABB.prototype['set_upperBound']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2AABB_set_upperBound_1(self, arg0);
}
  b2AABB.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2AABB___destroy___0(self);
}
// b2FixtureDef
function b2FixtureDef() {
  this.ptr = _emscripten_bind_b2FixtureDef_b2FixtureDef_0();
  getCache(b2FixtureDef)[this.ptr] = this;
};
b2FixtureDef.prototype = Object.create(WrapperObject.prototype);
b2FixtureDef.prototype.constructor = b2FixtureDef;
b2FixtureDef.prototype.__class__ = b2FixtureDef;
b2FixtureDef.__cache__ = {};
Module['b2FixtureDef'] = b2FixtureDef;

  b2FixtureDef.prototype['get_shape']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2FixtureDef_get_shape_0(self), b2Shape);
}
    b2FixtureDef.prototype['set_shape']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2FixtureDef_set_shape_1(self, arg0);
}
  b2FixtureDef.prototype['get_userData']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2FixtureDef_get_userData_0(self);
}
    b2FixtureDef.prototype['set_userData']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2FixtureDef_set_userData_1(self, arg0);
}
  b2FixtureDef.prototype['get_friction']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2FixtureDef_get_friction_0(self);
}
    b2FixtureDef.prototype['set_friction']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2FixtureDef_set_friction_1(self, arg0);
}
  b2FixtureDef.prototype['get_restitution']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2FixtureDef_get_restitution_0(self);
}
    b2FixtureDef.prototype['set_restitution']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2FixtureDef_set_restitution_1(self, arg0);
}
  b2FixtureDef.prototype['get_density']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2FixtureDef_get_density_0(self);
}
    b2FixtureDef.prototype['set_density']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2FixtureDef_set_density_1(self, arg0);
}
  b2FixtureDef.prototype['get_isSensor']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2FixtureDef_get_isSensor_0(self);
}
    b2FixtureDef.prototype['set_isSensor']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2FixtureDef_set_isSensor_1(self, arg0);
}
  b2FixtureDef.prototype['get_filter']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2FixtureDef_get_filter_0(self), b2Filter);
}
    b2FixtureDef.prototype['set_filter']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2FixtureDef_set_filter_1(self, arg0);
}
  b2FixtureDef.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2FixtureDef___destroy___0(self);
}
// b2Cycles
function b2Cycles() {
  this.ptr = _emscripten_bind_b2Cycles_b2Cycles_0();
  getCache(b2Cycles)[this.ptr] = this;
};
b2Cycles.prototype = Object.create(WrapperObject.prototype);
b2Cycles.prototype.constructor = b2Cycles;
b2Cycles.prototype.__class__ = b2Cycles;
b2Cycles.__cache__ = {};
Module['b2Cycles'] = b2Cycles;

b2Cycles.prototype['dump'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2Cycles_dump_0(self);
};

// b2Manifold
function b2Manifold() {
  this.ptr = _emscripten_bind_b2Manifold_b2Manifold_0();
  getCache(b2Manifold)[this.ptr] = this;
};
b2Manifold.prototype = Object.create(WrapperObject.prototype);
b2Manifold.prototype.constructor = b2Manifold;
b2Manifold.prototype.__class__ = b2Manifold;
b2Manifold.__cache__ = {};
Module['b2Manifold'] = b2Manifold;

  b2Manifold.prototype['get_localNormal']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Manifold_get_localNormal_0(self), b2Vec2);
}
    b2Manifold.prototype['set_localNormal']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Manifold_set_localNormal_1(self, arg0);
}
  b2Manifold.prototype['get_localPoint']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Manifold_get_localPoint_0(self), b2Vec2);
}
    b2Manifold.prototype['set_localPoint']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Manifold_set_localPoint_1(self, arg0);
}
  b2Manifold.prototype['get_type']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2Manifold_get_type_0(self);
}
    b2Manifold.prototype['set_type']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Manifold_set_type_1(self, arg0);
}
  b2Manifold.prototype['get_pointCount']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2Manifold_get_pointCount_0(self);
}
    b2Manifold.prototype['set_pointCount']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Manifold_set_pointCount_1(self, arg0);
}
  b2Manifold.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2Manifold___destroy___0(self);
}
// b2PrismaticJointDef
function b2PrismaticJointDef() {
  this.ptr = _emscripten_bind_b2PrismaticJointDef_b2PrismaticJointDef_0();
  getCache(b2PrismaticJointDef)[this.ptr] = this;
};
b2PrismaticJointDef.prototype = Object.create(b2JointDef.prototype);
b2PrismaticJointDef.prototype.constructor = b2PrismaticJointDef;
b2PrismaticJointDef.prototype.__class__ = b2PrismaticJointDef;
b2PrismaticJointDef.__cache__ = {};
Module['b2PrismaticJointDef'] = b2PrismaticJointDef;

b2PrismaticJointDef.prototype['Initialize'] = function(arg0, arg1, arg2, arg3) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  if (arg3 && typeof arg3 === 'object') arg3 = arg3.ptr;
  else arg3 = ensureString(arg3);
  _emscripten_bind_b2PrismaticJointDef_Initialize_4(self, arg0, arg1, arg2, arg3);
};

  b2PrismaticJointDef.prototype['get_localAnchorA']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2PrismaticJointDef_get_localAnchorA_0(self), b2Vec2);
}
    b2PrismaticJointDef.prototype['set_localAnchorA']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PrismaticJointDef_set_localAnchorA_1(self, arg0);
}
  b2PrismaticJointDef.prototype['get_localAnchorB']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2PrismaticJointDef_get_localAnchorB_0(self), b2Vec2);
}
    b2PrismaticJointDef.prototype['set_localAnchorB']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PrismaticJointDef_set_localAnchorB_1(self, arg0);
}
  b2PrismaticJointDef.prototype['get_localAxisA']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2PrismaticJointDef_get_localAxisA_0(self), b2Vec2);
}
    b2PrismaticJointDef.prototype['set_localAxisA']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PrismaticJointDef_set_localAxisA_1(self, arg0);
}
  b2PrismaticJointDef.prototype['get_referenceAngle']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2PrismaticJointDef_get_referenceAngle_0(self);
}
    b2PrismaticJointDef.prototype['set_referenceAngle']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PrismaticJointDef_set_referenceAngle_1(self, arg0);
}
  b2PrismaticJointDef.prototype['get_enableLimit']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2PrismaticJointDef_get_enableLimit_0(self);
}
    b2PrismaticJointDef.prototype['set_enableLimit']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PrismaticJointDef_set_enableLimit_1(self, arg0);
}
  b2PrismaticJointDef.prototype['get_lowerTranslation']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2PrismaticJointDef_get_lowerTranslation_0(self);
}
    b2PrismaticJointDef.prototype['set_lowerTranslation']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PrismaticJointDef_set_lowerTranslation_1(self, arg0);
}
  b2PrismaticJointDef.prototype['get_upperTranslation']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2PrismaticJointDef_get_upperTranslation_0(self);
}
    b2PrismaticJointDef.prototype['set_upperTranslation']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PrismaticJointDef_set_upperTranslation_1(self, arg0);
}
  b2PrismaticJointDef.prototype['get_enableMotor']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2PrismaticJointDef_get_enableMotor_0(self);
}
    b2PrismaticJointDef.prototype['set_enableMotor']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PrismaticJointDef_set_enableMotor_1(self, arg0);
}
  b2PrismaticJointDef.prototype['get_maxMotorForce']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2PrismaticJointDef_get_maxMotorForce_0(self);
}
    b2PrismaticJointDef.prototype['set_maxMotorForce']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PrismaticJointDef_set_maxMotorForce_1(self, arg0);
}
  b2PrismaticJointDef.prototype['get_motorSpeed']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2PrismaticJointDef_get_motorSpeed_0(self);
}
    b2PrismaticJointDef.prototype['set_motorSpeed']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PrismaticJointDef_set_motorSpeed_1(self, arg0);
}
  b2PrismaticJointDef.prototype['get_type']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2PrismaticJointDef_get_type_0(self);
}
    b2PrismaticJointDef.prototype['set_type']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PrismaticJointDef_set_type_1(self, arg0);
}
  b2PrismaticJointDef.prototype['get_userData']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2PrismaticJointDef_get_userData_0(self);
}
    b2PrismaticJointDef.prototype['set_userData']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PrismaticJointDef_set_userData_1(self, arg0);
}
  b2PrismaticJointDef.prototype['get_bodyA']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2PrismaticJointDef_get_bodyA_0(self), b2Body);
}
    b2PrismaticJointDef.prototype['set_bodyA']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PrismaticJointDef_set_bodyA_1(self, arg0);
}
  b2PrismaticJointDef.prototype['get_bodyB']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2PrismaticJointDef_get_bodyB_0(self), b2Body);
}
    b2PrismaticJointDef.prototype['set_bodyB']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PrismaticJointDef_set_bodyB_1(self, arg0);
}
  b2PrismaticJointDef.prototype['get_collideConnected']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2PrismaticJointDef_get_collideConnected_0(self);
}
    b2PrismaticJointDef.prototype['set_collideConnected']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PrismaticJointDef_set_collideConnected_1(self, arg0);
}
  b2PrismaticJointDef.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2PrismaticJointDef___destroy___0(self);
}
// b2World
function b2World(arg0) {
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  this.ptr = _emscripten_bind_b2World_b2World_1(arg0);
  getCache(b2World)[this.ptr] = this;
};
b2World.prototype = Object.create(WrapperObject.prototype);
b2World.prototype.constructor = b2World;
b2World.prototype.__class__ = b2World;
b2World.__cache__ = {};
Module['b2World'] = b2World;

b2World.prototype['SetDestructionListener'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2World_SetDestructionListener_1(self, arg0);
};

b2World.prototype['SetContactListener'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2World_SetContactListener_1(self, arg0);
};

b2World.prototype['SetDebugDraw'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2World_SetDebugDraw_1(self, arg0);
};

b2World.prototype['CreateBody'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return wrapPointer(_emscripten_bind_b2World_CreateBody_1(self, arg0), b2Body);
};

b2World.prototype['DestroyBody'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2World_DestroyBody_1(self, arg0);
};

b2World.prototype['CreateJoint'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return wrapPointer(_emscripten_bind_b2World_CreateJoint_1(self, arg0), b2Joint);
};

b2World.prototype['DestroyJoint'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2World_DestroyJoint_1(self, arg0);
};

b2World.prototype['Step'] = function(arg0, arg1, arg2) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  _emscripten_bind_b2World_Step_3(self, arg0, arg1, arg2);
};

b2World.prototype['ClearForces'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2World_ClearForces_0(self);
};

b2World.prototype['DrawDebugData'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2World_DrawDebugData_0(self);
};

b2World.prototype['QueryAABB'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  _emscripten_bind_b2World_QueryAABB_2(self, arg0, arg1);
};

b2World.prototype['RayCast'] = function(arg0, arg1, arg2) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  _emscripten_bind_b2World_RayCast_3(self, arg0, arg1, arg2);
};

b2World.prototype['GetBodyList'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2World_GetBodyList_0(self), b2Body);
};

b2World.prototype['GetJointList'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2World_GetJointList_0(self), b2Joint);
};

b2World.prototype['GetContactList'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2World_GetContactList_0(self), b2Contact);
};

b2World.prototype['SetAllowSleeping'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2World_SetAllowSleeping_1(self, arg0);
};

b2World.prototype['GetAllowSleeping'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2World_GetAllowSleeping_0(self);
};

b2World.prototype['SetWarmStarting'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2World_SetWarmStarting_1(self, arg0);
};

b2World.prototype['GetWarmStarting'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2World_GetWarmStarting_0(self);
};

b2World.prototype['SetContinuousPhysics'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2World_SetContinuousPhysics_1(self, arg0);
};

b2World.prototype['GetContinuousPhysics'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2World_GetContinuousPhysics_0(self);
};

b2World.prototype['SetSubStepping'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2World_SetSubStepping_1(self, arg0);
};

b2World.prototype['GetSubStepping'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2World_GetSubStepping_0(self);
};

b2World.prototype['GetProxyCount'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2World_GetProxyCount_0(self);
};

b2World.prototype['GetBodyCount'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2World_GetBodyCount_0(self);
};

b2World.prototype['GetJointCount'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2World_GetJointCount_0(self);
};

b2World.prototype['GetContactCount'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2World_GetContactCount_0(self);
};

b2World.prototype['GetTreeHeight'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2World_GetTreeHeight_0(self);
};

b2World.prototype['GetTreeBalance'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2World_GetTreeBalance_0(self);
};

b2World.prototype['GetTreeQuality'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2World_GetTreeQuality_0(self);
};

b2World.prototype['SetGravity'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2World_SetGravity_1(self, arg0);
};

b2World.prototype['GetGravity'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2World_GetGravity_0(self), b2Vec2);
};

b2World.prototype['IsLocked'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2World_IsLocked_0(self);
};

b2World.prototype['SetAutoClearForces'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2World_SetAutoClearForces_1(self, arg0);
};

b2World.prototype['GetAutoClearForces'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2World_GetAutoClearForces_0(self);
};

b2World.prototype['GetProfile'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2World_GetProfile_0(self), b2Profile);
};

b2World.prototype['Dump'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2World_Dump_0(self);
};

  b2World.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2World___destroy___0(self);
}
// b2PrismaticJoint
function b2PrismaticJoint() { throw "cannot construct a b2PrismaticJoint, no constructor in IDL" }
b2PrismaticJoint.prototype = Object.create(b2Joint.prototype);
b2PrismaticJoint.prototype.constructor = b2PrismaticJoint;
b2PrismaticJoint.prototype.__class__ = b2PrismaticJoint;
b2PrismaticJoint.__cache__ = {};
Module['b2PrismaticJoint'] = b2PrismaticJoint;

b2PrismaticJoint.prototype['GetLocalAnchorA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2PrismaticJoint_GetLocalAnchorA_0(self), b2Vec2);
};

b2PrismaticJoint.prototype['GetLocalAnchorB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2PrismaticJoint_GetLocalAnchorB_0(self), b2Vec2);
};

b2PrismaticJoint.prototype['GetLocalAxisA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2PrismaticJoint_GetLocalAxisA_0(self), b2Vec2);
};

b2PrismaticJoint.prototype['GetReferenceAngle'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2PrismaticJoint_GetReferenceAngle_0(self);
};

b2PrismaticJoint.prototype['GetJointTranslation'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2PrismaticJoint_GetJointTranslation_0(self);
};

b2PrismaticJoint.prototype['GetJointSpeed'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2PrismaticJoint_GetJointSpeed_0(self);
};

b2PrismaticJoint.prototype['IsLimitEnabled'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2PrismaticJoint_IsLimitEnabled_0(self);
};

b2PrismaticJoint.prototype['EnableLimit'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PrismaticJoint_EnableLimit_1(self, arg0);
};

b2PrismaticJoint.prototype['GetLowerLimit'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2PrismaticJoint_GetLowerLimit_0(self);
};

b2PrismaticJoint.prototype['GetUpperLimit'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2PrismaticJoint_GetUpperLimit_0(self);
};

b2PrismaticJoint.prototype['SetLimits'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  _emscripten_bind_b2PrismaticJoint_SetLimits_2(self, arg0, arg1);
};

b2PrismaticJoint.prototype['IsMotorEnabled'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2PrismaticJoint_IsMotorEnabled_0(self);
};

b2PrismaticJoint.prototype['EnableMotor'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PrismaticJoint_EnableMotor_1(self, arg0);
};

b2PrismaticJoint.prototype['SetMotorSpeed'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PrismaticJoint_SetMotorSpeed_1(self, arg0);
};

b2PrismaticJoint.prototype['GetMotorSpeed'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2PrismaticJoint_GetMotorSpeed_0(self);
};

b2PrismaticJoint.prototype['SetMaxMotorForce'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PrismaticJoint_SetMaxMotorForce_1(self, arg0);
};

b2PrismaticJoint.prototype['GetMaxMotorForce'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2PrismaticJoint_GetMaxMotorForce_0(self);
};

b2PrismaticJoint.prototype['GetMotorForce'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return _emscripten_bind_b2PrismaticJoint_GetMotorForce_1(self, arg0);
};

b2PrismaticJoint.prototype['GetType'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2PrismaticJoint_GetType_0(self);
};

b2PrismaticJoint.prototype['GetBodyA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2PrismaticJoint_GetBodyA_0(self), b2Body);
};

b2PrismaticJoint.prototype['GetBodyB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2PrismaticJoint_GetBodyB_0(self), b2Body);
};

b2PrismaticJoint.prototype['GetAnchorA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2PrismaticJoint_GetAnchorA_0(self), b2Vec2);
};

b2PrismaticJoint.prototype['GetAnchorB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2PrismaticJoint_GetAnchorB_0(self), b2Vec2);
};

b2PrismaticJoint.prototype['GetReactionForce'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return wrapPointer(_emscripten_bind_b2PrismaticJoint_GetReactionForce_1(self, arg0), b2Vec2);
};

b2PrismaticJoint.prototype['GetReactionTorque'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return _emscripten_bind_b2PrismaticJoint_GetReactionTorque_1(self, arg0);
};

b2PrismaticJoint.prototype['GetNext'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2PrismaticJoint_GetNext_0(self), b2Joint);
};

b2PrismaticJoint.prototype['GetUserData'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2PrismaticJoint_GetUserData_0(self);
};

b2PrismaticJoint.prototype['SetUserData'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PrismaticJoint_SetUserData_1(self, arg0);
};

b2PrismaticJoint.prototype['IsActive'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2PrismaticJoint_IsActive_0(self);
};

b2PrismaticJoint.prototype['GetCollideConnected'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2PrismaticJoint_GetCollideConnected_0(self);
};

  b2PrismaticJoint.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2PrismaticJoint___destroy___0(self);
}
// b2RayCastOutput
function b2RayCastOutput() { throw "cannot construct a b2RayCastOutput, no constructor in IDL" }
b2RayCastOutput.prototype = Object.create(WrapperObject.prototype);
b2RayCastOutput.prototype.constructor = b2RayCastOutput;
b2RayCastOutput.prototype.__class__ = b2RayCastOutput;
b2RayCastOutput.__cache__ = {};
Module['b2RayCastOutput'] = b2RayCastOutput;

  b2RayCastOutput.prototype['get_normal']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2RayCastOutput_get_normal_0(self), b2Vec2);
}
    b2RayCastOutput.prototype['set_normal']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RayCastOutput_set_normal_1(self, arg0);
}
  b2RayCastOutput.prototype['get_fraction']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2RayCastOutput_get_fraction_0(self);
}
    b2RayCastOutput.prototype['set_fraction']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RayCastOutput_set_fraction_1(self, arg0);
}
  b2RayCastOutput.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2RayCastOutput___destroy___0(self);
}
// b2ContactID
function b2ContactID() { throw "cannot construct a b2ContactID, no constructor in IDL" }
b2ContactID.prototype = Object.create(WrapperObject.prototype);
b2ContactID.prototype.constructor = b2ContactID;
b2ContactID.prototype.__class__ = b2ContactID;
b2ContactID.__cache__ = {};
Module['b2ContactID'] = b2ContactID;

  b2ContactID.prototype['get_cf']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2ContactID_get_cf_0(self), b2ContactFeature);
}
    b2ContactID.prototype['set_cf']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2ContactID_set_cf_1(self, arg0);
}
  b2ContactID.prototype['get_key']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2ContactID_get_key_0(self);
}
    b2ContactID.prototype['set_key']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2ContactID_set_key_1(self, arg0);
}
  b2ContactID.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2ContactID___destroy___0(self);
}
// b2DestructionListenerWrapper
function b2DestructionListenerWrapper() { throw "cannot construct a b2DestructionListenerWrapper, no constructor in IDL" }
b2DestructionListenerWrapper.prototype = Object.create(WrapperObject.prototype);
b2DestructionListenerWrapper.prototype.constructor = b2DestructionListenerWrapper;
b2DestructionListenerWrapper.prototype.__class__ = b2DestructionListenerWrapper;
b2DestructionListenerWrapper.__cache__ = {};
Module['b2DestructionListenerWrapper'] = b2DestructionListenerWrapper;

  b2DestructionListenerWrapper.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2DestructionListenerWrapper___destroy___0(self);
}
// JSContactListener
function JSContactListener() {
  this.ptr = _emscripten_bind_JSContactListener_JSContactListener_0();
  getCache(JSContactListener)[this.ptr] = this;
};
JSContactListener.prototype = Object.create(b2ContactListener.prototype);
JSContactListener.prototype.constructor = JSContactListener;
JSContactListener.prototype.__class__ = JSContactListener;
JSContactListener.__cache__ = {};
Module['JSContactListener'] = JSContactListener;

JSContactListener.prototype['BeginContact'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_JSContactListener_BeginContact_1(self, arg0);
};

JSContactListener.prototype['EndContact'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_JSContactListener_EndContact_1(self, arg0);
};

JSContactListener.prototype['PreSolve'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  _emscripten_bind_JSContactListener_PreSolve_2(self, arg0, arg1);
};

JSContactListener.prototype['PostSolve'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  _emscripten_bind_JSContactListener_PostSolve_2(self, arg0, arg1);
};

  JSContactListener.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_JSContactListener___destroy___0(self);
}
// b2Mat22
function b2Mat22(arg0, arg1, arg2, arg3) {
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  if (arg3 && typeof arg3 === 'object') arg3 = arg3.ptr;
  else arg3 = ensureString(arg3);
  if (arg0 === undefined) { this.ptr = _emscripten_bind_b2Mat22_b2Mat22_0(); getCache(b2Mat22)[this.ptr] = this;return }
  if (arg1 === undefined) { this.ptr = _emscripten_bind_b2Mat22_b2Mat22_1(arg0); getCache(b2Mat22)[this.ptr] = this;return }
  if (arg2 === undefined) { this.ptr = _emscripten_bind_b2Mat22_b2Mat22_2(arg0, arg1); getCache(b2Mat22)[this.ptr] = this;return }
  if (arg3 === undefined) { this.ptr = _emscripten_bind_b2Mat22_b2Mat22_3(arg0, arg1, arg2); getCache(b2Mat22)[this.ptr] = this;return }
  this.ptr = _emscripten_bind_b2Mat22_b2Mat22_4(arg0, arg1, arg2, arg3);
  getCache(b2Mat22)[this.ptr] = this;
};
b2Mat22.prototype = Object.create(WrapperObject.prototype);
b2Mat22.prototype.constructor = b2Mat22;
b2Mat22.prototype.__class__ = b2Mat22;
b2Mat22.__cache__ = {};
Module['b2Mat22'] = b2Mat22;

b2Mat22.prototype['Set'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  _emscripten_bind_b2Mat22_Set_2(self, arg0, arg1);
};

b2Mat22.prototype['SetIdentity'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2Mat22_SetIdentity_0(self);
};

b2Mat22.prototype['SetZero'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2Mat22_SetZero_0(self);
};

b2Mat22.prototype['GetInverse'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Mat22_GetInverse_0(self), b2Mat22);
};

b2Mat22.prototype['Solve'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return wrapPointer(_emscripten_bind_b2Mat22_Solve_1(self, arg0), b2Vec2);
};

  b2Mat22.prototype['get_ex']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Mat22_get_ex_0(self), b2Vec2);
}
    b2Mat22.prototype['set_ex']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Mat22_set_ex_1(self, arg0);
}
  b2Mat22.prototype['get_ey']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Mat22_get_ey_0(self), b2Vec2);
}
    b2Mat22.prototype['set_ey']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Mat22_set_ey_1(self, arg0);
}
  b2Mat22.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2Mat22___destroy___0(self);
}
// b2Counters
function b2Counters() {
  this.ptr = _emscripten_bind_b2Counters_b2Counters_0();
  getCache(b2Counters)[this.ptr] = this;
};
b2Counters.prototype = Object.create(WrapperObject.prototype);
b2Counters.prototype.constructor = b2Counters;
b2Counters.prototype.__class__ = b2Counters;
b2Counters.__cache__ = {};
Module['b2Counters'] = b2Counters;

b2Counters.prototype['dump'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2Counters_dump_0(self);
};

// b2CircleShape
function b2CircleShape() {
  this.ptr = _emscripten_bind_b2CircleShape_b2CircleShape_0();
  getCache(b2CircleShape)[this.ptr] = this;
};
b2CircleShape.prototype = Object.create(b2Shape.prototype);
b2CircleShape.prototype.constructor = b2CircleShape;
b2CircleShape.prototype.__class__ = b2CircleShape;
b2CircleShape.__cache__ = {};
Module['b2CircleShape'] = b2CircleShape;

b2CircleShape.prototype['GetType'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2CircleShape_GetType_0(self);
};

b2CircleShape.prototype['GetChildCount'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2CircleShape_GetChildCount_0(self);
};

b2CircleShape.prototype['TestPoint'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  return _emscripten_bind_b2CircleShape_TestPoint_2(self, arg0, arg1);
};

b2CircleShape.prototype['RayCast'] = function(arg0, arg1, arg2, arg3) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  if (arg3 && typeof arg3 === 'object') arg3 = arg3.ptr;
  else arg3 = ensureString(arg3);
  return _emscripten_bind_b2CircleShape_RayCast_4(self, arg0, arg1, arg2, arg3);
};

b2CircleShape.prototype['ComputeAABB'] = function(arg0, arg1, arg2) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  _emscripten_bind_b2CircleShape_ComputeAABB_3(self, arg0, arg1, arg2);
};

b2CircleShape.prototype['ComputeMass'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  _emscripten_bind_b2CircleShape_ComputeMass_2(self, arg0, arg1);
};

  b2CircleShape.prototype['get_m_p']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2CircleShape_get_m_p_0(self), b2Vec2);
}
    b2CircleShape.prototype['set_m_p']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2CircleShape_set_m_p_1(self, arg0);
}
  b2CircleShape.prototype['get_m_type']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2CircleShape_get_m_type_0(self);
}
    b2CircleShape.prototype['set_m_type']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2CircleShape_set_m_type_1(self, arg0);
}
  b2CircleShape.prototype['get_m_radius']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2CircleShape_get_m_radius_0(self);
}
    b2CircleShape.prototype['set_m_radius']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2CircleShape_set_m_radius_1(self, arg0);
}
  b2CircleShape.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2CircleShape___destroy___0(self);
}
// b2WeldJointDef
function b2WeldJointDef() {
  this.ptr = _emscripten_bind_b2WeldJointDef_b2WeldJointDef_0();
  getCache(b2WeldJointDef)[this.ptr] = this;
};
b2WeldJointDef.prototype = Object.create(b2JointDef.prototype);
b2WeldJointDef.prototype.constructor = b2WeldJointDef;
b2WeldJointDef.prototype.__class__ = b2WeldJointDef;
b2WeldJointDef.__cache__ = {};
Module['b2WeldJointDef'] = b2WeldJointDef;

b2WeldJointDef.prototype['Initialize'] = function(arg0, arg1, arg2) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  _emscripten_bind_b2WeldJointDef_Initialize_3(self, arg0, arg1, arg2);
};

  b2WeldJointDef.prototype['get_localAnchorA']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2WeldJointDef_get_localAnchorA_0(self), b2Vec2);
}
    b2WeldJointDef.prototype['set_localAnchorA']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WeldJointDef_set_localAnchorA_1(self, arg0);
}
  b2WeldJointDef.prototype['get_localAnchorB']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2WeldJointDef_get_localAnchorB_0(self), b2Vec2);
}
    b2WeldJointDef.prototype['set_localAnchorB']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WeldJointDef_set_localAnchorB_1(self, arg0);
}
  b2WeldJointDef.prototype['get_referenceAngle']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2WeldJointDef_get_referenceAngle_0(self);
}
    b2WeldJointDef.prototype['set_referenceAngle']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WeldJointDef_set_referenceAngle_1(self, arg0);
}
  b2WeldJointDef.prototype['get_frequencyHz']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2WeldJointDef_get_frequencyHz_0(self);
}
    b2WeldJointDef.prototype['set_frequencyHz']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WeldJointDef_set_frequencyHz_1(self, arg0);
}
  b2WeldJointDef.prototype['get_dampingRatio']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2WeldJointDef_get_dampingRatio_0(self);
}
    b2WeldJointDef.prototype['set_dampingRatio']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WeldJointDef_set_dampingRatio_1(self, arg0);
}
  b2WeldJointDef.prototype['get_type']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2WeldJointDef_get_type_0(self);
}
    b2WeldJointDef.prototype['set_type']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WeldJointDef_set_type_1(self, arg0);
}
  b2WeldJointDef.prototype['get_userData']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2WeldJointDef_get_userData_0(self);
}
    b2WeldJointDef.prototype['set_userData']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WeldJointDef_set_userData_1(self, arg0);
}
  b2WeldJointDef.prototype['get_bodyA']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2WeldJointDef_get_bodyA_0(self), b2Body);
}
    b2WeldJointDef.prototype['set_bodyA']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WeldJointDef_set_bodyA_1(self, arg0);
}
  b2WeldJointDef.prototype['get_bodyB']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2WeldJointDef_get_bodyB_0(self), b2Body);
}
    b2WeldJointDef.prototype['set_bodyB']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WeldJointDef_set_bodyB_1(self, arg0);
}
  b2WeldJointDef.prototype['get_collideConnected']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2WeldJointDef_get_collideConnected_0(self);
}
    b2WeldJointDef.prototype['set_collideConnected']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WeldJointDef_set_collideConnected_1(self, arg0);
}
  b2WeldJointDef.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2WeldJointDef___destroy___0(self);
}
// b2Draw
function b2Draw() { throw "cannot construct a b2Draw, no constructor in IDL" }
b2Draw.prototype = Object.create(WrapperObject.prototype);
b2Draw.prototype.constructor = b2Draw;
b2Draw.prototype.__class__ = b2Draw;
b2Draw.__cache__ = {};
Module['b2Draw'] = b2Draw;

b2Draw.prototype['SetFlags'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Draw_SetFlags_1(self, arg0);
};

b2Draw.prototype['GetFlags'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Draw_GetFlags_0(self);
};

b2Draw.prototype['AppendFlags'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Draw_AppendFlags_1(self, arg0);
};

b2Draw.prototype['ClearFlags'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Draw_ClearFlags_1(self, arg0);
};

  b2Draw.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2Draw___destroy___0(self);
}
// b2MassData
function b2MassData() {
  this.ptr = _emscripten_bind_b2MassData_b2MassData_0();
  getCache(b2MassData)[this.ptr] = this;
};
b2MassData.prototype = Object.create(WrapperObject.prototype);
b2MassData.prototype.constructor = b2MassData;
b2MassData.prototype.__class__ = b2MassData;
b2MassData.__cache__ = {};
Module['b2MassData'] = b2MassData;

  b2MassData.prototype['get_mass']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2MassData_get_mass_0(self);
}
    b2MassData.prototype['set_mass']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2MassData_set_mass_1(self, arg0);
}
  b2MassData.prototype['get_center']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2MassData_get_center_0(self), b2Vec2);
}
    b2MassData.prototype['set_center']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2MassData_set_center_1(self, arg0);
}
  b2MassData.prototype['get_I']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2MassData_get_I_0(self);
}
    b2MassData.prototype['set_I']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2MassData_set_I_1(self, arg0);
}
  b2MassData.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2MassData___destroy___0(self);
}
// b2Joint
function b2Joint() { throw "cannot construct a b2Joint, no constructor in IDL" }
b2Joint.prototype = Object.create(WrapperObject.prototype);
b2Joint.prototype.constructor = b2Joint;
b2Joint.prototype.__class__ = b2Joint;
b2Joint.__cache__ = {};
Module['b2Joint'] = b2Joint;

b2Joint.prototype['GetType'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Joint_GetType_0(self);
};

b2Joint.prototype['GetBodyA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Joint_GetBodyA_0(self), b2Body);
};

b2Joint.prototype['GetBodyB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Joint_GetBodyB_0(self), b2Body);
};

b2Joint.prototype['GetAnchorA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Joint_GetAnchorA_0(self), b2Vec2);
};

b2Joint.prototype['GetAnchorB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Joint_GetAnchorB_0(self), b2Vec2);
};

b2Joint.prototype['GetReactionForce'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return wrapPointer(_emscripten_bind_b2Joint_GetReactionForce_1(self, arg0), b2Vec2);
};

b2Joint.prototype['GetReactionTorque'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return _emscripten_bind_b2Joint_GetReactionTorque_1(self, arg0);
};

b2Joint.prototype['GetNext'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Joint_GetNext_0(self), b2Joint);
};

b2Joint.prototype['GetUserData'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Joint_GetUserData_0(self);
};

b2Joint.prototype['SetUserData'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Joint_SetUserData_1(self, arg0);
};

b2Joint.prototype['IsActive'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Joint_IsActive_0(self);
};

b2Joint.prototype['GetCollideConnected'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Joint_GetCollideConnected_0(self);
};

b2Joint.prototype['Dump'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2Joint_Dump_0(self);
};

// b2GearJoint
function b2GearJoint() { throw "cannot construct a b2GearJoint, no constructor in IDL" }
b2GearJoint.prototype = Object.create(b2Joint.prototype);
b2GearJoint.prototype.constructor = b2GearJoint;
b2GearJoint.prototype.__class__ = b2GearJoint;
b2GearJoint.__cache__ = {};
Module['b2GearJoint'] = b2GearJoint;

b2GearJoint.prototype['GetJoint1'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2GearJoint_GetJoint1_0(self), b2Joint);
};

b2GearJoint.prototype['GetJoint2'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2GearJoint_GetJoint2_0(self), b2Joint);
};

b2GearJoint.prototype['SetRatio'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2GearJoint_SetRatio_1(self, arg0);
};

b2GearJoint.prototype['GetRatio'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2GearJoint_GetRatio_0(self);
};

b2GearJoint.prototype['GetType'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2GearJoint_GetType_0(self);
};

b2GearJoint.prototype['GetBodyA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2GearJoint_GetBodyA_0(self), b2Body);
};

b2GearJoint.prototype['GetBodyB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2GearJoint_GetBodyB_0(self), b2Body);
};

b2GearJoint.prototype['GetAnchorA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2GearJoint_GetAnchorA_0(self), b2Vec2);
};

b2GearJoint.prototype['GetAnchorB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2GearJoint_GetAnchorB_0(self), b2Vec2);
};

b2GearJoint.prototype['GetReactionForce'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return wrapPointer(_emscripten_bind_b2GearJoint_GetReactionForce_1(self, arg0), b2Vec2);
};

b2GearJoint.prototype['GetReactionTorque'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return _emscripten_bind_b2GearJoint_GetReactionTorque_1(self, arg0);
};

b2GearJoint.prototype['GetNext'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2GearJoint_GetNext_0(self), b2Joint);
};

b2GearJoint.prototype['GetUserData'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2GearJoint_GetUserData_0(self);
};

b2GearJoint.prototype['SetUserData'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2GearJoint_SetUserData_1(self, arg0);
};

b2GearJoint.prototype['IsActive'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2GearJoint_IsActive_0(self);
};

b2GearJoint.prototype['GetCollideConnected'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2GearJoint_GetCollideConnected_0(self);
};

  b2GearJoint.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2GearJoint___destroy___0(self);
}
// b2RayCastCallback
function b2RayCastCallback() { throw "cannot construct a b2RayCastCallback, no constructor in IDL" }
b2RayCastCallback.prototype = Object.create(WrapperObject.prototype);
b2RayCastCallback.prototype.constructor = b2RayCastCallback;
b2RayCastCallback.prototype.__class__ = b2RayCastCallback;
b2RayCastCallback.__cache__ = {};
Module['b2RayCastCallback'] = b2RayCastCallback;

  b2RayCastCallback.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2RayCastCallback___destroy___0(self);
}
// b2WeldJoint
function b2WeldJoint() { throw "cannot construct a b2WeldJoint, no constructor in IDL" }
b2WeldJoint.prototype = Object.create(b2Joint.prototype);
b2WeldJoint.prototype.constructor = b2WeldJoint;
b2WeldJoint.prototype.__class__ = b2WeldJoint;
b2WeldJoint.__cache__ = {};
Module['b2WeldJoint'] = b2WeldJoint;

b2WeldJoint.prototype['GetLocalAnchorA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2WeldJoint_GetLocalAnchorA_0(self), b2Vec2);
};

b2WeldJoint.prototype['GetLocalAnchorB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2WeldJoint_GetLocalAnchorB_0(self), b2Vec2);
};

b2WeldJoint.prototype['SetFrequency'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WeldJoint_SetFrequency_1(self, arg0);
};

b2WeldJoint.prototype['GetFrequency'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2WeldJoint_GetFrequency_0(self);
};

b2WeldJoint.prototype['SetDampingRatio'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WeldJoint_SetDampingRatio_1(self, arg0);
};

b2WeldJoint.prototype['GetDampingRatio'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2WeldJoint_GetDampingRatio_0(self);
};

b2WeldJoint.prototype['Dump'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2WeldJoint_Dump_0(self);
};

b2WeldJoint.prototype['GetType'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2WeldJoint_GetType_0(self);
};

b2WeldJoint.prototype['GetBodyA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2WeldJoint_GetBodyA_0(self), b2Body);
};

b2WeldJoint.prototype['GetBodyB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2WeldJoint_GetBodyB_0(self), b2Body);
};

b2WeldJoint.prototype['GetAnchorA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2WeldJoint_GetAnchorA_0(self), b2Vec2);
};

b2WeldJoint.prototype['GetAnchorB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2WeldJoint_GetAnchorB_0(self), b2Vec2);
};

b2WeldJoint.prototype['GetReactionForce'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return wrapPointer(_emscripten_bind_b2WeldJoint_GetReactionForce_1(self, arg0), b2Vec2);
};

b2WeldJoint.prototype['GetReactionTorque'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return _emscripten_bind_b2WeldJoint_GetReactionTorque_1(self, arg0);
};

b2WeldJoint.prototype['GetNext'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2WeldJoint_GetNext_0(self), b2Joint);
};

b2WeldJoint.prototype['GetUserData'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2WeldJoint_GetUserData_0(self);
};

b2WeldJoint.prototype['SetUserData'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WeldJoint_SetUserData_1(self, arg0);
};

b2WeldJoint.prototype['IsActive'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2WeldJoint_IsActive_0(self);
};

b2WeldJoint.prototype['GetCollideConnected'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2WeldJoint_GetCollideConnected_0(self);
};

  b2WeldJoint.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2WeldJoint___destroy___0(self);
}
// b2JointEdge
function b2JointEdge() {
  this.ptr = _emscripten_bind_b2JointEdge_b2JointEdge_0();
  getCache(b2JointEdge)[this.ptr] = this;
};
b2JointEdge.prototype = Object.create(WrapperObject.prototype);
b2JointEdge.prototype.constructor = b2JointEdge;
b2JointEdge.prototype.__class__ = b2JointEdge;
b2JointEdge.__cache__ = {};
Module['b2JointEdge'] = b2JointEdge;

  b2JointEdge.prototype['get_other']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2JointEdge_get_other_0(self), b2Body);
}
    b2JointEdge.prototype['set_other']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2JointEdge_set_other_1(self, arg0);
}
  b2JointEdge.prototype['get_joint']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2JointEdge_get_joint_0(self), b2Joint);
}
    b2JointEdge.prototype['set_joint']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2JointEdge_set_joint_1(self, arg0);
}
  b2JointEdge.prototype['get_prev']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2JointEdge_get_prev_0(self), b2JointEdge);
}
    b2JointEdge.prototype['set_prev']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2JointEdge_set_prev_1(self, arg0);
}
  b2JointEdge.prototype['get_next']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2JointEdge_get_next_0(self), b2JointEdge);
}
    b2JointEdge.prototype['set_next']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2JointEdge_set_next_1(self, arg0);
}
  b2JointEdge.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2JointEdge___destroy___0(self);
}
// b2PulleyJointDef
function b2PulleyJointDef() {
  this.ptr = _emscripten_bind_b2PulleyJointDef_b2PulleyJointDef_0();
  getCache(b2PulleyJointDef)[this.ptr] = this;
};
b2PulleyJointDef.prototype = Object.create(b2JointDef.prototype);
b2PulleyJointDef.prototype.constructor = b2PulleyJointDef;
b2PulleyJointDef.prototype.__class__ = b2PulleyJointDef;
b2PulleyJointDef.__cache__ = {};
Module['b2PulleyJointDef'] = b2PulleyJointDef;

b2PulleyJointDef.prototype['Initialize'] = function(arg0, arg1, arg2, arg3, arg4, arg5, arg6) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  if (arg3 && typeof arg3 === 'object') arg3 = arg3.ptr;
  else arg3 = ensureString(arg3);
  if (arg4 && typeof arg4 === 'object') arg4 = arg4.ptr;
  else arg4 = ensureString(arg4);
  if (arg5 && typeof arg5 === 'object') arg5 = arg5.ptr;
  else arg5 = ensureString(arg5);
  if (arg6 && typeof arg6 === 'object') arg6 = arg6.ptr;
  else arg6 = ensureString(arg6);
  _emscripten_bind_b2PulleyJointDef_Initialize_7(self, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
};

  b2PulleyJointDef.prototype['get_groundAnchorA']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2PulleyJointDef_get_groundAnchorA_0(self), b2Vec2);
}
    b2PulleyJointDef.prototype['set_groundAnchorA']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PulleyJointDef_set_groundAnchorA_1(self, arg0);
}
  b2PulleyJointDef.prototype['get_groundAnchorB']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2PulleyJointDef_get_groundAnchorB_0(self), b2Vec2);
}
    b2PulleyJointDef.prototype['set_groundAnchorB']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PulleyJointDef_set_groundAnchorB_1(self, arg0);
}
  b2PulleyJointDef.prototype['get_localAnchorA']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2PulleyJointDef_get_localAnchorA_0(self), b2Vec2);
}
    b2PulleyJointDef.prototype['set_localAnchorA']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PulleyJointDef_set_localAnchorA_1(self, arg0);
}
  b2PulleyJointDef.prototype['get_localAnchorB']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2PulleyJointDef_get_localAnchorB_0(self), b2Vec2);
}
    b2PulleyJointDef.prototype['set_localAnchorB']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PulleyJointDef_set_localAnchorB_1(self, arg0);
}
  b2PulleyJointDef.prototype['get_lengthA']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2PulleyJointDef_get_lengthA_0(self);
}
    b2PulleyJointDef.prototype['set_lengthA']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PulleyJointDef_set_lengthA_1(self, arg0);
}
  b2PulleyJointDef.prototype['get_lengthB']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2PulleyJointDef_get_lengthB_0(self);
}
    b2PulleyJointDef.prototype['set_lengthB']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PulleyJointDef_set_lengthB_1(self, arg0);
}
  b2PulleyJointDef.prototype['get_ratio']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2PulleyJointDef_get_ratio_0(self);
}
    b2PulleyJointDef.prototype['set_ratio']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PulleyJointDef_set_ratio_1(self, arg0);
}
  b2PulleyJointDef.prototype['get_type']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2PulleyJointDef_get_type_0(self);
}
    b2PulleyJointDef.prototype['set_type']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PulleyJointDef_set_type_1(self, arg0);
}
  b2PulleyJointDef.prototype['get_userData']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2PulleyJointDef_get_userData_0(self);
}
    b2PulleyJointDef.prototype['set_userData']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PulleyJointDef_set_userData_1(self, arg0);
}
  b2PulleyJointDef.prototype['get_bodyA']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2PulleyJointDef_get_bodyA_0(self), b2Body);
}
    b2PulleyJointDef.prototype['set_bodyA']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PulleyJointDef_set_bodyA_1(self, arg0);
}
  b2PulleyJointDef.prototype['get_bodyB']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2PulleyJointDef_get_bodyB_0(self), b2Body);
}
    b2PulleyJointDef.prototype['set_bodyB']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PulleyJointDef_set_bodyB_1(self, arg0);
}
  b2PulleyJointDef.prototype['get_collideConnected']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2PulleyJointDef_get_collideConnected_0(self);
}
    b2PulleyJointDef.prototype['set_collideConnected']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PulleyJointDef_set_collideConnected_1(self, arg0);
}
  b2PulleyJointDef.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2PulleyJointDef___destroy___0(self);
}
// b2ContactListener
function b2ContactListener() { throw "cannot construct a b2ContactListener, no constructor in IDL" }
b2ContactListener.prototype = Object.create(WrapperObject.prototype);
b2ContactListener.prototype.constructor = b2ContactListener;
b2ContactListener.prototype.__class__ = b2ContactListener;
b2ContactListener.__cache__ = {};
Module['b2ContactListener'] = b2ContactListener;

  b2ContactListener.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2ContactListener___destroy___0(self);
}
// b2ManifoldPoint
function b2ManifoldPoint() {
  this.ptr = _emscripten_bind_b2ManifoldPoint_b2ManifoldPoint_0();
  getCache(b2ManifoldPoint)[this.ptr] = this;
};
b2ManifoldPoint.prototype = Object.create(WrapperObject.prototype);
b2ManifoldPoint.prototype.constructor = b2ManifoldPoint;
b2ManifoldPoint.prototype.__class__ = b2ManifoldPoint;
b2ManifoldPoint.__cache__ = {};
Module['b2ManifoldPoint'] = b2ManifoldPoint;

  b2ManifoldPoint.prototype['get_localPoint']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2ManifoldPoint_get_localPoint_0(self), b2Vec2);
}
    b2ManifoldPoint.prototype['set_localPoint']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2ManifoldPoint_set_localPoint_1(self, arg0);
}
  b2ManifoldPoint.prototype['get_normalImpulse']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2ManifoldPoint_get_normalImpulse_0(self);
}
    b2ManifoldPoint.prototype['set_normalImpulse']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2ManifoldPoint_set_normalImpulse_1(self, arg0);
}
  b2ManifoldPoint.prototype['get_tangentImpulse']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2ManifoldPoint_get_tangentImpulse_0(self);
}
    b2ManifoldPoint.prototype['set_tangentImpulse']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2ManifoldPoint_set_tangentImpulse_1(self, arg0);
}
  b2ManifoldPoint.prototype['get_id']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2ManifoldPoint_get_id_0(self), b2ContactID);
}
    b2ManifoldPoint.prototype['set_id']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2ManifoldPoint_set_id_1(self, arg0);
}
  b2ManifoldPoint.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2ManifoldPoint___destroy___0(self);
}
// b2QueryCallback
function b2QueryCallback() { throw "cannot construct a b2QueryCallback, no constructor in IDL" }
b2QueryCallback.prototype = Object.create(WrapperObject.prototype);
b2QueryCallback.prototype.constructor = b2QueryCallback;
b2QueryCallback.prototype.__class__ = b2QueryCallback;
b2QueryCallback.__cache__ = {};
Module['b2QueryCallback'] = b2QueryCallback;

  b2QueryCallback.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2QueryCallback___destroy___0(self);
}
// b2JointDef
function b2JointDef() {
  this.ptr = _emscripten_bind_b2JointDef_b2JointDef_0();
  getCache(b2JointDef)[this.ptr] = this;
};
b2JointDef.prototype = Object.create(WrapperObject.prototype);
b2JointDef.prototype.constructor = b2JointDef;
b2JointDef.prototype.__class__ = b2JointDef;
b2JointDef.__cache__ = {};
Module['b2JointDef'] = b2JointDef;

  b2JointDef.prototype['get_type']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2JointDef_get_type_0(self);
}
    b2JointDef.prototype['set_type']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2JointDef_set_type_1(self, arg0);
}
  b2JointDef.prototype['get_userData']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2JointDef_get_userData_0(self);
}
    b2JointDef.prototype['set_userData']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2JointDef_set_userData_1(self, arg0);
}
  b2JointDef.prototype['get_bodyA']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2JointDef_get_bodyA_0(self), b2Body);
}
    b2JointDef.prototype['set_bodyA']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2JointDef_set_bodyA_1(self, arg0);
}
  b2JointDef.prototype['get_bodyB']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2JointDef_get_bodyB_0(self), b2Body);
}
    b2JointDef.prototype['set_bodyB']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2JointDef_set_bodyB_1(self, arg0);
}
  b2JointDef.prototype['get_collideConnected']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2JointDef_get_collideConnected_0(self);
}
    b2JointDef.prototype['set_collideConnected']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2JointDef_set_collideConnected_1(self, arg0);
}
  b2JointDef.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2JointDef___destroy___0(self);
}
// b2Transform
function b2Transform(arg0, arg1) {
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg0 === undefined) { this.ptr = _emscripten_bind_b2Transform_b2Transform_0(); getCache(b2Transform)[this.ptr] = this;return }
  if (arg1 === undefined) { this.ptr = _emscripten_bind_b2Transform_b2Transform_1(arg0); getCache(b2Transform)[this.ptr] = this;return }
  this.ptr = _emscripten_bind_b2Transform_b2Transform_2(arg0, arg1);
  getCache(b2Transform)[this.ptr] = this;
};
b2Transform.prototype = Object.create(WrapperObject.prototype);
b2Transform.prototype.constructor = b2Transform;
b2Transform.prototype.__class__ = b2Transform;
b2Transform.__cache__ = {};
Module['b2Transform'] = b2Transform;

b2Transform.prototype['SetIdentity'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2Transform_SetIdentity_0(self);
};

b2Transform.prototype['Set'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  _emscripten_bind_b2Transform_Set_2(self, arg0, arg1);
};

  b2Transform.prototype['get_p']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Transform_get_p_0(self), b2Vec2);
}
    b2Transform.prototype['set_p']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Transform_set_p_1(self, arg0);
}
  b2Transform.prototype['get_q']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Transform_get_q_0(self), b2Rot);
}
    b2Transform.prototype['set_q']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Transform_set_q_1(self, arg0);
}
  b2Transform.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2Transform___destroy___0(self);
}
// b2ChainShape
function b2ChainShape() {
  this.ptr = _emscripten_bind_b2ChainShape_b2ChainShape_0();
  getCache(b2ChainShape)[this.ptr] = this;
};
b2ChainShape.prototype = Object.create(b2Shape.prototype);
b2ChainShape.prototype.constructor = b2ChainShape;
b2ChainShape.prototype.__class__ = b2ChainShape;
b2ChainShape.__cache__ = {};
Module['b2ChainShape'] = b2ChainShape;

b2ChainShape.prototype['CreateLoop'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  _emscripten_bind_b2ChainShape_CreateLoop_2(self, arg0, arg1);
};

b2ChainShape.prototype['CreateChain'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  _emscripten_bind_b2ChainShape_CreateChain_2(self, arg0, arg1);
};

b2ChainShape.prototype['SetPrevVertex'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2ChainShape_SetPrevVertex_1(self, arg0);
};

b2ChainShape.prototype['SetNextVertex'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2ChainShape_SetNextVertex_1(self, arg0);
};

b2ChainShape.prototype['GetChildEdge'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  _emscripten_bind_b2ChainShape_GetChildEdge_2(self, arg0, arg1);
};

b2ChainShape.prototype['GetType'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2ChainShape_GetType_0(self);
};

b2ChainShape.prototype['GetChildCount'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2ChainShape_GetChildCount_0(self);
};

b2ChainShape.prototype['TestPoint'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  return _emscripten_bind_b2ChainShape_TestPoint_2(self, arg0, arg1);
};

b2ChainShape.prototype['RayCast'] = function(arg0, arg1, arg2, arg3) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  if (arg3 && typeof arg3 === 'object') arg3 = arg3.ptr;
  else arg3 = ensureString(arg3);
  return _emscripten_bind_b2ChainShape_RayCast_4(self, arg0, arg1, arg2, arg3);
};

b2ChainShape.prototype['ComputeAABB'] = function(arg0, arg1, arg2) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  _emscripten_bind_b2ChainShape_ComputeAABB_3(self, arg0, arg1, arg2);
};

b2ChainShape.prototype['ComputeMass'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  _emscripten_bind_b2ChainShape_ComputeMass_2(self, arg0, arg1);
};

  b2ChainShape.prototype['get_m_vertices']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2ChainShape_get_m_vertices_0(self), b2Vec2);
}
    b2ChainShape.prototype['set_m_vertices']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2ChainShape_set_m_vertices_1(self, arg0);
}
  b2ChainShape.prototype['get_m_count']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2ChainShape_get_m_count_0(self);
}
    b2ChainShape.prototype['set_m_count']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2ChainShape_set_m_count_1(self, arg0);
}
  b2ChainShape.prototype['get_m_prevVertex']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2ChainShape_get_m_prevVertex_0(self), b2Vec2);
}
    b2ChainShape.prototype['set_m_prevVertex']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2ChainShape_set_m_prevVertex_1(self, arg0);
}
  b2ChainShape.prototype['get_m_nextVertex']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2ChainShape_get_m_nextVertex_0(self), b2Vec2);
}
    b2ChainShape.prototype['set_m_nextVertex']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2ChainShape_set_m_nextVertex_1(self, arg0);
}
  b2ChainShape.prototype['get_m_hasPrevVertex']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2ChainShape_get_m_hasPrevVertex_0(self);
}
    b2ChainShape.prototype['set_m_hasPrevVertex']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2ChainShape_set_m_hasPrevVertex_1(self, arg0);
}
  b2ChainShape.prototype['get_m_hasNextVertex']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2ChainShape_get_m_hasNextVertex_0(self);
}
    b2ChainShape.prototype['set_m_hasNextVertex']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2ChainShape_set_m_hasNextVertex_1(self, arg0);
}
  b2ChainShape.prototype['get_m_type']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2ChainShape_get_m_type_0(self);
}
    b2ChainShape.prototype['set_m_type']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2ChainShape_set_m_type_1(self, arg0);
}
  b2ChainShape.prototype['get_m_radius']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2ChainShape_get_m_radius_0(self);
}
    b2ChainShape.prototype['set_m_radius']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2ChainShape_set_m_radius_1(self, arg0);
}
  b2ChainShape.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2ChainShape___destroy___0(self);
}
// b2Params
function b2Params() {
  this.ptr = _emscripten_bind_b2Params_b2Params_0();
  getCache(b2Params)[this.ptr] = this;
};
b2Params.prototype = Object.create(WrapperObject.prototype);
b2Params.prototype.constructor = b2Params;
b2Params.prototype.__class__ = b2Params;
b2Params.__cache__ = {};
Module['b2Params'] = b2Params;

b2Params.prototype['setSimd'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Params_setSimd_1(self, arg0);
};

b2Params.prototype['getSimd'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Params_getSimd_0(self);
};

b2Params.prototype['setDumpPos'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Params_setDumpPos_1(self, arg0);
};

b2Params.prototype['getDumpPos'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Params_getDumpPos_0(self);
};

b2Params.prototype['setDumpCon'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Params_setDumpCon_1(self, arg0);
};

b2Params.prototype['getDumpCon'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Params_getDumpCon_0(self);
};

b2Params.prototype['setTestOut'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Params_setTestOut_1(self, arg0);
};

b2Params.prototype['getTestOut'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Params_getTestOut_0(self);
};

b2Params.prototype['setDebug'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Params_setDebug_1(self, arg0);
};

b2Params.prototype['getDebug'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Params_getDebug_0(self);
};

b2Params.prototype['setFrame1'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Params_setFrame1_1(self, arg0);
};

b2Params.prototype['getFrame1'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Params_getFrame1_0(self);
};

b2Params.prototype['setFrame10'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Params_setFrame10_1(self, arg0);
};

b2Params.prototype['getFrame10'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Params_getFrame10_0(self);
};

b2Params.prototype['setSortCon'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Params_setSortCon_1(self, arg0);
};

b2Params.prototype['getSortCon'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Params_getSortCon_0(self);
};

// b2RopeJoint
function b2RopeJoint() { throw "cannot construct a b2RopeJoint, no constructor in IDL" }
b2RopeJoint.prototype = Object.create(b2Joint.prototype);
b2RopeJoint.prototype.constructor = b2RopeJoint;
b2RopeJoint.prototype.__class__ = b2RopeJoint;
b2RopeJoint.__cache__ = {};
Module['b2RopeJoint'] = b2RopeJoint;

b2RopeJoint.prototype['GetLocalAnchorA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2RopeJoint_GetLocalAnchorA_0(self), b2Vec2);
};

b2RopeJoint.prototype['GetLocalAnchorB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2RopeJoint_GetLocalAnchorB_0(self), b2Vec2);
};

b2RopeJoint.prototype['SetMaxLength'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RopeJoint_SetMaxLength_1(self, arg0);
};

b2RopeJoint.prototype['GetMaxLength'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2RopeJoint_GetMaxLength_0(self);
};

b2RopeJoint.prototype['GetLimitState'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2RopeJoint_GetLimitState_0(self);
};

b2RopeJoint.prototype['GetType'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2RopeJoint_GetType_0(self);
};

b2RopeJoint.prototype['GetBodyA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2RopeJoint_GetBodyA_0(self), b2Body);
};

b2RopeJoint.prototype['GetBodyB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2RopeJoint_GetBodyB_0(self), b2Body);
};

b2RopeJoint.prototype['GetAnchorA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2RopeJoint_GetAnchorA_0(self), b2Vec2);
};

b2RopeJoint.prototype['GetAnchorB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2RopeJoint_GetAnchorB_0(self), b2Vec2);
};

b2RopeJoint.prototype['GetReactionForce'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return wrapPointer(_emscripten_bind_b2RopeJoint_GetReactionForce_1(self, arg0), b2Vec2);
};

b2RopeJoint.prototype['GetReactionTorque'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return _emscripten_bind_b2RopeJoint_GetReactionTorque_1(self, arg0);
};

b2RopeJoint.prototype['GetNext'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2RopeJoint_GetNext_0(self), b2Joint);
};

b2RopeJoint.prototype['GetUserData'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2RopeJoint_GetUserData_0(self);
};

b2RopeJoint.prototype['SetUserData'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RopeJoint_SetUserData_1(self, arg0);
};

b2RopeJoint.prototype['IsActive'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2RopeJoint_IsActive_0(self);
};

b2RopeJoint.prototype['GetCollideConnected'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2RopeJoint_GetCollideConnected_0(self);
};

  b2RopeJoint.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2RopeJoint___destroy___0(self);
}
// b2RevoluteJoint
function b2RevoluteJoint() { throw "cannot construct a b2RevoluteJoint, no constructor in IDL" }
b2RevoluteJoint.prototype = Object.create(b2Joint.prototype);
b2RevoluteJoint.prototype.constructor = b2RevoluteJoint;
b2RevoluteJoint.prototype.__class__ = b2RevoluteJoint;
b2RevoluteJoint.__cache__ = {};
Module['b2RevoluteJoint'] = b2RevoluteJoint;

b2RevoluteJoint.prototype['GetLocalAnchorA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2RevoluteJoint_GetLocalAnchorA_0(self), b2Vec2);
};

b2RevoluteJoint.prototype['GetLocalAnchorB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2RevoluteJoint_GetLocalAnchorB_0(self), b2Vec2);
};

b2RevoluteJoint.prototype['GetReferenceAngle'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2RevoluteJoint_GetReferenceAngle_0(self);
};

b2RevoluteJoint.prototype['GetJointAngle'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2RevoluteJoint_GetJointAngle_0(self);
};

b2RevoluteJoint.prototype['GetJointSpeed'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2RevoluteJoint_GetJointSpeed_0(self);
};

b2RevoluteJoint.prototype['IsLimitEnabled'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2RevoluteJoint_IsLimitEnabled_0(self);
};

b2RevoluteJoint.prototype['EnableLimit'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RevoluteJoint_EnableLimit_1(self, arg0);
};

b2RevoluteJoint.prototype['GetLowerLimit'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2RevoluteJoint_GetLowerLimit_0(self);
};

b2RevoluteJoint.prototype['GetUpperLimit'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2RevoluteJoint_GetUpperLimit_0(self);
};

b2RevoluteJoint.prototype['SetLimits'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  _emscripten_bind_b2RevoluteJoint_SetLimits_2(self, arg0, arg1);
};

b2RevoluteJoint.prototype['IsMotorEnabled'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2RevoluteJoint_IsMotorEnabled_0(self);
};

b2RevoluteJoint.prototype['EnableMotor'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RevoluteJoint_EnableMotor_1(self, arg0);
};

b2RevoluteJoint.prototype['SetMotorSpeed'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RevoluteJoint_SetMotorSpeed_1(self, arg0);
};

b2RevoluteJoint.prototype['GetMotorSpeed'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2RevoluteJoint_GetMotorSpeed_0(self);
};

b2RevoluteJoint.prototype['SetMaxMotorTorque'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RevoluteJoint_SetMaxMotorTorque_1(self, arg0);
};

b2RevoluteJoint.prototype['GetMaxMotorTorque'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2RevoluteJoint_GetMaxMotorTorque_0(self);
};

b2RevoluteJoint.prototype['GetMotorTorque'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return _emscripten_bind_b2RevoluteJoint_GetMotorTorque_1(self, arg0);
};

b2RevoluteJoint.prototype['GetType'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2RevoluteJoint_GetType_0(self);
};

b2RevoluteJoint.prototype['GetBodyA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2RevoluteJoint_GetBodyA_0(self), b2Body);
};

b2RevoluteJoint.prototype['GetBodyB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2RevoluteJoint_GetBodyB_0(self), b2Body);
};

b2RevoluteJoint.prototype['GetAnchorA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2RevoluteJoint_GetAnchorA_0(self), b2Vec2);
};

b2RevoluteJoint.prototype['GetAnchorB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2RevoluteJoint_GetAnchorB_0(self), b2Vec2);
};

b2RevoluteJoint.prototype['GetReactionForce'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return wrapPointer(_emscripten_bind_b2RevoluteJoint_GetReactionForce_1(self, arg0), b2Vec2);
};

b2RevoluteJoint.prototype['GetReactionTorque'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return _emscripten_bind_b2RevoluteJoint_GetReactionTorque_1(self, arg0);
};

b2RevoluteJoint.prototype['GetNext'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2RevoluteJoint_GetNext_0(self), b2Joint);
};

b2RevoluteJoint.prototype['GetUserData'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2RevoluteJoint_GetUserData_0(self);
};

b2RevoluteJoint.prototype['SetUserData'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RevoluteJoint_SetUserData_1(self, arg0);
};

b2RevoluteJoint.prototype['IsActive'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2RevoluteJoint_IsActive_0(self);
};

b2RevoluteJoint.prototype['GetCollideConnected'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2RevoluteJoint_GetCollideConnected_0(self);
};

  b2RevoluteJoint.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2RevoluteJoint___destroy___0(self);
}
// b2RayCastInput
function b2RayCastInput() { throw "cannot construct a b2RayCastInput, no constructor in IDL" }
b2RayCastInput.prototype = Object.create(WrapperObject.prototype);
b2RayCastInput.prototype.constructor = b2RayCastInput;
b2RayCastInput.prototype.__class__ = b2RayCastInput;
b2RayCastInput.__cache__ = {};
Module['b2RayCastInput'] = b2RayCastInput;

  b2RayCastInput.prototype['get_p1']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2RayCastInput_get_p1_0(self), b2Vec2);
}
    b2RayCastInput.prototype['set_p1']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RayCastInput_set_p1_1(self, arg0);
}
  b2RayCastInput.prototype['get_p2']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2RayCastInput_get_p2_0(self), b2Vec2);
}
    b2RayCastInput.prototype['set_p2']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RayCastInput_set_p2_1(self, arg0);
}
  b2RayCastInput.prototype['get_maxFraction']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2RayCastInput_get_maxFraction_0(self);
}
    b2RayCastInput.prototype['set_maxFraction']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RayCastInput_set_maxFraction_1(self, arg0);
}
  b2RayCastInput.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2RayCastInput___destroy___0(self);
}
// b2PolygonShape
function b2PolygonShape() {
  this.ptr = _emscripten_bind_b2PolygonShape_b2PolygonShape_0();
  getCache(b2PolygonShape)[this.ptr] = this;
};
b2PolygonShape.prototype = Object.create(b2Shape.prototype);
b2PolygonShape.prototype.constructor = b2PolygonShape;
b2PolygonShape.prototype.__class__ = b2PolygonShape;
b2PolygonShape.__cache__ = {};
Module['b2PolygonShape'] = b2PolygonShape;

b2PolygonShape.prototype['Set'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  _emscripten_bind_b2PolygonShape_Set_2(self, arg0, arg1);
};

b2PolygonShape.prototype['SetAsBox'] = function(arg0, arg1, arg2, arg3) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  if (arg3 && typeof arg3 === 'object') arg3 = arg3.ptr;
  else arg3 = ensureString(arg3);
  if (arg2 === undefined) { _emscripten_bind_b2PolygonShape_SetAsBox_2(self, arg0, arg1);  return }
  if (arg3 === undefined) { _emscripten_bind_b2PolygonShape_SetAsBox_3(self, arg0, arg1, arg2);  return }
  _emscripten_bind_b2PolygonShape_SetAsBox_4(self, arg0, arg1, arg2, arg3);
};

b2PolygonShape.prototype['GetVertexCount'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2PolygonShape_GetVertexCount_0(self);
};

b2PolygonShape.prototype['GetVertex'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return wrapPointer(_emscripten_bind_b2PolygonShape_GetVertex_1(self, arg0), b2Vec2);
};

b2PolygonShape.prototype['GetType'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2PolygonShape_GetType_0(self);
};

b2PolygonShape.prototype['GetChildCount'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2PolygonShape_GetChildCount_0(self);
};

b2PolygonShape.prototype['TestPoint'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  return _emscripten_bind_b2PolygonShape_TestPoint_2(self, arg0, arg1);
};

b2PolygonShape.prototype['RayCast'] = function(arg0, arg1, arg2, arg3) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  if (arg3 && typeof arg3 === 'object') arg3 = arg3.ptr;
  else arg3 = ensureString(arg3);
  return _emscripten_bind_b2PolygonShape_RayCast_4(self, arg0, arg1, arg2, arg3);
};

b2PolygonShape.prototype['ComputeAABB'] = function(arg0, arg1, arg2) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  _emscripten_bind_b2PolygonShape_ComputeAABB_3(self, arg0, arg1, arg2);
};

b2PolygonShape.prototype['ComputeMass'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  _emscripten_bind_b2PolygonShape_ComputeMass_2(self, arg0, arg1);
};

  b2PolygonShape.prototype['get_m_centroid']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2PolygonShape_get_m_centroid_0(self), b2Vec2);
}
    b2PolygonShape.prototype['set_m_centroid']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PolygonShape_set_m_centroid_1(self, arg0);
}
  b2PolygonShape.prototype['get_m_vertexCount']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2PolygonShape_get_m_vertexCount_0(self);
}
    b2PolygonShape.prototype['set_m_vertexCount']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PolygonShape_set_m_vertexCount_1(self, arg0);
}
  b2PolygonShape.prototype['get_m_type']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2PolygonShape_get_m_type_0(self);
}
    b2PolygonShape.prototype['set_m_type']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PolygonShape_set_m_type_1(self, arg0);
}
  b2PolygonShape.prototype['get_m_radius']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2PolygonShape_get_m_radius_0(self);
}
    b2PolygonShape.prototype['set_m_radius']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PolygonShape_set_m_radius_1(self, arg0);
}
  b2PolygonShape.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2PolygonShape___destroy___0(self);
}
// b2WheelJointDef
function b2WheelJointDef() {
  this.ptr = _emscripten_bind_b2WheelJointDef_b2WheelJointDef_0();
  getCache(b2WheelJointDef)[this.ptr] = this;
};
b2WheelJointDef.prototype = Object.create(b2JointDef.prototype);
b2WheelJointDef.prototype.constructor = b2WheelJointDef;
b2WheelJointDef.prototype.__class__ = b2WheelJointDef;
b2WheelJointDef.__cache__ = {};
Module['b2WheelJointDef'] = b2WheelJointDef;

b2WheelJointDef.prototype['Initialize'] = function(arg0, arg1, arg2, arg3) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  if (arg3 && typeof arg3 === 'object') arg3 = arg3.ptr;
  else arg3 = ensureString(arg3);
  _emscripten_bind_b2WheelJointDef_Initialize_4(self, arg0, arg1, arg2, arg3);
};

  b2WheelJointDef.prototype['get_localAnchorA']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2WheelJointDef_get_localAnchorA_0(self), b2Vec2);
}
    b2WheelJointDef.prototype['set_localAnchorA']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WheelJointDef_set_localAnchorA_1(self, arg0);
}
  b2WheelJointDef.prototype['get_localAnchorB']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2WheelJointDef_get_localAnchorB_0(self), b2Vec2);
}
    b2WheelJointDef.prototype['set_localAnchorB']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WheelJointDef_set_localAnchorB_1(self, arg0);
}
  b2WheelJointDef.prototype['get_localAxisA']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2WheelJointDef_get_localAxisA_0(self), b2Vec2);
}
    b2WheelJointDef.prototype['set_localAxisA']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WheelJointDef_set_localAxisA_1(self, arg0);
}
  b2WheelJointDef.prototype['get_enableMotor']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2WheelJointDef_get_enableMotor_0(self);
}
    b2WheelJointDef.prototype['set_enableMotor']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WheelJointDef_set_enableMotor_1(self, arg0);
}
  b2WheelJointDef.prototype['get_maxMotorTorque']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2WheelJointDef_get_maxMotorTorque_0(self);
}
    b2WheelJointDef.prototype['set_maxMotorTorque']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WheelJointDef_set_maxMotorTorque_1(self, arg0);
}
  b2WheelJointDef.prototype['get_motorSpeed']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2WheelJointDef_get_motorSpeed_0(self);
}
    b2WheelJointDef.prototype['set_motorSpeed']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WheelJointDef_set_motorSpeed_1(self, arg0);
}
  b2WheelJointDef.prototype['get_frequencyHz']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2WheelJointDef_get_frequencyHz_0(self);
}
    b2WheelJointDef.prototype['set_frequencyHz']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WheelJointDef_set_frequencyHz_1(self, arg0);
}
  b2WheelJointDef.prototype['get_dampingRatio']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2WheelJointDef_get_dampingRatio_0(self);
}
    b2WheelJointDef.prototype['set_dampingRatio']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WheelJointDef_set_dampingRatio_1(self, arg0);
}
  b2WheelJointDef.prototype['get_type']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2WheelJointDef_get_type_0(self);
}
    b2WheelJointDef.prototype['set_type']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WheelJointDef_set_type_1(self, arg0);
}
  b2WheelJointDef.prototype['get_userData']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2WheelJointDef_get_userData_0(self);
}
    b2WheelJointDef.prototype['set_userData']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WheelJointDef_set_userData_1(self, arg0);
}
  b2WheelJointDef.prototype['get_bodyA']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2WheelJointDef_get_bodyA_0(self), b2Body);
}
    b2WheelJointDef.prototype['set_bodyA']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WheelJointDef_set_bodyA_1(self, arg0);
}
  b2WheelJointDef.prototype['get_bodyB']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2WheelJointDef_get_bodyB_0(self), b2Body);
}
    b2WheelJointDef.prototype['set_bodyB']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WheelJointDef_set_bodyB_1(self, arg0);
}
  b2WheelJointDef.prototype['get_collideConnected']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2WheelJointDef_get_collideConnected_0(self);
}
    b2WheelJointDef.prototype['set_collideConnected']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WheelJointDef_set_collideConnected_1(self, arg0);
}
  b2WheelJointDef.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2WheelJointDef___destroy___0(self);
}
// b2EdgeShape
function b2EdgeShape() {
  this.ptr = _emscripten_bind_b2EdgeShape_b2EdgeShape_0();
  getCache(b2EdgeShape)[this.ptr] = this;
};
b2EdgeShape.prototype = Object.create(b2Shape.prototype);
b2EdgeShape.prototype.constructor = b2EdgeShape;
b2EdgeShape.prototype.__class__ = b2EdgeShape;
b2EdgeShape.__cache__ = {};
Module['b2EdgeShape'] = b2EdgeShape;

b2EdgeShape.prototype['Set'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  _emscripten_bind_b2EdgeShape_Set_2(self, arg0, arg1);
};

b2EdgeShape.prototype['GetType'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2EdgeShape_GetType_0(self);
};

b2EdgeShape.prototype['GetChildCount'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2EdgeShape_GetChildCount_0(self);
};

b2EdgeShape.prototype['TestPoint'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  return _emscripten_bind_b2EdgeShape_TestPoint_2(self, arg0, arg1);
};

b2EdgeShape.prototype['RayCast'] = function(arg0, arg1, arg2, arg3) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  if (arg3 && typeof arg3 === 'object') arg3 = arg3.ptr;
  else arg3 = ensureString(arg3);
  return _emscripten_bind_b2EdgeShape_RayCast_4(self, arg0, arg1, arg2, arg3);
};

b2EdgeShape.prototype['ComputeAABB'] = function(arg0, arg1, arg2) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  _emscripten_bind_b2EdgeShape_ComputeAABB_3(self, arg0, arg1, arg2);
};

b2EdgeShape.prototype['ComputeMass'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  _emscripten_bind_b2EdgeShape_ComputeMass_2(self, arg0, arg1);
};

  b2EdgeShape.prototype['get_m_vertex1']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2EdgeShape_get_m_vertex1_0(self), b2Vec2);
}
    b2EdgeShape.prototype['set_m_vertex1']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2EdgeShape_set_m_vertex1_1(self, arg0);
}
  b2EdgeShape.prototype['get_m_vertex2']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2EdgeShape_get_m_vertex2_0(self), b2Vec2);
}
    b2EdgeShape.prototype['set_m_vertex2']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2EdgeShape_set_m_vertex2_1(self, arg0);
}
  b2EdgeShape.prototype['get_m_vertex0']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2EdgeShape_get_m_vertex0_0(self), b2Vec2);
}
    b2EdgeShape.prototype['set_m_vertex0']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2EdgeShape_set_m_vertex0_1(self, arg0);
}
  b2EdgeShape.prototype['get_m_vertex3']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2EdgeShape_get_m_vertex3_0(self), b2Vec2);
}
    b2EdgeShape.prototype['set_m_vertex3']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2EdgeShape_set_m_vertex3_1(self, arg0);
}
  b2EdgeShape.prototype['get_m_hasVertex0']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2EdgeShape_get_m_hasVertex0_0(self);
}
    b2EdgeShape.prototype['set_m_hasVertex0']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2EdgeShape_set_m_hasVertex0_1(self, arg0);
}
  b2EdgeShape.prototype['get_m_hasVertex3']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2EdgeShape_get_m_hasVertex3_0(self);
}
    b2EdgeShape.prototype['set_m_hasVertex3']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2EdgeShape_set_m_hasVertex3_1(self, arg0);
}
  b2EdgeShape.prototype['get_m_type']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2EdgeShape_get_m_type_0(self);
}
    b2EdgeShape.prototype['set_m_type']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2EdgeShape_set_m_type_1(self, arg0);
}
  b2EdgeShape.prototype['get_m_radius']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2EdgeShape_get_m_radius_0(self);
}
    b2EdgeShape.prototype['set_m_radius']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2EdgeShape_set_m_radius_1(self, arg0);
}
  b2EdgeShape.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2EdgeShape___destroy___0(self);
}
// JSContactFilter
function JSContactFilter() { throw "cannot construct a JSContactFilter, no constructor in IDL" }
JSContactFilter.prototype = Object.create(b2ContactFilter.prototype);
JSContactFilter.prototype.constructor = JSContactFilter;
JSContactFilter.prototype.__class__ = JSContactFilter;
JSContactFilter.__cache__ = {};
Module['JSContactFilter'] = JSContactFilter;

JSContactFilter.prototype['JSContactListener'] = function() {
  var self = this.ptr;
  _emscripten_bind_JSContactFilter_JSContactListener_0(self);
};

JSContactFilter.prototype['ShouldCollide'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  return _emscripten_bind_JSContactFilter_ShouldCollide_2(self, arg0, arg1);
};

  JSContactFilter.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_JSContactFilter___destroy___0(self);
}
// b2RevoluteJointDef
function b2RevoluteJointDef() {
  this.ptr = _emscripten_bind_b2RevoluteJointDef_b2RevoluteJointDef_0();
  getCache(b2RevoluteJointDef)[this.ptr] = this;
};
b2RevoluteJointDef.prototype = Object.create(b2JointDef.prototype);
b2RevoluteJointDef.prototype.constructor = b2RevoluteJointDef;
b2RevoluteJointDef.prototype.__class__ = b2RevoluteJointDef;
b2RevoluteJointDef.__cache__ = {};
Module['b2RevoluteJointDef'] = b2RevoluteJointDef;

b2RevoluteJointDef.prototype['Initialize'] = function(arg0, arg1, arg2) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  _emscripten_bind_b2RevoluteJointDef_Initialize_3(self, arg0, arg1, arg2);
};

  b2RevoluteJointDef.prototype['get_localAnchorA']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2RevoluteJointDef_get_localAnchorA_0(self), b2Vec2);
}
    b2RevoluteJointDef.prototype['set_localAnchorA']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RevoluteJointDef_set_localAnchorA_1(self, arg0);
}
  b2RevoluteJointDef.prototype['get_localAnchorB']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2RevoluteJointDef_get_localAnchorB_0(self), b2Vec2);
}
    b2RevoluteJointDef.prototype['set_localAnchorB']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RevoluteJointDef_set_localAnchorB_1(self, arg0);
}
  b2RevoluteJointDef.prototype['get_referenceAngle']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2RevoluteJointDef_get_referenceAngle_0(self);
}
    b2RevoluteJointDef.prototype['set_referenceAngle']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RevoluteJointDef_set_referenceAngle_1(self, arg0);
}
  b2RevoluteJointDef.prototype['get_enableLimit']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2RevoluteJointDef_get_enableLimit_0(self);
}
    b2RevoluteJointDef.prototype['set_enableLimit']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RevoluteJointDef_set_enableLimit_1(self, arg0);
}
  b2RevoluteJointDef.prototype['get_lowerAngle']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2RevoluteJointDef_get_lowerAngle_0(self);
}
    b2RevoluteJointDef.prototype['set_lowerAngle']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RevoluteJointDef_set_lowerAngle_1(self, arg0);
}
  b2RevoluteJointDef.prototype['get_upperAngle']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2RevoluteJointDef_get_upperAngle_0(self);
}
    b2RevoluteJointDef.prototype['set_upperAngle']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RevoluteJointDef_set_upperAngle_1(self, arg0);
}
  b2RevoluteJointDef.prototype['get_enableMotor']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2RevoluteJointDef_get_enableMotor_0(self);
}
    b2RevoluteJointDef.prototype['set_enableMotor']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RevoluteJointDef_set_enableMotor_1(self, arg0);
}
  b2RevoluteJointDef.prototype['get_motorSpeed']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2RevoluteJointDef_get_motorSpeed_0(self);
}
    b2RevoluteJointDef.prototype['set_motorSpeed']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RevoluteJointDef_set_motorSpeed_1(self, arg0);
}
  b2RevoluteJointDef.prototype['get_maxMotorTorque']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2RevoluteJointDef_get_maxMotorTorque_0(self);
}
    b2RevoluteJointDef.prototype['set_maxMotorTorque']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RevoluteJointDef_set_maxMotorTorque_1(self, arg0);
}
  b2RevoluteJointDef.prototype['get_type']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2RevoluteJointDef_get_type_0(self);
}
    b2RevoluteJointDef.prototype['set_type']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RevoluteJointDef_set_type_1(self, arg0);
}
  b2RevoluteJointDef.prototype['get_userData']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2RevoluteJointDef_get_userData_0(self);
}
    b2RevoluteJointDef.prototype['set_userData']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RevoluteJointDef_set_userData_1(self, arg0);
}
  b2RevoluteJointDef.prototype['get_bodyA']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2RevoluteJointDef_get_bodyA_0(self), b2Body);
}
    b2RevoluteJointDef.prototype['set_bodyA']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RevoluteJointDef_set_bodyA_1(self, arg0);
}
  b2RevoluteJointDef.prototype['get_bodyB']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2RevoluteJointDef_get_bodyB_0(self), b2Body);
}
    b2RevoluteJointDef.prototype['set_bodyB']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RevoluteJointDef_set_bodyB_1(self, arg0);
}
  b2RevoluteJointDef.prototype['get_collideConnected']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2RevoluteJointDef_get_collideConnected_0(self);
}
    b2RevoluteJointDef.prototype['set_collideConnected']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RevoluteJointDef_set_collideConnected_1(self, arg0);
}
  b2RevoluteJointDef.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2RevoluteJointDef___destroy___0(self);
}
// JSDraw
function JSDraw() {
  this.ptr = _emscripten_bind_JSDraw_JSDraw_0();
  getCache(JSDraw)[this.ptr] = this;
};
JSDraw.prototype = Object.create(b2Draw.prototype);
JSDraw.prototype.constructor = JSDraw;
JSDraw.prototype.__class__ = JSDraw;
JSDraw.__cache__ = {};
Module['JSDraw'] = JSDraw;

JSDraw.prototype['DrawPolygon'] = function(arg0, arg1, arg2) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  _emscripten_bind_JSDraw_DrawPolygon_3(self, arg0, arg1, arg2);
};

JSDraw.prototype['DrawSolidPolygon'] = function(arg0, arg1, arg2) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  _emscripten_bind_JSDraw_DrawSolidPolygon_3(self, arg0, arg1, arg2);
};

JSDraw.prototype['DrawCircle'] = function(arg0, arg1, arg2) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  _emscripten_bind_JSDraw_DrawCircle_3(self, arg0, arg1, arg2);
};

JSDraw.prototype['DrawSolidCircle'] = function(arg0, arg1, arg2, arg3) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  if (arg3 && typeof arg3 === 'object') arg3 = arg3.ptr;
  else arg3 = ensureString(arg3);
  _emscripten_bind_JSDraw_DrawSolidCircle_4(self, arg0, arg1, arg2, arg3);
};

JSDraw.prototype['DrawSegment'] = function(arg0, arg1, arg2) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  _emscripten_bind_JSDraw_DrawSegment_3(self, arg0, arg1, arg2);
};

JSDraw.prototype['DrawTransform'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_JSDraw_DrawTransform_1(self, arg0);
};

  JSDraw.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_JSDraw___destroy___0(self);
}
// b2WheelJoint
function b2WheelJoint() { throw "cannot construct a b2WheelJoint, no constructor in IDL" }
b2WheelJoint.prototype = Object.create(b2Joint.prototype);
b2WheelJoint.prototype.constructor = b2WheelJoint;
b2WheelJoint.prototype.__class__ = b2WheelJoint;
b2WheelJoint.__cache__ = {};
Module['b2WheelJoint'] = b2WheelJoint;

b2WheelJoint.prototype['GetLocalAnchorA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2WheelJoint_GetLocalAnchorA_0(self), b2Vec2);
};

b2WheelJoint.prototype['GetLocalAnchorB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2WheelJoint_GetLocalAnchorB_0(self), b2Vec2);
};

b2WheelJoint.prototype['GetLocalAxisA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2WheelJoint_GetLocalAxisA_0(self), b2Vec2);
};

b2WheelJoint.prototype['GetJointTranslation'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2WheelJoint_GetJointTranslation_0(self);
};

b2WheelJoint.prototype['GetJointSpeed'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2WheelJoint_GetJointSpeed_0(self);
};

b2WheelJoint.prototype['IsMotorEnabled'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2WheelJoint_IsMotorEnabled_0(self);
};

b2WheelJoint.prototype['EnableMotor'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WheelJoint_EnableMotor_1(self, arg0);
};

b2WheelJoint.prototype['SetMotorSpeed'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WheelJoint_SetMotorSpeed_1(self, arg0);
};

b2WheelJoint.prototype['GetMotorSpeed'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2WheelJoint_GetMotorSpeed_0(self);
};

b2WheelJoint.prototype['SetMaxMotorTorque'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WheelJoint_SetMaxMotorTorque_1(self, arg0);
};

b2WheelJoint.prototype['GetMaxMotorTorque'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2WheelJoint_GetMaxMotorTorque_0(self);
};

b2WheelJoint.prototype['GetMotorTorque'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return _emscripten_bind_b2WheelJoint_GetMotorTorque_1(self, arg0);
};

b2WheelJoint.prototype['SetSpringFrequencyHz'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WheelJoint_SetSpringFrequencyHz_1(self, arg0);
};

b2WheelJoint.prototype['GetSpringFrequencyHz'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2WheelJoint_GetSpringFrequencyHz_0(self);
};

b2WheelJoint.prototype['SetSpringDampingRatio'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WheelJoint_SetSpringDampingRatio_1(self, arg0);
};

b2WheelJoint.prototype['GetSpringDampingRatio'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2WheelJoint_GetSpringDampingRatio_0(self);
};

b2WheelJoint.prototype['GetType'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2WheelJoint_GetType_0(self);
};

b2WheelJoint.prototype['GetBodyA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2WheelJoint_GetBodyA_0(self), b2Body);
};

b2WheelJoint.prototype['GetBodyB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2WheelJoint_GetBodyB_0(self), b2Body);
};

b2WheelJoint.prototype['GetAnchorA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2WheelJoint_GetAnchorA_0(self), b2Vec2);
};

b2WheelJoint.prototype['GetAnchorB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2WheelJoint_GetAnchorB_0(self), b2Vec2);
};

b2WheelJoint.prototype['GetReactionForce'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return wrapPointer(_emscripten_bind_b2WheelJoint_GetReactionForce_1(self, arg0), b2Vec2);
};

b2WheelJoint.prototype['GetReactionTorque'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return _emscripten_bind_b2WheelJoint_GetReactionTorque_1(self, arg0);
};

b2WheelJoint.prototype['GetNext'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2WheelJoint_GetNext_0(self), b2Joint);
};

b2WheelJoint.prototype['GetUserData'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2WheelJoint_GetUserData_0(self);
};

b2WheelJoint.prototype['SetUserData'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2WheelJoint_SetUserData_1(self, arg0);
};

b2WheelJoint.prototype['IsActive'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2WheelJoint_IsActive_0(self);
};

b2WheelJoint.prototype['GetCollideConnected'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2WheelJoint_GetCollideConnected_0(self);
};

  b2WheelJoint.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2WheelJoint___destroy___0(self);
}
// b2PulleyJoint
function b2PulleyJoint() { throw "cannot construct a b2PulleyJoint, no constructor in IDL" }
b2PulleyJoint.prototype = Object.create(b2Joint.prototype);
b2PulleyJoint.prototype.constructor = b2PulleyJoint;
b2PulleyJoint.prototype.__class__ = b2PulleyJoint;
b2PulleyJoint.__cache__ = {};
Module['b2PulleyJoint'] = b2PulleyJoint;

b2PulleyJoint.prototype['GetGroundAnchorA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2PulleyJoint_GetGroundAnchorA_0(self), b2Vec2);
};

b2PulleyJoint.prototype['GetGroundAnchorB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2PulleyJoint_GetGroundAnchorB_0(self), b2Vec2);
};

b2PulleyJoint.prototype['GetLengthA'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2PulleyJoint_GetLengthA_0(self);
};

b2PulleyJoint.prototype['GetLengthB'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2PulleyJoint_GetLengthB_0(self);
};

b2PulleyJoint.prototype['GetRatio'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2PulleyJoint_GetRatio_0(self);
};

b2PulleyJoint.prototype['GetType'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2PulleyJoint_GetType_0(self);
};

b2PulleyJoint.prototype['GetBodyA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2PulleyJoint_GetBodyA_0(self), b2Body);
};

b2PulleyJoint.prototype['GetBodyB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2PulleyJoint_GetBodyB_0(self), b2Body);
};

b2PulleyJoint.prototype['GetAnchorA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2PulleyJoint_GetAnchorA_0(self), b2Vec2);
};

b2PulleyJoint.prototype['GetAnchorB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2PulleyJoint_GetAnchorB_0(self), b2Vec2);
};

b2PulleyJoint.prototype['GetReactionForce'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return wrapPointer(_emscripten_bind_b2PulleyJoint_GetReactionForce_1(self, arg0), b2Vec2);
};

b2PulleyJoint.prototype['GetReactionTorque'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return _emscripten_bind_b2PulleyJoint_GetReactionTorque_1(self, arg0);
};

b2PulleyJoint.prototype['GetNext'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2PulleyJoint_GetNext_0(self), b2Joint);
};

b2PulleyJoint.prototype['GetUserData'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2PulleyJoint_GetUserData_0(self);
};

b2PulleyJoint.prototype['SetUserData'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2PulleyJoint_SetUserData_1(self, arg0);
};

b2PulleyJoint.prototype['IsActive'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2PulleyJoint_IsActive_0(self);
};

b2PulleyJoint.prototype['GetCollideConnected'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2PulleyJoint_GetCollideConnected_0(self);
};

  b2PulleyJoint.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2PulleyJoint___destroy___0(self);
}
// b2MouseJointDef
function b2MouseJointDef() {
  this.ptr = _emscripten_bind_b2MouseJointDef_b2MouseJointDef_0();
  getCache(b2MouseJointDef)[this.ptr] = this;
};
b2MouseJointDef.prototype = Object.create(b2JointDef.prototype);
b2MouseJointDef.prototype.constructor = b2MouseJointDef;
b2MouseJointDef.prototype.__class__ = b2MouseJointDef;
b2MouseJointDef.__cache__ = {};
Module['b2MouseJointDef'] = b2MouseJointDef;

  b2MouseJointDef.prototype['get_target']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2MouseJointDef_get_target_0(self), b2Vec2);
}
    b2MouseJointDef.prototype['set_target']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2MouseJointDef_set_target_1(self, arg0);
}
  b2MouseJointDef.prototype['get_maxForce']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2MouseJointDef_get_maxForce_0(self);
}
    b2MouseJointDef.prototype['set_maxForce']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2MouseJointDef_set_maxForce_1(self, arg0);
}
  b2MouseJointDef.prototype['get_frequencyHz']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2MouseJointDef_get_frequencyHz_0(self);
}
    b2MouseJointDef.prototype['set_frequencyHz']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2MouseJointDef_set_frequencyHz_1(self, arg0);
}
  b2MouseJointDef.prototype['get_dampingRatio']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2MouseJointDef_get_dampingRatio_0(self);
}
    b2MouseJointDef.prototype['set_dampingRatio']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2MouseJointDef_set_dampingRatio_1(self, arg0);
}
  b2MouseJointDef.prototype['get_type']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2MouseJointDef_get_type_0(self);
}
    b2MouseJointDef.prototype['set_type']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2MouseJointDef_set_type_1(self, arg0);
}
  b2MouseJointDef.prototype['get_userData']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2MouseJointDef_get_userData_0(self);
}
    b2MouseJointDef.prototype['set_userData']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2MouseJointDef_set_userData_1(self, arg0);
}
  b2MouseJointDef.prototype['get_bodyA']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2MouseJointDef_get_bodyA_0(self), b2Body);
}
    b2MouseJointDef.prototype['set_bodyA']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2MouseJointDef_set_bodyA_1(self, arg0);
}
  b2MouseJointDef.prototype['get_bodyB']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2MouseJointDef_get_bodyB_0(self), b2Body);
}
    b2MouseJointDef.prototype['set_bodyB']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2MouseJointDef_set_bodyB_1(self, arg0);
}
  b2MouseJointDef.prototype['get_collideConnected']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2MouseJointDef_get_collideConnected_0(self);
}
    b2MouseJointDef.prototype['set_collideConnected']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2MouseJointDef_set_collideConnected_1(self, arg0);
}
  b2MouseJointDef.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2MouseJointDef___destroy___0(self);
}
// b2Contact
function b2Contact() { throw "cannot construct a b2Contact, no constructor in IDL" }
b2Contact.prototype = Object.create(WrapperObject.prototype);
b2Contact.prototype.constructor = b2Contact;
b2Contact.prototype.__class__ = b2Contact;
b2Contact.__cache__ = {};
Module['b2Contact'] = b2Contact;

b2Contact.prototype['GetManifold'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Contact_GetManifold_0(self), b2Manifold);
};

b2Contact.prototype['IsTouching'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Contact_IsTouching_0(self);
};

b2Contact.prototype['SetEnabled'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Contact_SetEnabled_1(self, arg0);
};

b2Contact.prototype['IsEnabled'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Contact_IsEnabled_0(self);
};

b2Contact.prototype['GetNext'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Contact_GetNext_0(self), b2Contact);
};

b2Contact.prototype['GetFixtureA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Contact_GetFixtureA_0(self), b2Fixture);
};

b2Contact.prototype['GetChildIndexA'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Contact_GetChildIndexA_0(self);
};

b2Contact.prototype['GetFixtureB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Contact_GetFixtureB_0(self), b2Fixture);
};

b2Contact.prototype['GetChildIndexB'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Contact_GetChildIndexB_0(self);
};

b2Contact.prototype['SetFriction'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Contact_SetFriction_1(self, arg0);
};

b2Contact.prototype['GetFriction'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Contact_GetFriction_0(self);
};

b2Contact.prototype['ResetFriction'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2Contact_ResetFriction_0(self);
};

b2Contact.prototype['SetRestitution'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Contact_SetRestitution_1(self, arg0);
};

b2Contact.prototype['GetRestitution'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Contact_GetRestitution_0(self);
};

b2Contact.prototype['ResetRestitution'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2Contact_ResetRestitution_0(self);
};

// b2Shape
function b2Shape() { throw "cannot construct a b2Shape, no constructor in IDL" }
b2Shape.prototype = Object.create(WrapperObject.prototype);
b2Shape.prototype.constructor = b2Shape;
b2Shape.prototype.__class__ = b2Shape;
b2Shape.__cache__ = {};
Module['b2Shape'] = b2Shape;

b2Shape.prototype['GetType'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Shape_GetType_0(self);
};

b2Shape.prototype['GetChildCount'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Shape_GetChildCount_0(self);
};

b2Shape.prototype['TestPoint'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  return _emscripten_bind_b2Shape_TestPoint_2(self, arg0, arg1);
};

b2Shape.prototype['RayCast'] = function(arg0, arg1, arg2, arg3) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  if (arg3 && typeof arg3 === 'object') arg3 = arg3.ptr;
  else arg3 = ensureString(arg3);
  return _emscripten_bind_b2Shape_RayCast_4(self, arg0, arg1, arg2, arg3);
};

b2Shape.prototype['ComputeAABB'] = function(arg0, arg1, arg2) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  _emscripten_bind_b2Shape_ComputeAABB_3(self, arg0, arg1, arg2);
};

b2Shape.prototype['ComputeMass'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  _emscripten_bind_b2Shape_ComputeMass_2(self, arg0, arg1);
};

  b2Shape.prototype['get_m_type']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2Shape_get_m_type_0(self);
}
    b2Shape.prototype['set_m_type']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Shape_set_m_type_1(self, arg0);
}
  b2Shape.prototype['get_m_radius']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2Shape_get_m_radius_0(self);
}
    b2Shape.prototype['set_m_radius']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Shape_set_m_radius_1(self, arg0);
}
  b2Shape.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2Shape___destroy___0(self);
}
// b2DistanceJointDef
function b2DistanceJointDef() {
  this.ptr = _emscripten_bind_b2DistanceJointDef_b2DistanceJointDef_0();
  getCache(b2DistanceJointDef)[this.ptr] = this;
};
b2DistanceJointDef.prototype = Object.create(b2JointDef.prototype);
b2DistanceJointDef.prototype.constructor = b2DistanceJointDef;
b2DistanceJointDef.prototype.__class__ = b2DistanceJointDef;
b2DistanceJointDef.__cache__ = {};
Module['b2DistanceJointDef'] = b2DistanceJointDef;

b2DistanceJointDef.prototype['Initialize'] = function(arg0, arg1, arg2, arg3) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  if (arg3 && typeof arg3 === 'object') arg3 = arg3.ptr;
  else arg3 = ensureString(arg3);
  _emscripten_bind_b2DistanceJointDef_Initialize_4(self, arg0, arg1, arg2, arg3);
};

  b2DistanceJointDef.prototype['get_localAnchorA']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2DistanceJointDef_get_localAnchorA_0(self), b2Vec2);
}
    b2DistanceJointDef.prototype['set_localAnchorA']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2DistanceJointDef_set_localAnchorA_1(self, arg0);
}
  b2DistanceJointDef.prototype['get_localAnchorB']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2DistanceJointDef_get_localAnchorB_0(self), b2Vec2);
}
    b2DistanceJointDef.prototype['set_localAnchorB']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2DistanceJointDef_set_localAnchorB_1(self, arg0);
}
  b2DistanceJointDef.prototype['get_length']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2DistanceJointDef_get_length_0(self);
}
    b2DistanceJointDef.prototype['set_length']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2DistanceJointDef_set_length_1(self, arg0);
}
  b2DistanceJointDef.prototype['get_frequencyHz']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2DistanceJointDef_get_frequencyHz_0(self);
}
    b2DistanceJointDef.prototype['set_frequencyHz']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2DistanceJointDef_set_frequencyHz_1(self, arg0);
}
  b2DistanceJointDef.prototype['get_dampingRatio']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2DistanceJointDef_get_dampingRatio_0(self);
}
    b2DistanceJointDef.prototype['set_dampingRatio']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2DistanceJointDef_set_dampingRatio_1(self, arg0);
}
  b2DistanceJointDef.prototype['get_type']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2DistanceJointDef_get_type_0(self);
}
    b2DistanceJointDef.prototype['set_type']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2DistanceJointDef_set_type_1(self, arg0);
}
  b2DistanceJointDef.prototype['get_userData']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2DistanceJointDef_get_userData_0(self);
}
    b2DistanceJointDef.prototype['set_userData']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2DistanceJointDef_set_userData_1(self, arg0);
}
  b2DistanceJointDef.prototype['get_bodyA']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2DistanceJointDef_get_bodyA_0(self), b2Body);
}
    b2DistanceJointDef.prototype['set_bodyA']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2DistanceJointDef_set_bodyA_1(self, arg0);
}
  b2DistanceJointDef.prototype['get_bodyB']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2DistanceJointDef_get_bodyB_0(self), b2Body);
}
    b2DistanceJointDef.prototype['set_bodyB']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2DistanceJointDef_set_bodyB_1(self, arg0);
}
  b2DistanceJointDef.prototype['get_collideConnected']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2DistanceJointDef_get_collideConnected_0(self);
}
    b2DistanceJointDef.prototype['set_collideConnected']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2DistanceJointDef_set_collideConnected_1(self, arg0);
}
  b2DistanceJointDef.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2DistanceJointDef___destroy___0(self);
}
// b2Body
function b2Body() { throw "cannot construct a b2Body, no constructor in IDL" }
b2Body.prototype = Object.create(WrapperObject.prototype);
b2Body.prototype.constructor = b2Body;
b2Body.prototype.__class__ = b2Body;
b2Body.__cache__ = {};
Module['b2Body'] = b2Body;

b2Body.prototype['CreateFixture'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg1 === undefined) { return wrapPointer(_emscripten_bind_b2Body_CreateFixture_1(self, arg0), b2Fixture) }
  return wrapPointer(_emscripten_bind_b2Body_CreateFixture_2(self, arg0, arg1), b2Fixture);
};

b2Body.prototype['DestroyFixture'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Body_DestroyFixture_1(self, arg0);
};

b2Body.prototype['SetTransform'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  _emscripten_bind_b2Body_SetTransform_2(self, arg0, arg1);
};

b2Body.prototype['GetTransform'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Body_GetTransform_0(self), b2Transform);
};

b2Body.prototype['GetPosition'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Body_GetPosition_0(self), b2Vec2);
};

b2Body.prototype['GetAngle'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Body_GetAngle_0(self);
};

b2Body.prototype['GetWorldCenter'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Body_GetWorldCenter_0(self), b2Vec2);
};

b2Body.prototype['GetLocalCenter'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Body_GetLocalCenter_0(self), b2Vec2);
};

b2Body.prototype['SetLinearVelocity'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Body_SetLinearVelocity_1(self, arg0);
};

b2Body.prototype['GetLinearVelocity'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Body_GetLinearVelocity_0(self), b2Vec2);
};

b2Body.prototype['SetAngularVelocity'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Body_SetAngularVelocity_1(self, arg0);
};

b2Body.prototype['GetAngularVelocity'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Body_GetAngularVelocity_0(self);
};

b2Body.prototype['ApplyForce'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  _emscripten_bind_b2Body_ApplyForce_2(self, arg0, arg1);
};

b2Body.prototype['ApplyForceToCenter'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Body_ApplyForceToCenter_1(self, arg0);
};

b2Body.prototype['ApplyTorque'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Body_ApplyTorque_1(self, arg0);
};

b2Body.prototype['ApplyLinearImpulse'] = function(arg0, arg1) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  _emscripten_bind_b2Body_ApplyLinearImpulse_2(self, arg0, arg1);
};

b2Body.prototype['ApplyAngularImpulse'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Body_ApplyAngularImpulse_1(self, arg0);
};

b2Body.prototype['GetMass'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Body_GetMass_0(self);
};

b2Body.prototype['GetInertia'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Body_GetInertia_0(self);
};

b2Body.prototype['GetMassData'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Body_GetMassData_1(self, arg0);
};

b2Body.prototype['SetMassData'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Body_SetMassData_1(self, arg0);
};

b2Body.prototype['ResetMassData'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2Body_ResetMassData_0(self);
};

b2Body.prototype['GetWorldPoint'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return wrapPointer(_emscripten_bind_b2Body_GetWorldPoint_1(self, arg0), b2Vec2);
};

b2Body.prototype['GetWorldVector'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return wrapPointer(_emscripten_bind_b2Body_GetWorldVector_1(self, arg0), b2Vec2);
};

b2Body.prototype['GetLocalPoint'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return wrapPointer(_emscripten_bind_b2Body_GetLocalPoint_1(self, arg0), b2Vec2);
};

b2Body.prototype['GetLocalVector'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return wrapPointer(_emscripten_bind_b2Body_GetLocalVector_1(self, arg0), b2Vec2);
};

b2Body.prototype['GetLinearVelocityFromWorldPoint'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return wrapPointer(_emscripten_bind_b2Body_GetLinearVelocityFromWorldPoint_1(self, arg0), b2Vec2);
};

b2Body.prototype['GetLinearVelocityFromLocalPoint'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return wrapPointer(_emscripten_bind_b2Body_GetLinearVelocityFromLocalPoint_1(self, arg0), b2Vec2);
};

b2Body.prototype['GetLinearDamping'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Body_GetLinearDamping_0(self);
};

b2Body.prototype['SetLinearDamping'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Body_SetLinearDamping_1(self, arg0);
};

b2Body.prototype['GetAngularDamping'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Body_GetAngularDamping_0(self);
};

b2Body.prototype['SetAngularDamping'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Body_SetAngularDamping_1(self, arg0);
};

b2Body.prototype['GetGravityScale'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Body_GetGravityScale_0(self);
};

b2Body.prototype['SetGravityScale'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Body_SetGravityScale_1(self, arg0);
};

b2Body.prototype['SetType'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Body_SetType_1(self, arg0);
};

b2Body.prototype['GetType'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Body_GetType_0(self);
};

b2Body.prototype['SetBullet'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Body_SetBullet_1(self, arg0);
};

b2Body.prototype['IsBullet'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Body_IsBullet_0(self);
};

b2Body.prototype['SetSleepingAllowed'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Body_SetSleepingAllowed_1(self, arg0);
};

b2Body.prototype['IsSleepingAllowed'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Body_IsSleepingAllowed_0(self);
};

b2Body.prototype['SetAwake'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Body_SetAwake_1(self, arg0);
};

b2Body.prototype['IsAwake'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Body_IsAwake_0(self);
};

b2Body.prototype['SetActive'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Body_SetActive_1(self, arg0);
};

b2Body.prototype['IsActive'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Body_IsActive_0(self);
};

b2Body.prototype['SetFixedRotation'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Body_SetFixedRotation_1(self, arg0);
};

b2Body.prototype['IsFixedRotation'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Body_IsFixedRotation_0(self);
};

b2Body.prototype['GetFixtureList'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Body_GetFixtureList_0(self), b2Fixture);
};

b2Body.prototype['GetJointList'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Body_GetJointList_0(self), b2JointEdge);
};

b2Body.prototype['GetContactList'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Body_GetContactList_0(self), b2ContactEdge);
};

b2Body.prototype['GetNext'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Body_GetNext_0(self), b2Body);
};

b2Body.prototype['GetUserData'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2Body_GetUserData_0(self);
};

b2Body.prototype['SetUserData'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2Body_SetUserData_1(self, arg0);
};

b2Body.prototype['GetWorld'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2Body_GetWorld_0(self), b2World);
};

b2Body.prototype['Dump'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2Body_Dump_0(self);
};

// b2FrictionJoint
function b2FrictionJoint() { throw "cannot construct a b2FrictionJoint, no constructor in IDL" }
b2FrictionJoint.prototype = Object.create(b2Joint.prototype);
b2FrictionJoint.prototype.constructor = b2FrictionJoint;
b2FrictionJoint.prototype.__class__ = b2FrictionJoint;
b2FrictionJoint.__cache__ = {};
Module['b2FrictionJoint'] = b2FrictionJoint;

b2FrictionJoint.prototype['GetLocalAnchorA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2FrictionJoint_GetLocalAnchorA_0(self), b2Vec2);
};

b2FrictionJoint.prototype['GetLocalAnchorB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2FrictionJoint_GetLocalAnchorB_0(self), b2Vec2);
};

b2FrictionJoint.prototype['SetMaxForce'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2FrictionJoint_SetMaxForce_1(self, arg0);
};

b2FrictionJoint.prototype['GetMaxForce'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2FrictionJoint_GetMaxForce_0(self);
};

b2FrictionJoint.prototype['SetMaxTorque'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2FrictionJoint_SetMaxTorque_1(self, arg0);
};

b2FrictionJoint.prototype['GetMaxTorque'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2FrictionJoint_GetMaxTorque_0(self);
};

b2FrictionJoint.prototype['GetType'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2FrictionJoint_GetType_0(self);
};

b2FrictionJoint.prototype['GetBodyA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2FrictionJoint_GetBodyA_0(self), b2Body);
};

b2FrictionJoint.prototype['GetBodyB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2FrictionJoint_GetBodyB_0(self), b2Body);
};

b2FrictionJoint.prototype['GetAnchorA'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2FrictionJoint_GetAnchorA_0(self), b2Vec2);
};

b2FrictionJoint.prototype['GetAnchorB'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2FrictionJoint_GetAnchorB_0(self), b2Vec2);
};

b2FrictionJoint.prototype['GetReactionForce'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return wrapPointer(_emscripten_bind_b2FrictionJoint_GetReactionForce_1(self, arg0), b2Vec2);
};

b2FrictionJoint.prototype['GetReactionTorque'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  return _emscripten_bind_b2FrictionJoint_GetReactionTorque_1(self, arg0);
};

b2FrictionJoint.prototype['GetNext'] = function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2FrictionJoint_GetNext_0(self), b2Joint);
};

b2FrictionJoint.prototype['GetUserData'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2FrictionJoint_GetUserData_0(self);
};

b2FrictionJoint.prototype['SetUserData'] = function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2FrictionJoint_SetUserData_1(self, arg0);
};

b2FrictionJoint.prototype['IsActive'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2FrictionJoint_IsActive_0(self);
};

b2FrictionJoint.prototype['GetCollideConnected'] = function() {
  var self = this.ptr;
  return _emscripten_bind_b2FrictionJoint_GetCollideConnected_0(self);
};

  b2FrictionJoint.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2FrictionJoint___destroy___0(self);
}
// b2DestructionListener
function b2DestructionListener() { throw "cannot construct a b2DestructionListener, no constructor in IDL" }
b2DestructionListener.prototype = Object.create(WrapperObject.prototype);
b2DestructionListener.prototype.constructor = b2DestructionListener;
b2DestructionListener.prototype.__class__ = b2DestructionListener;
b2DestructionListener.__cache__ = {};
Module['b2DestructionListener'] = b2DestructionListener;

  b2DestructionListener.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2DestructionListener___destroy___0(self);
}
// b2GearJointDef
function b2GearJointDef() {
  this.ptr = _emscripten_bind_b2GearJointDef_b2GearJointDef_0();
  getCache(b2GearJointDef)[this.ptr] = this;
};
b2GearJointDef.prototype = Object.create(b2JointDef.prototype);
b2GearJointDef.prototype.constructor = b2GearJointDef;
b2GearJointDef.prototype.__class__ = b2GearJointDef;
b2GearJointDef.__cache__ = {};
Module['b2GearJointDef'] = b2GearJointDef;

  b2GearJointDef.prototype['get_joint1']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2GearJointDef_get_joint1_0(self), b2Joint);
}
    b2GearJointDef.prototype['set_joint1']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2GearJointDef_set_joint1_1(self, arg0);
}
  b2GearJointDef.prototype['get_joint2']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2GearJointDef_get_joint2_0(self), b2Joint);
}
    b2GearJointDef.prototype['set_joint2']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2GearJointDef_set_joint2_1(self, arg0);
}
  b2GearJointDef.prototype['get_ratio']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2GearJointDef_get_ratio_0(self);
}
    b2GearJointDef.prototype['set_ratio']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2GearJointDef_set_ratio_1(self, arg0);
}
  b2GearJointDef.prototype['get_type']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2GearJointDef_get_type_0(self);
}
    b2GearJointDef.prototype['set_type']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2GearJointDef_set_type_1(self, arg0);
}
  b2GearJointDef.prototype['get_userData']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2GearJointDef_get_userData_0(self);
}
    b2GearJointDef.prototype['set_userData']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2GearJointDef_set_userData_1(self, arg0);
}
  b2GearJointDef.prototype['get_bodyA']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2GearJointDef_get_bodyA_0(self), b2Body);
}
    b2GearJointDef.prototype['set_bodyA']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2GearJointDef_set_bodyA_1(self, arg0);
}
  b2GearJointDef.prototype['get_bodyB']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2GearJointDef_get_bodyB_0(self), b2Body);
}
    b2GearJointDef.prototype['set_bodyB']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2GearJointDef_set_bodyB_1(self, arg0);
}
  b2GearJointDef.prototype['get_collideConnected']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2GearJointDef_get_collideConnected_0(self);
}
    b2GearJointDef.prototype['set_collideConnected']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2GearJointDef_set_collideConnected_1(self, arg0);
}
  b2GearJointDef.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2GearJointDef___destroy___0(self);
}
// b2FrictionJointDef
function b2FrictionJointDef() {
  this.ptr = _emscripten_bind_b2FrictionJointDef_b2FrictionJointDef_0();
  getCache(b2FrictionJointDef)[this.ptr] = this;
};
b2FrictionJointDef.prototype = Object.create(b2JointDef.prototype);
b2FrictionJointDef.prototype.constructor = b2FrictionJointDef;
b2FrictionJointDef.prototype.__class__ = b2FrictionJointDef;
b2FrictionJointDef.__cache__ = {};
Module['b2FrictionJointDef'] = b2FrictionJointDef;

b2FrictionJointDef.prototype['Initialize'] = function(arg0, arg1, arg2) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  _emscripten_bind_b2FrictionJointDef_Initialize_3(self, arg0, arg1, arg2);
};

  b2FrictionJointDef.prototype['get_localAnchorA']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2FrictionJointDef_get_localAnchorA_0(self), b2Vec2);
}
    b2FrictionJointDef.prototype['set_localAnchorA']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2FrictionJointDef_set_localAnchorA_1(self, arg0);
}
  b2FrictionJointDef.prototype['get_localAnchorB']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2FrictionJointDef_get_localAnchorB_0(self), b2Vec2);
}
    b2FrictionJointDef.prototype['set_localAnchorB']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2FrictionJointDef_set_localAnchorB_1(self, arg0);
}
  b2FrictionJointDef.prototype['get_maxForce']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2FrictionJointDef_get_maxForce_0(self);
}
    b2FrictionJointDef.prototype['set_maxForce']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2FrictionJointDef_set_maxForce_1(self, arg0);
}
  b2FrictionJointDef.prototype['get_maxTorque']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2FrictionJointDef_get_maxTorque_0(self);
}
    b2FrictionJointDef.prototype['set_maxTorque']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2FrictionJointDef_set_maxTorque_1(self, arg0);
}
  b2FrictionJointDef.prototype['get_type']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2FrictionJointDef_get_type_0(self);
}
    b2FrictionJointDef.prototype['set_type']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2FrictionJointDef_set_type_1(self, arg0);
}
  b2FrictionJointDef.prototype['get_userData']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2FrictionJointDef_get_userData_0(self);
}
    b2FrictionJointDef.prototype['set_userData']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2FrictionJointDef_set_userData_1(self, arg0);
}
  b2FrictionJointDef.prototype['get_bodyA']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2FrictionJointDef_get_bodyA_0(self), b2Body);
}
    b2FrictionJointDef.prototype['set_bodyA']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2FrictionJointDef_set_bodyA_1(self, arg0);
}
  b2FrictionJointDef.prototype['get_bodyB']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2FrictionJointDef_get_bodyB_0(self), b2Body);
}
    b2FrictionJointDef.prototype['set_bodyB']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2FrictionJointDef_set_bodyB_1(self, arg0);
}
  b2FrictionJointDef.prototype['get_collideConnected']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2FrictionJointDef_get_collideConnected_0(self);
}
    b2FrictionJointDef.prototype['set_collideConnected']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2FrictionJointDef_set_collideConnected_1(self, arg0);
}
  b2FrictionJointDef.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2FrictionJointDef___destroy___0(self);
}
// b2ContactFilter
function b2ContactFilter() { throw "cannot construct a b2ContactFilter, no constructor in IDL" }
b2ContactFilter.prototype = Object.create(WrapperObject.prototype);
b2ContactFilter.prototype.constructor = b2ContactFilter;
b2ContactFilter.prototype.__class__ = b2ContactFilter;
b2ContactFilter.__cache__ = {};
Module['b2ContactFilter'] = b2ContactFilter;

  b2ContactFilter.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2ContactFilter___destroy___0(self);
}
// b2ContactEdge
function b2ContactEdge() {
  this.ptr = _emscripten_bind_b2ContactEdge_b2ContactEdge_0();
  getCache(b2ContactEdge)[this.ptr] = this;
};
b2ContactEdge.prototype = Object.create(WrapperObject.prototype);
b2ContactEdge.prototype.constructor = b2ContactEdge;
b2ContactEdge.prototype.__class__ = b2ContactEdge;
b2ContactEdge.__cache__ = {};
Module['b2ContactEdge'] = b2ContactEdge;

  b2ContactEdge.prototype['get_other']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2ContactEdge_get_other_0(self), b2Body);
}
    b2ContactEdge.prototype['set_other']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2ContactEdge_set_other_1(self, arg0);
}
  b2ContactEdge.prototype['get_contact']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2ContactEdge_get_contact_0(self), b2Contact);
}
    b2ContactEdge.prototype['set_contact']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2ContactEdge_set_contact_1(self, arg0);
}
  b2ContactEdge.prototype['get_prev']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2ContactEdge_get_prev_0(self), b2ContactEdge);
}
    b2ContactEdge.prototype['set_prev']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2ContactEdge_set_prev_1(self, arg0);
}
  b2ContactEdge.prototype['get_next']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2ContactEdge_get_next_0(self), b2ContactEdge);
}
    b2ContactEdge.prototype['set_next']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2ContactEdge_set_next_1(self, arg0);
}
  b2ContactEdge.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2ContactEdge___destroy___0(self);
}
// b2RopeJointDef
function b2RopeJointDef() {
  this.ptr = _emscripten_bind_b2RopeJointDef_b2RopeJointDef_0();
  getCache(b2RopeJointDef)[this.ptr] = this;
};
b2RopeJointDef.prototype = Object.create(b2JointDef.prototype);
b2RopeJointDef.prototype.constructor = b2RopeJointDef;
b2RopeJointDef.prototype.__class__ = b2RopeJointDef;
b2RopeJointDef.__cache__ = {};
Module['b2RopeJointDef'] = b2RopeJointDef;

  b2RopeJointDef.prototype['get_localAnchorA']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2RopeJointDef_get_localAnchorA_0(self), b2Vec2);
}
    b2RopeJointDef.prototype['set_localAnchorA']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RopeJointDef_set_localAnchorA_1(self, arg0);
}
  b2RopeJointDef.prototype['get_localAnchorB']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2RopeJointDef_get_localAnchorB_0(self), b2Vec2);
}
    b2RopeJointDef.prototype['set_localAnchorB']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RopeJointDef_set_localAnchorB_1(self, arg0);
}
  b2RopeJointDef.prototype['get_maxLength']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2RopeJointDef_get_maxLength_0(self);
}
    b2RopeJointDef.prototype['set_maxLength']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RopeJointDef_set_maxLength_1(self, arg0);
}
  b2RopeJointDef.prototype['get_type']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2RopeJointDef_get_type_0(self);
}
    b2RopeJointDef.prototype['set_type']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RopeJointDef_set_type_1(self, arg0);
}
  b2RopeJointDef.prototype['get_userData']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2RopeJointDef_get_userData_0(self);
}
    b2RopeJointDef.prototype['set_userData']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RopeJointDef_set_userData_1(self, arg0);
}
  b2RopeJointDef.prototype['get_bodyA']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2RopeJointDef_get_bodyA_0(self), b2Body);
}
    b2RopeJointDef.prototype['set_bodyA']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RopeJointDef_set_bodyA_1(self, arg0);
}
  b2RopeJointDef.prototype['get_bodyB']= function() {
  var self = this.ptr;
  return wrapPointer(_emscripten_bind_b2RopeJointDef_get_bodyB_0(self), b2Body);
}
    b2RopeJointDef.prototype['set_bodyB']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RopeJointDef_set_bodyB_1(self, arg0);
}
  b2RopeJointDef.prototype['get_collideConnected']= function() {
  var self = this.ptr;
  return _emscripten_bind_b2RopeJointDef_get_collideConnected_0(self);
}
    b2RopeJointDef.prototype['set_collideConnected']= function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  _emscripten_bind_b2RopeJointDef_set_collideConnected_1(self, arg0);
}
  b2RopeJointDef.prototype['__destroy__'] = function() {
  var self = this.ptr;
  _emscripten_bind_b2RopeJointDef___destroy___0(self);
}
// b2ShapeType
Module['b2Shape']['e_circle'] = _emscripten_enum_b2ShapeType_e_circle();
Module['b2Shape']['e_edge'] = _emscripten_enum_b2ShapeType_e_edge();
Module['b2Shape']['e_polygon'] = _emscripten_enum_b2ShapeType_e_polygon();
Module['b2Shape']['e_chain'] = _emscripten_enum_b2ShapeType_e_chain();
Module['b2Shape']['e_typeCount'] = _emscripten_enum_b2ShapeType_e_typeCount();

// b2JointType
Module['e_unknownJoint'] = _emscripten_enum_b2JointType_e_unknownJoint();
Module['e_revoluteJoint'] = _emscripten_enum_b2JointType_e_revoluteJoint();
Module['e_prismaticJoint'] = _emscripten_enum_b2JointType_e_prismaticJoint();
Module['e_distanceJoint'] = _emscripten_enum_b2JointType_e_distanceJoint();
Module['e_pulleyJoint'] = _emscripten_enum_b2JointType_e_pulleyJoint();
Module['e_mouseJoint'] = _emscripten_enum_b2JointType_e_mouseJoint();
Module['e_gearJoint'] = _emscripten_enum_b2JointType_e_gearJoint();
Module['e_wheelJoint'] = _emscripten_enum_b2JointType_e_wheelJoint();
Module['e_weldJoint'] = _emscripten_enum_b2JointType_e_weldJoint();
Module['e_frictionJoint'] = _emscripten_enum_b2JointType_e_frictionJoint();
Module['e_ropeJoint'] = _emscripten_enum_b2JointType_e_ropeJoint();

// b2LimitState
Module['e_inactiveLimit'] = _emscripten_enum_b2LimitState_e_inactiveLimit();
Module['e_atLowerLimit'] = _emscripten_enum_b2LimitState_e_atLowerLimit();
Module['e_atUpperLimit'] = _emscripten_enum_b2LimitState_e_atUpperLimit();
Module['e_equalLimits'] = _emscripten_enum_b2LimitState_e_equalLimits();

// b2ManifoldType
Module['b2Manifold']['e_circles'] = _emscripten_enum_b2ManifoldType_e_circles();
Module['b2Manifold']['e_faceA'] = _emscripten_enum_b2ManifoldType_e_faceA();
Module['b2Manifold']['e_faceB'] = _emscripten_enum_b2ManifoldType_e_faceB();

// b2BodyType
Module['b2_staticBody'] = _emscripten_enum_b2BodyType_b2_staticBody();
Module['b2_kinematicBody'] = _emscripten_enum_b2BodyType_b2_kinematicBody();
Module['b2_dynamicBody'] = _emscripten_enum_b2BodyType_b2_dynamicBody();

// b2DrawFlag
Module['b2Draw']['e_shapeBit'] = _emscripten_enum_b2DrawFlag_e_shapeBit();
Module['b2Draw']['e_jointBit'] = _emscripten_enum_b2DrawFlag_e_jointBit();
Module['b2Draw']['e_aabbBit'] = _emscripten_enum_b2DrawFlag_e_aabbBit();
Module['b2Draw']['e_pairBit'] = _emscripten_enum_b2DrawFlag_e_pairBit();
Module['b2Draw']['e_centerOfMassBit'] = _emscripten_enum_b2DrawFlag_e_centerOfMassBit();

// b2ContactFeatureType
Module['b2ContactFeature']['e_vertex'] = _emscripten_enum_b2ContactFeatureType_e_vertex();
Module['b2ContactFeature']['e_face'] = _emscripten_enum_b2ContactFeatureType_e_face();



this['Box2D'] = Module; // With or without a closure, the proper usage is Box2D.*


